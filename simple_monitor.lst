
simple_monitor.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001c0 l    d  .text	00000000 .text
0800e8b8 l    d  .rodata	00000000 .rodata
0801e3b0 l    d  .ARM	00000000 .ARM
0801e3b8 l    d  .init_array	00000000 .init_array
0801e3c0 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
10000000 l    d  .ccmram	00000000 .ccmram
20000c24 l    d  .bss	00000000 .bss
20001dd8 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
0801efe8 l    d  .parsetable	00000000 .parsetable
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 startup_stm32f303xc.o
f1e0f85f l       *ABS*	00000000 BootRAM
0800e844 l       .text	00000000 LoopCopyDataInit
0800e83c l       .text	00000000 CopyDataInit
0800e858 l       .text	00000000 LoopFillZerobss
0800e852 l       .text	00000000 FillZerobss
0800e86a l       .text	00000000 LoopForever
0800e884 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
0800e89c l     O .text	00000000 __EH_FRAME_BEGIN__
080001c0 l     F .text	00000000 deregister_tm_clones
080001dc l     F .text	00000000 register_tm_clones
08000200 l     F .text	00000000 __do_global_dtors_aux
20000c24 l       .bss	00000001 completed.1
0801e3c0 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000228 l     F .text	00000000 frame_dummy
20000c28 l       .bss	00000018 object.0
0801e3bc l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 jp_asm.o
0800025a l       .text	00000000 toggle_loop
0800025e l       .text	00000000 led_on_toggle_loop
08000272 l       .text	00000000 led_off_toggle_loop
08000324 l       .text	00000000 delay_1oop
00000000 l    df *ABS*	00000000 mycode.o
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
080009d8 l     F .text	0000013c _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 vfprintf.c
0800ee54 l     O .rodata	00000010 blanks.1
0800ee64 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 vfprintf.c
08003538 l     F .text	0000006a __sbprintf
0800ee74 l     O .rodata	00000010 blanks.1
0800ee84 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
080036e0 l     F .text	00000126 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
080048f0 l     F .text	00000004 __fp_lock
08004900 l     F .text	00000004 __fp_unlock
08004904 l     F .text	000000d8 __sinit.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
0800ee98 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800efc0 l     O .rodata	00000010 blanks.1
0800efd0 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 vfprintf.c
080075e8 l     F .text	00000076 __sprint_r.part.0
080082c0 l     F .text	0000006a __sbprintf
0800efe0 l     O .rodata	00000010 blanks.1
0800eff0 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
080084a0 l     F .text	00000062 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 getpid.c
00000000 l    df *ABS*	00000000 kill.c
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 jp_hook.c
00000000 l    df *ABS*	00000000 mytest.c
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 parser.c
20000c78 l     O .bss	00000004 count.3
20000d1c l     O .bss	00000004 saved.1
200009b8 l     O .data	00000004 buf.2
200009bc l     O .data	00000004 printPrompt.4
0800f466 l     O .rodata	00000006 __FUNCTION__.0
00000000 l    df *ABS*	00000000 dump.c
20000d20 l     O .bss	00000004 address.1
200009c0 l     O .data	00000004 count.0
00000000 l    df *ABS*	00000000 syscall.c
20000d24 l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 terminal.c
0800a138 l     F .text	0000007c USBD_CDC_DataIn
20000d28 l     O .bss	00000124 TerminalState
00000000 l    df *ABS*	00000000 decoder.c
0800a48c l     F .text	0000007c Uncompress
20001074 l     O .bss	00000014 buf.0
00000000 l    df *ABS*	00000000 system_stm32f3xx.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal.c
20001088 l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32f3xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd_ex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_i2c.c
0800c3f8 l     F .text	0000002a I2C_TransferConfig
0800c422 l     F .text	00000098 I2C_IsAcknowledgeFailed
0800c4ba l     F .text	00000054 I2C_WaitOnTXISFlagUntilTimeout
0800c50e l     F .text	00000064 I2C_WaitOnFlagUntilTimeout
0800c572 l     F .text	00000066 I2C_RequestMemoryWrite
0800c5d8 l     F .text	00000064 I2C_RequestMemoryRead
0800c63c l     F .text	00000050 I2C_WaitOnSTOPFlagUntilTimeout
00000000 l    df *ABS*	00000000 stm32f3xx_hal_spi.c
0800c966 l     F .text	00000094 SPI_WaitFifoStateUntilTimeout
0800c9fa l     F .text	00000082 SPI_WaitFlagStateUntilTimeout
0800ca7c l     F .text	0000004c SPI_EndRxTxTransaction
00000000 l    df *ABS*	00000000 usbd_core.c
00000000 l    df *ABS*	00000000 usbd_ctlreq.c
0800d018 l     F .text	00000016 USBD_CtlError.constprop.0
2000108c l     O .bss	00000001 cfgidx.0
00000000 l    df *ABS*	00000000 usbd_ioreq.c
00000000 l    df *ABS*	00000000 usbd_cdc.c
0800d3e2 l     F .text	00000012 USBD_CDC_DataIn
0800d3f4 l     F .text	00000028 USBD_CDC_EP0_RxReady
0800d41c l     F .text	0000000c USBD_CDC_GetFSCfgDesc
0800d428 l     F .text	0000000c USBD_CDC_GetHSCfgDesc
0800d434 l     F .text	0000000c USBD_CDC_GetOtherSpeedCfgDesc
0800d44c l     F .text	0000002e USBD_CDC_DataOut
0800d47a l     F .text	00000056 USBD_CDC_Setup
0800d4d0 l     F .text	0000003a USBD_CDC_DeInit
0800d50a l     F .text	0000008c USBD_CDC_Init
20000a88 l     O .data	0000000a USBD_CDC_DeviceQualifierDesc
00000000 l    df *ABS*	00000000 usbd_conf.c
20001208 l     O .bss	00000230 mem.0
00000000 l    df *ABS*	00000000 usbd_desc.c
0800d850 l     F .text	0000002a IntToUnicode
00000000 l    df *ABS*	00000000 usbd_cdc_interface.c
0800d928 l     F .text	00000004 CDC_Itf_DeInit
0800d92c l     F .text	00000048 CDC_Itf_Control
0800d974 l     F .text	0000001c CDC_Itf_Receive
0800d990 l     F .text	00000018 CDC_Itf_Init
00000000 l    df *ABS*	00000000 stm32f3_discovery.c
0800d9a8 l     F .text	00000088 SPIx_Init
0800da30 l     F .text	00000040 SPIx_WriteRead
0800da70 l     F .text	00000074 I2Cx_Init
20001d38 l     O .bss	00000038 I2cHandle
20001d70 l     O .bss	00000060 SpiHandle
00000000 l    df *ABS*	00000000 stm32f3_discovery_accelerometer.c
20001dd0 l     O .bss	00000004 AccelerometerDrv
00000000 l    df *ABS*	00000000 stm32f3_discovery_gyroscope.c
20001dd4 l     O .bss	00000004 GyroscopeDrv
00000000 l    df *ABS*	00000000 lsm303dlhc.c
00000000 l    df *ABS*	00000000 l3gd20.c
00000000 l    df *ABS*	00000000 i3g4250d.c
00000000 l    df *ABS*	00000000 lsm303agr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0800e888 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 STM32F30x_decoder.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
20000010 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
0801e3c4 l       .fini_array	00000000 __fini_array_end
0801e3c0 l       .fini_array	00000000 __fini_array_start
0801e3c0 l       .init_array	00000000 __init_array_end
0801e3b8 l       .init_array	00000000 __preinit_array_end
0801e3b8 l       .init_array	00000000 __init_array_start
0801e3b8 l       .init_array	00000000 __preinit_array_start
0800e884  w    F .text	00000002 RTC_Alarm_IRQHandler
0801aaa8 g     O .rodata	00000008 RTC_BKP19R_fields
0801e1e8 g     O .rodata	00000010 APBAHBPrescTable
0801c950 g     O .rodata	00000050 TIM2_SR_fields
08012df8 g     O .rodata	00000100 CAN_F10R1_fields
0801bac0 g     O .rodata	00000008 TIM16_DMAR_fields
080004e4 g     F .text	00000010 putchar
0800e884  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
08006474 g     F .text	00000040 _mprec_log10
080196d8 g     O .rodata	00000008 I2C1_RXDR_fields
080096a8 g     F .text	0000002c .hidden __aeabi_dcmpun
0800df74 g     F .text	00000020 LSM303DLHC_AccFilterCmd
0800e884  w    F .text	00000002 TIM8_CC_IRQHandler
0801caf8 g     O .rodata	00000030 TIM6_CR1_fields
080195c0 g     O .rodata	00000048 I2C1_ICR_fields
08006510 g     F .text	00000064 __any_on
0800a130 g     F .text	00000004 _isatty_r
0800ef70 g     O .rodata	00000028 __mprec_tinytens
20000ccc g     O .bss	00000050 input_b
0800966c g     F .text	00000012 .hidden __aeabi_dcmple
0801c900 g     O .rodata	00000008 TIM2_PSC_fields
0801bcc8 g     O .rodata	00000028 TIM17_CCMR1_Output_fields
080007a4 g     F .text	000000ba strcpy
080172d0 g     O .rodata	00000050 COMP_COMP5_CSR_fields
08009a28 g     F .text	00000010 _getpid
08019730 g     O .rodata	00000008 I2C1_TXDR_fields
080004f4 g     F .text	00000068 _puts_r
0800d8f0 g     F .text	0000001c USBD_VCP_ConfigStrDescriptor
08013ff8 g     O .rodata	00000100 CAN_F19R1_fields
080095a8 g     F .text	0000007a .hidden __cmpdf2
0800a55c g     F .text	00000054 DecodeWriteRegister
0800c2cc g     F .text	000000bc HAL_PCD_EP_ClrStall
0801b9f0 g     O .rodata	00000008 TIM16_CCR1_fields
0800e884  w    F .text	00000002 DebugMon_Handler
0800a134 g     F .text	00000004 _lseek_r
08018638 g     O .rodata	00000020 FPU_MVFR1_fields
0800d6ea g     F .text	0000001a HAL_PCD_ResetCallback
0800c3be g     F .text	0000001c PCD_WritePMA
080147f8 g     O .rodata	00000100 CAN_F22R1_fields
080163f8 g     O .rodata	000000e0 CAN_FA1R_fields
20000e50 g     O .bss	00000224 hUSBDDevice
08000248 g     F .text	0000000a jp_led_demo_a3
0801c908 g     O .rodata	00000048 TIM2_SMCR_fields
08019a20 g     O .rodata	00000020 NVIC_IPR1_fields
0801f018 g     O .parsetable	0000000c CmdTestE
080095a8 g     F .text	0000007a .hidden __eqdf2
080135f8 g     O .rodata	00000100 CAN_F14R1_fields
0801d048 g     O .rodata	00000008 TIM8_PSC_fields
0800e3ea g     F .text	0000001c I3G4250D_ReadID
0801b780 g     O .rodata	00000030 TIM15_EGR_fields
0800a1b4 g     F .text	0000004c CmdStats
0800e24e g     F .text	0000002e L3GD20_FilterConfig
0800c388 g     F .text	00000036 HAL_PCDEx_PMAConfig
0801c9a0 g     O .rodata	00000140 TIM2_registers
0801b720 g     O .rodata	00000058 TIM15_DIER_fields
08017a80 g     O .rodata	00000008 DMA1_CMAR3_fields
08018940 g     O .rodata	00000100 GPIOA_BSRR_fields
08017a10 g     O .rodata	00000060 DMA1_CCR7_fields
0800b9fc g     F .text	000001b8 HAL_PCD_EP_Close
0801d560 g     O .rodata	00000008 TSC_IOG6CR_fields
08012930 g     O .rodata	00000028 ADC1_SQR1_fields
080009d0 g     F .text	00000006 strtok_r
08009118 g     F .text	0000005a .hidden __floatdidf
080166a8 g     O .rodata	000000e0 CAN_FS1R_fields
08008dcc g     F .text	0000002c _kill_r
0801c0c0 g     O .rodata	00000030 TIM1_CCMR2_Input_fields
0801ace8 g     O .rodata	00000010 RTC_SHIFTR_fields
080004b4 g     F .text	00000028 printf
0800e1d2 g     F .text	00000040 L3GD20_EnableIT
08016af0 g     O .rodata	00000028 CAN_TI1R_fields
0800ce52 g     F .text	00000016 USBD_SetClassConfig
08019960 g     O .rodata	00000020 NVIC_IPR14_fields
08008a7c g     F .text	0000003c _wcrtomb_r
0800e884  w    F .text	00000002 TIM1_CC_IRQHandler
0800b400 g     F .text	00000068 HAL_NVIC_SetPriority
08008b74 g     F .text	0000004c _signal_r
080129e8 g     O .rodata	000001b0 ADC1_registers
0800d6d2 g     F .text	00000010 HAL_PCD_DataInStageCallback
0801c840 g     O .rodata	00000018 TIM2_CR2_fields
080187b8 g     O .rodata	00000008 Flash_WRPR_fields
08006a6c g     F .text	00000020 __sseek
08004ac8 g     F .text	00000008 __sinit
08017830 g     O .rodata	00000060 DMA1_CCR2_fields
0800832c g     F .text	000000b0 __swbuf_r
0800e884  w    F .text	00000002 HardFault_Handler
0801d5f8 g     O .rodata	00000100 TSC_IOHCR_fields
08017438 g     O .rodata	00000020 CRC_CR_fields
080086d0 g     F .text	00000040 _setlocale_r
080049dc g     F .text	0000002e __sfmoreglue
08019b60 g     O .rodata	00000008 NVIC_ISER0_fields
08005ad0 g     F .text	00000002 __malloc_unlock
0801b570 g     O .rodata	00000008 TIM15_ARR_fields
0801aad8 g     O .rodata	00000008 RTC_BKP24R_fields
00000400 g       *ABS*	00000000 _Min_Stack_Size
0801c1b0 g     O .rodata	00000008 TIM1_CCR3_fields
0801c340 g     O .rodata	00000008 TIM1_DMAR_fields
0801b678 g     O .rodata	00000008 TIM15_CCR1_fields
0800e884  w    F .text	00000002 USB_HP_IRQHandler
0801dc48 g     O .rodata	00000010 USART1_RTOR_fields
0801a428 g     O .rodata	00000070 RCC_AHBENR_fields
0801c7e0 g     O .rodata	00000018 TIM2_CNT_fields
08019738 g     O .rodata	000000b0 I2C1_registers
08009bf0 g     F .text	0000000e SysTick_Handler
0801ae30 g     O .rodata	00000008 RTC_WPR_fields
0801acf8 g     O .rodata	00000008 RTC_SSR_fields
0800b63c g     F .text	0000000a HAL_GPIO_WritePin
0801d540 g     O .rodata	00000008 TSC_IOG2CR_fields
0800d5ee g     F .text	0000002e USBD_CDC_ReceivePacket
0800e884  w    F .text	00000002 PVD_IRQHandler
08017b10 g     O .rodata	00000008 DMA1_CPAR7_fields
0800df38 g     F .text	0000001c LSM303DLHC_AccRebootCmd
0801cae8 g     O .rodata	00000010 TIM6_CNT_fields
0801c2c8 g     O .rodata	00000078 TIM1_DIER_fields
0800d6e2 g     F .text	00000008 HAL_PCD_SOFCallback
080198a0 g     O .rodata	00000008 NVIC_ICPR0_fields
080059d4 g     F .text	000000f8 memmove
0800e884  w    F .text	00000002 TAMP_STAMP_IRQHandler
0800dc28 g     F .text	00000060 GYRO_IO_Init
08019a60 g     O .rodata	00000020 NVIC_IPR2_fields
0801e3c4 g       *ABS*	00000000 _sidata
08004ab4 g     F .text	00000014 _cleanup
0800b31c g     F .text	00000038 HAL_RCC_GetHCLKFreq
0800e884  w    F .text	00000002 PendSV_Handler
0801f00c g     O .parsetable	0000000c CmdButtonE
080198a8 g     O .rodata	00000008 NVIC_ICPR1_fields
0800e884  w    F .text	00000002 NMI_Handler
0800b468 g     F .text	00000018 HAL_NVIC_EnableIRQ
08005ad4 g     F .text	0000004c _Balloc
0801e3b8 g       .ARM	00000000 __exidx_end
0800096c g     F .text	00000064 __strtok_r
0800e884  w    F .text	00000002 EXTI3_IRQHandler
0800b2b0 g     F .text	0000006c HAL_RCC_GetSysClockFreq
0800db6c g     F .text	0000001c BSP_LED_Off
08017ac8 g     O .rodata	00000008 DMA1_CNDTR5_fields
0801cc40 g     O .rodata	00000098 TIM8_CCER_fields
080160f8 g     O .rodata	00000100 CAN_F8R2_fields
08009598 g     F .text	0000008a .hidden __gtdf2
0801f090 g       .parsetable	00000000 _parsetable_end
0801a498 g     O .rodata	00000048 RCC_AHBRSTR_fields
08000370 g     F .text	0000000c __errno
0801ab38 g     O .rodata	00000008 RTC_BKP6R_fields
08016b18 g     O .rodata	00000028 CAN_TI2R_fields
0800d030 g     F .text	000001f4 USBD_StdDevReq
0800e50c g     F .text	0000002e I3G4250D_FilterConfig
0800c68e g     F .text	00000090 HAL_I2C_Init
0800512c g     F .text	00000004 __localeconv_l
08019b70 g     O .rodata	00000008 NVIC_ISER2_fields
0801f078 g     O .parsetable	0000000c CmdWE
0800c71e  w    F .text	00000002 HAL_I2C_MspDeInit
08016890 g     O .rodata	00000020 CAN_RDH0R_fields
080185d8 g     O .rodata	00000020 FPU_FPDSCR_fields
0800e53a g     F .text	0000002e I3G4250D_FilterCmd
0800d838 g     F .text	0000000c USBD_VCP_DeviceDescriptor
0800b354  w    F .text	00000002 HAL_MspInit
08012cf8 g     O .rodata	00000100 CAN_F0R2_fields
0801d570 g     O .rodata	00000008 TSC_IOG8CR_fields
0800d7d0 g     F .text	00000026 USBD_LL_IsStallEP
08012bf8 g     O .rodata	00000100 CAN_F0R1_fields
0801b7c0 g     O .rodata	00000020 TIM15_SMCR_fields
0800d784 g     F .text	0000000e USBD_LL_Start
0800dd78 g     F .text	00000048 COMPASSACCELERO_IO_ITConfig
0800de3c g     F .text	00000040 BSP_ACCELERO_Init
0800ce48 g     F .text	0000000a USBD_Start
0800a126 g     F .text	0000000a _fstat_r
0800b646 g     F .text	00000008 HAL_GPIO_TogglePin
0801cea0 g     O .rodata	00000048 TIM8_CR1_fields
20000c74 g     O .bss	00000004 errno
080186d0 g     O .rodata	00000008 Flash_AR_fields
080153f8 g     O .rodata	00000100 CAN_F2R1_fields
08017278 g     O .rodata	00000058 COMP_COMP4_CSR_fields
08018e78 g     O .rodata	00000040 GPIOB_AFRH_fields
08006a28 g     F .text	00000004 __seofread
0800e8b4 g       .text	00000000 _etext
080182a8 g     O .rodata	00000010 EXTI_PR2_fields
0801dd58 g     O .rodata	00000028 USB_FS_FNR_fields
20000c24 g       .bss	00000000 _sbss
080173c8 g     O .rodata	00000070 COMP_registers
080158f8 g     O .rodata	00000100 CAN_F4R2_fields
0800d834 g     F .text	00000002 USBD_static_free
08017a70 g     O .rodata	00000008 DMA1_CMAR1_fields
0801c868 g     O .rodata	00000060 TIM2_DIER_fields
08009634 g     F .text	00000010 .hidden __aeabi_cdcmple
0801d538 g     O .rodata	00000008 TSC_IOG1CR_fields
0801bc90 g     O .rodata	00000020 TIM17_CCER_fields
0801d050 g     O .rodata	00000008 TIM8_RCR_fields
0801b9f8 g     O .rodata	00000010 TIM16_CNT_fields
08018f78 g     O .rodata	00000100 GPIOB_BSRR_fields
08013af8 g     O .rodata	00000100 CAN_F16R2_fields
08012840 g     O .rodata	00000018 ADC1_OFR1_fields
08014cf8 g     O .rodata	00000100 CAN_F24R2_fields
0801aad0 g     O .rodata	00000008 RTC_BKP23R_fields
0801b680 g     O .rodata	00000008 TIM15_CCR2_fields
08012638 g     O .rodata	00000098 ADC1_CFGR_fields
0801aa78 g     O .rodata	00000008 RTC_BKP13R_fields
0800ce3a g     F .text	0000000e USBD_RegisterClass
080143f8 g     O .rodata	00000100 CAN_F20R1_fields
0801db08 g     O .rodata	00000060 USART1_ICR_fields
08014ef8 g     O .rodata	00000100 CAN_F25R2_fields
0801d550 g     O .rodata	00000008 TSC_IOG4CR_fields
080152f8 g     O .rodata	00000100 CAN_F27R2_fields
0801d0a0 g     O .rodata	00000078 TIM8_SR_fields
0801dd80 g     O .rodata	00000050 USB_FS_ISTR_fields
08017a78 g     O .rodata	00000008 DMA1_CMAR2_fields
0801aae8 g     O .rodata	00000008 RTC_BKP26R_fields
08012958 g     O .rodata	00000028 ADC1_SQR2_fields
0801bcf8 g     O .rodata	00000010 TIM17_CNT_fields
0801e1b0 g     O .rodata	00000008 WWDG_SR_fields
0800b4a8 g     F .text	00000188 HAL_GPIO_Init
08018478 g     O .rodata	000000c0 EXTI_registers
0800cffa g     F .text	00000006 USBD_LL_SetSpeed
20000b28 g     O .data	00000004 BUTTON_PORT
0800de7c g     F .text	00000010 BSP_ACCELERO_GetXYZ
080198b8 g     O .rodata	00000008 NVIC_ICTR_fields
0801cae0 g     O .rodata	00000008 TIM6_ARR_fields
08016b40 g     O .rodata	000000b0 CAN_TSR_fields
08000290 g     F .text	00000090 add_test
08009fec g     F .text	000000b0 DumpBuffer
080004dc g     F .text	00000006 _putchar_r
08018a40 g     O .rodata	00000080 GPIOA_IDR_fields
0801df28 g     O .rodata	00000050 USB_FS_USB_EP3R_fields
0800d706 g     F .text	00000002 HAL_PCD_ResumeCallback
080058a0 g     F .text	00000134 memcpy
08009624 g     F .text	00000020 .hidden __aeabi_cdrcmple
08015ef8 g     O .rodata	00000100 CAN_F7R2_fields
0801c1e8 g     O .rodata	00000010 TIM1_CNT_fields
0800dc88 g     F .text	00000044 GYRO_IO_Write
0800056c g     F .text	00000174 setvbuf
08009a4c g     F .text	0000005c CmdLED
20000c24 g     O .data	00000000 .hidden __TMC_END__
0801c3f8 g     O .rodata	00000078 TIM1_SR_fields
08019940 g     O .rodata	00000020 NVIC_IPR13_fields
0801b7b0 g     O .rodata	00000008 TIM15_PSC_fields
0800d254 g     F .text	000000ae USBD_StdEPReq
080048f4 g     F .text	0000000c _cleanup_r
08018840 g     O .rodata	00000040 GPIOA_AFRH_fields
08000b48 g     F .text	000014bc _svfprintf_r
080090a0 g     F .text	00000022 .hidden __floatsidf
0800e65a g     F .text	00000020 LSM303AGR_AccInit
08017578 g     O .rodata	00000010 DAC_DHR12RD_fields
080171d0 g     O .rodata	00000058 COMP_COMP2_CSR_fields
0801cf70 g     O .rodata	00000078 TIM8_DIER_fields
08012720 g     O .rodata	00000010 ADC1_DIFSEL_fields
080095a0 g     F .text	00000082 .hidden __ltdf2
0800dba0 g     F .text	00000074 BSP_PB_Init
0800e884  w    F .text	00000002 USB_HP_CAN_TX_IRQHandler
0800e884  w    F .text	00000002 EXTI0_IRQHandler
0801d038 g     O .rodata	00000010 TIM8_OR_fields
0800e884  w    F .text	00000002 I2C2_EV_IRQHandler
080169c0 g     O .rodata	00000020 CAN_TDH0R_fields
0801df78 g     O .rodata	00000050 USB_FS_USB_EP4R_fields
08009724 g     F .text	00000000 .hidden __aeabi_uldivmod
0801e1b8 g     O .rodata	00000030 WWDG_registers
0801bdf8 g     O .rodata	00000008 TIM17_RCR_fields
0800055c g     F .text	00000010 puts
0800d3b6 g     F .text	00000016 USBD_CtlSendStatus
0800e884  w    F .text	00000002 FPU_IRQHandler
0800b3c0  w    F .text	0000001a HAL_Delay
0800d224 g     F .text	00000030 USBD_StdItfReq
0801ce60 g     O .rodata	00000008 TIM8_CCR4_fields
200009c4 g     O .data	00000004 SystemCoreClock
0801b820 g     O .rodata	00000120 TIM15_registers
0800bc8c g     F .text	00000116 HAL_PCD_EP_Transmit
08000344 g     F .text	00000012 my_Tick
08006418 g     F .text	0000005c __ratio
080155f8 g     O .rodata	00000100 CAN_F3R1_fields
0800d302 g     F .text	00000028 USBD_ParseSetupRequest
0801c7a0 g     O .rodata	00000010 TIM2_CCR1_fields
080175c8 g     O .rodata	00000010 DAC_SWTRIGR_fields
0800e884  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
080133f8 g     O .rodata	00000100 CAN_F13R1_fields
08005280 g     F .text	00000010 malloc
080197f8 g     O .rodata	00000008 IWDG_RLR_fields
08000494 g     F .text	0000001e _printf_r
0800c3da g     F .text	0000001c PCD_ReadPMA
08008bc0 g     F .text	00000056 _raise_r
08009ad0 g     F .text	0000004c CmdGyro
080083f4 g     F .text	00000040 __assert_func
08016698 g     O .rodata	00000010 CAN_FMR_fields
0800eea8 g     O .rodata	000000c8 __mprec_tens
08019ff8 g     O .rodata	00000040 OPAMP_registers
08017ac0 g     O .rodata	00000008 DMA1_CNDTR4_fields
08019878 g     O .rodata	00000008 NVIC_IABR1_fields
080125e8 g     O .rodata	00000030 ADC1_2_registers
20000af4 g     O .data	0000001c VCP_Desc
080181d8 g     O .rodata	000000d0 EXTI_PR1_fields
0800e6c8 g     F .text	00000020 LSM303AGR_AccFilterCmd
0800e884  w    F .text	00000002 UsageFault_Handler
0801ce68 g     O .rodata	00000020 TIM8_CCR5_fields
0800e884  w    F .text	00000002 ADC1_2_IRQHandler
20000c40 g     O .bss	00000004 __malloc_top_pad
20000c7c g     O .bss	00000050 input
08008df8 g     F .text	00000004 _getpid_r
080157f8 g     O .rodata	00000100 CAN_F4R1_fields
080129d8 g     O .rodata	00000010 ADC1_TR3_fields
08017ae8 g     O .rodata	00000008 DMA1_CPAR2_fields
0800e0de g     F .text	00000002 L3GD20_DeInit
20000c24 g       .bss	00000000 __bss_start__
0801ba78 g     O .rodata	00000048 TIM16_DIER_fields
0800b630 g     F .text	0000000c HAL_GPIO_ReadPin
08019898 g     O .rodata	00000008 NVIC_ICER2_fields
08000b30 g     F .text	00000018 strtoul
08009080 g     F .text	0000001e .hidden __aeabi_ui2d
08005130 g     F .text	00000008 _localeconv_r
0800e39e g     F .text	00000034 I3G4250D_Init
0801ce48 g     O .rodata	00000008 TIM8_CCR1_fields
080162f8 g     O .rodata	00000100 CAN_F9R2_fields
08017550 g     O .rodata	00000008 DAC_DHR12L2_fields
08005d30 g     F .text	0000005c __i2b
08004db4 g     F .text	000002f0 __sfvwrite_r
0800d000 g     F .text	00000018 USBD_LL_SOF
08008c18 g     F .text	00000064 __sigtramp_r
20000000 g       .data	00000000 _sdata
0800e884  w    F .text	00000002 SPI1_IRQHandler
08016ac8 g     O .rodata	00000028 CAN_TI0R_fields
0800e884  w    F .text	00000002 CAN_SCE_IRQHandler
08009754 g     F .text	000002d0 .hidden __udivmoddi4
08008dfc g     F .text	00000000 .hidden __aeabi_drsub
080128e8 g     O .rodata	00000048 ADC1_SMPR2_fields
08019aa0 g     O .rodata	00000020 NVIC_IPR4_fields
0800a0f0 g     F .text	00000030 _sbrk_r
08000254 g     F .text	0000003c jp_led_demo_a2
0800e658 g     F .text	00000002 LSM303AGR_AccDeInit
080199e0 g     O .rodata	00000020 NVIC_IPR18_fields
0800e3d2 g     F .text	00000018 I3G4250D_LowPower
0800d61c g     F .text	00000098 HAL_PCD_MspInit
0801cb30 g     O .rodata	00000010 TIM6_DIER_fields
0801c060 g     O .rodata	00000060 TIM1_CCMR1_Output_fields
0801db68 g     O .rodata	000000b0 USART1_ISR_fields
0800e884  w    F .text	00000002 TIM6_DAC_IRQHandler
08019558 g     O .rodata	00000068 I2C1_CR2_fields
0801ce50 g     O .rodata	00000008 TIM8_CCR2_fields
0800c22c g     F .text	000000a0 HAL_PCD_EP_SetStall
0800a2c8 g     F .text	0000000a _read_r
0801c3b0 g     O .rodata	00000048 TIM1_SMCR_fields
08012bc8 g     O .rodata	00000030 CAN_ESR_fields
0800ce10 g     F .text	0000002a USBD_Init
08018ef8 g     O .rodata	00000080 GPIOB_BRR_fields
20001090 g     O .bss	00000178 hpcd
08009658 g     F .text	00000012 .hidden __aeabi_dcmplt
08008504 g     F .text	00000034 _fclose_r
08012858 g     O .rodata	00000018 ADC1_OFR2_fields
0801c610 g     O .rodata	00000010 TIM2_ARR_fields
080048a0 g     F .text	00000050 fflush
0800dd14 g     F .text	00000064 COMPASSACCELERO_IO_Init
20000c6c g     O .bss	00000004 __malloc_max_sbrked_mem
0800e39c g     F .text	00000002 I3G4250D_DeInit
080161f8 g     O .rodata	00000100 CAN_F9R1_fields
0801ac18 g     O .rodata	00000038 RTC_DR_fields
0801c1a0 g     O .rodata	00000008 TIM1_CCR1_fields
0800b480 g     F .text	00000028 HAL_SYSTICK_Config
080090c4 g     F .text	00000042 .hidden __extendsfdf2
08018790 g     O .rodata	00000008 Flash_OPTKEYR_fields
08012888 g     O .rodata	00000018 ADC1_OFR4_fields
20000e4c g     O .bss	00000004 USBDDataIn
080093c8 g     F .text	000001d0 .hidden __aeabi_ddiv
0800e884  w    F .text	00000002 TIM8_UP_IRQHandler
20000ad7 g     O .data	0000001a USBD_StringSerial
08014df8 g     O .rodata	00000100 CAN_F25R1_fields
0801b280 g     O .rodata	00000018 SPI1_I2SPR_fields
080127e8 g     O .rodata	00000008 ADC1_JDR1_fields
080197e8 g     O .rodata	00000008 IWDG_KR_fields
0801de38 g     O .rodata	00000050 USB_FS_USB_EP0R_fields
08008e08 g     F .text	00000276 .hidden __adddf3
0800ddc0 g     F .text	0000003c COMPASSACCELERO_IO_Write
08014af8 g     O .rodata	00000100 CAN_F23R2_fields
08017478 g     O .rodata	00000050 CRC_registers
0801d928 g     O .rodata	000000a0 USART1_CR1_fields
0801ae40 g     O .rodata	00000320 RTC_registers
08015af8 g     O .rodata	00000100 CAN_F5R2_fields
0801bd40 g     O .rodata	00000028 TIM17_CR2_fields
08006288 g     F .text	000000c0 __b2d
0801e3b0 g       .ARM	00000000 __exidx_start
0801b9b0 g     O .rodata	00000018 TIM16_CCMR1_Input_fields
08018730 g     O .rodata	00000008 Flash_KEYR_fields
08009174 g     F .text	00000254 .hidden __aeabi_dmul
0800e0c2 g     F .text	0000001c LSM303DLHC_AccZClickITConfig
0801cd98 g     O .rodata	00000060 TIM8_CCMR2_Output_fields
0801a070 g     O .rodata	00000028 PWR_CSR_fields
0801a9c8 g     O .rodata	00000010 RTC_ALRMASSR_fields
20000a94 g     O .data	00000043 USBD_CDC_OtherSpeedCfgDesc
0801b4a0 g     O .rodata	00000020 SYSCFG_EXTICR4_fields
08019870 g     O .rodata	00000008 NVIC_IABR0_fields
0800ee50 g     O .rodata	00000004 _global_impure_ptr
080185f8 g     O .rodata	00000040 FPU_MVFR0_fields
0801baf8 g     O .rodata	00000008 TIM16_RCR_fields
0800662c g     F .text	000003d8 _realloc_r
080003a8 g     F .text	00000048 __libc_init_array
0800d3a6 g     F .text	00000010 USBD_CtlContinueRx
0801aa70 g     O .rodata	00000008 RTC_BKP12R_fields
0801daf8 g     O .rodata	00000010 USART1_GTPR_fields
0800b718 g     F .text	000002e4 HAL_PCD_EP_Open
0800e884  w    F .text	00000002 DMA2_Channel2_IRQHandler
0800e884  w    F .text	00000002 DMA1_Channel4_IRQHandler
0801c390 g     O .rodata	00000010 TIM1_OR_fields
08019380 g     O .rodata	00000080 GPIOB_PUPDR_fields
0800bda4 g     F .text	00000486 HAL_PCD_IRQHandler
08009d50 g     F .text	00000020 CmdR
08008660 g     F .text	00000026 _fputwc_r
0800ef98 g     O .rodata	00000028 __mprec_bigtens
0801c1b8 g     O .rodata	00000008 TIM1_CCR4_fields
08005bdc g     F .text	000000b4 __s2b
08008b34 g     F .text	0000000e abort
08009080 g     F .text	0000001e .hidden __floatunsidf
08016a40 g     O .rodata	00000020 CAN_TDL1R_fields
08006098 g     F .text	00000042 __mcmp
08019b00 g     O .rodata	00000020 NVIC_IPR7_fields
0800e27c g     F .text	0000002e L3GD20_FilterCmd
0801bdc0 g     O .rodata	00000008 TIM17_DMAR_fields
0800c720 g     F .text	0000002e HAL_I2C_DeInit
0801b688 g     O .rodata	00000010 TIM15_CNT_fields
08004ae0 g     F .text	00000014 __fp_lock_all
0800caca g     F .text	000000a4 HAL_SPI_Init
0801aa60 g     O .rodata	00000008 RTC_BKP10R_fields
08016848 g     O .rodata	00000048 CAN_MSR_fields
0801a888 g     O .rodata	000000d0 RCC_registers
0800e89c g     F .text	00000000 _init
08016a20 g     O .rodata	00000020 CAN_TDL0R_fields
08017590 g     O .rodata	00000008 DAC_DHR8R2_fields
0801a558 g     O .rodata	00000090 RCC_APB1RSTR_fields
0800def4 g     F .text	00000010 BSP_GYRO_GetXYZ
0801aa58 g     O .rodata	00000008 RTC_BKP0R_fields
08016bf0 g     O .rodata	00000590 CAN_registers
0801efe8 g       .parsetable	00000000 _parsetable_start
08017950 g     O .rodata	00000060 DMA1_CCR5_fields
0801ab48 g     O .rodata	00000008 RTC_BKP8R_fields
0800e432 g     F .text	0000005e I3G4250D_INT1InterruptConfig
0801d808 g     O .rodata	00000110 TSC_registers
0801c710 g     O .rodata	00000030 TIM2_CCMR2_Input_fields
0800d7b4 g     F .text	0000000e USBD_LL_StallEP
08019890 g     O .rodata	00000008 NVIC_ICER1_fields
0801bac8 g     O .rodata	00000028 TIM16_EGR_fields
0801f060 g     O .parsetable	0000000c CmdRE
0800cac8  w    F .text	00000002 HAL_SPI_MspInit
08015ff8 g     O .rodata	00000100 CAN_F8R1_fields
0800e884  w    F .text	00000002 USART3_IRQHandler
080145f8 g     O .rodata	00000100 CAN_F21R1_fields
0801a838 g     O .rodata	00000050 RCC_CSR_fields
0800d87c g     F .text	0000003c USBD_VCP_SerialStrDescriptor
08018cc8 g     O .rodata	00000080 GPIOA_OTYPER_fields
08017558 g     O .rodata	00000010 DAC_DHR12LD_fields
0801bb00 g     O .rodata	00000030 TIM16_SR_fields
0801c470 g     O .rodata	000001a0 TIM1_registers
0800037c g     F .text	0000002c __libc_fini_array
08012808 g     O .rodata	00000038 ADC1_JSQR_fields
0800e568 g     F .text	000000f0 I3G4250D_ReadXYZAngRate
20001dd8 g       .bss	00000000 _ebss
08009d04 g     F .text	00000030 CmdTest
0800ddfc g     F .text	00000040 COMPASSACCELERO_IO_Read
20000b88 g     O .data	00000034 L3gd20Drv
08018538 g     O .rodata	00000050 FPU_CPACR_fields
0800e884  w    F .text	00000002 DMA1_Channel7_IRQHandler
08016a60 g     O .rodata	00000020 CAN_TDL2R_fields
0800c852 g     F .text	0000010e HAL_I2C_Mem_Read
08018880 g     O .rodata	00000040 GPIOA_AFRL_fields
0800e834  w    F .text	00000038 Reset_Handler
20000a00 g     O .data	00000043 USBD_CDC_CfgFSDesc
0801ab00 g     O .rodata	00000008 RTC_BKP29R_fields
0800de8c g     F .text	00000068 BSP_GYRO_Init
080198c0 g     O .rodata	00000020 NVIC_IPR0_fields
08018bc8 g     O .rodata	00000080 GPIOA_ODR_fields
08005c90 g     F .text	00000040 __hi0bits
08019980 g     O .rodata	00000020 NVIC_IPR15_fields
0801c1a8 g     O .rodata	00000008 TIM1_CCR2_fields
080182b8 g     O .rodata	000000d0 EXTI_RTSR1_fields
080175b0 g     O .rodata	00000008 DAC_DOR2_fields
08017458 g     O .rodata	00000008 CRC_DR_fields
080096d4 g     F .text	0000004e .hidden __fixdfsi
08019280 g     O .rodata	00000080 GPIOB_OSPEEDR_fields
0801f054 g     O .parsetable	0000000c CmdLEDE
0800e884  w    F .text	00000002 UART5_IRQHandler
0800a660 g     F .text	00000054 DecodePeripheral
0801b440 g     O .rodata	00000020 SYSCFG_EXTICR1_fields
0801f048 g     O .parsetable	0000000c _jp_A3E
080130f8 g     O .rodata	00000100 CAN_F11R2_fields
0800e884  w    F .text	00000002 ADC3_IRQHandler
0801adf8 g     O .rodata	00000038 RTC_TSTR_fields
0801c7f8 g     O .rodata	00000048 TIM2_CR1_fields
0800b380 g     F .text	00000024 HAL_Init
080142f8 g     O .rodata	00000100 CAN_F1R2_fields
08006574 g     F .text	00000056 _putc_r
0800d38c g     F .text	0000001a USBD_CtlPrepareRx
0801aa98 g     O .rodata	00000008 RTC_BKP17R_fields
080168f0 g     O .rodata	00000020 CAN_RDL1R_fields
080149f8 g     O .rodata	00000100 CAN_F23R1_fields
0800cb70 g     F .text	0000002a HAL_SPI_DeInit
0800e884  w    F .text	00000002 TIM4_IRQHandler
08013df8 g     O .rodata	00000100 CAN_F18R1_fields
0801e0b8 g     O .rodata	000000d0 USB_FS_registers
08008e08 g     F .text	00000276 .hidden __aeabi_dadd
0801ce58 g     O .rodata	00000008 TIM8_CCR3_fields
080095a0 g     F .text	00000082 .hidden __ledf2
080134f8 g     O .rodata	00000100 CAN_F13R2_fields
0800f1d2 g     O .rodata	00000008 LEDs
0801c680 g     O .rodata	00000030 TIM2_CCMR1_Input_fields
08017568 g     O .rodata	00000008 DAC_DHR12R1_fields
08019690 g     O .rodata	00000028 I2C1_OAR1_fields
0800d82c g     F .text	00000008 USBD_static_malloc
08016940 g     O .rodata	00000020 CAN_RF0R_fields
0800e884  w    F .text	00000002 CAN_RX1_IRQHandler
0800e884  w    F .text	00000002 DMA2_Channel1_IRQHandler
0801ab40 g     O .rodata	00000008 RTC_BKP7R_fields
08005ee8 g     F .text	000000c0 __pow5mult
080129b8 g     O .rodata	00000010 ADC1_TR1_fields
08017ad8 g     O .rodata	00000008 DMA1_CNDTR7_fields
08009108 g     F .text	0000006a .hidden __aeabi_ul2d
0800d5c0 g     F .text	0000002e USBD_CDC_TransmitPacket
20000b2c g     O .data	00000004 I2cxTimeout
0801d558 g     O .rodata	00000008 TSC_IOG5CR_fields
08017570 g     O .rodata	00000008 DAC_DHR12R2_fields
0801aaa0 g     O .rodata	00000008 RTC_BKP18R_fields
08000330 g     F .text	00000014 mytest
08017a98 g     O .rodata	00000008 DMA1_CMAR6_fields
0801b5f8 g     O .rodata	00000030 TIM15_CCMR1_Input_fields
08009b1c g     F .text	0000002c CmdButton
0800d3cc g     F .text	00000016 USBD_CtlReceiveStatus
0801c7d0 g     O .rodata	00000010 TIM2_CCR4_fields
20001dd8 g       ._user_heap_stack	00000000 end
20000b10 g     O .data	00000008 LineCoding
0801b160 g     O .rodata	00000070 SPI1_CR1_fields
0800e884  w    F .text	00000002 I2C1_EV_IRQHandler
0801efe8 g     O .parsetable	0000000c _jp_A2E
0801b300 g     O .rodata	00000090 SPI1_registers
0800d792 g     F .text	00000014 USBD_LL_OpenEP
0801cf60 g     O .rodata	00000010 TIM8_DCR_fields
0800a708 g     F .text	00000064 DecodePrintRegisters
0801ddd0 g     O .rodata	00000068 USB_FS_USB_CNTR_fields
0801dc60 g     O .rodata	000000b0 USART1_registers
0800e212 g     F .text	0000003c L3GD20_DisableIT
0801dc58 g     O .rodata	00000008 USART1_TDR_fields
0801a4e0 g     O .rodata	00000078 RCC_APB1ENR_fields
0800cb6e  w    F .text	00000002 HAL_SPI_MspDeInit
08017ab0 g     O .rodata	00000008 DMA1_CNDTR2_fields
08016788 g     O .rodata	00000070 CAN_IER_fields
080177d0 g     O .rodata	00000060 DMA1_CCR1_fields
08019888 g     O .rodata	00000008 NVIC_ICER0_fields
08019b68 g     O .rodata	00000008 NVIC_ISER1_fields
0800cf30 g     F .text	0000008c USBD_LL_DataInStage
0801ab18 g     O .rodata	00000008 RTC_BKP31R_fields
0801c348 g     O .rodata	00000048 TIM1_EGR_fields
0801c6b0 g     O .rodata	00000060 TIM2_CCMR1_Output_fields
080175b8 g     O .rodata	00000010 DAC_SR_fields
0801c7b0 g     O .rodata	00000010 TIM2_CCR2_fields
0800d708 g     F .text	0000007c USBD_LL_Init
0801ab20 g     O .rodata	00000008 RTC_BKP3R_fields
0800e7d2 g     F .text	00000044 LSM303AGR_AccClickITEnable
0800db50 g     F .text	0000001c BSP_LED_On
0800e0e0 g     F .text	00000034 L3GD20_Init
08009694 g     F .text	00000012 .hidden __aeabi_dcmpgt
0800e884  w    F .text	00000002 DMA1_Channel6_IRQHandler
200009c8 g     O .data	00000038 USBD_CDC
0800ce68 g     F .text	0000000e USBD_ClrClassConfig
0801ab30 g     O .rodata	00000008 RTC_BKP5R_fields
0800e884  w    F .text	00000002 UART4_IRQHandler
0800e114 g     F .text	00000018 L3GD20_LowPower
0800e884  w    F .text	00000002 DMA2_Channel4_IRQHandler
0800d596 g     F .text	0000000e USBD_CDC_RegisterInterface
08004ad0 g     F .text	00000002 __sfp_lock_acquire
08005800 g     F .text	00000000 memchr
080006e0 g     F .text	00000038 _sprintf_r
20001dd8 g       .bss	00000000 __bss_end__
08004ba8 g     F .text	0000020c _free_r
0800e884  w    F .text	00000002 TIM3_IRQHandler
0800e884  w    F .text	00000002 RCC_IRQHandler
0801ab58 g     O .rodata	00000020 RTC_CALR_fields
08008710 g     F .text	0000000c __locale_mb_cur_max
08009680 g     F .text	00000012 .hidden __aeabi_dcmpge
08017548 g     O .rodata	00000008 DAC_DHR12L1_fields
0801be00 g     O .rodata	00000030 TIM17_SR_fields
20000bbc g     O .data	00000034 I3g4250Drv
00001000 g       *ABS*	00000000 _Min_Heap_Size
08019300 g     O .rodata	00000080 GPIOB_OTYPER_fields
0800e884  w    F .text	00000002 DMA1_Channel1_IRQHandler
0801ab50 g     O .rodata	00000008 RTC_BKP9R_fields
080136f8 g     O .rodata	00000100 CAN_F14R2_fields
08008e04 g     F .text	0000027a .hidden __aeabi_dsub
0800d6c0 g     F .text	00000012 HAL_PCD_DataOutStageCallback
0800e884 g       .text	00000002 Default_Handler
20000840 g     O .data	00000004 __malloc_sbrk_base
0800d8d4 g     F .text	0000001c USBD_VCP_ManufacturerStrDescriptor
0800e6a8 g     F .text	00000020 LSM303AGR_AccFilterConfig
08018ac0 g     O .rodata	00000088 GPIOA_LCKR_fields
0801ad00 g     O .rodata	00000090 RTC_TAFCR_fields
20000b18 g     O .data	00000010 USBD_CDC_fops
08018dc8 g     O .rodata	000000b0 GPIOA_registers
08019b88 g     O .rodata	00000008 NVIC_ISPR2_fields
0800e884  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
0801c740 g     O .rodata	00000060 TIM2_CCMR2_Output_fields
080190f8 g     O .rodata	00000088 GPIOB_LCKR_fields
0801cee8 g     O .rodata	00000078 TIM8_CR2_fields
0800bc7c g     F .text	00000010 HAL_PCD_EP_GetRxCount
08012b98 g     O .rodata	00000030 CAN_BTR_fields
08009108 g     F .text	0000006a .hidden __floatundidf
080178f0 g     O .rodata	00000060 DMA1_CCR4_fields
080198e0 g     O .rodata	00000020 NVIC_IPR10_fields
0801bc40 g     O .rodata	00000008 TIM17_ARR_fields
080132f8 g     O .rodata	00000100 CAN_F12R2_fields
08005fa8 g     F .text	000000f0 __lshift
0801dc20 g     O .rodata	00000028 USART1_RQR_fields
0801bd78 g     O .rodata	00000048 TIM17_DIER_fields
08008cd8 g     F .text	00000054 signal
0801aac8 g     O .rodata	00000008 RTC_BKP22R_fields
08016a00 g     O .rodata	00000020 CAN_TDH2R_fields
08006a94 g     F .text	000000f8 __ssprint_r
0801c3a8 g     O .rodata	00000008 TIM1_RCR_fields
0800d7c2 g     F .text	0000000e USBD_LL_ClearStallEP
08019ac0 g     O .rodata	00000020 NVIC_IPR5_fields
08018738 g     O .rodata	00000058 Flash_OBR_fields
0800e884  w    F .text	00000002 EXTI15_10_IRQHandler
08016a98 g     O .rodata	00000018 CAN_TDT1R_fields
0800e2ac g     F .text	000000f0 L3GD20_ReadXYZAngRate
0801ad90 g     O .rodata	00000038 RTC_TR_fields
080199c0 g     O .rodata	00000020 NVIC_IPR17_fields
08003678 g     F .text	00000068 __register_exitproc
080186d8 g     O .rodata	00000058 Flash_CR_fields
0801b2a0 g     O .rodata	00000058 SPI1_SR_fields
0801dd18 g     O .rodata	00000040 USB_FS_DADDR_fields
08018468 g     O .rodata	00000010 EXTI_SWIER2_fields
0800b6ec g     F .text	0000002c HAL_PCD_SetAddress
08019a00 g     O .rodata	00000020 NVIC_IPR19_fields
0801cb50 g     O .rodata	00000008 TIM6_SR_fields
080141f8 g     O .rodata	00000100 CAN_F1R1_fields
08009c00 g     F .text	00000070 _jp_A3
0801bdf0 g     O .rodata	00000008 TIM17_PSC_fields
0801b460 g     O .rodata	00000020 SYSCFG_EXTICR2_fields
08005d8c g     F .text	0000015c __multiply
0801b230 g     O .rodata	00000008 SPI1_CRCPR_fields
0800df54 g     F .text	00000020 LSM303DLHC_AccFilterConfig
0800b000 g     F .text	000002b0 HAL_RCC_ClockConfig
0800b3dc g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
200009b4 g     O .data	00000004 Commands
080129c8 g     O .rodata	00000010 ADC1_TR2_fields
20000c44 g     O .bss	00000028 __malloc_current_mallinfo
0800e042 g     F .text	00000020 LSM303DLHC_AccFilterClickCmd
0801adf0 g     O .rodata	00000008 RTC_TSSSR_fields
08009e68 g     F .text	0000013c TaskInput
0801cb28 g     O .rodata	00000008 TIM6_CR2_fields
0801a7e8 g     O .rodata	00000050 RCC_CR_fields
080165b8 g     O .rodata	000000e0 CAN_FM1R_fields
0801c1e0 g     O .rodata	00000008 TIM1_CCR6_fields
08006348 g     F .text	000000d0 __d2b
0801d9c8 g     O .rodata	00000098 USART1_CR2_fields
0801bf38 g     O .rodata	00000060 TIM1_BDTR_fields
08000758 g     F .text	0000004c strcasecmp
08019818 g     O .rodata	00000008 IWDG_WINR_fields
080128a0 g     O .rodata	00000048 ADC1_SMPR1_fields
0800dccc g     F .text	00000048 GYRO_IO_Read
0800035c g     F .text	00000002 my_Init
080196b8 g     O .rodata	00000018 I2C1_OAR2_fields
08009c70 g     F .text	00000044 AddTest
08014ff8 g     O .rodata	00000100 CAN_F26R1_fields
08000b14 g     F .text	00000002 _strtoul_r
08017470 g     O .rodata	00000008 CRC_POL_fields
08017a88 g     O .rodata	00000008 DMA1_CMAR4_fields
0800e884  w    F .text	00000002 TIM7_IRQHandler
0800e174 g     F .text	0000005e L3GD20_INT1InterruptConfig
0800d704 g     F .text	00000002 HAL_PCD_SuspendCallback
08017af0 g     O .rodata	00000008 DMA1_CPAR3_fields
0801aa80 g     O .rodata	00000008 RTC_BKP14R_fields
0800d440 g     F .text	0000000c USBD_CDC_GetDeviceQualifierDescriptor
0800a120 g     F .text	00000006 _close_r
0801b238 g     O .rodata	00000008 SPI1_DR_fields
0801a6a0 g     O .rodata	00000018 RCC_CFGR2_fields
080090a0 g     F .text	00000022 .hidden __aeabi_i2d
0801b710 g     O .rodata	00000010 TIM15_DCR_fields
080186b8 g     O .rodata	00000018 Flash_ACR_fields
08017460 g     O .rodata	00000008 CRC_IDR_fields
20000b54 g     O .data	00000034 Lsm303dlhcDrv
08017b00 g     O .rodata	00000008 DMA1_CPAR5_fields
08013ef8 g     O .rodata	00000100 CAN_F18R2_fields
08019820 g     O .rodata	00000050 IWDG_registers
0800095c g     F .text	00000010 strtok
0801f03c g     O .parsetable	0000000c CmdGyroE
080197f0 g     O .rodata	00000008 IWDG_PR_fields
08019900 g     O .rodata	00000020 NVIC_IPR11_fields
08017378 g     O .rodata	00000050 COMP_COMP7_CSR_fields
08016960 g     O .rodata	00000020 CAN_RF1R_fields
0800a200 g     F .text	0000007c TerminalInit
080035a4 g     F .text	000000d4 __swsetup_r
0801cbd8 g     O .rodata	00000008 TIM8_ARR_fields
08009a24  w    F .text	00000002 .hidden __aeabi_ldiv0
0800e884  w    F .text	00000002 EXTI9_5_IRQHandler
0800ce0a g     F .text	00000006 HAL_SPI_GetState
080093c8 g     F .text	000001d0 .hidden __divdf3
08012730 g     O .rodata	00000008 ADC1_DR_fields
08004a0c g     F .text	000000a8 __sfp
080064b4 g     F .text	0000005a __copybits
0800e884  w    F .text	00000002 RTC_WKUP_IRQHandler
0801d918 g     O .rodata	00000010 USART1_BRR_fields
0801b628 g     O .rodata	00000050 TIM15_CCMR1_Output_fields
0801f000 g     O .parsetable	0000000c AddTestE
20000438 g     O .data	00000408 __malloc_av_
0801b390 g     O .rodata	00000088 SYSCFG_CFGR1_fields
08004adc g     F .text	00000002 __sinit_lock_release
0800a2d2 g     F .text	00000010 TerminalReadNonBlock
08009174 g     F .text	00000254 .hidden __muldf3
08016a80 g     O .rodata	00000018 CAN_TDT0R_fields
0800a09c g     F .text	00000054 CmdDump
08006a04 g     F .text	00000022 __sread
0801b9c8 g     O .rodata	00000028 TIM16_CCMR1_Output_fields
0801e188 g     O .rodata	00000018 WWDG_CFR_fields
0801a0b8 g     O .rodata	00000370 Peripherals
08019200 g     O .rodata	00000080 GPIOB_ODR_fields
0800b3b4  w    F .text	0000000c HAL_GetTick
0801dfc8 g     O .rodata	00000050 USB_FS_USB_EP5R_fields
08012ff8 g     O .rodata	00000100 CAN_F11R1_fields
08005acc g     F .text	00000002 __malloc_lock
08019b78 g     O .rodata	00000008 NVIC_ISPR0_fields
08012790 g     O .rodata	00000058 ADC1_ISR_fields
08018590 g     O .rodata	00000048 FPU_FPCCR_fields
0801d318 g     O .rodata	00000010 TSC_ICR_fields
0800df94 g     F .text	000000ae LSM303DLHC_AccReadXYZ
08019880 g     O .rodata	00000008 NVIC_IABR2_fields
08004874 g     F .text	0000002c _fflush_r
0800a2e2 g     F .text	00000012 TerminalReadAnyNonBlock
0800d8b8 g     F .text	0000001c USBD_VCP_ProductStrDescriptor
08008440 g     F .text	0000005e _calloc_r
08018d48 g     O .rodata	00000080 GPIOA_PUPDR_fields
0800e884  w    F .text	00000002 SPI2_IRQHandler
0801aac0 g     O .rodata	00000008 RTC_BKP21R_fields
0801e269 g     O .rodata	00000012 hUSBDDeviceDesc
0801adc8 g     O .rodata	00000028 RTC_TSDR_fields
0800a480 g     F .text	0000000c USB_LP_CAN_RX0_IRQHandler
0801a6b8 g     O .rodata	00000048 RCC_CFGR3_fields
080003f0 g     F .text	000000a4 memset
0800e884  w    F .text	00000002 MemManage_Handler
08009b54 g     F .text	0000009c main
0801d6f8 g     O .rodata	00000100 TSC_IOSCR_fields
08017cd8 g     O .rodata	000001e0 DMA1_registers
0800dc14 g     F .text	00000014 BSP_PB_GetState
0801b480 g     O .rodata	00000020 SYSCFG_EXTICR3_fields
20000c70 g     O .bss	00000004 __malloc_max_total_mem
080127f8 g     O .rodata	00000008 ADC1_JDR3_fields
0801b2f8 g     O .rodata	00000008 SPI1_TXCRCR_fields
080083dc g     F .text	00000018 __swbuf
0800cb9a g     F .text	00000270 HAL_SPI_TransmitReceive
20000b50 g     O .data	00000004 SpixTimeout
0801efe8 g       *ABS*	00000000 _siccmram
08017228 g     O .rodata	00000050 COMP_COMP3_CSR_fields
08019b40 g     O .rodata	00000020 NVIC_IPR9_fields
08017790 g     O .rodata	00000040 DBGMCU_registers
080199a0 g     O .rodata	00000020 NVIC_IPR16_fields
080154f8 g     O .rodata	00000100 CAN_F2R2_fields
0800e884  w    F .text	00000002 SVC_Handler
08006a8c g     F .text	00000008 __sclose
0800e884  w    F .text	00000002 DMA2_Channel5_IRQHandler
08017b18 g     O .rodata	000000e0 DMA1_IFCR_fields
08008538 g     F .text	0000003c fclose
0801d578 g     O .rodata	00000080 TSC_IOGCSR_fields
0800a41c g     F .text	00000064 TerminalInputBufferWrite
08017ae0 g     O .rodata	00000008 DMA1_CPAR1_fields
08003808 g     F .text	00000f3c _dtoa_r
080052a0 g     F .text	00000554 _malloc_r
08018eb8 g     O .rodata	00000040 GPIOB_AFRL_fields
08008b18 g     F .text	0000001a __ascii_wctomb
08012738 g     O .rodata	00000058 ADC1_IER_fields
08009118 g     F .text	0000005a .hidden __aeabi_l2d
08017588 g     O .rodata	00000008 DAC_DHR8R1_fields
0801c030 g     O .rodata	00000030 TIM1_CCMR1_Input_fields
08008574 g     F .text	0000001c _fiprintf_r
08008d2c g     F .text	00000038 _init_signal
0801d338 g     O .rodata	00000100 TSC_IOASCR_fields
08019a40 g     O .rodata	00000020 NVIC_IPR20_fields
080050a4 g     F .text	00000040 _fwalk
0800cfbc g     F .text	0000003e USBD_LL_Reset
08016928 g     O .rodata	00000018 CAN_RDT1R_fields
080188c0 g     O .rodata	00000080 GPIOA_BRR_fields
080144f8 g     O .rodata	00000100 CAN_F20R2_fields
0801d7f8 g     O .rodata	00000010 TSC_ISR_fields
0800d820 g     F .text	0000000c USBD_LL_GetRxDataSize
0800e884  w    F .text	00000002 DMA1_Channel5_IRQHandler
0800df06 g     F .text	00000020 LSM303DLHC_AccInit
0800e884  w    F .text	00000002 USB_LP_IRQHandler
20001538 g     O .bss	00000800 UserRxBuffer
0800875c g     F .text	00000014 _mbtowc_r
0801b240 g     O .rodata	00000040 SPI1_I2SCFGR_fields
0801e265 g     O .rodata	00000004 USBD_LangIDDesc
080138f8 g     O .rodata	00000100 CAN_F15R2_fields
0800e884  w    F .text	00000002 EXTI4_IRQHandler
0801ded8 g     O .rodata	00000050 USB_FS_USB_EP2R_fields
080065cc g     F .text	00000060 putc
20000b30 g     O .data	00000020 LED_PORT
0801ce88 g     O .rodata	00000008 TIM8_CCR6_fields
0800e796 g     F .text	00000020 LSM303AGR_AccFilterClickCmd
0800e07e g     F .text	00000044 LSM303DLHC_AccClickITEnable
0800ced0 g     F .text	00000060 USBD_LL_DataOutStage
0801ab28 g     O .rodata	00000008 RTC_BKP4R_fields
08004b08 g     F .text	000000a0 _malloc_trim_r
0801d568 g     O .rodata	00000008 TSC_IOG7CR_fields
0801aa90 g     O .rodata	00000008 RTC_BKP16R_fields
08017758 g     O .rodata	00000028 DBGMCU_CR_fields
08016910 g     O .rodata	00000018 CAN_RDT0R_fields
08012618 g     O .rodata	00000008 ADC1_AWD2CR_fields
08017a90 g     O .rodata	00000008 DMA1_CMAR5_fields
080168d0 g     O .rodata	00000020 CAN_RDL0R_fields
08017af8 g     O .rodata	00000008 DMA1_CPAR4_fields
080087a8 g     F .text	000002dc strcmp
0801cb58 g     O .rodata	00000080 TIM6_registers
08009aa8 g     F .text	00000028 CmdAccel
080082a4 g     F .text	0000001c vfiprintf
0801aa68 g     O .rodata	00000008 RTC_BKP11R_fields
0800c960 g     F .text	00000006 HAL_I2C_GetState
0800a9dc g     F .text	00000068 SystemInit
08000b18 g     F .text	00000018 strtoul_l
0801b948 g     O .rodata	00000048 TIM16_BDTR_fields
080095a8 g     F .text	0000007a .hidden __nedf2
0801a9d8 g     O .rodata	00000070 RTC_ALRMBR_fields
0801c858 g     O .rodata	00000010 TIM2_DCR_fields
080126d0 g     O .rodata	00000050 ADC1_CR_fields
0800e8a8 g     F .text	00000000 _fini
08009d34 g     F .text	0000001c CmdW
0800b6e0 g     F .text	0000000c HAL_PCD_Start
0800e884  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
08017fb8 g     O .rodata	00000020 EXTI_EMR2_fields
0800df26 g     F .text	00000012 LSM303DLHC_AccReadID
08000718 g     F .text	00000040 sprintf
0801ae38 g     O .rodata	00000008 RTC_WUTR_fields
08017b08 g     O .rodata	00000008 DMA1_CPAR6_fields
08017468 g     O .rodata	00000008 CRC_INIT_fields
0801ac50 g     O .rodata	00000088 RTC_ISR_fields
0801c2b8 g     O .rodata	00000010 TIM1_DCR_fields
0801a038 g     O .rodata	00000038 PWR_CR_fields
0801c8d0 g     O .rodata	00000030 TIM2_EGR_fields
08000364 g     F .text	0000000c atexit
08019df8 g     O .rodata	00000080 OPAMP_OPAMP1_CR_fields
08018658 g     O .rodata	00000060 FPU_registers
080180b8 g     O .rodata	00000100 EXTI_IMR1_fields
0800a3dc g     F .text	00000040 _write_r
080129a8 g     O .rodata	00000010 ADC1_SQR4_fields
10000000 g       .ccmram	00000000 _eccmram
08012980 g     O .rodata	00000028 ADC1_SQR3_fields
0800e884  w    F .text	00000002 DMA1_Channel3_IRQHandler
080176b8 g     O .rodata	00000080 DBGMCU_APB1FZ_fields
0800871c g     F .text	00000040 setlocale
0801b1d0 g     O .rodata	00000060 SPI1_CR2_fields
08012628 g     O .rodata	00000010 ADC1_CALFACT_fields
0801aaf8 g     O .rodata	00000008 RTC_BKP28R_fields
0800b356  w    F .text	00000028 HAL_InitTick
0800e7b6 g     F .text	0000001c LSM303AGR_AccIT1Enable
0801c1c0 g     O .rodata	00000020 TIM1_CCR5_fields
0800d7f6 g     F .text	0000000e USBD_LL_SetUSBAddress
08019920 g     O .rodata	00000020 NVIC_IPR12_fields
0801e27c g     O .rodata	00000010 LED_PIN
20000008 g     O .data	00000004 _impure_ptr
08016ab0 g     O .rodata	00000018 CAN_TDT2R_fields
08012800 g     O .rodata	00000008 ADC1_JDR4_fields
0801b6d0 g     O .rodata	00000040 TIM15_CR2_fields
08004744 g     F .text	00000130 __sflush_r
0801a700 g     O .rodata	00000060 RCC_CFGR_fields
0800b3a4  w    F .text	00000010 HAL_IncTick
0801bdc8 g     O .rodata	00000028 TIM17_EGR_fields
0800d7a6 g     F .text	0000000e USBD_LL_CloseEP
0800e884  w    F .text	00000002 ADC4_IRQHandler
0801ab78 g     O .rodata	000000a0 RTC_CR_fields
0800d37c g     F .text	00000010 USBD_CtlContinueSendData
08017bf8 g     O .rodata	000000e0 DMA1_ISR_fields
08006b8c g     F .text	00000a5c _svfiprintf_r
08015bf8 g     O .rodata	00000100 CAN_F6R1_fields
0800e12c g     F .text	0000001c L3GD20_ReadID
0800e884  w    F .text	00000002 WWDG_IRQHandler
0800c68c  w    F .text	00000002 HAL_I2C_MspInit
08017eb8 g     O .rodata	00000100 EXTI_EMR1_fields
08019ae0 g     O .rodata	00000020 NVIC_IPR6_fields
0801c7c0 g     O .rodata	00000010 TIM2_CCR3_fields
080179b0 g     O .rodata	00000060 DMA1_CCR6_fields
08008770 g     F .text	0000002a __ascii_mbtowc
08018b48 g     O .rodata	00000080 GPIOA_MODER_fields
08019e78 g     O .rodata	00000080 OPAMP_OPAMP2_CR_fields
08006228 g     F .text	00000060 __ulp
08004af4 g     F .text	00000014 __fp_unlock_all
0800e4d0 g     F .text	0000003c I3G4250D_DisableIT
0801c240 g     O .rodata	00000078 TIM1_CR2_fields
0801acd8 g     O .rodata	00000010 RTC_PRER_fields
0800d804 g     F .text	0000000e USBD_LL_Transmit
0800e884  w    F .text	00000002 TIM2_IRQHandler
08000358 g     F .text	00000004 my_Loop
0801b990 g     O .rodata	00000020 TIM16_CCER_fields
0800b64e g     F .text	00000092 HAL_PCD_Init
20000a44 g     O .data	00000043 USBD_CDC_CfgHSDesc
0801f030 g     O .parsetable	0000000c CmdDecodeE
080150f8 g     O .rodata	00000100 CAN_F26R2_fields
08015cf8 g     O .rodata	00000100 CAN_F6R2_fields
20000000 g       .data	00000000 myTickCount
080139f8 g     O .rodata	00000100 CAN_F16R1_fields
0801aaf0 g     O .rodata	00000008 RTC_BKP27R_fields
08018388 g     O .rodata	00000010 EXTI_RTSR2_fields
0801ba40 g     O .rodata	00000028 TIM16_CR2_fields
0801a958 g     O .rodata	00000070 RTC_ALRMAR_fields
0801bf30 g     O .rodata	00000008 TIM1_ARR_fields
0800d32a g     F .text	00000038 USBD_GetString
0800db88 g     F .text	00000018 BSP_LED_Toggle
080148f8 g     O .rodata	00000100 CAN_F22R2_fields
08014bf8 g     O .rodata	00000100 CAN_F24R1_fields
08005138 g     F .text	00000008 localeconv
0800d6b4 g     F .text	0000000c HAL_PCD_SetupStageCallback
080159f8 g     O .rodata	00000100 CAN_F5R1_fields
0800e884  w    F .text	00000002 COMP7_IRQHandler
08005220 g     F .text	0000005e __swhatbuf_r
20008000 g       *ABS*	00000000 _estack
08009d70 g     F .text	000000f8 parse
0801ab08 g     O .rodata	00000008 RTC_BKP2R_fields
0800e884  w    F .text	00000002 COMP1_2_3_IRQHandler
08013bf8 g     O .rodata	00000100 CAN_F17R1_fields
0800e884  w    F .text	00000002 EXTI1_IRQHandler
0801cbe0 g     O .rodata	00000060 TIM8_BDTR_fields
08009644 g     F .text	00000012 .hidden __aeabi_dcmpeq
0800e67a g     F .text	00000012 LSM303AGR_AccReadID
0801de88 g     O .rodata	00000050 USB_FS_USB_EP1R_fields
08000320 g     F .text	00000010 busy_delay
08012538 g     O .rodata	000000b0 ADC1_2_CSR_fields
08018588 g     O .rodata	00000008 FPU_FPCAR_fields
20000c24 g       .data	00000000 _edata
0801d118 g     O .rodata	000001a0 TIM8_registers
0801ab10 g     O .rodata	00000008 RTC_BKP30R_fields
0801bcb0 g     O .rodata	00000018 TIM17_CCMR1_Input_fields
10000000 g       .ccmram	00000000 _sccmram
0801ba08 g     O .rodata	00000038 TIM16_CR1_fields
08013cf8 g     O .rodata	00000100 CAN_F17R2_fields
0801b698 g     O .rodata	00000038 TIM15_CR1_fields
080085b8 g     F .text	000000a6 __fputwc
0800a76c g     F .text	00000270 CmdDecode
0801b7b8 g     O .rodata	00000008 TIM15_RCR_fields
08019078 g     O .rodata	00000080 GPIOB_IDR_fields
0801c150 g     O .rodata	00000050 TIM1_CCMR3_Output_fields
0801cfe8 g     O .rodata	00000008 TIM8_DMAR_fields
080187c0 g     O .rodata	00000080 Flash_registers
0801ba68 g     O .rodata	00000010 TIM16_DCR_fields
0800e490 g     F .text	00000040 I3G4250D_EnableIT
0801a628 g     O .rodata	00000040 RCC_APB2RSTR_fields
08009fa4 g     F .text	00000028 fetch_uint32_arg
0801aa48 g     O .rodata	00000010 RTC_ALRMBSSR_fields
0801b4c0 g     O .rodata	00000040 SYSCFG_RCR_fields
0800e884  w    F .text	00000002 USART2_IRQHandler
0801bd08 g     O .rodata	00000038 TIM17_CR1_fields
08019b98 g     O .rodata	00000260 NVIC_registers
0800e884  w    F .text	00000002 COMP4_5_6_IRQHandler
08006a2c g     F .text	0000003e __swrite
0800aa44 g     F .text	000005bc HAL_RCC_OscConfig
20000844 g     O .data	00000004 __malloc_trim_threshold
0801bcf0 g     O .rodata	00000008 TIM17_CCR1_fields
08019708 g     O .rodata	00000028 I2C1_TIMINGR_fields
0801dd10 g     O .rodata	00000008 USB_FS_BTABLE_fields
080169e0 g     O .rodata	00000020 CAN_TDH1R_fields
08008590 g     F .text	00000028 fiprintf
080194b0 g     O .rodata	000000a8 I2C1_CR1_fields
08007678 g     F .text	00000c2c _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
0800d362 g     F .text	0000001a USBD_CtlSendData
080137f8 g     O .rodata	00000100 CAN_F15R1_fields
08012528 g     O .rodata	00000010 ADC1_2_CDR_fields
080050e4 g     F .text	00000048 _fwalk_reent
080060dc g     F .text	0000014c __mdiff
0801cb48 g     O .rodata	00000008 TIM6_PSC_fields
080096d4 g     F .text	0000004e .hidden __aeabi_d2iz
08009cb4 g     F .text	00000050 _jp_A2
0801aa88 g     O .rodata	00000008 RTC_BKP15R_fields
0801a098 g     O .rodata	00000020 PWR_registers
08018798 g     O .rodata	00000020 Flash_SR_fields
080127f0 g     O .rodata	00000008 ADC1_JDR2_fields
08009a38 g     F .text	00000010 _kill
0801aab8 g     O .rodata	00000008 RTC_BKP20R_fields
08017ad0 g     O .rodata	00000008 DMA1_CNDTR6_fields
080140f8 g     O .rodata	00000100 CAN_F19R2_fields
0800e884  w    F .text	00000002 I2C2_ER_IRQHandler
080124e8 g     O .rodata	00000040 ADC1_2_CCR_fields
0800e884  w    F .text	00000002 DMA1_Channel2_IRQHandler
080175d8 g     O .rodata	000000e0 DAC_registers
08018c48 g     O .rodata	00000080 GPIOA_OSPEEDR_fields
0801cd68 g     O .rodata	00000030 TIM8_CCMR2_Input_fields
08004ad4 g     F .text	00000002 __sfp_lock_release
0801bc48 g     O .rodata	00000048 TIM17_BDTR_fields
080168b0 g     O .rodata	00000020 CAN_RDH1R_fields
0800e406 g     F .text	0000002c I3G4250D_RebootCmd
0801c620 g     O .rodata	00000060 TIM2_CCER_fields
08017598 g     O .rodata	00000010 DAC_DHR8RD_fields
08009fcc g     F .text	00000020 fetch_string_arg
0800dae4 g     F .text	0000006c BSP_LED_Init
08019180 g     O .rodata	00000080 GPIOB_MODER_fields
0801f024 g     O .parsetable	0000000c CmdDumpE
0801e1f8 g     O .rodata	00000010 PLLMULFactorTable
0801da60 g     O .rodata	00000098 USART1_CR3_fields
0800a5b0 g     F .text	00000050 DecodeField
08016980 g     O .rodata	00000020 CAN_RI0R_fields
0800e884  w    F .text	00000002 TIM8_BRK_IRQHandler
08017738 g     O .rodata	00000020 DBGMCU_APB2FZ_fields
0801c3a0 g     O .rodata	00000008 TIM1_PSC_fields
0800a6b4 g     F .text	00000054 DecodePrintPeripherals
0801b5c0 g     O .rodata	00000038 TIM15_CCER_fields
08017aa0 g     O .rodata	00000008 DMA1_CMAR7_fields
0800ed4c g     O .rodata	00000101 _ctype_
08009a24  w    F .text	00000002 .hidden __aeabi_idiv0
080096a8 g     F .text	0000002c .hidden __unorddf2
0800e6e8 g     F .text	000000ae LSM303AGR_AccReadXYZ
0800df04 g     F .text	00000002 LSM303DLHC_AccDeInit
080169a0 g     O .rodata	00000020 CAN_RI1R_fields
0801b418 g     O .rodata	00000028 SYSCFG_CFGR2_fields
0801a760 g     O .rodata	00000088 RCC_CIR_fields
0801f06c g     O .parsetable	0000000c CmdStatsE
0800e884  w    F .text	00000002 FLASH_IRQHandler
0801b778 g     O .rodata	00000008 TIM15_DMAR_fields
080180a8 g     O .rodata	00000010 EXTI_FTSR2_fields
08012ef8 g     O .rodata	00000100 CAN_F10R2_fields
08009a48 g     F .text	00000002 _exit
08019a80 g     O .rodata	00000020 NVIC_IPR3_fields
08017aa8 g     O .rodata	00000008 DMA1_CNDTR1_fields
080196e0 g     O .rodata	00000028 I2C1_TIMEOUTR_fields
0801b578 g     O .rodata	00000048 TIM15_BDTR_fields
0800d844 g     F .text	0000000c USBD_VCP_LangIDStrDescriptor
20001438 g     O .bss	00000100 USBD_StrDesc
0800a2f4 g     F .text	000000e8 TerminalOutputBufferWrite
0800e884  w    F .text	00000002 BusFault_Handler
0800e884  w    F .text	00000002 USART1_IRQHandler
08017180 g     O .rodata	00000050 COMP_COMP1_CSR_fields
0801cff0 g     O .rodata	00000048 TIM8_EGR_fields
08005140 g     F .text	000000e0 __smakebuf_r
0801b7e0 g     O .rodata	00000040 TIM15_SR_fields
08000880 g     F .text	000000dc strlen
0801a5e8 g     O .rodata	00000040 RCC_APB2ENR_fields
0800e884  w    F .text	00000002 SPI3_IRQHandler
0800e68c g     F .text	0000001c LSM303AGR_AccRebootCmd
08008b44 g     F .text	00000030 _init_signal_r
08009634 g     F .text	00000010 .hidden __aeabi_cdcmpeq
08009598 g     F .text	0000008a .hidden __gedf2
08017890 g     O .rodata	00000060 DMA1_CCR3_fields
0801c1f8 g     O .rodata	00000048 TIM1_CR1_fields
08019800 g     O .rodata	00000018 IWDG_SR_fields
0801e018 g     O .rodata	00000050 USB_FS_USB_EP6R_fields
0801bb30 g     O .rodata	00000110 TIM16_registers
0800c3f6  w    F .text	00000002 HAL_PCDEx_SetConnectionState
0801be30 g     O .rodata	00000100 TIM17_registers
0800c74e g     F .text	00000104 HAL_I2C_Mem_Write
08008434 g     F .text	0000000a __assert
0801bf98 g     O .rodata	00000098 TIM1_CCER_fields
080156f8 g     O .rodata	00000100 CAN_F3R2_fields
080174c8 g     O .rodata	00000080 DAC_CR_fields
0800e884  w    F .text	00000002 I2C1_ER_IRQHandler
08007660 g     F .text	00000016 __sprint_r
0801e068 g     O .rodata	00000050 USB_FS_USB_EP7R_fields
08019608 g     O .rodata	00000088 I2C1_ISR_fields
0801c0f0 g     O .rodata	00000060 TIM1_CCMR2_Output_fields
08019b20 g     O .rodata	00000020 NVIC_IPR8_fields
0801e208 g     O .rodata	00000010 PredivFactorTable
0801d548 g     O .rodata	00000008 TSC_IOG3CR_fields
080090c4 g     F .text	00000042 .hidden __aeabi_f2d
0800d812 g     F .text	0000000e USBD_LL_PrepareReceive
08017ab8 g     O .rodata	00000008 DMA1_CNDTR3_fields
0800e148 g     F .text	0000002c L3GD20_RebootCmd
080151f8 g     O .rodata	00000100 CAN_F27R1_fields
0801d328 g     O .rodata	00000010 TSC_IER_fields
0800e816 g     F .text	0000001c LSM303AGR_AccZClickITConfig
080164d8 g     O .rodata	000000e0 CAN_FFA1R_fields
0801ce90 g     O .rodata	00000010 TIM8_CNT_fields
08008b04 g     F .text	00000014 _wctomb_r
08012620 g     O .rodata	00000008 ADC1_AWD3CR_fields
0801aae0 g     O .rodata	00000008 RTC_BKP25R_fields
0801d438 g     O .rodata	00000100 TSC_IOCCR_fields
08019ef8 g     O .rodata	00000080 OPAMP_OPAMP3_CR_fields
0800d5b4 g     F .text	0000000c USBD_CDC_SetRxBuffer
08018398 g     O .rodata	000000d0 EXTI_SWIER1_fields
08008e04 g     F .text	0000027a .hidden __subdf3
0801b940 g     O .rodata	00000008 TIM16_ARR_fields
08017780 g     O .rodata	00000010 DBGMCU_IDCODE_fields
08002008 g     F .text	00001514 _vfprintf_r
20000bf0 g     O .data	00000034 Lsm303agrDrv
08005cd0 g     F .text	0000005e __lo0bits
080181b8 g     O .rodata	00000020 EXTI_IMR2_fields
0801cb40 g     O .rodata	00000008 TIM6_EGR_fields
0801b298 g     O .rodata	00000008 SPI1_RXCRCR_fields
080196d0 g     O .rodata	00000008 I2C1_PECR_fields
0800bbb4 g     F .text	000000c8 HAL_PCD_EP_Receive
08012870 g     O .rodata	00000018 ADC1_OFR3_fields
08017320 g     O .rodata	00000058 COMP_COMP6_CSR_fields
0801aab0 g     O .rodata	00000008 RTC_BKP1R_fields
0801cd08 g     O .rodata	00000060 TIM8_CCMR1_Output_fields
08019400 g     O .rodata	000000b0 GPIOB_registers
0800a600 g     F .text	00000060 DecodeRegister
08008d64 g     F .text	00000068 __sigtramp
0801d058 g     O .rodata	00000048 TIM8_SMCR_fields
0800a508 g     F .text	00000054 DecodeReadRegister
080167f8 g     O .rodata	00000050 CAN_MCR_fields
08008ab8 g     F .text	0000004c wcrtomb
080175a8 g     O .rodata	00000008 DAC_DOR1_fields
0800a27c g     F .text	0000004c TerminalRead
0801d2b8 g     O .rodata	00000060 TSC_CR_fields
0801c8c8 g     O .rodata	00000008 TIM2_DMAR_fields
20000848 g     O .data	0000016c __global_locale
0801ccd8 g     O .rodata	00000030 TIM8_CCMR1_Input_fields
0800e062 g     F .text	0000001c LSM303DLHC_AccIT1Enable
080131f8 g     O .rodata	00000100 CAN_F12R1_fields
0800e884  w    F .text	00000002 USBWakeUp_IRQHandler
0801baf0 g     O .rodata	00000008 TIM16_PSC_fields
0801dc18 g     O .rodata	00000008 USART1_RDR_fields
0801a668 g     O .rodata	00000038 RCC_BDCR_fields
0800351c g     F .text	0000001c vfprintf
0801bd68 g     O .rodata	00000010 TIM17_DCR_fields
08019b80 g     O .rodata	00000008 NVIC_ISPR1_fields
080198b0 g     O .rodata	00000008 NVIC_ICPR2_fields
0801eff4 g     O .parsetable	0000000c CmdAccelE
080146f8 g     O .rodata	00000100 CAN_F21R2_fields
0800d5a4 g     F .text	00000010 USBD_CDC_SetTxBuffer
08008688 g     F .text	00000048 fputwc
0801b500 g     O .rodata	00000070 SYSCFG_registers
08008c7c g     F .text	0000005c raise
08019f78 g     O .rodata	00000080 OPAMP_OPAMP4_CR_fields
08005290 g     F .text	00000010 free
08004ad8 g     F .text	00000002 __sinit_lock_acquire
0800e884  w    F .text	00000002 DMA2_Channel3_IRQHandler
08017fd8 g     O .rodata	000000d0 EXTI_FTSR1_fields
0800d90c g     F .text	0000001c USBD_VCP_InterfaceStrDescriptor
08015df8 g     O .rodata	00000100 CAN_F7R1_fields
08005b34 g     F .text	000000a8 __multadd
0800ce76 g     F .text	0000005a USBD_LL_SetupStage
08005b20 g     F .text	00000012 _Bfree
08009b48 g     F .text	0000000a Error_Handler
0801e1a0 g     O .rodata	00000010 WWDG_CR_fields
0800e884  w    F .text	00000002 EXTI2_TSC_IRQHandler
08019b90 g     O .rodata	00000008 NVIC_STIR_fields
0800e884  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler
0801cdf8 g     O .rodata	00000050 TIM8_CCMR3_Output_fields



Disassembly of section .text:

080001c0 <deregister_tm_clones>:
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <deregister_tm_clones+0x10>)
 80001c2:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <deregister_tm_clones+0x14>)
 80001c4:	4283      	cmp	r3, r0
 80001c6:	d002      	beq.n	80001ce <deregister_tm_clones+0xe>
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <deregister_tm_clones+0x18>)
 80001ca:	b103      	cbz	r3, 80001ce <deregister_tm_clones+0xe>
 80001cc:	4718      	bx	r3
 80001ce:	4770      	bx	lr
 80001d0:	20000c24 	.word	0x20000c24
 80001d4:	20000c24 	.word	0x20000c24
 80001d8:	00000000 	.word	0x00000000

080001dc <register_tm_clones>:
 80001dc:	4805      	ldr	r0, [pc, #20]	; (80001f4 <register_tm_clones+0x18>)
 80001de:	4906      	ldr	r1, [pc, #24]	; (80001f8 <register_tm_clones+0x1c>)
 80001e0:	1a0b      	subs	r3, r1, r0
 80001e2:	0fd9      	lsrs	r1, r3, #31
 80001e4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001e8:	1049      	asrs	r1, r1, #1
 80001ea:	d002      	beq.n	80001f2 <register_tm_clones+0x16>
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <register_tm_clones+0x20>)
 80001ee:	b103      	cbz	r3, 80001f2 <register_tm_clones+0x16>
 80001f0:	4718      	bx	r3
 80001f2:	4770      	bx	lr
 80001f4:	20000c24 	.word	0x20000c24
 80001f8:	20000c24 	.word	0x20000c24
 80001fc:	00000000 	.word	0x00000000

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c06      	ldr	r4, [pc, #24]	; (800021c <__do_global_dtors_aux+0x1c>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b943      	cbnz	r3, 800021a <__do_global_dtors_aux+0x1a>
 8000208:	f7ff ffda 	bl	80001c0 <deregister_tm_clones>
 800020c:	4b04      	ldr	r3, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	b113      	cbz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000210:	4804      	ldr	r0, [pc, #16]	; (8000224 <__do_global_dtors_aux+0x24>)
 8000212:	f3af 8000 	nop.w
 8000216:	2301      	movs	r3, #1
 8000218:	7023      	strb	r3, [r4, #0]
 800021a:	bd10      	pop	{r4, pc}
 800021c:	20000c24 	.word	0x20000c24
 8000220:	00000000 	.word	0x00000000
 8000224:	0800e89c 	.word	0x0800e89c

08000228 <frame_dummy>:
 8000228:	b508      	push	{r3, lr}
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <frame_dummy+0x14>)
 800022c:	b11b      	cbz	r3, 8000236 <frame_dummy+0xe>
 800022e:	4904      	ldr	r1, [pc, #16]	; (8000240 <frame_dummy+0x18>)
 8000230:	4804      	ldr	r0, [pc, #16]	; (8000244 <frame_dummy+0x1c>)
 8000232:	f3af 8000 	nop.w
 8000236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800023a:	e7cf      	b.n	80001dc <register_tm_clones>
 800023c:	00000000 	.word	0x00000000
 8000240:	20000c28 	.word	0x20000c28
 8000244:	0800e89c 	.word	0x0800e89c

08000248 <jp_led_demo_a3>:
@ Returns: r0
@
@ Here is the actual jp_led_demo_a3 function

jp_led_demo_a3:
push {lr}
 8000248:	b500      	push	{lr}
bkpt
 800024a:	be00      	bkpt	0x0000


bx lr
 800024c:	4770      	bx	lr
pop {lr}
 800024e:	f85d eb04 	ldr.w	lr, [sp], #4
 8000252:	bf00      	nop

08000254 <jp_led_demo_a2>:
@ Returns: r0
@
@ Here is the actual jp_led_demo_a2 function

jp_led_demo_a2:
push {r5, r6, r7, lr}
 8000254:	b5e0      	push	{r5, r6, r7, lr}
mov r5, r0       @saves count in register r5
 8000256:	4605      	mov	r5, r0
mov r6, r1       @saves delay in register r6
 8000258:	460e      	mov	r6, r1

0800025a <toggle_loop>:

toggle_loop:   

    mov r7, #7                              @setting r7 to 7 to decrement count for led.
 800025a:	f04f 0707 	mov.w	r7, #7

0800025e <led_on_toggle_loop>:
    led_on_toggle_loop:                     @this loop toggles led on until all led's are on
		mov r0, r7
 800025e:	4638      	mov	r0, r7
		bl BSP_LED_Toggle                   @toggles selected led
 8000260:	f00d fc92 	bl	800db88 <BSP_LED_Toggle>
		subs r7, r7, #1                     @decrements the counter
 8000264:	3f01      	subs	r7, #1
		bge led_on_toggle_loop              @checks if it greater than equal to zero
 8000266:	dafa      	bge.n	800025e <led_on_toggle_loop>

    mov r0, r6                              @add delay to register 0 from r6
 8000268:	4630      	mov	r0, r6
    bl busy_delay                           @calls busy_delay for delay
 800026a:	f000 f859 	bl	8000320 <busy_delay>
    
    mov r7, #7                              @sets r7 with 7 to decrement count for led
 800026e:	f04f 0707 	mov.w	r7, #7

08000272 <led_off_toggle_loop>:
    led_off_toggle_loop:                    @turns all leds off
		mov r0, r7                      
 8000272:	4638      	mov	r0, r7
		bl BSP_LED_Toggle                   @toggles selected led from r0
 8000274:	f00d fc88 	bl	800db88 <BSP_LED_Toggle>
		subs r7, r7, #1                     @decrements the counter
 8000278:	3f01      	subs	r7, #1
		bge led_off_toggle_loop             @loops until r7 = -1
 800027a:	dafa      	bge.n	8000272 <led_off_toggle_loop>

    mov r0, r6                              @adds delay to register 0 from r6
 800027c:	4630      	mov	r0, r6
    bl busy_delay                           @calls busy_delay
 800027e:	f000 f84f 	bl	8000320 <busy_delay>

subs r5, r5, #1                             @decrements the count entered by user or default - 2.
 8000282:	3d01      	subs	r5, #1
bgt toggle_loop                             @it loops until r5 is greater than 0
 8000284:	dce9      	bgt.n	800025a <toggle_loop>

mov  r0, #0                                 @returns 0 if success
 8000286:	f04f 0000 	mov.w	r0, #0

pop {r5, r6, r7, lr}
 800028a:	e8bd 40e0 	ldmia.w	sp!, {r5, r6, r7, lr}
bx lr
 800028e:	4770      	bx	lr

08000290 <add_test>:
@ Input: r0, r1 (i.e. r0 holds x, r1 holds y)
@ Returns: r0
@
@ Here is the actual add_test function
add_test:
push {lr}
 8000290:	b500      	push	{lr}
add r0, r0, r1
 8000292:	4408      	add	r0, r1
mov r0, #0
 8000294:	f04f 0000 	mov.w	r0, #0

bl BSP_LED_Toggle
 8000298:	f00d fc76 	bl	800db88 <BSP_LED_Toggle>
mov r0, #1
 800029c:	f04f 0001 	mov.w	r0, #1
bl BSP_LED_Toggle
 80002a0:	f00d fc72 	bl	800db88 <BSP_LED_Toggle>
mov r0, #2
 80002a4:	f04f 0002 	mov.w	r0, #2
bl BSP_LED_Toggle
 80002a8:	f00d fc6e 	bl	800db88 <BSP_LED_Toggle>
mov r0, #3
 80002ac:	f04f 0003 	mov.w	r0, #3
bl BSP_LED_Toggle
 80002b0:	f00d fc6a 	bl	800db88 <BSP_LED_Toggle>
mov r0, #4
 80002b4:	f04f 0004 	mov.w	r0, #4
bl BSP_LED_Toggle
 80002b8:	f00d fc66 	bl	800db88 <BSP_LED_Toggle>
mov r0, #5
 80002bc:	f04f 0005 	mov.w	r0, #5
bl BSP_LED_Toggle
 80002c0:	f00d fc62 	bl	800db88 <BSP_LED_Toggle>
mov r0, #6
 80002c4:	f04f 0006 	mov.w	r0, #6
bl BSP_LED_Toggle
 80002c8:	f00d fc5e 	bl	800db88 <BSP_LED_Toggle>
mov r0, #7
 80002cc:	f04f 0007 	mov.w	r0, #7
bl BSP_LED_Toggle
 80002d0:	f00d fc5a 	bl	800db88 <BSP_LED_Toggle>

mov r0, r2
 80002d4:	4610      	mov	r0, r2
bl busy_delay
 80002d6:	f000 f823 	bl	8000320 <busy_delay>

mov r0, #0
 80002da:	f04f 0000 	mov.w	r0, #0
bl BSP_LED_Toggle
 80002de:	f00d fc53 	bl	800db88 <BSP_LED_Toggle>
mov r0, #1
 80002e2:	f04f 0001 	mov.w	r0, #1
bl BSP_LED_Toggle
 80002e6:	f00d fc4f 	bl	800db88 <BSP_LED_Toggle>
mov r0, #2
 80002ea:	f04f 0002 	mov.w	r0, #2
bl BSP_LED_Toggle
 80002ee:	f00d fc4b 	bl	800db88 <BSP_LED_Toggle>
mov r0, #3
 80002f2:	f04f 0003 	mov.w	r0, #3
bl BSP_LED_Toggle
 80002f6:	f00d fc47 	bl	800db88 <BSP_LED_Toggle>
mov r0, #4
 80002fa:	f04f 0004 	mov.w	r0, #4
bl BSP_LED_Toggle
 80002fe:	f00d fc43 	bl	800db88 <BSP_LED_Toggle>
mov r0, #5
 8000302:	f04f 0005 	mov.w	r0, #5
bl BSP_LED_Toggle
 8000306:	f00d fc3f 	bl	800db88 <BSP_LED_Toggle>
mov r0, #6
 800030a:	f04f 0006 	mov.w	r0, #6
bl BSP_LED_Toggle
 800030e:	f00d fc3b 	bl	800db88 <BSP_LED_Toggle>
mov r0, #7
 8000312:	f04f 0007 	mov.w	r0, #7
bl BSP_LED_Toggle
 8000316:	f00d fc37 	bl	800db88 <BSP_LED_Toggle>

pop {lr}
 800031a:	f85d eb04 	ldr.w	lr, [sp], #4
bx lr @ Return (Branch eXchange) to the address in the link register (lr)
 800031e:	4770      	bx	lr

08000320 <busy_delay>:
@ Input: r0 (i.e. r0 holds number of cycles to delay)
@ Returns: r0
@
@ Here is the actual function. DO NOT MODIFY THIS FUNCTION.
busy_delay:
push {r5}
 8000320:	b420      	push	{r5}
mov r5, r0
 8000322:	4605      	mov	r5, r0

08000324 <delay_1oop>:
delay_1oop:
subs r5, r5, #1
 8000324:	3d01      	subs	r5, #1
bge delay_1oop
 8000326:	dafd      	bge.n	8000324 <delay_1oop>
mov r0, #0 @ Return zero (success)
 8000328:	f04f 0000 	mov.w	r0, #0
pop {r5}
 800032c:	bc20      	pop	{r5}
bx lr @ Return (Branch eXchange) to the address in the link register (lr)
 800032e:	4770      	bx	lr

08000330 <mytest>:
@ 

@ Here is the actual mytest function
mytest:

    push {lr}                @ Put aside registers we want to restore later
 8000330:	b500      	push	{lr}

    mov  r0, #1                     @ r0 holds our argument for the LED toggle function
 8000332:	f04f 0001 	mov.w	r0, #1
                                    @ So pass it a value

    bl   BSP_LED_Toggle             @ call BSP C function using Branch with Link (bl)
 8000336:	f00d fc27 	bl	800db88 <BSP_LED_Toggle>
    
    ldr  r1, =myTickCount
 800033a:	4909      	ldr	r1, [pc, #36]	; (8000360 <my_Init+0x4>)
    ldr  r0, [r1]
 800033c:	6808      	ldr	r0, [r1, #0]

    pop  {lr}                @ Bring all the register values back
 800033e:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr                           @ Return (Branch eXchange) to the address held in the link register (lr) 
 8000342:	4770      	bx	lr

08000344 <my_Tick>:
@@ Declaration : void my_Tick( void )
@@ Uses nothing

my_Tick:
    
    push {lr}
 8000344:	b500      	push	{lr}

    ldr  r1, =myTickCount   @@ Address of myTickCount stored in r1
 8000346:	4906      	ldr	r1, [pc, #24]	; (8000360 <my_Init+0x4>)
    ldr  r0, [r1]           @@ Load r0 with the address pointed at by r1 (myTickCount address)
 8000348:	6808      	ldr	r0, [r1, #0]
    add  r0, r0, #1         @@ Increment r0
 800034a:	f100 0001 	add.w	r0, r0, #1
    str  r0, [r1]           @@ Store the current r0 value back to the address pointed at by r1
 800034e:	6008      	str	r0, [r1, #0]

    pop {lr}
 8000350:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr                  @@ Return to the address stored in lr
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop

08000358 <my_Loop>:
    .thumb_func             @@ /
    .type   my_Loop, %function   @@ - symbol type (not req)
@@ Declaration : void my_Loop( void )
@@ Uses nothing
my_Loop:
    push {lr}
 8000358:	b500      	push	{lr}
    pop  {pc}
 800035a:	bd00      	pop	{pc}

0800035c <my_Init>:
    .type   my_Init, %function   @@ - symbol type (not req)

@@ Declaration : void my_Init( void )
@@ Uses nothing
my_Init:
    bx lr
 800035c:	4770      	bx	lr
 800035e:	0000      	.short	0x0000
    ldr  r1, =myTickCount
 8000360:	20000000 	.word	0x20000000

08000364 <atexit>:
 8000364:	2300      	movs	r3, #0
 8000366:	4601      	mov	r1, r0
 8000368:	461a      	mov	r2, r3
 800036a:	4618      	mov	r0, r3
 800036c:	f003 b984 	b.w	8003678 <__register_exitproc>

08000370 <__errno>:
 8000370:	4b01      	ldr	r3, [pc, #4]	; (8000378 <__errno+0x8>)
 8000372:	6818      	ldr	r0, [r3, #0]
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	20000008 	.word	0x20000008

0800037c <__libc_fini_array>:
 800037c:	b538      	push	{r3, r4, r5, lr}
 800037e:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <__libc_fini_array+0x24>)
 8000380:	4d08      	ldr	r5, [pc, #32]	; (80003a4 <__libc_fini_array+0x28>)
 8000382:	1b5b      	subs	r3, r3, r5
 8000384:	109c      	asrs	r4, r3, #2
 8000386:	d007      	beq.n	8000398 <__libc_fini_array+0x1c>
 8000388:	3b04      	subs	r3, #4
 800038a:	441d      	add	r5, r3
 800038c:	3c01      	subs	r4, #1
 800038e:	f855 3904 	ldr.w	r3, [r5], #-4
 8000392:	4798      	blx	r3
 8000394:	2c00      	cmp	r4, #0
 8000396:	d1f9      	bne.n	800038c <__libc_fini_array+0x10>
 8000398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800039c:	f00e ba84 	b.w	800e8a8 <_fini>
 80003a0:	0801e3c4 	.word	0x0801e3c4
 80003a4:	0801e3c0 	.word	0x0801e3c0

080003a8 <__libc_init_array>:
 80003a8:	b570      	push	{r4, r5, r6, lr}
 80003aa:	4e0d      	ldr	r6, [pc, #52]	; (80003e0 <__libc_init_array+0x38>)
 80003ac:	4d0d      	ldr	r5, [pc, #52]	; (80003e4 <__libc_init_array+0x3c>)
 80003ae:	1b76      	subs	r6, r6, r5
 80003b0:	10b6      	asrs	r6, r6, #2
 80003b2:	d006      	beq.n	80003c2 <__libc_init_array+0x1a>
 80003b4:	2400      	movs	r4, #0
 80003b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ba:	3401      	adds	r4, #1
 80003bc:	4798      	blx	r3
 80003be:	42a6      	cmp	r6, r4
 80003c0:	d1f9      	bne.n	80003b6 <__libc_init_array+0xe>
 80003c2:	4e09      	ldr	r6, [pc, #36]	; (80003e8 <__libc_init_array+0x40>)
 80003c4:	4d09      	ldr	r5, [pc, #36]	; (80003ec <__libc_init_array+0x44>)
 80003c6:	1b76      	subs	r6, r6, r5
 80003c8:	f00e fa68 	bl	800e89c <_init>
 80003cc:	10b6      	asrs	r6, r6, #2
 80003ce:	d006      	beq.n	80003de <__libc_init_array+0x36>
 80003d0:	2400      	movs	r4, #0
 80003d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d6:	3401      	adds	r4, #1
 80003d8:	4798      	blx	r3
 80003da:	42a6      	cmp	r6, r4
 80003dc:	d1f9      	bne.n	80003d2 <__libc_init_array+0x2a>
 80003de:	bd70      	pop	{r4, r5, r6, pc}
 80003e0:	0801e3b8 	.word	0x0801e3b8
 80003e4:	0801e3b8 	.word	0x0801e3b8
 80003e8:	0801e3c0 	.word	0x0801e3c0
 80003ec:	0801e3b8 	.word	0x0801e3b8

080003f0 <memset>:
 80003f0:	0783      	lsls	r3, r0, #30
 80003f2:	b530      	push	{r4, r5, lr}
 80003f4:	d048      	beq.n	8000488 <memset+0x98>
 80003f6:	1e54      	subs	r4, r2, #1
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d03f      	beq.n	800047c <memset+0x8c>
 80003fc:	b2ca      	uxtb	r2, r1
 80003fe:	4603      	mov	r3, r0
 8000400:	e001      	b.n	8000406 <memset+0x16>
 8000402:	3c01      	subs	r4, #1
 8000404:	d33a      	bcc.n	800047c <memset+0x8c>
 8000406:	f803 2b01 	strb.w	r2, [r3], #1
 800040a:	079d      	lsls	r5, r3, #30
 800040c:	d1f9      	bne.n	8000402 <memset+0x12>
 800040e:	2c03      	cmp	r4, #3
 8000410:	d92d      	bls.n	800046e <memset+0x7e>
 8000412:	b2cd      	uxtb	r5, r1
 8000414:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000418:	2c0f      	cmp	r4, #15
 800041a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800041e:	d936      	bls.n	800048e <memset+0x9e>
 8000420:	f1a4 0210 	sub.w	r2, r4, #16
 8000424:	f022 0c0f 	bic.w	ip, r2, #15
 8000428:	f103 0e20 	add.w	lr, r3, #32
 800042c:	44e6      	add	lr, ip
 800042e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 8000432:	f103 0210 	add.w	r2, r3, #16
 8000436:	e942 5504 	strd	r5, r5, [r2, #-16]
 800043a:	e942 5502 	strd	r5, r5, [r2, #-8]
 800043e:	3210      	adds	r2, #16
 8000440:	4572      	cmp	r2, lr
 8000442:	d1f8      	bne.n	8000436 <memset+0x46>
 8000444:	f10c 0201 	add.w	r2, ip, #1
 8000448:	f014 0f0c 	tst.w	r4, #12
 800044c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8000450:	f004 0c0f 	and.w	ip, r4, #15
 8000454:	d013      	beq.n	800047e <memset+0x8e>
 8000456:	f1ac 0304 	sub.w	r3, ip, #4
 800045a:	f023 0303 	bic.w	r3, r3, #3
 800045e:	3304      	adds	r3, #4
 8000460:	4413      	add	r3, r2
 8000462:	f842 5b04 	str.w	r5, [r2], #4
 8000466:	4293      	cmp	r3, r2
 8000468:	d1fb      	bne.n	8000462 <memset+0x72>
 800046a:	f00c 0403 	and.w	r4, ip, #3
 800046e:	b12c      	cbz	r4, 800047c <memset+0x8c>
 8000470:	b2ca      	uxtb	r2, r1
 8000472:	441c      	add	r4, r3
 8000474:	f803 2b01 	strb.w	r2, [r3], #1
 8000478:	429c      	cmp	r4, r3
 800047a:	d1fb      	bne.n	8000474 <memset+0x84>
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	4664      	mov	r4, ip
 8000480:	4613      	mov	r3, r2
 8000482:	2c00      	cmp	r4, #0
 8000484:	d1f4      	bne.n	8000470 <memset+0x80>
 8000486:	e7f9      	b.n	800047c <memset+0x8c>
 8000488:	4603      	mov	r3, r0
 800048a:	4614      	mov	r4, r2
 800048c:	e7bf      	b.n	800040e <memset+0x1e>
 800048e:	461a      	mov	r2, r3
 8000490:	46a4      	mov	ip, r4
 8000492:	e7e0      	b.n	8000456 <memset+0x66>

08000494 <_printf_r>:
 8000494:	b40e      	push	{r1, r2, r3}
 8000496:	b500      	push	{lr}
 8000498:	b082      	sub	sp, #8
 800049a:	ab03      	add	r3, sp, #12
 800049c:	6881      	ldr	r1, [r0, #8]
 800049e:	f853 2b04 	ldr.w	r2, [r3], #4
 80004a2:	9301      	str	r3, [sp, #4]
 80004a4:	f001 fdb0 	bl	8002008 <_vfprintf_r>
 80004a8:	b002      	add	sp, #8
 80004aa:	f85d eb04 	ldr.w	lr, [sp], #4
 80004ae:	b003      	add	sp, #12
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop

080004b4 <printf>:
 80004b4:	b40f      	push	{r0, r1, r2, r3}
 80004b6:	b500      	push	{lr}
 80004b8:	4907      	ldr	r1, [pc, #28]	; (80004d8 <printf+0x24>)
 80004ba:	b083      	sub	sp, #12
 80004bc:	ab04      	add	r3, sp, #16
 80004be:	6808      	ldr	r0, [r1, #0]
 80004c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80004c4:	6881      	ldr	r1, [r0, #8]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	f001 fd9e 	bl	8002008 <_vfprintf_r>
 80004cc:	b003      	add	sp, #12
 80004ce:	f85d eb04 	ldr.w	lr, [sp], #4
 80004d2:	b004      	add	sp, #16
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	20000008 	.word	0x20000008

080004dc <_putchar_r>:
 80004dc:	6882      	ldr	r2, [r0, #8]
 80004de:	f006 b849 	b.w	8006574 <_putc_r>
 80004e2:	bf00      	nop

080004e4 <putchar>:
 80004e4:	4b02      	ldr	r3, [pc, #8]	; (80004f0 <putchar+0xc>)
 80004e6:	4601      	mov	r1, r0
 80004e8:	6818      	ldr	r0, [r3, #0]
 80004ea:	6882      	ldr	r2, [r0, #8]
 80004ec:	f006 b842 	b.w	8006574 <_putc_r>
 80004f0:	20000008 	.word	0x20000008

080004f4 <_puts_r>:
 80004f4:	b570      	push	{r4, r5, r6, lr}
 80004f6:	4604      	mov	r4, r0
 80004f8:	b088      	sub	sp, #32
 80004fa:	4608      	mov	r0, r1
 80004fc:	460d      	mov	r5, r1
 80004fe:	f000 f9bf 	bl	8000880 <strlen>
 8000502:	4e15      	ldr	r6, [pc, #84]	; (8000558 <_puts_r+0x64>)
 8000504:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000506:	9005      	str	r0, [sp, #20]
 8000508:	2101      	movs	r1, #1
 800050a:	1843      	adds	r3, r0, r1
 800050c:	e9cd 6106 	strd	r6, r1, [sp, #24]
 8000510:	a804      	add	r0, sp, #16
 8000512:	2102      	movs	r1, #2
 8000514:	9504      	str	r5, [sp, #16]
 8000516:	9303      	str	r3, [sp, #12]
 8000518:	68a5      	ldr	r5, [r4, #8]
 800051a:	9001      	str	r0, [sp, #4]
 800051c:	9102      	str	r1, [sp, #8]
 800051e:	b1b2      	cbz	r2, 800054e <_puts_r+0x5a>
 8000520:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8000524:	049a      	lsls	r2, r3, #18
 8000526:	d406      	bmi.n	8000536 <_puts_r+0x42>
 8000528:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800052a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800052e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000532:	81ab      	strh	r3, [r5, #12]
 8000534:	666a      	str	r2, [r5, #100]	; 0x64
 8000536:	aa01      	add	r2, sp, #4
 8000538:	4629      	mov	r1, r5
 800053a:	4620      	mov	r0, r4
 800053c:	f004 fc3a 	bl	8004db4 <__sfvwrite_r>
 8000540:	2800      	cmp	r0, #0
 8000542:	bf14      	ite	ne
 8000544:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000548:	200a      	moveq	r0, #10
 800054a:	b008      	add	sp, #32
 800054c:	bd70      	pop	{r4, r5, r6, pc}
 800054e:	4620      	mov	r0, r4
 8000550:	f004 faba 	bl	8004ac8 <__sinit>
 8000554:	e7e4      	b.n	8000520 <_puts_r+0x2c>
 8000556:	bf00      	nop
 8000558:	0801e28c 	.word	0x0801e28c

0800055c <puts>:
 800055c:	4b02      	ldr	r3, [pc, #8]	; (8000568 <puts+0xc>)
 800055e:	4601      	mov	r1, r0
 8000560:	6818      	ldr	r0, [r3, #0]
 8000562:	f7ff bfc7 	b.w	80004f4 <_puts_r>
 8000566:	bf00      	nop
 8000568:	20000008 	.word	0x20000008

0800056c <setvbuf>:
 800056c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000570:	4c5a      	ldr	r4, [pc, #360]	; (80006dc <setvbuf+0x170>)
 8000572:	f8d4 8000 	ldr.w	r8, [r4]
 8000576:	b083      	sub	sp, #12
 8000578:	4604      	mov	r4, r0
 800057a:	460e      	mov	r6, r1
 800057c:	4617      	mov	r7, r2
 800057e:	461d      	mov	r5, r3
 8000580:	f1b8 0f00 	cmp.w	r8, #0
 8000584:	d003      	beq.n	800058e <setvbuf+0x22>
 8000586:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 800058a:	2b00      	cmp	r3, #0
 800058c:	d068      	beq.n	8000660 <setvbuf+0xf4>
 800058e:	2f02      	cmp	r7, #2
 8000590:	d005      	beq.n	800059e <setvbuf+0x32>
 8000592:	2f01      	cmp	r7, #1
 8000594:	f200 808e 	bhi.w	80006b4 <setvbuf+0x148>
 8000598:	2d00      	cmp	r5, #0
 800059a:	f2c0 808b 	blt.w	80006b4 <setvbuf+0x148>
 800059e:	4621      	mov	r1, r4
 80005a0:	4640      	mov	r0, r8
 80005a2:	f004 f967 	bl	8004874 <_fflush_r>
 80005a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80005a8:	b141      	cbz	r1, 80005bc <setvbuf+0x50>
 80005aa:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80005ae:	4299      	cmp	r1, r3
 80005b0:	d002      	beq.n	80005b8 <setvbuf+0x4c>
 80005b2:	4640      	mov	r0, r8
 80005b4:	f004 faf8 	bl	8004ba8 <_free_r>
 80005b8:	2300      	movs	r3, #0
 80005ba:	6323      	str	r3, [r4, #48]	; 0x30
 80005bc:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 80005c0:	2300      	movs	r3, #0
 80005c2:	f01c 0f80 	tst.w	ip, #128	; 0x80
 80005c6:	61a3      	str	r3, [r4, #24]
 80005c8:	6063      	str	r3, [r4, #4]
 80005ca:	d151      	bne.n	8000670 <setvbuf+0x104>
 80005cc:	f42c 6c4a 	bic.w	ip, ip, #3232	; 0xca0
 80005d0:	f02c 0c03 	bic.w	ip, ip, #3
 80005d4:	2f02      	cmp	r7, #2
 80005d6:	f8a4 c00c 	strh.w	ip, [r4, #12]
 80005da:	d057      	beq.n	800068c <setvbuf+0x120>
 80005dc:	ab01      	add	r3, sp, #4
 80005de:	466a      	mov	r2, sp
 80005e0:	4621      	mov	r1, r4
 80005e2:	4640      	mov	r0, r8
 80005e4:	f004 fe1c 	bl	8005220 <__swhatbuf_r>
 80005e8:	89a3      	ldrh	r3, [r4, #12]
 80005ea:	4318      	orrs	r0, r3
 80005ec:	81a0      	strh	r0, [r4, #12]
 80005ee:	b325      	cbz	r5, 800063a <setvbuf+0xce>
 80005f0:	b326      	cbz	r6, 800063c <setvbuf+0xd0>
 80005f2:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 80005f6:	b37b      	cbz	r3, 8000658 <setvbuf+0xec>
 80005f8:	9b00      	ldr	r3, [sp, #0]
 80005fa:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 80005fe:	6026      	str	r6, [r4, #0]
 8000600:	42ab      	cmp	r3, r5
 8000602:	bf1c      	itt	ne
 8000604:	f44c 6c00 	orrne.w	ip, ip, #2048	; 0x800
 8000608:	f8a4 c00c 	strhne.w	ip, [r4, #12]
 800060c:	2f01      	cmp	r7, #1
 800060e:	bf04      	itt	eq
 8000610:	f04c 0c01 	orreq.w	ip, ip, #1
 8000614:	f8a4 c00c 	strheq.w	ip, [r4, #12]
 8000618:	f01c 0008 	ands.w	r0, ip, #8
 800061c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8000620:	fa1f f38c 	uxth.w	r3, ip
 8000624:	d020      	beq.n	8000668 <setvbuf+0xfc>
 8000626:	f013 0001 	ands.w	r0, r3, #1
 800062a:	d03f      	beq.n	80006ac <setvbuf+0x140>
 800062c:	2000      	movs	r0, #0
 800062e:	426d      	negs	r5, r5
 8000630:	60a0      	str	r0, [r4, #8]
 8000632:	61a5      	str	r5, [r4, #24]
 8000634:	b003      	add	sp, #12
 8000636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800063a:	9d00      	ldr	r5, [sp, #0]
 800063c:	4628      	mov	r0, r5
 800063e:	f004 fe1f 	bl	8005280 <malloc>
 8000642:	4606      	mov	r6, r0
 8000644:	2800      	cmp	r0, #0
 8000646:	d038      	beq.n	80006ba <setvbuf+0x14e>
 8000648:	89a3      	ldrh	r3, [r4, #12]
 800064a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800064e:	81a3      	strh	r3, [r4, #12]
 8000650:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1cf      	bne.n	80005f8 <setvbuf+0x8c>
 8000658:	4640      	mov	r0, r8
 800065a:	f004 fa35 	bl	8004ac8 <__sinit>
 800065e:	e7cb      	b.n	80005f8 <setvbuf+0x8c>
 8000660:	4640      	mov	r0, r8
 8000662:	f004 fa31 	bl	8004ac8 <__sinit>
 8000666:	e792      	b.n	800058e <setvbuf+0x22>
 8000668:	60a0      	str	r0, [r4, #8]
 800066a:	b003      	add	sp, #12
 800066c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000670:	6921      	ldr	r1, [r4, #16]
 8000672:	4640      	mov	r0, r8
 8000674:	f004 fa98 	bl	8004ba8 <_free_r>
 8000678:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 800067c:	f42c 6c4a 	bic.w	ip, ip, #3232	; 0xca0
 8000680:	f02c 0c03 	bic.w	ip, ip, #3
 8000684:	2f02      	cmp	r7, #2
 8000686:	f8a4 c00c 	strh.w	ip, [r4, #12]
 800068a:	d1a7      	bne.n	80005dc <setvbuf+0x70>
 800068c:	2000      	movs	r0, #0
 800068e:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8000692:	f04c 0c02 	orr.w	ip, ip, #2
 8000696:	2100      	movs	r1, #0
 8000698:	2201      	movs	r2, #1
 800069a:	e9c4 3204 	strd	r3, r2, [r4, #16]
 800069e:	f8a4 c00c 	strh.w	ip, [r4, #12]
 80006a2:	60a1      	str	r1, [r4, #8]
 80006a4:	6023      	str	r3, [r4, #0]
 80006a6:	b003      	add	sp, #12
 80006a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80006ac:	60a5      	str	r5, [r4, #8]
 80006ae:	b003      	add	sp, #12
 80006b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80006b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006b8:	e7d7      	b.n	800066a <setvbuf+0xfe>
 80006ba:	f8dd 9000 	ldr.w	r9, [sp]
 80006be:	45a9      	cmp	r9, r5
 80006c0:	d004      	beq.n	80006cc <setvbuf+0x160>
 80006c2:	4648      	mov	r0, r9
 80006c4:	f004 fddc 	bl	8005280 <malloc>
 80006c8:	4606      	mov	r6, r0
 80006ca:	b920      	cbnz	r0, 80006d6 <setvbuf+0x16a>
 80006cc:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 80006d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006d4:	e7db      	b.n	800068e <setvbuf+0x122>
 80006d6:	464d      	mov	r5, r9
 80006d8:	e7b6      	b.n	8000648 <setvbuf+0xdc>
 80006da:	bf00      	nop
 80006dc:	20000008 	.word	0x20000008

080006e0 <_sprintf_r>:
 80006e0:	b40c      	push	{r2, r3}
 80006e2:	b510      	push	{r4, lr}
 80006e4:	b09c      	sub	sp, #112	; 0x70
 80006e6:	ab1e      	add	r3, sp, #120	; 0x78
 80006e8:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80006ec:	e9cd 1406 	strd	r1, r4, [sp, #24]
 80006f0:	9102      	str	r1, [sp, #8]
 80006f2:	4908      	ldr	r1, [pc, #32]	; (8000714 <_sprintf_r+0x34>)
 80006f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80006f8:	9105      	str	r1, [sp, #20]
 80006fa:	a902      	add	r1, sp, #8
 80006fc:	9301      	str	r3, [sp, #4]
 80006fe:	9404      	str	r4, [sp, #16]
 8000700:	f000 fa22 	bl	8000b48 <_svfprintf_r>
 8000704:	9b02      	ldr	r3, [sp, #8]
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	b01c      	add	sp, #112	; 0x70
 800070c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000710:	b002      	add	sp, #8
 8000712:	4770      	bx	lr
 8000714:	ffff0208 	.word	0xffff0208

08000718 <sprintf>:
 8000718:	b40e      	push	{r1, r2, r3}
 800071a:	b510      	push	{r4, lr}
 800071c:	b09d      	sub	sp, #116	; 0x74
 800071e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000722:	ab1f      	add	r3, sp, #124	; 0x7c
 8000724:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8000728:	9104      	str	r1, [sp, #16]
 800072a:	4909      	ldr	r1, [pc, #36]	; (8000750 <sprintf+0x38>)
 800072c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000730:	9002      	str	r0, [sp, #8]
 8000732:	4c08      	ldr	r4, [pc, #32]	; (8000754 <sprintf+0x3c>)
 8000734:	6808      	ldr	r0, [r1, #0]
 8000736:	9301      	str	r3, [sp, #4]
 8000738:	a902      	add	r1, sp, #8
 800073a:	9405      	str	r4, [sp, #20]
 800073c:	f000 fa04 	bl	8000b48 <_svfprintf_r>
 8000740:	9b02      	ldr	r3, [sp, #8]
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
 8000746:	b01d      	add	sp, #116	; 0x74
 8000748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800074c:	b003      	add	sp, #12
 800074e:	4770      	bx	lr
 8000750:	20000008 	.word	0x20000008
 8000754:	ffff0208 	.word	0xffff0208

08000758 <strcasecmp>:
 8000758:	b510      	push	{r4, lr}
 800075a:	4c11      	ldr	r4, [pc, #68]	; (80007a0 <strcasecmp+0x48>)
 800075c:	4686      	mov	lr, r0
 800075e:	f81e cb01 	ldrb.w	ip, [lr], #1
 8000762:	f814 300c 	ldrb.w	r3, [r4, ip]
 8000766:	f003 0303 	and.w	r3, r3, #3
 800076a:	2b01      	cmp	r3, #1
 800076c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000770:	4662      	mov	r2, ip
 8000772:	bf08      	it	eq
 8000774:	f10c 0220 	addeq.w	r2, ip, #32
 8000778:	f814 c003 	ldrb.w	ip, [r4, r3]
 800077c:	f00c 0c03 	and.w	ip, ip, #3
 8000780:	f1bc 0f01 	cmp.w	ip, #1
 8000784:	4618      	mov	r0, r3
 8000786:	d004      	beq.n	8000792 <strcasecmp+0x3a>
 8000788:	1ad2      	subs	r2, r2, r3
 800078a:	d106      	bne.n	800079a <strcasecmp+0x42>
 800078c:	2b00      	cmp	r3, #0
 800078e:	d1e6      	bne.n	800075e <strcasecmp+0x6>
 8000790:	bd10      	pop	{r4, pc}
 8000792:	3320      	adds	r3, #32
 8000794:	1ad0      	subs	r0, r2, r3
 8000796:	d0e2      	beq.n	800075e <strcasecmp+0x6>
 8000798:	bd10      	pop	{r4, pc}
 800079a:	4610      	mov	r0, r2
 800079c:	bd10      	pop	{r4, pc}
 800079e:	bf00      	nop
 80007a0:	0800ed4d 	.word	0x0800ed4d

080007a4 <strcpy>:
 80007a4:	ea80 0201 	eor.w	r2, r0, r1
 80007a8:	4684      	mov	ip, r0
 80007aa:	f012 0f03 	tst.w	r2, #3
 80007ae:	d14f      	bne.n	8000850 <strcpy+0xac>
 80007b0:	f011 0f03 	tst.w	r1, #3
 80007b4:	d132      	bne.n	800081c <strcpy+0x78>
 80007b6:	f84d 4d04 	str.w	r4, [sp, #-4]!
 80007ba:	f011 0f04 	tst.w	r1, #4
 80007be:	f851 3b04 	ldr.w	r3, [r1], #4
 80007c2:	d00b      	beq.n	80007dc <strcpy+0x38>
 80007c4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80007c8:	439a      	bics	r2, r3
 80007ca:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80007ce:	bf04      	itt	eq
 80007d0:	f84c 3b04 	streq.w	r3, [ip], #4
 80007d4:	f851 3b04 	ldreq.w	r3, [r1], #4
 80007d8:	d116      	bne.n	8000808 <strcpy+0x64>
 80007da:	bf00      	nop
 80007dc:	f851 4b04 	ldr.w	r4, [r1], #4
 80007e0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80007e4:	439a      	bics	r2, r3
 80007e6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80007ea:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 80007ee:	d10b      	bne.n	8000808 <strcpy+0x64>
 80007f0:	f84c 3b04 	str.w	r3, [ip], #4
 80007f4:	43a2      	bics	r2, r4
 80007f6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80007fa:	bf04      	itt	eq
 80007fc:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000800:	f84c 4b04 	streq.w	r4, [ip], #4
 8000804:	d0ea      	beq.n	80007dc <strcpy+0x38>
 8000806:	4623      	mov	r3, r4
 8000808:	f80c 3b01 	strb.w	r3, [ip], #1
 800080c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8000810:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000814:	d1f8      	bne.n	8000808 <strcpy+0x64>
 8000816:	f85d 4b04 	ldr.w	r4, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	f011 0f01 	tst.w	r1, #1
 8000820:	d006      	beq.n	8000830 <strcpy+0x8c>
 8000822:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000826:	f80c 2b01 	strb.w	r2, [ip], #1
 800082a:	2a00      	cmp	r2, #0
 800082c:	bf08      	it	eq
 800082e:	4770      	bxeq	lr
 8000830:	f011 0f02 	tst.w	r1, #2
 8000834:	d0bf      	beq.n	80007b6 <strcpy+0x12>
 8000836:	f831 2b02 	ldrh.w	r2, [r1], #2
 800083a:	f012 0fff 	tst.w	r2, #255	; 0xff
 800083e:	bf16      	itet	ne
 8000840:	f82c 2b02 	strhne.w	r2, [ip], #2
 8000844:	f88c 2000 	strbeq.w	r2, [ip]
 8000848:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 800084c:	d1b3      	bne.n	80007b6 <strcpy+0x12>
 800084e:	4770      	bx	lr
 8000850:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000854:	f80c 2b01 	strb.w	r2, [ip], #1
 8000858:	2a00      	cmp	r2, #0
 800085a:	d1f9      	bne.n	8000850 <strcpy+0xac>
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
	...

08000880 <strlen>:
 8000880:	f890 f000 	pld	[r0]
 8000884:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000888:	f020 0107 	bic.w	r1, r0, #7
 800088c:	f06f 0c00 	mvn.w	ip, #0
 8000890:	f010 0407 	ands.w	r4, r0, #7
 8000894:	f891 f020 	pld	[r1, #32]
 8000898:	f040 8049 	bne.w	800092e <strlen+0xae>
 800089c:	f04f 0400 	mov.w	r4, #0
 80008a0:	f06f 0007 	mvn.w	r0, #7
 80008a4:	e9d1 2300 	ldrd	r2, r3, [r1]
 80008a8:	f891 f040 	pld	[r1, #64]	; 0x40
 80008ac:	f100 0008 	add.w	r0, r0, #8
 80008b0:	fa82 f24c 	uadd8	r2, r2, ip
 80008b4:	faa4 f28c 	sel	r2, r4, ip
 80008b8:	fa83 f34c 	uadd8	r3, r3, ip
 80008bc:	faa2 f38c 	sel	r3, r2, ip
 80008c0:	bb4b      	cbnz	r3, 8000916 <strlen+0x96>
 80008c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80008c6:	fa82 f24c 	uadd8	r2, r2, ip
 80008ca:	f100 0008 	add.w	r0, r0, #8
 80008ce:	faa4 f28c 	sel	r2, r4, ip
 80008d2:	fa83 f34c 	uadd8	r3, r3, ip
 80008d6:	faa2 f38c 	sel	r3, r2, ip
 80008da:	b9e3      	cbnz	r3, 8000916 <strlen+0x96>
 80008dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80008e0:	fa82 f24c 	uadd8	r2, r2, ip
 80008e4:	f100 0008 	add.w	r0, r0, #8
 80008e8:	faa4 f28c 	sel	r2, r4, ip
 80008ec:	fa83 f34c 	uadd8	r3, r3, ip
 80008f0:	faa2 f38c 	sel	r3, r2, ip
 80008f4:	b97b      	cbnz	r3, 8000916 <strlen+0x96>
 80008f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80008fa:	f101 0120 	add.w	r1, r1, #32
 80008fe:	fa82 f24c 	uadd8	r2, r2, ip
 8000902:	f100 0008 	add.w	r0, r0, #8
 8000906:	faa4 f28c 	sel	r2, r4, ip
 800090a:	fa83 f34c 	uadd8	r3, r3, ip
 800090e:	faa2 f38c 	sel	r3, r2, ip
 8000912:	2b00      	cmp	r3, #0
 8000914:	d0c6      	beq.n	80008a4 <strlen+0x24>
 8000916:	2a00      	cmp	r2, #0
 8000918:	bf04      	itt	eq
 800091a:	3004      	addeq	r0, #4
 800091c:	461a      	moveq	r2, r3
 800091e:	ba12      	rev	r2, r2
 8000920:	fab2 f282 	clz	r2, r2
 8000924:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8000928:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800092c:	4770      	bx	lr
 800092e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000932:	f004 0503 	and.w	r5, r4, #3
 8000936:	f1c4 0000 	rsb	r0, r4, #0
 800093a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800093e:	f014 0f04 	tst.w	r4, #4
 8000942:	f891 f040 	pld	[r1, #64]	; 0x40
 8000946:	fa0c f505 	lsl.w	r5, ip, r5
 800094a:	ea62 0205 	orn	r2, r2, r5
 800094e:	bf1c      	itt	ne
 8000950:	ea63 0305 	ornne	r3, r3, r5
 8000954:	4662      	movne	r2, ip
 8000956:	f04f 0400 	mov.w	r4, #0
 800095a:	e7a9      	b.n	80008b0 <strlen+0x30>

0800095c <strtok>:
 800095c:	4a02      	ldr	r2, [pc, #8]	; (8000968 <strtok+0xc>)
 800095e:	6812      	ldr	r2, [r2, #0]
 8000960:	2301      	movs	r3, #1
 8000962:	325c      	adds	r2, #92	; 0x5c
 8000964:	f000 b802 	b.w	800096c <__strtok_r>
 8000968:	20000008 	.word	0x20000008

0800096c <__strtok_r>:
 800096c:	b4f0      	push	{r4, r5, r6, r7}
 800096e:	4607      	mov	r7, r0
 8000970:	b310      	cbz	r0, 80009b8 <__strtok_r+0x4c>
 8000972:	463e      	mov	r6, r7
 8000974:	468c      	mov	ip, r1
 8000976:	f816 0b01 	ldrb.w	r0, [r6], #1
 800097a:	e001      	b.n	8000980 <__strtok_r+0x14>
 800097c:	42a0      	cmp	r0, r4
 800097e:	d016      	beq.n	80009ae <__strtok_r+0x42>
 8000980:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8000984:	2c00      	cmp	r4, #0
 8000986:	d1f9      	bne.n	800097c <__strtok_r+0x10>
 8000988:	b1d8      	cbz	r0, 80009c2 <__strtok_r+0x56>
 800098a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800098e:	460c      	mov	r4, r1
 8000990:	e001      	b.n	8000996 <__strtok_r+0x2a>
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0f9      	beq.n	800098a <__strtok_r+0x1e>
 8000996:	f814 3b01 	ldrb.w	r3, [r4], #1
 800099a:	429d      	cmp	r5, r3
 800099c:	d1f9      	bne.n	8000992 <__strtok_r+0x26>
 800099e:	b14d      	cbz	r5, 80009b4 <__strtok_r+0x48>
 80009a0:	2300      	movs	r3, #0
 80009a2:	f806 3c01 	strb.w	r3, [r6, #-1]
 80009a6:	6016      	str	r6, [r2, #0]
 80009a8:	4638      	mov	r0, r7
 80009aa:	bcf0      	pop	{r4, r5, r6, r7}
 80009ac:	4770      	bx	lr
 80009ae:	b15b      	cbz	r3, 80009c8 <__strtok_r+0x5c>
 80009b0:	4637      	mov	r7, r6
 80009b2:	e7de      	b.n	8000972 <__strtok_r+0x6>
 80009b4:	462e      	mov	r6, r5
 80009b6:	e7f6      	b.n	80009a6 <__strtok_r+0x3a>
 80009b8:	6817      	ldr	r7, [r2, #0]
 80009ba:	2f00      	cmp	r7, #0
 80009bc:	d1d9      	bne.n	8000972 <__strtok_r+0x6>
 80009be:	4638      	mov	r0, r7
 80009c0:	e7f3      	b.n	80009aa <__strtok_r+0x3e>
 80009c2:	bcf0      	pop	{r4, r5, r6, r7}
 80009c4:	6010      	str	r0, [r2, #0]
 80009c6:	4770      	bx	lr
 80009c8:	6016      	str	r6, [r2, #0]
 80009ca:	4638      	mov	r0, r7
 80009cc:	703b      	strb	r3, [r7, #0]
 80009ce:	e7ec      	b.n	80009aa <__strtok_r+0x3e>

080009d0 <strtok_r>:
 80009d0:	2301      	movs	r3, #1
 80009d2:	f7ff bfcb 	b.w	800096c <__strtok_r>
 80009d6:	bf00      	nop

080009d8 <_strtoul_l.constprop.0>:
 80009d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009dc:	4607      	mov	r7, r0
 80009de:	484b      	ldr	r0, [pc, #300]	; (8000b0c <_strtoul_l.constprop.0+0x134>)
 80009e0:	460e      	mov	r6, r1
 80009e2:	4635      	mov	r5, r6
 80009e4:	f816 cb01 	ldrb.w	ip, [r6], #1
 80009e8:	f810 400c 	ldrb.w	r4, [r0, ip]
 80009ec:	f014 0408 	ands.w	r4, r4, #8
 80009f0:	d1f7      	bne.n	80009e2 <_strtoul_l.constprop.0+0xa>
 80009f2:	f1bc 0f2d 	cmp.w	ip, #45	; 0x2d
 80009f6:	46e6      	mov	lr, ip
 80009f8:	d058      	beq.n	8000aac <_strtoul_l.constprop.0+0xd4>
 80009fa:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
 80009fe:	bf04      	itt	eq
 8000a00:	f896 e000 	ldrbeq.w	lr, [r6]
 8000a04:	1cae      	addeq	r6, r5, #2
 8000a06:	b15b      	cbz	r3, 8000a20 <_strtoul_l.constprop.0+0x48>
 8000a08:	2b10      	cmp	r3, #16
 8000a0a:	d054      	beq.n	8000ab6 <_strtoul_l.constprop.0+0xde>
 8000a0c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8000a10:	fbb8 f8f3 	udiv	r8, r8, r3
 8000a14:	fb03 fa08 	mul.w	sl, r3, r8
 8000a18:	ea6f 0a0a 	mvn.w	sl, sl
 8000a1c:	4699      	mov	r9, r3
 8000a1e:	e008      	b.n	8000a32 <_strtoul_l.constprop.0+0x5a>
 8000a20:	f1be 0f30 	cmp.w	lr, #48	; 0x30
 8000a24:	d05a      	beq.n	8000adc <_strtoul_l.constprop.0+0x104>
 8000a26:	230a      	movs	r3, #10
 8000a28:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8000b10 <_strtoul_l.constprop.0+0x138>
 8000a2c:	f04f 0a05 	mov.w	sl, #5
 8000a30:	4699      	mov	r9, r3
 8000a32:	2500      	movs	r5, #0
 8000a34:	4628      	mov	r0, r5
 8000a36:	e007      	b.n	8000a48 <_strtoul_l.constprop.0+0x70>
 8000a38:	4540      	cmp	r0, r8
 8000a3a:	d815      	bhi.n	8000a68 <_strtoul_l.constprop.0+0x90>
 8000a3c:	d029      	beq.n	8000a92 <_strtoul_l.constprop.0+0xba>
 8000a3e:	fb09 c000 	mla	r0, r9, r0, ip
 8000a42:	2501      	movs	r5, #1
 8000a44:	f816 eb01 	ldrb.w	lr, [r6], #1
 8000a48:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
 8000a4c:	f1bc 0f09 	cmp.w	ip, #9
 8000a50:	d906      	bls.n	8000a60 <_strtoul_l.constprop.0+0x88>
 8000a52:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
 8000a56:	f1bc 0f19 	cmp.w	ip, #25
 8000a5a:	d808      	bhi.n	8000a6e <_strtoul_l.constprop.0+0x96>
 8000a5c:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
 8000a60:	4563      	cmp	r3, ip
 8000a62:	dd0d      	ble.n	8000a80 <_strtoul_l.constprop.0+0xa8>
 8000a64:	2d00      	cmp	r5, #0
 8000a66:	dae7      	bge.n	8000a38 <_strtoul_l.constprop.0+0x60>
 8000a68:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000a6c:	e7ea      	b.n	8000a44 <_strtoul_l.constprop.0+0x6c>
 8000a6e:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
 8000a72:	f1bc 0f19 	cmp.w	ip, #25
 8000a76:	d803      	bhi.n	8000a80 <_strtoul_l.constprop.0+0xa8>
 8000a78:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
 8000a7c:	4563      	cmp	r3, ip
 8000a7e:	dcf1      	bgt.n	8000a64 <_strtoul_l.constprop.0+0x8c>
 8000a80:	2d00      	cmp	r5, #0
 8000a82:	db0b      	blt.n	8000a9c <_strtoul_l.constprop.0+0xc4>
 8000a84:	b104      	cbz	r4, 8000a88 <_strtoul_l.constprop.0+0xb0>
 8000a86:	4240      	negs	r0, r0
 8000a88:	b10a      	cbz	r2, 8000a8e <_strtoul_l.constprop.0+0xb6>
 8000a8a:	b96d      	cbnz	r5, 8000aa8 <_strtoul_l.constprop.0+0xd0>
 8000a8c:	6011      	str	r1, [r2, #0]
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	45d4      	cmp	ip, sl
 8000a94:	ddd3      	ble.n	8000a3e <_strtoul_l.constprop.0+0x66>
 8000a96:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000a9a:	e7d3      	b.n	8000a44 <_strtoul_l.constprop.0+0x6c>
 8000a9c:	2322      	movs	r3, #34	; 0x22
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aa4:	2a00      	cmp	r2, #0
 8000aa6:	d0f2      	beq.n	8000a8e <_strtoul_l.constprop.0+0xb6>
 8000aa8:	1e71      	subs	r1, r6, #1
 8000aaa:	e7ef      	b.n	8000a8c <_strtoul_l.constprop.0+0xb4>
 8000aac:	f896 e000 	ldrb.w	lr, [r6]
 8000ab0:	2401      	movs	r4, #1
 8000ab2:	1cae      	adds	r6, r5, #2
 8000ab4:	e7a7      	b.n	8000a06 <_strtoul_l.constprop.0+0x2e>
 8000ab6:	f1be 0f30 	cmp.w	lr, #48	; 0x30
 8000aba:	d121      	bne.n	8000b00 <_strtoul_l.constprop.0+0x128>
 8000abc:	7830      	ldrb	r0, [r6, #0]
 8000abe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8000ac2:	2858      	cmp	r0, #88	; 0x58
 8000ac4:	d116      	bne.n	8000af4 <_strtoul_l.constprop.0+0x11c>
 8000ac6:	f04f 0910 	mov.w	r9, #16
 8000aca:	f896 e001 	ldrb.w	lr, [r6, #1]
 8000ace:	f04f 0a0f 	mov.w	sl, #15
 8000ad2:	3602      	adds	r6, #2
 8000ad4:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 8000ad8:	464b      	mov	r3, r9
 8000ada:	e7aa      	b.n	8000a32 <_strtoul_l.constprop.0+0x5a>
 8000adc:	7833      	ldrb	r3, [r6, #0]
 8000ade:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8000ae2:	2b58      	cmp	r3, #88	; 0x58
 8000ae4:	d0ef      	beq.n	8000ac6 <_strtoul_l.constprop.0+0xee>
 8000ae6:	2308      	movs	r3, #8
 8000ae8:	f04f 0a07 	mov.w	sl, #7
 8000aec:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
 8000af0:	4699      	mov	r9, r3
 8000af2:	e79e      	b.n	8000a32 <_strtoul_l.constprop.0+0x5a>
 8000af4:	4699      	mov	r9, r3
 8000af6:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 8000afa:	f04f 0a0f 	mov.w	sl, #15
 8000afe:	e798      	b.n	8000a32 <_strtoul_l.constprop.0+0x5a>
 8000b00:	f04f 0a0f 	mov.w	sl, #15
 8000b04:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 8000b08:	4699      	mov	r9, r3
 8000b0a:	e792      	b.n	8000a32 <_strtoul_l.constprop.0+0x5a>
 8000b0c:	0800ed4d 	.word	0x0800ed4d
 8000b10:	19999999 	.word	0x19999999

08000b14 <_strtoul_r>:
 8000b14:	e760      	b.n	80009d8 <_strtoul_l.constprop.0>
 8000b16:	bf00      	nop

08000b18 <strtoul_l>:
 8000b18:	b410      	push	{r4}
 8000b1a:	4c04      	ldr	r4, [pc, #16]	; (8000b2c <strtoul_l+0x14>)
 8000b1c:	4684      	mov	ip, r0
 8000b1e:	4613      	mov	r3, r2
 8000b20:	6820      	ldr	r0, [r4, #0]
 8000b22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b26:	460a      	mov	r2, r1
 8000b28:	4661      	mov	r1, ip
 8000b2a:	e755      	b.n	80009d8 <_strtoul_l.constprop.0>
 8000b2c:	20000008 	.word	0x20000008

08000b30 <strtoul>:
 8000b30:	b410      	push	{r4}
 8000b32:	4c04      	ldr	r4, [pc, #16]	; (8000b44 <strtoul+0x14>)
 8000b34:	4684      	mov	ip, r0
 8000b36:	4613      	mov	r3, r2
 8000b38:	6820      	ldr	r0, [r4, #0]
 8000b3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b3e:	460a      	mov	r2, r1
 8000b40:	4661      	mov	r1, ip
 8000b42:	e749      	b.n	80009d8 <_strtoul_l.constprop.0>
 8000b44:	20000008 	.word	0x20000008

08000b48 <_svfprintf_r>:
 8000b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b4c:	ed2d 8b06 	vpush	{d8-d10}
 8000b50:	b0bb      	sub	sp, #236	; 0xec
 8000b52:	4688      	mov	r8, r1
 8000b54:	4691      	mov	r9, r2
 8000b56:	9309      	str	r3, [sp, #36]	; 0x24
 8000b58:	ee09 0a10 	vmov	s18, r0
 8000b5c:	f004 fae8 	bl	8005130 <_localeconv_r>
 8000b60:	6803      	ldr	r3, [r0, #0]
 8000b62:	9310      	str	r3, [sp, #64]	; 0x40
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fe8b 	bl	8000880 <strlen>
 8000b6a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8000b6e:	900f      	str	r0, [sp, #60]	; 0x3c
 8000b70:	0618      	lsls	r0, r3, #24
 8000b72:	d504      	bpl.n	8000b7e <_svfprintf_r+0x36>
 8000b74:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	f000 86e7 	beq.w	800194c <_svfprintf_r+0xe04>
 8000b7e:	ed9f 7b86 	vldr	d7, [pc, #536]	; 8000d98 <_svfprintf_r+0x250>
 8000b82:	2300      	movs	r3, #0
 8000b84:	e9cd 331e 	strd	r3, r3, [sp, #120]	; 0x78
 8000b88:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8000b8c:	aa2a      	add	r2, sp, #168	; 0xa8
 8000b8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8000b90:	921d      	str	r2, [sp, #116]	; 0x74
 8000b92:	4692      	mov	sl, r2
 8000b94:	930e      	str	r3, [sp, #56]	; 0x38
 8000b96:	9311      	str	r3, [sp, #68]	; 0x44
 8000b98:	9306      	str	r3, [sp, #24]
 8000b9a:	f899 3000 	ldrb.w	r3, [r9]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f000 8187 	beq.w	8000eb2 <_svfprintf_r+0x36a>
 8000ba4:	464c      	mov	r4, r9
 8000ba6:	e004      	b.n	8000bb2 <_svfprintf_r+0x6a>
 8000ba8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f000 80c5 	beq.w	8000d3c <_svfprintf_r+0x1f4>
 8000bb2:	2b25      	cmp	r3, #37	; 0x25
 8000bb4:	d1f8      	bne.n	8000ba8 <_svfprintf_r+0x60>
 8000bb6:	ebb4 0509 	subs.w	r5, r4, r9
 8000bba:	f040 80c3 	bne.w	8000d44 <_svfprintf_r+0x1fc>
 8000bbe:	7823      	ldrb	r3, [r4, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	f000 8176 	beq.w	8000eb2 <_svfprintf_r+0x36a>
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bcc:	7865      	ldrb	r5, [r4, #1]
 8000bce:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
 8000bd2:	f104 0901 	add.w	r9, r4, #1
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	9205      	str	r2, [sp, #20]
 8000bda:	9307      	str	r3, [sp, #28]
 8000bdc:	469b      	mov	fp, r3
 8000bde:	f109 0901 	add.w	r9, r9, #1
 8000be2:	f1a5 0220 	sub.w	r2, r5, #32
 8000be6:	2a58      	cmp	r2, #88	; 0x58
 8000be8:	f200 80da 	bhi.w	8000da0 <_svfprintf_r+0x258>
 8000bec:	e8df f012 	tbh	[pc, r2, lsl #1]
 8000bf0:	00d8025e 	.word	0x00d8025e
 8000bf4:	025900d8 	.word	0x025900d8
 8000bf8:	00d800d8 	.word	0x00d800d8
 8000bfc:	00d800d8 	.word	0x00d800d8
 8000c00:	00d800d8 	.word	0x00d800d8
 8000c04:	0254020c 	.word	0x0254020c
 8000c08:	021700d8 	.word	0x021700d8
 8000c0c:	00d8021c 	.word	0x00d8021c
 8000c10:	0059024f 	.word	0x0059024f
 8000c14:	00590059 	.word	0x00590059
 8000c18:	00590059 	.word	0x00590059
 8000c1c:	00590059 	.word	0x00590059
 8000c20:	00590059 	.word	0x00590059
 8000c24:	00d800d8 	.word	0x00d800d8
 8000c28:	00d800d8 	.word	0x00d800d8
 8000c2c:	00d800d8 	.word	0x00d800d8
 8000c30:	00d800d8 	.word	0x00d800d8
 8000c34:	00d800d8 	.word	0x00d800d8
 8000c38:	016c0236 	.word	0x016c0236
 8000c3c:	016c00d8 	.word	0x016c00d8
 8000c40:	00d800d8 	.word	0x00d800d8
 8000c44:	00d800d8 	.word	0x00d800d8
 8000c48:	00d80266 	.word	0x00d80266
 8000c4c:	007800d8 	.word	0x007800d8
 8000c50:	00d800d8 	.word	0x00d800d8
 8000c54:	00d800d8 	.word	0x00d800d8
 8000c58:	006800d8 	.word	0x006800d8
 8000c5c:	00d800d8 	.word	0x00d800d8
 8000c60:	00d80279 	.word	0x00d80279
 8000c64:	00d800d8 	.word	0x00d800d8
 8000c68:	00d800d8 	.word	0x00d800d8
 8000c6c:	00d800d8 	.word	0x00d800d8
 8000c70:	00d800d8 	.word	0x00d800d8
 8000c74:	026b00d8 	.word	0x026b00d8
 8000c78:	016c01cf 	.word	0x016c01cf
 8000c7c:	016c016c 	.word	0x016c016c
 8000c80:	01cf029a 	.word	0x01cf029a
 8000c84:	00d800d8 	.word	0x00d800d8
 8000c88:	00d8030e 	.word	0x00d8030e
 8000c8c:	007a02f8 	.word	0x007a02f8
 8000c90:	02d802dd 	.word	0x02d802dd
 8000c94:	02b600d8 	.word	0x02b600d8
 8000c98:	006a00d8 	.word	0x006a00d8
 8000c9c:	00d800d8 	.word	0x00d800d8
 8000ca0:	029f      	.short	0x029f
 8000ca2:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	f819 5b01 	ldrb.w	r5, [r9], #1
 8000cac:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000cb0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8000cb4:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8000cb8:	2a09      	cmp	r2, #9
 8000cba:	d9f5      	bls.n	8000ca8 <_svfprintf_r+0x160>
 8000cbc:	9107      	str	r1, [sp, #28]
 8000cbe:	e790      	b.n	8000be2 <_svfprintf_r+0x9a>
 8000cc0:	f04b 0b10 	orr.w	fp, fp, #16
 8000cc4:	f01b 0120 	ands.w	r1, fp, #32
 8000cc8:	f000 8153 	beq.w	8000f72 <_svfprintf_r+0x42a>
 8000ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000cce:	3307      	adds	r3, #7
 8000cd0:	f023 0307 	bic.w	r3, r3, #7
 8000cd4:	6859      	ldr	r1, [r3, #4]
 8000cd6:	f853 0b08 	ldr.w	r0, [r3], #8
 8000cda:	9309      	str	r3, [sp, #36]	; 0x24
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e00e      	b.n	8000cfe <_svfprintf_r+0x1b6>
 8000ce0:	f04b 0b10 	orr.w	fp, fp, #16
 8000ce4:	f01b 0120 	ands.w	r1, fp, #32
 8000ce8:	f000 8136 	beq.w	8000f58 <_svfprintf_r+0x410>
 8000cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000cee:	3307      	adds	r3, #7
 8000cf0:	f023 0307 	bic.w	r3, r3, #7
 8000cf4:	6859      	ldr	r1, [r3, #4]
 8000cf6:	f853 0b08 	ldr.w	r0, [r3], #8
 8000cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	2400      	movs	r4, #0
 8000d00:	f88d 4057 	strb.w	r4, [sp, #87]	; 0x57
 8000d04:	9a05      	ldr	r2, [sp, #20]
 8000d06:	1c56      	adds	r6, r2, #1
 8000d08:	f000 828f 	beq.w	800122a <_svfprintf_r+0x6e2>
 8000d0c:	f02b 0680 	bic.w	r6, fp, #128	; 0x80
 8000d10:	9603      	str	r6, [sp, #12]
 8000d12:	ea50 0601 	orrs.w	r6, r0, r1
 8000d16:	f040 8286 	bne.w	8001226 <_svfprintf_r+0x6de>
 8000d1a:	2a00      	cmp	r2, #0
 8000d1c:	f040 830e 	bne.w	800133c <_svfprintf_r+0x7f4>
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	f040 853c 	bne.w	800179e <_svfprintf_r+0xc56>
 8000d26:	f01b 0301 	ands.w	r3, fp, #1
 8000d2a:	9308      	str	r3, [sp, #32]
 8000d2c:	f000 85af 	beq.w	800188e <_svfprintf_r+0xd46>
 8000d30:	2330      	movs	r3, #48	; 0x30
 8000d32:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
 8000d36:	f10d 06a7 	add.w	r6, sp, #167	; 0xa7
 8000d3a:	e29b      	b.n	8001274 <_svfprintf_r+0x72c>
 8000d3c:	ebb4 0509 	subs.w	r5, r4, r9
 8000d40:	f000 80b7 	beq.w	8000eb2 <_svfprintf_r+0x36a>
 8000d44:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8000d46:	442b      	add	r3, r5
 8000d48:	931f      	str	r3, [sp, #124]	; 0x7c
 8000d4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	2b07      	cmp	r3, #7
 8000d50:	e9ca 9500 	strd	r9, r5, [sl]
 8000d54:	931e      	str	r3, [sp, #120]	; 0x78
 8000d56:	dc05      	bgt.n	8000d64 <_svfprintf_r+0x21c>
 8000d58:	f10a 0a08 	add.w	sl, sl, #8
 8000d5c:	9b06      	ldr	r3, [sp, #24]
 8000d5e:	442b      	add	r3, r5
 8000d60:	9306      	str	r3, [sp, #24]
 8000d62:	e72c      	b.n	8000bbe <_svfprintf_r+0x76>
 8000d64:	ee19 0a10 	vmov	r0, s18
 8000d68:	aa1d      	add	r2, sp, #116	; 0x74
 8000d6a:	4641      	mov	r1, r8
 8000d6c:	f005 fe92 	bl	8006a94 <__ssprint_r>
 8000d70:	b918      	cbnz	r0, 8000d7a <_svfprintf_r+0x232>
 8000d72:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8000d76:	e7f1      	b.n	8000d5c <_svfprintf_r+0x214>
 8000d78:	46b0      	mov	r8, r6
 8000d7a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8000d7e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000d82:	9b06      	ldr	r3, [sp, #24]
 8000d84:	bf18      	it	ne
 8000d86:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8000d8a:	9306      	str	r3, [sp, #24]
 8000d8c:	9806      	ldr	r0, [sp, #24]
 8000d8e:	b03b      	add	sp, #236	; 0xec
 8000d90:	ecbd 8b06 	vpop	{d8-d10}
 8000d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f040 87e9 	bne.w	8001d78 <_svfprintf_r+0x1230>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 8083 	beq.w	8000eb2 <_svfprintf_r+0x36a>
 8000dac:	2300      	movs	r3, #0
 8000dae:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
 8000db2:	2301      	movs	r3, #1
 8000db4:	f88d 5080 	strb.w	r5, [sp, #128]	; 0x80
 8000db8:	9304      	str	r3, [sp, #16]
 8000dba:	9308      	str	r3, [sp, #32]
 8000dbc:	ae20      	add	r6, sp, #128	; 0x80
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f8cd b00c 	str.w	fp, [sp, #12]
 8000dc4:	9305      	str	r3, [sp, #20]
 8000dc6:	930a      	str	r3, [sp, #40]	; 0x28
 8000dc8:	9b03      	ldr	r3, [sp, #12]
 8000dca:	f013 0302 	ands.w	r3, r3, #2
 8000dce:	d002      	beq.n	8000dd6 <_svfprintf_r+0x28e>
 8000dd0:	9a04      	ldr	r2, [sp, #16]
 8000dd2:	3202      	adds	r2, #2
 8000dd4:	9204      	str	r2, [sp, #16]
 8000dd6:	9a03      	ldr	r2, [sp, #12]
 8000dd8:	f012 0b84 	ands.w	fp, r2, #132	; 0x84
 8000ddc:	d105      	bne.n	8000dea <_svfprintf_r+0x2a2>
 8000dde:	9a07      	ldr	r2, [sp, #28]
 8000de0:	9904      	ldr	r1, [sp, #16]
 8000de2:	1a57      	subs	r7, r2, r1
 8000de4:	2f00      	cmp	r7, #0
 8000de6:	f300 83a0 	bgt.w	800152a <_svfprintf_r+0x9e2>
 8000dea:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8000dec:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 8000df0:	b18a      	cbz	r2, 8000e16 <_svfprintf_r+0x2ce>
 8000df2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8000df4:	f10d 0157 	add.w	r1, sp, #87	; 0x57
 8000df8:	3201      	adds	r2, #1
 8000dfa:	3401      	adds	r4, #1
 8000dfc:	f8ca 1000 	str.w	r1, [sl]
 8000e00:	2a07      	cmp	r2, #7
 8000e02:	f04f 0101 	mov.w	r1, #1
 8000e06:	941f      	str	r4, [sp, #124]	; 0x7c
 8000e08:	921e      	str	r2, [sp, #120]	; 0x78
 8000e0a:	f8ca 1004 	str.w	r1, [sl, #4]
 8000e0e:	f300 83d9 	bgt.w	80015c4 <_svfprintf_r+0xa7c>
 8000e12:	f10a 0a08 	add.w	sl, sl, #8
 8000e16:	b183      	cbz	r3, 8000e3a <_svfprintf_r+0x2f2>
 8000e18:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8000e1a:	aa16      	add	r2, sp, #88	; 0x58
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	3402      	adds	r4, #2
 8000e20:	f8ca 2000 	str.w	r2, [sl]
 8000e24:	2b07      	cmp	r3, #7
 8000e26:	f04f 0202 	mov.w	r2, #2
 8000e2a:	941f      	str	r4, [sp, #124]	; 0x7c
 8000e2c:	931e      	str	r3, [sp, #120]	; 0x78
 8000e2e:	f8ca 2004 	str.w	r2, [sl, #4]
 8000e32:	f300 83d6 	bgt.w	80015e2 <_svfprintf_r+0xa9a>
 8000e36:	f10a 0a08 	add.w	sl, sl, #8
 8000e3a:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 8000e3e:	f000 8299 	beq.w	8001374 <_svfprintf_r+0x82c>
 8000e42:	9b05      	ldr	r3, [sp, #20]
 8000e44:	9a08      	ldr	r2, [sp, #32]
 8000e46:	eba3 0b02 	sub.w	fp, r3, r2
 8000e4a:	f1bb 0f00 	cmp.w	fp, #0
 8000e4e:	f300 82d4 	bgt.w	80013fa <_svfprintf_r+0x8b2>
 8000e52:	9b03      	ldr	r3, [sp, #12]
 8000e54:	05df      	lsls	r7, r3, #23
 8000e56:	f100 8216 	bmi.w	8001286 <_svfprintf_r+0x73e>
 8000e5a:	9b08      	ldr	r3, [sp, #32]
 8000e5c:	f8ca 3004 	str.w	r3, [sl, #4]
 8000e60:	441c      	add	r4, r3
 8000e62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8000e64:	f8ca 6000 	str.w	r6, [sl]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	2b07      	cmp	r3, #7
 8000e6c:	941f      	str	r4, [sp, #124]	; 0x7c
 8000e6e:	931e      	str	r3, [sp, #120]	; 0x78
 8000e70:	f300 834e 	bgt.w	8001510 <_svfprintf_r+0x9c8>
 8000e74:	f10a 0a08 	add.w	sl, sl, #8
 8000e78:	9b03      	ldr	r3, [sp, #12]
 8000e7a:	075b      	lsls	r3, r3, #29
 8000e7c:	d505      	bpl.n	8000e8a <_svfprintf_r+0x342>
 8000e7e:	9b07      	ldr	r3, [sp, #28]
 8000e80:	9a04      	ldr	r2, [sp, #16]
 8000e82:	1a9d      	subs	r5, r3, r2
 8000e84:	2d00      	cmp	r5, #0
 8000e86:	f300 83b9 	bgt.w	80015fc <_svfprintf_r+0xab4>
 8000e8a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8000e8e:	9904      	ldr	r1, [sp, #16]
 8000e90:	428a      	cmp	r2, r1
 8000e92:	bfac      	ite	ge
 8000e94:	189b      	addge	r3, r3, r2
 8000e96:	185b      	addlt	r3, r3, r1
 8000e98:	9306      	str	r3, [sp, #24]
 8000e9a:	2c00      	cmp	r4, #0
 8000e9c:	f040 82e8 	bne.w	8001470 <_svfprintf_r+0x928>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	931e      	str	r3, [sp, #120]	; 0x78
 8000ea4:	f899 3000 	ldrb.w	r3, [r9]
 8000ea8:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f47f ae79 	bne.w	8000ba4 <_svfprintf_r+0x5c>
 8000eb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f43f af60 	beq.w	8000d7a <_svfprintf_r+0x232>
 8000eba:	ee19 0a10 	vmov	r0, s18
 8000ebe:	aa1d      	add	r2, sp, #116	; 0x74
 8000ec0:	4641      	mov	r1, r8
 8000ec2:	f005 fde7 	bl	8006a94 <__ssprint_r>
 8000ec6:	e758      	b.n	8000d7a <_svfprintf_r+0x232>
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f041 8006 	bne.w	8001eda <_svfprintf_r+0x1392>
 8000ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ed0:	3307      	adds	r3, #7
 8000ed2:	f023 0307 	bic.w	r3, r3, #7
 8000ed6:	ecb3 7b02 	vldmia	r3!, {d7}
 8000eda:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8000ede:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 8000ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8000ee4:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8000ee8:	ee08 3a90 	vmov	s17, r3
 8000eec:	ee08 6a10 	vmov	s16, r6
 8000ef0:	4bb6      	ldr	r3, [pc, #728]	; (80011cc <_svfprintf_r+0x684>)
 8000ef2:	ec51 0b18 	vmov	r0, r1, d8
 8000ef6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000efa:	f008 fbd5 	bl	80096a8 <__aeabi_dcmpun>
 8000efe:	2800      	cmp	r0, #0
 8000f00:	f040 84c7 	bne.w	8001892 <_svfprintf_r+0xd4a>
 8000f04:	4bb1      	ldr	r3, [pc, #708]	; (80011cc <_svfprintf_r+0x684>)
 8000f06:	ec51 0b18 	vmov	r0, r1, d8
 8000f0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f0e:	f008 fbad 	bl	800966c <__aeabi_dcmple>
 8000f12:	2800      	cmp	r0, #0
 8000f14:	f040 84bd 	bne.w	8001892 <_svfprintf_r+0xd4a>
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	4630      	mov	r0, r6
 8000f1e:	4639      	mov	r1, r7
 8000f20:	f008 fb9a 	bl	8009658 <__aeabi_dcmplt>
 8000f24:	2800      	cmp	r0, #0
 8000f26:	f040 86fc 	bne.w	8001d22 <_svfprintf_r+0x11da>
 8000f2a:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8000f2e:	4ea8      	ldr	r6, [pc, #672]	; (80011d0 <_svfprintf_r+0x688>)
 8000f30:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
 8000f34:	9303      	str	r3, [sp, #12]
 8000f36:	4ba7      	ldr	r3, [pc, #668]	; (80011d4 <_svfprintf_r+0x68c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2d47      	cmp	r5, #71	; 0x47
 8000f3c:	bfc8      	it	gt
 8000f3e:	461e      	movgt	r6, r3
 8000f40:	2303      	movs	r3, #3
 8000f42:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8000f46:	9308      	str	r3, [sp, #32]
 8000f48:	920a      	str	r2, [sp, #40]	; 0x28
 8000f4a:	2c00      	cmp	r4, #0
 8000f4c:	f43f af3c 	beq.w	8000dc8 <_svfprintf_r+0x280>
 8000f50:	9b04      	ldr	r3, [sp, #16]
 8000f52:	3301      	adds	r3, #1
 8000f54:	9304      	str	r3, [sp, #16]
 8000f56:	e737      	b.n	8000dc8 <_svfprintf_r+0x280>
 8000f58:	f01b 0310 	ands.w	r3, fp, #16
 8000f5c:	d148      	bne.n	8000ff0 <_svfprintf_r+0x4a8>
 8000f5e:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 8000f62:	d045      	beq.n	8000ff0 <_svfprintf_r+0x4a8>
 8000f64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000f66:	f852 0b04 	ldr.w	r0, [r2], #4
 8000f6a:	9209      	str	r2, [sp, #36]	; 0x24
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	b280      	uxth	r0, r0
 8000f70:	e6c5      	b.n	8000cfe <_svfprintf_r+0x1b6>
 8000f72:	f01b 0310 	ands.w	r3, fp, #16
 8000f76:	d141      	bne.n	8000ffc <_svfprintf_r+0x4b4>
 8000f78:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 8000f7c:	d03e      	beq.n	8000ffc <_svfprintf_r+0x4b4>
 8000f7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000f80:	f852 0b04 	ldr.w	r0, [r2], #4
 8000f84:	9209      	str	r2, [sp, #36]	; 0x24
 8000f86:	4619      	mov	r1, r3
 8000f88:	b280      	uxth	r0, r0
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e6b7      	b.n	8000cfe <_svfprintf_r+0x1b6>
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f040 87a7 	bne.w	8001ee2 <_svfprintf_r+0x139a>
 8000f94:	f01b 0f20 	tst.w	fp, #32
 8000f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f9a:	d068      	beq.n	800106e <_svfprintf_r+0x526>
 8000f9c:	3307      	adds	r3, #7
 8000f9e:	f023 0307 	bic.w	r3, r3, #7
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f852 0b08 	ldr.w	r0, [r2], #8
 8000faa:	9209      	str	r2, [sp, #36]	; 0x24
 8000fac:	4619      	mov	r1, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f2c0 843d 	blt.w	800182e <_svfprintf_r+0xce6>
 8000fb4:	9b05      	ldr	r3, [sp, #20]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	f000 8585 	beq.w	8001ac6 <_svfprintf_r+0xf7e>
 8000fbc:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
 8000fc0:	9303      	str	r3, [sp, #12]
 8000fc2:	ea50 0301 	orrs.w	r3, r0, r1
 8000fc6:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8000fca:	f000 83e4 	beq.w	8001796 <_svfprintf_r+0xc4e>
 8000fce:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8000fd2:	280a      	cmp	r0, #10
 8000fd4:	f171 0300 	sbcs.w	r3, r1, #0
 8000fd8:	f080 8510 	bcs.w	80019fc <_svfprintf_r+0xeb4>
 8000fdc:	3030      	adds	r0, #48	; 0x30
 8000fde:	2301      	movs	r3, #1
 8000fe0:	f88d 00a7 	strb.w	r0, [sp, #167]	; 0xa7
 8000fe4:	f8cd b00c 	str.w	fp, [sp, #12]
 8000fe8:	9308      	str	r3, [sp, #32]
 8000fea:	f10d 06a7 	add.w	r6, sp, #167	; 0xa7
 8000fee:	e141      	b.n	8001274 <_svfprintf_r+0x72c>
 8000ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ff2:	f853 0b04 	ldr.w	r0, [r3], #4
 8000ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	e680      	b.n	8000cfe <_svfprintf_r+0x1b6>
 8000ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ffe:	f853 0b04 	ldr.w	r0, [r3], #4
 8001002:	9309      	str	r3, [sp, #36]	; 0x24
 8001004:	2301      	movs	r3, #1
 8001006:	e67a      	b.n	8000cfe <_svfprintf_r+0x1b6>
 8001008:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800100a:	f852 1b04 	ldr.w	r1, [r2], #4
 800100e:	9107      	str	r1, [sp, #28]
 8001010:	2900      	cmp	r1, #0
 8001012:	f280 8437 	bge.w	8001884 <_svfprintf_r+0xd3c>
 8001016:	9907      	ldr	r1, [sp, #28]
 8001018:	9209      	str	r2, [sp, #36]	; 0x24
 800101a:	4249      	negs	r1, r1
 800101c:	9107      	str	r1, [sp, #28]
 800101e:	f899 5000 	ldrb.w	r5, [r9]
 8001022:	f04b 0b04 	orr.w	fp, fp, #4
 8001026:	e5da      	b.n	8000bde <_svfprintf_r+0x96>
 8001028:	4649      	mov	r1, r9
 800102a:	f811 5b01 	ldrb.w	r5, [r1], #1
 800102e:	2d2a      	cmp	r5, #42	; 0x2a
 8001030:	f000 87c7 	beq.w	8001fc2 <_svfprintf_r+0x147a>
 8001034:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8001038:	2a09      	cmp	r2, #9
 800103a:	4689      	mov	r9, r1
 800103c:	bf98      	it	ls
 800103e:	2100      	movls	r1, #0
 8001040:	f200 873b 	bhi.w	8001eba <_svfprintf_r+0x1372>
 8001044:	f819 5b01 	ldrb.w	r5, [r9], #1
 8001048:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800104c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8001050:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8001054:	2a09      	cmp	r2, #9
 8001056:	d9f5      	bls.n	8001044 <_svfprintf_r+0x4fc>
 8001058:	9105      	str	r1, [sp, #20]
 800105a:	e5c2      	b.n	8000be2 <_svfprintf_r+0x9a>
 800105c:	2b00      	cmp	r3, #0
 800105e:	f040 8744 	bne.w	8001eea <_svfprintf_r+0x13a2>
 8001062:	f04b 0b10 	orr.w	fp, fp, #16
 8001066:	f01b 0f20 	tst.w	fp, #32
 800106a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800106c:	d196      	bne.n	8000f9c <_svfprintf_r+0x454>
 800106e:	f853 0b04 	ldr.w	r0, [r3], #4
 8001072:	9309      	str	r3, [sp, #36]	; 0x24
 8001074:	f01b 0f10 	tst.w	fp, #16
 8001078:	f040 83d4 	bne.w	8001824 <_svfprintf_r+0xcdc>
 800107c:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8001080:	f000 83d0 	beq.w	8001824 <_svfprintf_r+0xcdc>
 8001084:	f340 31c0 	sbfx	r1, r0, #15, #1
 8001088:	460b      	mov	r3, r1
 800108a:	b200      	sxth	r0, r0
 800108c:	e78f      	b.n	8000fae <_svfprintf_r+0x466>
 800108e:	f899 5000 	ldrb.w	r5, [r9]
 8001092:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8001096:	e5a2      	b.n	8000bde <_svfprintf_r+0x96>
 8001098:	f899 5000 	ldrb.w	r5, [r9]
 800109c:	2301      	movs	r3, #1
 800109e:	202b      	movs	r0, #43	; 0x2b
 80010a0:	e59d      	b.n	8000bde <_svfprintf_r+0x96>
 80010a2:	f899 5000 	ldrb.w	r5, [r9]
 80010a6:	f04b 0b01 	orr.w	fp, fp, #1
 80010aa:	e598      	b.n	8000bde <_svfprintf_r+0x96>
 80010ac:	f899 5000 	ldrb.w	r5, [r9]
 80010b0:	2800      	cmp	r0, #0
 80010b2:	f47f ad94 	bne.w	8000bde <_svfprintf_r+0x96>
 80010b6:	2301      	movs	r3, #1
 80010b8:	2020      	movs	r0, #32
 80010ba:	e590      	b.n	8000bde <_svfprintf_r+0x96>
 80010bc:	f899 5000 	ldrb.w	r5, [r9]
 80010c0:	f04b 0b08 	orr.w	fp, fp, #8
 80010c4:	e58b      	b.n	8000bde <_svfprintf_r+0x96>
 80010c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010c8:	2200      	movs	r2, #0
 80010ca:	f88d 2057 	strb.w	r2, [sp, #87]	; 0x57
 80010ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80010d2:	9309      	str	r3, [sp, #36]	; 0x24
 80010d4:	2301      	movs	r3, #1
 80010d6:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
 80010da:	9304      	str	r3, [sp, #16]
 80010dc:	9308      	str	r3, [sp, #32]
 80010de:	ae20      	add	r6, sp, #128	; 0x80
 80010e0:	e66d      	b.n	8000dbe <_svfprintf_r+0x276>
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f040 86f1 	bne.w	8001eca <_svfprintf_r+0x1382>
 80010e8:	4b3b      	ldr	r3, [pc, #236]	; (80011d8 <_svfprintf_r+0x690>)
 80010ea:	930e      	str	r3, [sp, #56]	; 0x38
 80010ec:	f01b 0120 	ands.w	r1, fp, #32
 80010f0:	d025      	beq.n	800113e <_svfprintf_r+0x5f6>
 80010f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010f4:	3307      	adds	r3, #7
 80010f6:	f023 0307 	bic.w	r3, r3, #7
 80010fa:	6859      	ldr	r1, [r3, #4]
 80010fc:	f853 0b08 	ldr.w	r0, [r3], #8
 8001100:	9309      	str	r3, [sp, #36]	; 0x24
 8001102:	f01b 0f01 	tst.w	fp, #1
 8001106:	d00b      	beq.n	8001120 <_svfprintf_r+0x5d8>
 8001108:	ea50 0301 	orrs.w	r3, r0, r1
 800110c:	d008      	beq.n	8001120 <_svfprintf_r+0x5d8>
 800110e:	2330      	movs	r3, #48	; 0x30
 8001110:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8001114:	f88d 5059 	strb.w	r5, [sp, #89]	; 0x59
 8001118:	f04b 0b02 	orr.w	fp, fp, #2
 800111c:	2302      	movs	r3, #2
 800111e:	e5ee      	b.n	8000cfe <_svfprintf_r+0x1b6>
 8001120:	2302      	movs	r3, #2
 8001122:	e5ec      	b.n	8000cfe <_svfprintf_r+0x1b6>
 8001124:	f899 5000 	ldrb.w	r5, [r9]
 8001128:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 800112c:	e557      	b.n	8000bde <_svfprintf_r+0x96>
 800112e:	2b00      	cmp	r3, #0
 8001130:	f040 86c7 	bne.w	8001ec2 <_svfprintf_r+0x137a>
 8001134:	4b29      	ldr	r3, [pc, #164]	; (80011dc <_svfprintf_r+0x694>)
 8001136:	930e      	str	r3, [sp, #56]	; 0x38
 8001138:	f01b 0120 	ands.w	r1, fp, #32
 800113c:	d1d9      	bne.n	80010f2 <_svfprintf_r+0x5aa>
 800113e:	f01b 0310 	ands.w	r3, fp, #16
 8001142:	f040 836a 	bne.w	800181a <_svfprintf_r+0xcd2>
 8001146:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 800114a:	f000 8366 	beq.w	800181a <_svfprintf_r+0xcd2>
 800114e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001150:	f852 0b04 	ldr.w	r0, [r2], #4
 8001154:	9209      	str	r2, [sp, #36]	; 0x24
 8001156:	4619      	mov	r1, r3
 8001158:	b280      	uxth	r0, r0
 800115a:	e7d2      	b.n	8001102 <_svfprintf_r+0x5ba>
 800115c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800115e:	9b05      	ldr	r3, [sp, #20]
 8001160:	f854 6b04 	ldr.w	r6, [r4], #4
 8001164:	2700      	movs	r7, #0
 8001166:	f88d 7057 	strb.w	r7, [sp, #87]	; 0x57
 800116a:	2e00      	cmp	r6, #0
 800116c:	f000 84e5 	beq.w	8001b3a <_svfprintf_r+0xff2>
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	f000 83fc 	beq.w	800196e <_svfprintf_r+0xe26>
 8001176:	461a      	mov	r2, r3
 8001178:	4639      	mov	r1, r7
 800117a:	4630      	mov	r0, r6
 800117c:	f004 fb40 	bl	8005800 <memchr>
 8001180:	2800      	cmp	r0, #0
 8001182:	f000 8682 	beq.w	8001e8a <_svfprintf_r+0x1342>
 8001186:	1b83      	subs	r3, r0, r6
 8001188:	9308      	str	r3, [sp, #32]
 800118a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800118e:	9409      	str	r4, [sp, #36]	; 0x24
 8001190:	9705      	str	r7, [sp, #20]
 8001192:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8001196:	f8cd b00c 	str.w	fp, [sp, #12]
 800119a:	9304      	str	r3, [sp, #16]
 800119c:	970a      	str	r7, [sp, #40]	; 0x28
 800119e:	e6d4      	b.n	8000f4a <_svfprintf_r+0x402>
 80011a0:	f899 5000 	ldrb.w	r5, [r9]
 80011a4:	f04b 0b20 	orr.w	fp, fp, #32
 80011a8:	e519      	b.n	8000bde <_svfprintf_r+0x96>
 80011aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011ac:	f853 0b04 	ldr.w	r0, [r3], #4
 80011b0:	9309      	str	r3, [sp, #36]	; 0x24
 80011b2:	2330      	movs	r3, #48	; 0x30
 80011b4:	2578      	movs	r5, #120	; 0x78
 80011b6:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <_svfprintf_r+0x694>)
 80011bc:	930e      	str	r3, [sp, #56]	; 0x38
 80011be:	f04b 0b02 	orr.w	fp, fp, #2
 80011c2:	f88d 5059 	strb.w	r5, [sp, #89]	; 0x59
 80011c6:	2100      	movs	r1, #0
 80011c8:	2302      	movs	r3, #2
 80011ca:	e598      	b.n	8000cfe <_svfprintf_r+0x1b6>
 80011cc:	7fefffff 	.word	0x7fefffff
 80011d0:	0801e290 	.word	0x0801e290
 80011d4:	0801e294 	.word	0x0801e294
 80011d8:	0801e2b4 	.word	0x0801e2b4
 80011dc:	0801e2a0 	.word	0x0801e2a0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f040 8676 	bne.w	8001ed2 <_svfprintf_r+0x138a>
 80011e6:	f01b 0f20 	tst.w	fp, #32
 80011ea:	f040 8399 	bne.w	8001920 <_svfprintf_r+0xdd8>
 80011ee:	f01b 0f10 	tst.w	fp, #16
 80011f2:	f040 83f5 	bne.w	80019e0 <_svfprintf_r+0xe98>
 80011f6:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80011fa:	f000 83f1 	beq.w	80019e0 <_svfprintf_r+0xe98>
 80011fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001200:	9906      	ldr	r1, [sp, #24]
 8001202:	f853 2b04 	ldr.w	r2, [r3], #4
 8001206:	9309      	str	r3, [sp, #36]	; 0x24
 8001208:	8011      	strh	r1, [r2, #0]
 800120a:	e4c6      	b.n	8000b9a <_svfprintf_r+0x52>
 800120c:	f899 5000 	ldrb.w	r5, [r9]
 8001210:	2d6c      	cmp	r5, #108	; 0x6c
 8001212:	bf03      	ittte	eq
 8001214:	f899 5001 	ldrbeq.w	r5, [r9, #1]
 8001218:	f04b 0b20 	orreq.w	fp, fp, #32
 800121c:	f109 0901 	addeq.w	r9, r9, #1
 8001220:	f04b 0b10 	orrne.w	fp, fp, #16
 8001224:	e4db      	b.n	8000bde <_svfprintf_r+0x96>
 8001226:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800122a:	2b01      	cmp	r3, #1
 800122c:	f43f aed1 	beq.w	8000fd2 <_svfprintf_r+0x48a>
 8001230:	2b02      	cmp	r3, #2
 8001232:	f000 808b 	beq.w	800134c <_svfprintf_r+0x804>
 8001236:	ae2a      	add	r6, sp, #168	; 0xa8
 8001238:	f000 0307 	and.w	r3, r0, #7
 800123c:	08c0      	lsrs	r0, r0, #3
 800123e:	ea40 7041 	orr.w	r0, r0, r1, lsl #29
 8001242:	08c9      	lsrs	r1, r1, #3
 8001244:	3330      	adds	r3, #48	; 0x30
 8001246:	ea50 0701 	orrs.w	r7, r0, r1
 800124a:	4632      	mov	r2, r6
 800124c:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8001250:	d1f2      	bne.n	8001238 <_svfprintf_r+0x6f0>
 8001252:	f01b 0f01 	tst.w	fp, #1
 8001256:	f000 8087 	beq.w	8001368 <_svfprintf_r+0x820>
 800125a:	2b30      	cmp	r3, #48	; 0x30
 800125c:	f000 8084 	beq.w	8001368 <_svfprintf_r+0x820>
 8001260:	2330      	movs	r3, #48	; 0x30
 8001262:	3a02      	subs	r2, #2
 8001264:	f806 3c01 	strb.w	r3, [r6, #-1]
 8001268:	ab2a      	add	r3, sp, #168	; 0xa8
 800126a:	1a9b      	subs	r3, r3, r2
 800126c:	f8cd b00c 	str.w	fp, [sp, #12]
 8001270:	9308      	str	r3, [sp, #32]
 8001272:	4616      	mov	r6, r2
 8001274:	9b05      	ldr	r3, [sp, #20]
 8001276:	9a08      	ldr	r2, [sp, #32]
 8001278:	4293      	cmp	r3, r2
 800127a:	bfb8      	it	lt
 800127c:	4613      	movlt	r3, r2
 800127e:	9304      	str	r3, [sp, #16]
 8001280:	2300      	movs	r3, #0
 8001282:	930a      	str	r3, [sp, #40]	; 0x28
 8001284:	e661      	b.n	8000f4a <_svfprintf_r+0x402>
 8001286:	2d65      	cmp	r5, #101	; 0x65
 8001288:	f340 80fc 	ble.w	8001484 <_svfprintf_r+0x93c>
 800128c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001290:	2200      	movs	r2, #0
 8001292:	2300      	movs	r3, #0
 8001294:	f008 f9d6 	bl	8009644 <__aeabi_dcmpeq>
 8001298:	2800      	cmp	r0, #0
 800129a:	f000 81ea 	beq.w	8001672 <_svfprintf_r+0xb2a>
 800129e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80012a0:	4aaa      	ldr	r2, [pc, #680]	; (800154c <_svfprintf_r+0xa04>)
 80012a2:	f8ca 2000 	str.w	r2, [sl]
 80012a6:	3301      	adds	r3, #1
 80012a8:	3401      	adds	r4, #1
 80012aa:	2201      	movs	r2, #1
 80012ac:	2b07      	cmp	r3, #7
 80012ae:	941f      	str	r4, [sp, #124]	; 0x7c
 80012b0:	931e      	str	r3, [sp, #120]	; 0x78
 80012b2:	f8ca 2004 	str.w	r2, [sl, #4]
 80012b6:	f300 8416 	bgt.w	8001ae6 <_svfprintf_r+0xf9e>
 80012ba:	f10a 0a08 	add.w	sl, sl, #8
 80012be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80012c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80012c2:	4293      	cmp	r3, r2
 80012c4:	db03      	blt.n	80012ce <_svfprintf_r+0x786>
 80012c6:	9b03      	ldr	r3, [sp, #12]
 80012c8:	07d8      	lsls	r0, r3, #31
 80012ca:	f57f add5 	bpl.w	8000e78 <_svfprintf_r+0x330>
 80012ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80012d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80012d2:	441c      	add	r4, r3
 80012d4:	e9ca 2300 	strd	r2, r3, [sl]
 80012d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80012da:	941f      	str	r4, [sp, #124]	; 0x7c
 80012dc:	3301      	adds	r3, #1
 80012de:	2b07      	cmp	r3, #7
 80012e0:	931e      	str	r3, [sp, #120]	; 0x78
 80012e2:	f300 841c 	bgt.w	8001b1e <_svfprintf_r+0xfd6>
 80012e6:	f10a 0a08 	add.w	sl, sl, #8
 80012ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80012ec:	1e5d      	subs	r5, r3, #1
 80012ee:	2d00      	cmp	r5, #0
 80012f0:	f77f adc2 	ble.w	8000e78 <_svfprintf_r+0x330>
 80012f4:	2d10      	cmp	r5, #16
 80012f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80012f8:	4f95      	ldr	r7, [pc, #596]	; (8001550 <_svfprintf_r+0xa08>)
 80012fa:	f340 83e8 	ble.w	8001ace <_svfprintf_r+0xf86>
 80012fe:	ee19 ba10 	vmov	fp, s18
 8001302:	2610      	movs	r6, #16
 8001304:	e005      	b.n	8001312 <_svfprintf_r+0x7ca>
 8001306:	f10a 0a08 	add.w	sl, sl, #8
 800130a:	3d10      	subs	r5, #16
 800130c:	2d10      	cmp	r5, #16
 800130e:	f340 83de 	ble.w	8001ace <_svfprintf_r+0xf86>
 8001312:	3301      	adds	r3, #1
 8001314:	3410      	adds	r4, #16
 8001316:	2b07      	cmp	r3, #7
 8001318:	e9ca 7600 	strd	r7, r6, [sl]
 800131c:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8001320:	ddf1      	ble.n	8001306 <_svfprintf_r+0x7be>
 8001322:	aa1d      	add	r2, sp, #116	; 0x74
 8001324:	4641      	mov	r1, r8
 8001326:	4658      	mov	r0, fp
 8001328:	f005 fbb4 	bl	8006a94 <__ssprint_r>
 800132c:	2800      	cmp	r0, #0
 800132e:	f47f ad24 	bne.w	8000d7a <_svfprintf_r+0x232>
 8001332:	e9dd 341e 	ldrd	r3, r4, [sp, #120]	; 0x78
 8001336:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800133a:	e7e6      	b.n	800130a <_svfprintf_r+0x7c2>
 800133c:	2b01      	cmp	r3, #1
 800133e:	f000 856f 	beq.w	8001e20 <_svfprintf_r+0x12d8>
 8001342:	2b02      	cmp	r3, #2
 8001344:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8001348:	f47f af75 	bne.w	8001236 <_svfprintf_r+0x6ee>
 800134c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800134e:	ae2a      	add	r6, sp, #168	; 0xa8
 8001350:	f000 030f 	and.w	r3, r0, #15
 8001354:	0900      	lsrs	r0, r0, #4
 8001356:	5cd3      	ldrb	r3, [r2, r3]
 8001358:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800135c:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8001360:	0909      	lsrs	r1, r1, #4
 8001362:	ea50 0301 	orrs.w	r3, r0, r1
 8001366:	d1f3      	bne.n	8001350 <_svfprintf_r+0x808>
 8001368:	ab2a      	add	r3, sp, #168	; 0xa8
 800136a:	1b9b      	subs	r3, r3, r6
 800136c:	f8cd b00c 	str.w	fp, [sp, #12]
 8001370:	9308      	str	r3, [sp, #32]
 8001372:	e77f      	b.n	8001274 <_svfprintf_r+0x72c>
 8001374:	9b07      	ldr	r3, [sp, #28]
 8001376:	9a04      	ldr	r2, [sp, #16]
 8001378:	eba3 0b02 	sub.w	fp, r3, r2
 800137c:	f1bb 0f00 	cmp.w	fp, #0
 8001380:	f77f ad5f 	ble.w	8000e42 <_svfprintf_r+0x2fa>
 8001384:	f1bb 0f10 	cmp.w	fp, #16
 8001388:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800138a:	4f71      	ldr	r7, [pc, #452]	; (8001550 <_svfprintf_r+0xa08>)
 800138c:	dd27      	ble.n	80013de <_svfprintf_r+0x896>
 800138e:	4621      	mov	r1, r4
 8001390:	2310      	movs	r3, #16
 8001392:	ee19 4a10 	vmov	r4, s18
 8001396:	e006      	b.n	80013a6 <_svfprintf_r+0x85e>
 8001398:	f1ab 0b10 	sub.w	fp, fp, #16
 800139c:	f1bb 0f10 	cmp.w	fp, #16
 80013a0:	f10a 0a08 	add.w	sl, sl, #8
 80013a4:	dd1a      	ble.n	80013dc <_svfprintf_r+0x894>
 80013a6:	3201      	adds	r2, #1
 80013a8:	3110      	adds	r1, #16
 80013aa:	2a07      	cmp	r2, #7
 80013ac:	e9ca 7300 	strd	r7, r3, [sl]
 80013b0:	e9cd 211e 	strd	r2, r1, [sp, #120]	; 0x78
 80013b4:	ddf0      	ble.n	8001398 <_svfprintf_r+0x850>
 80013b6:	aa1d      	add	r2, sp, #116	; 0x74
 80013b8:	4641      	mov	r1, r8
 80013ba:	4620      	mov	r0, r4
 80013bc:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80013c0:	f005 fb68 	bl	8006a94 <__ssprint_r>
 80013c4:	2800      	cmp	r0, #0
 80013c6:	f47f acd8 	bne.w	8000d7a <_svfprintf_r+0x232>
 80013ca:	f1ab 0b10 	sub.w	fp, fp, #16
 80013ce:	f1bb 0f10 	cmp.w	fp, #16
 80013d2:	e9dd 211e 	ldrd	r2, r1, [sp, #120]	; 0x78
 80013d6:	f04f 0310 	mov.w	r3, #16
 80013da:	dce4      	bgt.n	80013a6 <_svfprintf_r+0x85e>
 80013dc:	460c      	mov	r4, r1
 80013de:	3201      	adds	r2, #1
 80013e0:	445c      	add	r4, fp
 80013e2:	2a07      	cmp	r2, #7
 80013e4:	e9cd 241e 	strd	r2, r4, [sp, #120]	; 0x78
 80013e8:	f8ca 7000 	str.w	r7, [sl]
 80013ec:	f8ca b004 	str.w	fp, [sl, #4]
 80013f0:	f300 8387 	bgt.w	8001b02 <_svfprintf_r+0xfba>
 80013f4:	f10a 0a08 	add.w	sl, sl, #8
 80013f8:	e523      	b.n	8000e42 <_svfprintf_r+0x2fa>
 80013fa:	f1bb 0f10 	cmp.w	fp, #16
 80013fe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8001400:	4f53      	ldr	r7, [pc, #332]	; (8001550 <_svfprintf_r+0xa08>)
 8001402:	dd27      	ble.n	8001454 <_svfprintf_r+0x90c>
 8001404:	4621      	mov	r1, r4
 8001406:	2310      	movs	r3, #16
 8001408:	ee19 4a10 	vmov	r4, s18
 800140c:	e006      	b.n	800141c <_svfprintf_r+0x8d4>
 800140e:	f1ab 0b10 	sub.w	fp, fp, #16
 8001412:	f1bb 0f10 	cmp.w	fp, #16
 8001416:	f10a 0a08 	add.w	sl, sl, #8
 800141a:	dd1a      	ble.n	8001452 <_svfprintf_r+0x90a>
 800141c:	3201      	adds	r2, #1
 800141e:	3110      	adds	r1, #16
 8001420:	2a07      	cmp	r2, #7
 8001422:	e9ca 7300 	strd	r7, r3, [sl]
 8001426:	e9cd 211e 	strd	r2, r1, [sp, #120]	; 0x78
 800142a:	ddf0      	ble.n	800140e <_svfprintf_r+0x8c6>
 800142c:	aa1d      	add	r2, sp, #116	; 0x74
 800142e:	4641      	mov	r1, r8
 8001430:	4620      	mov	r0, r4
 8001432:	f005 fb2f 	bl	8006a94 <__ssprint_r>
 8001436:	2800      	cmp	r0, #0
 8001438:	f47f ac9f 	bne.w	8000d7a <_svfprintf_r+0x232>
 800143c:	f1ab 0b10 	sub.w	fp, fp, #16
 8001440:	f1bb 0f10 	cmp.w	fp, #16
 8001444:	e9dd 211e 	ldrd	r2, r1, [sp, #120]	; 0x78
 8001448:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800144c:	f04f 0310 	mov.w	r3, #16
 8001450:	dce4      	bgt.n	800141c <_svfprintf_r+0x8d4>
 8001452:	460c      	mov	r4, r1
 8001454:	3201      	adds	r2, #1
 8001456:	445c      	add	r4, fp
 8001458:	2a07      	cmp	r2, #7
 800145a:	e9cd 241e 	strd	r2, r4, [sp, #120]	; 0x78
 800145e:	f8ca 7000 	str.w	r7, [sl]
 8001462:	f8ca b004 	str.w	fp, [sl, #4]
 8001466:	f300 81ca 	bgt.w	80017fe <_svfprintf_r+0xcb6>
 800146a:	f10a 0a08 	add.w	sl, sl, #8
 800146e:	e4f0      	b.n	8000e52 <_svfprintf_r+0x30a>
 8001470:	ee19 0a10 	vmov	r0, s18
 8001474:	aa1d      	add	r2, sp, #116	; 0x74
 8001476:	4641      	mov	r1, r8
 8001478:	f005 fb0c 	bl	8006a94 <__ssprint_r>
 800147c:	2800      	cmp	r0, #0
 800147e:	f43f ad0f 	beq.w	8000ea0 <_svfprintf_r+0x358>
 8001482:	e47a      	b.n	8000d7a <_svfprintf_r+0x232>
 8001484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001486:	2b01      	cmp	r3, #1
 8001488:	f340 8166 	ble.w	8001758 <_svfprintf_r+0xc10>
 800148c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800148e:	f8ca 6000 	str.w	r6, [sl]
 8001492:	3501      	adds	r5, #1
 8001494:	3401      	adds	r4, #1
 8001496:	2301      	movs	r3, #1
 8001498:	2d07      	cmp	r5, #7
 800149a:	941f      	str	r4, [sp, #124]	; 0x7c
 800149c:	951e      	str	r5, [sp, #120]	; 0x78
 800149e:	f8ca 3004 	str.w	r3, [sl, #4]
 80014a2:	f300 81ce 	bgt.w	8001842 <_svfprintf_r+0xcfa>
 80014a6:	f10a 0a08 	add.w	sl, sl, #8
 80014aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80014ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80014ae:	3501      	adds	r5, #1
 80014b0:	441c      	add	r4, r3
 80014b2:	2d07      	cmp	r5, #7
 80014b4:	e9ca 2300 	strd	r2, r3, [sl]
 80014b8:	e9cd 541e 	strd	r5, r4, [sp, #120]	; 0x78
 80014bc:	f300 81d4 	bgt.w	8001868 <_svfprintf_r+0xd20>
 80014c0:	f10a 0a08 	add.w	sl, sl, #8
 80014c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80014c8:	2200      	movs	r2, #0
 80014ca:	2300      	movs	r3, #0
 80014cc:	f008 f8ba 	bl	8009644 <__aeabi_dcmpeq>
 80014d0:	2800      	cmp	r0, #0
 80014d2:	f040 8169 	bne.w	80017a8 <_svfprintf_r+0xc60>
 80014d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80014d8:	3501      	adds	r5, #1
 80014da:	3b01      	subs	r3, #1
 80014dc:	3601      	adds	r6, #1
 80014de:	441c      	add	r4, r3
 80014e0:	2d07      	cmp	r5, #7
 80014e2:	f8ca 6000 	str.w	r6, [sl]
 80014e6:	951e      	str	r5, [sp, #120]	; 0x78
 80014e8:	f8ca 3004 	str.w	r3, [sl, #4]
 80014ec:	941f      	str	r4, [sp, #124]	; 0x7c
 80014ee:	f300 8144 	bgt.w	800177a <_svfprintf_r+0xc32>
 80014f2:	f10a 0a08 	add.w	sl, sl, #8
 80014f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80014f8:	f8ca 3004 	str.w	r3, [sl, #4]
 80014fc:	3501      	adds	r5, #1
 80014fe:	441c      	add	r4, r3
 8001500:	2d07      	cmp	r5, #7
 8001502:	ab19      	add	r3, sp, #100	; 0x64
 8001504:	e9cd 541e 	strd	r5, r4, [sp, #120]	; 0x78
 8001508:	f8ca 3000 	str.w	r3, [sl]
 800150c:	f77f acb2 	ble.w	8000e74 <_svfprintf_r+0x32c>
 8001510:	ee19 0a10 	vmov	r0, s18
 8001514:	aa1d      	add	r2, sp, #116	; 0x74
 8001516:	4641      	mov	r1, r8
 8001518:	f005 fabc 	bl	8006a94 <__ssprint_r>
 800151c:	2800      	cmp	r0, #0
 800151e:	f47f ac2c 	bne.w	8000d7a <_svfprintf_r+0x232>
 8001522:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001524:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001528:	e4a6      	b.n	8000e78 <_svfprintf_r+0x330>
 800152a:	2f10      	cmp	r7, #16
 800152c:	e9dd 211e 	ldrd	r2, r1, [sp, #120]	; 0x78
 8001530:	dd39      	ble.n	80015a6 <_svfprintf_r+0xa5e>
 8001532:	9312      	str	r3, [sp, #72]	; 0x48
 8001534:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8001538:	2410      	movs	r4, #16
 800153a:	46b1      	mov	r9, r6
 800153c:	460b      	mov	r3, r1
 800153e:	4646      	mov	r6, r8
 8001540:	46b8      	mov	r8, r7
 8001542:	462f      	mov	r7, r5
 8001544:	ee19 5a10 	vmov	r5, s18
 8001548:	e00b      	b.n	8001562 <_svfprintf_r+0xa1a>
 800154a:	bf00      	nop
 800154c:	0801e2d0 	.word	0x0801e2d0
 8001550:	0800ee64 	.word	0x0800ee64
 8001554:	f1a8 0810 	sub.w	r8, r8, #16
 8001558:	f1b8 0f10 	cmp.w	r8, #16
 800155c:	f10a 0a08 	add.w	sl, sl, #8
 8001560:	dd19      	ble.n	8001596 <_svfprintf_r+0xa4e>
 8001562:	3201      	adds	r2, #1
 8001564:	49be      	ldr	r1, [pc, #760]	; (8001860 <_svfprintf_r+0xd18>)
 8001566:	3310      	adds	r3, #16
 8001568:	2a07      	cmp	r2, #7
 800156a:	e9ca 1400 	strd	r1, r4, [sl]
 800156e:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8001572:	ddef      	ble.n	8001554 <_svfprintf_r+0xa0c>
 8001574:	aa1d      	add	r2, sp, #116	; 0x74
 8001576:	4631      	mov	r1, r6
 8001578:	4628      	mov	r0, r5
 800157a:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800157e:	f005 fa89 	bl	8006a94 <__ssprint_r>
 8001582:	2800      	cmp	r0, #0
 8001584:	f47f abf8 	bne.w	8000d78 <_svfprintf_r+0x230>
 8001588:	f1a8 0810 	sub.w	r8, r8, #16
 800158c:	f1b8 0f10 	cmp.w	r8, #16
 8001590:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 8001594:	dce5      	bgt.n	8001562 <_svfprintf_r+0xa1a>
 8001596:	463d      	mov	r5, r7
 8001598:	4619      	mov	r1, r3
 800159a:	4647      	mov	r7, r8
 800159c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800159e:	46b0      	mov	r8, r6
 80015a0:	464e      	mov	r6, r9
 80015a2:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 80015a6:	f8ca 7004 	str.w	r7, [sl, #4]
 80015aa:	3201      	adds	r2, #1
 80015ac:	187c      	adds	r4, r7, r1
 80015ae:	2a07      	cmp	r2, #7
 80015b0:	49ab      	ldr	r1, [pc, #684]	; (8001860 <_svfprintf_r+0xd18>)
 80015b2:	f8ca 1000 	str.w	r1, [sl]
 80015b6:	e9cd 241e 	strd	r2, r4, [sp, #120]	; 0x78
 80015ba:	f300 8274 	bgt.w	8001aa6 <_svfprintf_r+0xf5e>
 80015be:	f10a 0a08 	add.w	sl, sl, #8
 80015c2:	e413      	b.n	8000dec <_svfprintf_r+0x2a4>
 80015c4:	ee19 0a10 	vmov	r0, s18
 80015c8:	aa1d      	add	r2, sp, #116	; 0x74
 80015ca:	4641      	mov	r1, r8
 80015cc:	9312      	str	r3, [sp, #72]	; 0x48
 80015ce:	f005 fa61 	bl	8006a94 <__ssprint_r>
 80015d2:	2800      	cmp	r0, #0
 80015d4:	f47f abd1 	bne.w	8000d7a <_svfprintf_r+0x232>
 80015d8:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 80015da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80015dc:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80015e0:	e419      	b.n	8000e16 <_svfprintf_r+0x2ce>
 80015e2:	ee19 0a10 	vmov	r0, s18
 80015e6:	aa1d      	add	r2, sp, #116	; 0x74
 80015e8:	4641      	mov	r1, r8
 80015ea:	f005 fa53 	bl	8006a94 <__ssprint_r>
 80015ee:	2800      	cmp	r0, #0
 80015f0:	f47f abc3 	bne.w	8000d7a <_svfprintf_r+0x232>
 80015f4:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 80015f6:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80015fa:	e41e      	b.n	8000e3a <_svfprintf_r+0x2f2>
 80015fc:	2d10      	cmp	r5, #16
 80015fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001600:	dd20      	ble.n	8001644 <_svfprintf_r+0xafc>
 8001602:	ee19 7a10 	vmov	r7, s18
 8001606:	2610      	movs	r6, #16
 8001608:	e004      	b.n	8001614 <_svfprintf_r+0xacc>
 800160a:	3d10      	subs	r5, #16
 800160c:	2d10      	cmp	r5, #16
 800160e:	f10a 0a08 	add.w	sl, sl, #8
 8001612:	dd17      	ble.n	8001644 <_svfprintf_r+0xafc>
 8001614:	3301      	adds	r3, #1
 8001616:	4a92      	ldr	r2, [pc, #584]	; (8001860 <_svfprintf_r+0xd18>)
 8001618:	3410      	adds	r4, #16
 800161a:	2b07      	cmp	r3, #7
 800161c:	e9ca 2600 	strd	r2, r6, [sl]
 8001620:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8001624:	ddf1      	ble.n	800160a <_svfprintf_r+0xac2>
 8001626:	aa1d      	add	r2, sp, #116	; 0x74
 8001628:	4641      	mov	r1, r8
 800162a:	4638      	mov	r0, r7
 800162c:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001630:	f005 fa30 	bl	8006a94 <__ssprint_r>
 8001634:	2800      	cmp	r0, #0
 8001636:	f47f aba0 	bne.w	8000d7a <_svfprintf_r+0x232>
 800163a:	3d10      	subs	r5, #16
 800163c:	2d10      	cmp	r5, #16
 800163e:	e9dd 341e 	ldrd	r3, r4, [sp, #120]	; 0x78
 8001642:	dce7      	bgt.n	8001614 <_svfprintf_r+0xacc>
 8001644:	3301      	adds	r3, #1
 8001646:	4a86      	ldr	r2, [pc, #536]	; (8001860 <_svfprintf_r+0xd18>)
 8001648:	f8ca 5004 	str.w	r5, [sl, #4]
 800164c:	442c      	add	r4, r5
 800164e:	2b07      	cmp	r3, #7
 8001650:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8001654:	f8ca 2000 	str.w	r2, [sl]
 8001658:	f77f ac17 	ble.w	8000e8a <_svfprintf_r+0x342>
 800165c:	ee19 0a10 	vmov	r0, s18
 8001660:	aa1d      	add	r2, sp, #116	; 0x74
 8001662:	4641      	mov	r1, r8
 8001664:	f005 fa16 	bl	8006a94 <__ssprint_r>
 8001668:	2800      	cmp	r0, #0
 800166a:	f47f ab86 	bne.w	8000d7a <_svfprintf_r+0x232>
 800166e:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001670:	e40b      	b.n	8000e8a <_svfprintf_r+0x342>
 8001672:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001674:	2900      	cmp	r1, #0
 8001676:	f340 81e1 	ble.w	8001a3c <_svfprintf_r+0xef4>
 800167a:	e9dd 370a 	ldrd	r3, r7, [sp, #40]	; 0x28
 800167e:	429f      	cmp	r7, r3
 8001680:	bfa8      	it	ge
 8001682:	461f      	movge	r7, r3
 8001684:	2f00      	cmp	r7, #0
 8001686:	dd0b      	ble.n	80016a0 <_svfprintf_r+0xb58>
 8001688:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800168a:	3301      	adds	r3, #1
 800168c:	443c      	add	r4, r7
 800168e:	2b07      	cmp	r3, #7
 8001690:	e9ca 6700 	strd	r6, r7, [sl]
 8001694:	941f      	str	r4, [sp, #124]	; 0x7c
 8001696:	931e      	str	r3, [sp, #120]	; 0x78
 8001698:	f300 83d7 	bgt.w	8001e4a <_svfprintf_r+0x1302>
 800169c:	f10a 0a08 	add.w	sl, sl, #8
 80016a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80016a2:	2f00      	cmp	r7, #0
 80016a4:	bfa8      	it	ge
 80016a6:	1bed      	subge	r5, r5, r7
 80016a8:	2d00      	cmp	r5, #0
 80016aa:	f300 8170 	bgt.w	800198e <_svfprintf_r+0xe46>
 80016ae:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80016b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80016b2:	429d      	cmp	r5, r3
 80016b4:	f280 813e 	bge.w	8001934 <_svfprintf_r+0xdec>
 80016b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80016ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80016bc:	441c      	add	r4, r3
 80016be:	e9ca 2300 	strd	r2, r3, [sl]
 80016c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80016c4:	941f      	str	r4, [sp, #124]	; 0x7c
 80016c6:	3301      	adds	r3, #1
 80016c8:	2b07      	cmp	r3, #7
 80016ca:	931e      	str	r3, [sp, #120]	; 0x78
 80016cc:	f300 8344 	bgt.w	8001d58 <_svfprintf_r+0x1210>
 80016d0:	f10a 0a08 	add.w	sl, sl, #8
 80016d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80016d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80016d8:	1b5d      	subs	r5, r3, r5
 80016da:	1a9f      	subs	r7, r3, r2
 80016dc:	42af      	cmp	r7, r5
 80016de:	bfa8      	it	ge
 80016e0:	462f      	movge	r7, r5
 80016e2:	2f00      	cmp	r7, #0
 80016e4:	dd0e      	ble.n	8001704 <_svfprintf_r+0xbbc>
 80016e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80016e8:	f8ca 7004 	str.w	r7, [sl, #4]
 80016ec:	3301      	adds	r3, #1
 80016ee:	4416      	add	r6, r2
 80016f0:	443c      	add	r4, r7
 80016f2:	2b07      	cmp	r3, #7
 80016f4:	f8ca 6000 	str.w	r6, [sl]
 80016f8:	941f      	str	r4, [sp, #124]	; 0x7c
 80016fa:	931e      	str	r3, [sp, #120]	; 0x78
 80016fc:	f300 83b5 	bgt.w	8001e6a <_svfprintf_r+0x1322>
 8001700:	f10a 0a08 	add.w	sl, sl, #8
 8001704:	2f00      	cmp	r7, #0
 8001706:	bfa8      	it	ge
 8001708:	1bed      	subge	r5, r5, r7
 800170a:	2d00      	cmp	r5, #0
 800170c:	f77f abb4 	ble.w	8000e78 <_svfprintf_r+0x330>
 8001710:	2d10      	cmp	r5, #16
 8001712:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001714:	4f53      	ldr	r7, [pc, #332]	; (8001864 <_svfprintf_r+0xd1c>)
 8001716:	f340 81da 	ble.w	8001ace <_svfprintf_r+0xf86>
 800171a:	ee19 ba10 	vmov	fp, s18
 800171e:	2610      	movs	r6, #16
 8001720:	e005      	b.n	800172e <_svfprintf_r+0xbe6>
 8001722:	f10a 0a08 	add.w	sl, sl, #8
 8001726:	3d10      	subs	r5, #16
 8001728:	2d10      	cmp	r5, #16
 800172a:	f340 81d0 	ble.w	8001ace <_svfprintf_r+0xf86>
 800172e:	3301      	adds	r3, #1
 8001730:	3410      	adds	r4, #16
 8001732:	2b07      	cmp	r3, #7
 8001734:	e9ca 7600 	strd	r7, r6, [sl]
 8001738:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 800173c:	ddf1      	ble.n	8001722 <_svfprintf_r+0xbda>
 800173e:	aa1d      	add	r2, sp, #116	; 0x74
 8001740:	4641      	mov	r1, r8
 8001742:	4658      	mov	r0, fp
 8001744:	f005 f9a6 	bl	8006a94 <__ssprint_r>
 8001748:	2800      	cmp	r0, #0
 800174a:	f47f ab16 	bne.w	8000d7a <_svfprintf_r+0x232>
 800174e:	e9dd 341e 	ldrd	r3, r4, [sp, #120]	; 0x78
 8001752:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001756:	e7e6      	b.n	8001726 <_svfprintf_r+0xbde>
 8001758:	9b03      	ldr	r3, [sp, #12]
 800175a:	07da      	lsls	r2, r3, #31
 800175c:	f53f ae96 	bmi.w	800148c <_svfprintf_r+0x944>
 8001760:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8001762:	f8ca 6000 	str.w	r6, [sl]
 8001766:	3501      	adds	r5, #1
 8001768:	3401      	adds	r4, #1
 800176a:	2301      	movs	r3, #1
 800176c:	2d07      	cmp	r5, #7
 800176e:	941f      	str	r4, [sp, #124]	; 0x7c
 8001770:	951e      	str	r5, [sp, #120]	; 0x78
 8001772:	f8ca 3004 	str.w	r3, [sl, #4]
 8001776:	f77f aebc 	ble.w	80014f2 <_svfprintf_r+0x9aa>
 800177a:	ee19 0a10 	vmov	r0, s18
 800177e:	aa1d      	add	r2, sp, #116	; 0x74
 8001780:	4641      	mov	r1, r8
 8001782:	f005 f987 	bl	8006a94 <__ssprint_r>
 8001786:	2800      	cmp	r0, #0
 8001788:	f47f aaf7 	bne.w	8000d7a <_svfprintf_r+0x232>
 800178c:	e9dd 541e 	ldrd	r5, r4, [sp, #120]	; 0x78
 8001790:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001794:	e6af      	b.n	80014f6 <_svfprintf_r+0x9ae>
 8001796:	9b05      	ldr	r3, [sp, #20]
 8001798:	2b00      	cmp	r3, #0
 800179a:	f040 8341 	bne.w	8001e20 <_svfprintf_r+0x12d8>
 800179e:	2300      	movs	r3, #0
 80017a0:	9305      	str	r3, [sp, #20]
 80017a2:	9308      	str	r3, [sp, #32]
 80017a4:	ae2a      	add	r6, sp, #168	; 0xa8
 80017a6:	e565      	b.n	8001274 <_svfprintf_r+0x72c>
 80017a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80017aa:	1e5e      	subs	r6, r3, #1
 80017ac:	2e00      	cmp	r6, #0
 80017ae:	f77f aea2 	ble.w	80014f6 <_svfprintf_r+0x9ae>
 80017b2:	2e10      	cmp	r6, #16
 80017b4:	4f2b      	ldr	r7, [pc, #172]	; (8001864 <_svfprintf_r+0xd1c>)
 80017b6:	f340 81cb 	ble.w	8001b50 <_svfprintf_r+0x1008>
 80017ba:	f8cd 9014 	str.w	r9, [sp, #20]
 80017be:	f04f 0b10 	mov.w	fp, #16
 80017c2:	ee19 9a10 	vmov	r9, s18
 80017c6:	e005      	b.n	80017d4 <_svfprintf_r+0xc8c>
 80017c8:	f10a 0a08 	add.w	sl, sl, #8
 80017cc:	3e10      	subs	r6, #16
 80017ce:	2e10      	cmp	r6, #16
 80017d0:	f340 81bc 	ble.w	8001b4c <_svfprintf_r+0x1004>
 80017d4:	3501      	adds	r5, #1
 80017d6:	3410      	adds	r4, #16
 80017d8:	2d07      	cmp	r5, #7
 80017da:	e9ca 7b00 	strd	r7, fp, [sl]
 80017de:	e9cd 541e 	strd	r5, r4, [sp, #120]	; 0x78
 80017e2:	ddf1      	ble.n	80017c8 <_svfprintf_r+0xc80>
 80017e4:	aa1d      	add	r2, sp, #116	; 0x74
 80017e6:	4641      	mov	r1, r8
 80017e8:	4648      	mov	r0, r9
 80017ea:	f005 f953 	bl	8006a94 <__ssprint_r>
 80017ee:	2800      	cmp	r0, #0
 80017f0:	f47f aac3 	bne.w	8000d7a <_svfprintf_r+0x232>
 80017f4:	e9dd 541e 	ldrd	r5, r4, [sp, #120]	; 0x78
 80017f8:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80017fc:	e7e6      	b.n	80017cc <_svfprintf_r+0xc84>
 80017fe:	ee19 0a10 	vmov	r0, s18
 8001802:	aa1d      	add	r2, sp, #116	; 0x74
 8001804:	4641      	mov	r1, r8
 8001806:	f005 f945 	bl	8006a94 <__ssprint_r>
 800180a:	2800      	cmp	r0, #0
 800180c:	f47f aab5 	bne.w	8000d7a <_svfprintf_r+0x232>
 8001810:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001812:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001816:	f7ff bb1c 	b.w	8000e52 <_svfprintf_r+0x30a>
 800181a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800181c:	f853 0b04 	ldr.w	r0, [r3], #4
 8001820:	9309      	str	r3, [sp, #36]	; 0x24
 8001822:	e46e      	b.n	8001102 <_svfprintf_r+0x5ba>
 8001824:	17c1      	asrs	r1, r0, #31
 8001826:	460b      	mov	r3, r1
 8001828:	2b00      	cmp	r3, #0
 800182a:	f6bf abc3 	bge.w	8000fb4 <_svfprintf_r+0x46c>
 800182e:	4240      	negs	r0, r0
 8001830:	f04f 042d 	mov.w	r4, #45	; 0x2d
 8001834:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001838:	f88d 4057 	strb.w	r4, [sp, #87]	; 0x57
 800183c:	2301      	movs	r3, #1
 800183e:	f7ff ba61 	b.w	8000d04 <_svfprintf_r+0x1bc>
 8001842:	ee19 0a10 	vmov	r0, s18
 8001846:	aa1d      	add	r2, sp, #116	; 0x74
 8001848:	4641      	mov	r1, r8
 800184a:	f005 f923 	bl	8006a94 <__ssprint_r>
 800184e:	2800      	cmp	r0, #0
 8001850:	f47f aa93 	bne.w	8000d7a <_svfprintf_r+0x232>
 8001854:	e9dd 541e 	ldrd	r5, r4, [sp, #120]	; 0x78
 8001858:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800185c:	e625      	b.n	80014aa <_svfprintf_r+0x962>
 800185e:	bf00      	nop
 8001860:	0800ee54 	.word	0x0800ee54
 8001864:	0800ee64 	.word	0x0800ee64
 8001868:	ee19 0a10 	vmov	r0, s18
 800186c:	aa1d      	add	r2, sp, #116	; 0x74
 800186e:	4641      	mov	r1, r8
 8001870:	f005 f910 	bl	8006a94 <__ssprint_r>
 8001874:	2800      	cmp	r0, #0
 8001876:	f47f aa80 	bne.w	8000d7a <_svfprintf_r+0x232>
 800187a:	e9dd 541e 	ldrd	r5, r4, [sp, #120]	; 0x78
 800187e:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001882:	e61f      	b.n	80014c4 <_svfprintf_r+0x97c>
 8001884:	f899 5000 	ldrb.w	r5, [r9]
 8001888:	9209      	str	r2, [sp, #36]	; 0x24
 800188a:	f7ff b9a8 	b.w	8000bde <_svfprintf_r+0x96>
 800188e:	ae2a      	add	r6, sp, #168	; 0xa8
 8001890:	e4f0      	b.n	8001274 <_svfprintf_r+0x72c>
 8001892:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	f007 ff05 	bl	80096a8 <__aeabi_dcmpun>
 800189e:	2800      	cmp	r0, #0
 80018a0:	f040 8351 	bne.w	8001f46 <_svfprintf_r+0x13fe>
 80018a4:	9b05      	ldr	r3, [sp, #20]
 80018a6:	3301      	adds	r3, #1
 80018a8:	f025 0320 	bic.w	r3, r5, #32
 80018ac:	9304      	str	r3, [sp, #16]
 80018ae:	f000 82d9 	beq.w	8001e64 <_svfprintf_r+0x131c>
 80018b2:	2b47      	cmp	r3, #71	; 0x47
 80018b4:	f000 809c 	beq.w	80019f0 <_svfprintf_r+0xea8>
 80018b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80018bc:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
 80018c0:	2900      	cmp	r1, #0
 80018c2:	9203      	str	r2, [sp, #12]
 80018c4:	f2c0 8232 	blt.w	8001d2c <_svfprintf_r+0x11e4>
 80018c8:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 80018cc:	2700      	movs	r7, #0
 80018ce:	eeb0 aa47 	vmov.f32	s20, s14
 80018d2:	eef0 aa67 	vmov.f32	s21, s15
 80018d6:	2d66      	cmp	r5, #102	; 0x66
 80018d8:	f000 817a 	beq.w	8001bd0 <_svfprintf_r+0x1088>
 80018dc:	2d46      	cmp	r5, #70	; 0x46
 80018de:	f000 8177 	beq.w	8001bd0 <_svfprintf_r+0x1088>
 80018e2:	eeb0 0a4a 	vmov.f32	s0, s20
 80018e6:	eef0 0a6a 	vmov.f32	s1, s21
 80018ea:	9b04      	ldr	r3, [sp, #16]
 80018ec:	2b45      	cmp	r3, #69	; 0x45
 80018ee:	bf0a      	itet	eq
 80018f0:	9b05      	ldreq	r3, [sp, #20]
 80018f2:	9c05      	ldrne	r4, [sp, #20]
 80018f4:	1c5c      	addeq	r4, r3, #1
 80018f6:	ab1b      	add	r3, sp, #108	; 0x6c
 80018f8:	9301      	str	r3, [sp, #4]
 80018fa:	ab18      	add	r3, sp, #96	; 0x60
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	ee19 0a10 	vmov	r0, s18
 8001902:	ab17      	add	r3, sp, #92	; 0x5c
 8001904:	4622      	mov	r2, r4
 8001906:	2102      	movs	r1, #2
 8001908:	f001 ff7e 	bl	8003808 <_dtoa_r>
 800190c:	2d67      	cmp	r5, #103	; 0x67
 800190e:	4606      	mov	r6, r0
 8001910:	f040 8292 	bne.w	8001e38 <_svfprintf_r+0x12f0>
 8001914:	f01b 0f01 	tst.w	fp, #1
 8001918:	f000 81ac 	beq.w	8001c74 <_svfprintf_r+0x112c>
 800191c:	4434      	add	r4, r6
 800191e:	e16f      	b.n	8001c00 <_svfprintf_r+0x10b8>
 8001920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001922:	9806      	ldr	r0, [sp, #24]
 8001924:	f853 1b04 	ldr.w	r1, [r3], #4
 8001928:	9309      	str	r3, [sp, #36]	; 0x24
 800192a:	17c2      	asrs	r2, r0, #31
 800192c:	e9c1 0200 	strd	r0, r2, [r1]
 8001930:	f7ff b933 	b.w	8000b9a <_svfprintf_r+0x52>
 8001934:	9b03      	ldr	r3, [sp, #12]
 8001936:	07d9      	lsls	r1, r3, #31
 8001938:	f53f aebe 	bmi.w	80016b8 <_svfprintf_r+0xb70>
 800193c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8001940:	1a9f      	subs	r7, r3, r2
 8001942:	1b5d      	subs	r5, r3, r5
 8001944:	42af      	cmp	r7, r5
 8001946:	bfa8      	it	ge
 8001948:	462f      	movge	r7, r5
 800194a:	e6db      	b.n	8001704 <_svfprintf_r+0xbbc>
 800194c:	ee19 0a10 	vmov	r0, s18
 8001950:	2140      	movs	r1, #64	; 0x40
 8001952:	f003 fca5 	bl	80052a0 <_malloc_r>
 8001956:	f8c8 0000 	str.w	r0, [r8]
 800195a:	f8c8 0010 	str.w	r0, [r8, #16]
 800195e:	2800      	cmp	r0, #0
 8001960:	f000 833e 	beq.w	8001fe0 <_svfprintf_r+0x1498>
 8001964:	2340      	movs	r3, #64	; 0x40
 8001966:	f8c8 3014 	str.w	r3, [r8, #20]
 800196a:	f7ff b908 	b.w	8000b7e <_svfprintf_r+0x36>
 800196e:	4630      	mov	r0, r6
 8001970:	9409      	str	r4, [sp, #36]	; 0x24
 8001972:	9705      	str	r7, [sp, #20]
 8001974:	f8cd b00c 	str.w	fp, [sp, #12]
 8001978:	f7fe ff82 	bl	8000880 <strlen>
 800197c:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 8001980:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8001984:	9008      	str	r0, [sp, #32]
 8001986:	9304      	str	r3, [sp, #16]
 8001988:	970a      	str	r7, [sp, #40]	; 0x28
 800198a:	f7ff bade 	b.w	8000f4a <_svfprintf_r+0x402>
 800198e:	2d10      	cmp	r5, #16
 8001990:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001992:	4fb5      	ldr	r7, [pc, #724]	; (8001c68 <_svfprintf_r+0x1120>)
 8001994:	f340 81b8 	ble.w	8001d08 <_svfprintf_r+0x11c0>
 8001998:	463a      	mov	r2, r7
 800199a:	9605      	str	r6, [sp, #20]
 800199c:	4647      	mov	r7, r8
 800199e:	ee19 6a10 	vmov	r6, s18
 80019a2:	f04f 0b10 	mov.w	fp, #16
 80019a6:	4690      	mov	r8, r2
 80019a8:	e005      	b.n	80019b6 <_svfprintf_r+0xe6e>
 80019aa:	f10a 0a08 	add.w	sl, sl, #8
 80019ae:	3d10      	subs	r5, #16
 80019b0:	2d10      	cmp	r5, #16
 80019b2:	f340 81a5 	ble.w	8001d00 <_svfprintf_r+0x11b8>
 80019b6:	3301      	adds	r3, #1
 80019b8:	3410      	adds	r4, #16
 80019ba:	2b07      	cmp	r3, #7
 80019bc:	e9ca 8b00 	strd	r8, fp, [sl]
 80019c0:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 80019c4:	ddf1      	ble.n	80019aa <_svfprintf_r+0xe62>
 80019c6:	aa1d      	add	r2, sp, #116	; 0x74
 80019c8:	4639      	mov	r1, r7
 80019ca:	4630      	mov	r0, r6
 80019cc:	f005 f862 	bl	8006a94 <__ssprint_r>
 80019d0:	2800      	cmp	r0, #0
 80019d2:	f040 82a7 	bne.w	8001f24 <_svfprintf_r+0x13dc>
 80019d6:	e9dd 341e 	ldrd	r3, r4, [sp, #120]	; 0x78
 80019da:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80019de:	e7e6      	b.n	80019ae <_svfprintf_r+0xe66>
 80019e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019e2:	9906      	ldr	r1, [sp, #24]
 80019e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80019e8:	6011      	str	r1, [r2, #0]
 80019ea:	9309      	str	r3, [sp, #36]	; 0x24
 80019ec:	f7ff b8d5 	b.w	8000b9a <_svfprintf_r+0x52>
 80019f0:	9b05      	ldr	r3, [sp, #20]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	bf08      	it	eq
 80019f6:	2301      	moveq	r3, #1
 80019f8:	9305      	str	r3, [sp, #20]
 80019fa:	e75d      	b.n	80018b8 <_svfprintf_r+0xd70>
 80019fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8001a00:	ae2a      	add	r6, sp, #168	; 0xa8
 8001a02:	46a1      	mov	r9, r4
 8001a04:	220a      	movs	r2, #10
 8001a06:	2300      	movs	r3, #0
 8001a08:	4604      	mov	r4, r0
 8001a0a:	460f      	mov	r7, r1
 8001a0c:	f007 fe8a 	bl	8009724 <__aeabi_uldivmod>
 8001a10:	3230      	adds	r2, #48	; 0x30
 8001a12:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8001a16:	2300      	movs	r3, #0
 8001a18:	4620      	mov	r0, r4
 8001a1a:	4639      	mov	r1, r7
 8001a1c:	220a      	movs	r2, #10
 8001a1e:	f007 fe81 	bl	8009724 <__aeabi_uldivmod>
 8001a22:	2c0a      	cmp	r4, #10
 8001a24:	f177 0300 	sbcs.w	r3, r7, #0
 8001a28:	d2ec      	bcs.n	8001a04 <_svfprintf_r+0xebc>
 8001a2a:	ab2a      	add	r3, sp, #168	; 0xa8
 8001a2c:	1b9b      	subs	r3, r3, r6
 8001a2e:	464c      	mov	r4, r9
 8001a30:	9308      	str	r3, [sp, #32]
 8001a32:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8001a36:	f8cd b00c 	str.w	fp, [sp, #12]
 8001a3a:	e41b      	b.n	8001274 <_svfprintf_r+0x72c>
 8001a3c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001a3e:	4a8b      	ldr	r2, [pc, #556]	; (8001c6c <_svfprintf_r+0x1124>)
 8001a40:	f8ca 2000 	str.w	r2, [sl]
 8001a44:	3301      	adds	r3, #1
 8001a46:	3401      	adds	r4, #1
 8001a48:	2201      	movs	r2, #1
 8001a4a:	2b07      	cmp	r3, #7
 8001a4c:	941f      	str	r4, [sp, #124]	; 0x7c
 8001a4e:	931e      	str	r3, [sp, #120]	; 0x78
 8001a50:	f8ca 2004 	str.w	r2, [sl, #4]
 8001a54:	f300 8172 	bgt.w	8001d3c <_svfprintf_r+0x11f4>
 8001a58:	f10a 0a08 	add.w	sl, sl, #8
 8001a5c:	2900      	cmp	r1, #0
 8001a5e:	f040 8083 	bne.w	8001b68 <_svfprintf_r+0x1020>
 8001a62:	9b03      	ldr	r3, [sp, #12]
 8001a64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	f43f aa04 	beq.w	8000e78 <_svfprintf_r+0x330>
 8001a70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001a72:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001a74:	191a      	adds	r2, r3, r4
 8001a76:	e9ca 1300 	strd	r1, r3, [sl]
 8001a7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001a7c:	921f      	str	r2, [sp, #124]	; 0x7c
 8001a7e:	3301      	adds	r3, #1
 8001a80:	2b07      	cmp	r3, #7
 8001a82:	931e      	str	r3, [sp, #120]	; 0x78
 8001a84:	f300 817c 	bgt.w	8001d80 <_svfprintf_r+0x1238>
 8001a88:	f10a 0a08 	add.w	sl, sl, #8
 8001a8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001a8e:	f8ca 6000 	str.w	r6, [sl]
 8001a92:	3301      	adds	r3, #1
 8001a94:	188c      	adds	r4, r1, r2
 8001a96:	2b07      	cmp	r3, #7
 8001a98:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8001a9c:	f8ca 1004 	str.w	r1, [sl, #4]
 8001aa0:	f77f a9e8 	ble.w	8000e74 <_svfprintf_r+0x32c>
 8001aa4:	e534      	b.n	8001510 <_svfprintf_r+0x9c8>
 8001aa6:	ee19 0a10 	vmov	r0, s18
 8001aaa:	aa1d      	add	r2, sp, #116	; 0x74
 8001aac:	4641      	mov	r1, r8
 8001aae:	9312      	str	r3, [sp, #72]	; 0x48
 8001ab0:	f004 fff0 	bl	8006a94 <__ssprint_r>
 8001ab4:	2800      	cmp	r0, #0
 8001ab6:	f47f a960 	bne.w	8000d7a <_svfprintf_r+0x232>
 8001aba:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001abc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001abe:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001ac2:	f7ff b993 	b.w	8000dec <_svfprintf_r+0x2a4>
 8001ac6:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8001aca:	f7ff ba82 	b.w	8000fd2 <_svfprintf_r+0x48a>
 8001ace:	3301      	adds	r3, #1
 8001ad0:	442c      	add	r4, r5
 8001ad2:	2b07      	cmp	r3, #7
 8001ad4:	f8ca 7000 	str.w	r7, [sl]
 8001ad8:	f8ca 5004 	str.w	r5, [sl, #4]
 8001adc:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8001ae0:	f77f a9c8 	ble.w	8000e74 <_svfprintf_r+0x32c>
 8001ae4:	e514      	b.n	8001510 <_svfprintf_r+0x9c8>
 8001ae6:	ee19 0a10 	vmov	r0, s18
 8001aea:	aa1d      	add	r2, sp, #116	; 0x74
 8001aec:	4641      	mov	r1, r8
 8001aee:	f004 ffd1 	bl	8006a94 <__ssprint_r>
 8001af2:	2800      	cmp	r0, #0
 8001af4:	f47f a941 	bne.w	8000d7a <_svfprintf_r+0x232>
 8001af8:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001afa:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001afe:	f7ff bbde 	b.w	80012be <_svfprintf_r+0x776>
 8001b02:	ee19 0a10 	vmov	r0, s18
 8001b06:	aa1d      	add	r2, sp, #116	; 0x74
 8001b08:	4641      	mov	r1, r8
 8001b0a:	f004 ffc3 	bl	8006a94 <__ssprint_r>
 8001b0e:	2800      	cmp	r0, #0
 8001b10:	f47f a933 	bne.w	8000d7a <_svfprintf_r+0x232>
 8001b14:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001b16:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001b1a:	f7ff b992 	b.w	8000e42 <_svfprintf_r+0x2fa>
 8001b1e:	ee19 0a10 	vmov	r0, s18
 8001b22:	aa1d      	add	r2, sp, #116	; 0x74
 8001b24:	4641      	mov	r1, r8
 8001b26:	f004 ffb5 	bl	8006a94 <__ssprint_r>
 8001b2a:	2800      	cmp	r0, #0
 8001b2c:	f47f a925 	bne.w	8000d7a <_svfprintf_r+0x232>
 8001b30:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001b32:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001b36:	f7ff bbd8 	b.w	80012ea <_svfprintf_r+0x7a2>
 8001b3a:	2b06      	cmp	r3, #6
 8001b3c:	bf28      	it	cs
 8001b3e:	2306      	movcs	r3, #6
 8001b40:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8001b44:	4e4a      	ldr	r6, [pc, #296]	; (8001c70 <_svfprintf_r+0x1128>)
 8001b46:	9304      	str	r3, [sp, #16]
 8001b48:	f7ff b939 	b.w	8000dbe <_svfprintf_r+0x276>
 8001b4c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8001b50:	f8ca 7000 	str.w	r7, [sl]
 8001b54:	3501      	adds	r5, #1
 8001b56:	4434      	add	r4, r6
 8001b58:	2d07      	cmp	r5, #7
 8001b5a:	e9cd 541e 	strd	r5, r4, [sp, #120]	; 0x78
 8001b5e:	f8ca 6004 	str.w	r6, [sl, #4]
 8001b62:	f77f acc6 	ble.w	80014f2 <_svfprintf_r+0x9aa>
 8001b66:	e608      	b.n	800177a <_svfprintf_r+0xc32>
 8001b68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001b6a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001b6c:	191a      	adds	r2, r3, r4
 8001b6e:	e9ca 0300 	strd	r0, r3, [sl]
 8001b72:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001b74:	921f      	str	r2, [sp, #124]	; 0x7c
 8001b76:	3301      	adds	r3, #1
 8001b78:	2b07      	cmp	r3, #7
 8001b7a:	931e      	str	r3, [sp, #120]	; 0x78
 8001b7c:	f300 8100 	bgt.w	8001d80 <_svfprintf_r+0x1238>
 8001b80:	f10a 0a08 	add.w	sl, sl, #8
 8001b84:	2900      	cmp	r1, #0
 8001b86:	da81      	bge.n	8001a8c <_svfprintf_r+0xf44>
 8001b88:	424d      	negs	r5, r1
 8001b8a:	3110      	adds	r1, #16
 8001b8c:	4f36      	ldr	r7, [pc, #216]	; (8001c68 <_svfprintf_r+0x1120>)
 8001b8e:	f280 81b0 	bge.w	8001ef2 <_svfprintf_r+0x13aa>
 8001b92:	ee19 ba10 	vmov	fp, s18
 8001b96:	2410      	movs	r4, #16
 8001b98:	e005      	b.n	8001ba6 <_svfprintf_r+0x105e>
 8001b9a:	f10a 0a08 	add.w	sl, sl, #8
 8001b9e:	3d10      	subs	r5, #16
 8001ba0:	2d10      	cmp	r5, #16
 8001ba2:	f340 81a6 	ble.w	8001ef2 <_svfprintf_r+0x13aa>
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	3210      	adds	r2, #16
 8001baa:	2b07      	cmp	r3, #7
 8001bac:	e9ca 7400 	strd	r7, r4, [sl]
 8001bb0:	e9cd 321e 	strd	r3, r2, [sp, #120]	; 0x78
 8001bb4:	ddf1      	ble.n	8001b9a <_svfprintf_r+0x1052>
 8001bb6:	aa1d      	add	r2, sp, #116	; 0x74
 8001bb8:	4641      	mov	r1, r8
 8001bba:	4658      	mov	r0, fp
 8001bbc:	f004 ff6a 	bl	8006a94 <__ssprint_r>
 8001bc0:	2800      	cmp	r0, #0
 8001bc2:	f47f a8da 	bne.w	8000d7a <_svfprintf_r+0x232>
 8001bc6:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 8001bca:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001bce:	e7e6      	b.n	8001b9e <_svfprintf_r+0x1056>
 8001bd0:	9c05      	ldr	r4, [sp, #20]
 8001bd2:	eeb0 0a4a 	vmov.f32	s0, s20
 8001bd6:	eef0 0a6a 	vmov.f32	s1, s21
 8001bda:	ab1b      	add	r3, sp, #108	; 0x6c
 8001bdc:	9301      	str	r3, [sp, #4]
 8001bde:	ab18      	add	r3, sp, #96	; 0x60
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	4622      	mov	r2, r4
 8001be4:	ab17      	add	r3, sp, #92	; 0x5c
 8001be6:	ee19 0a10 	vmov	r0, s18
 8001bea:	2103      	movs	r1, #3
 8001bec:	f001 fe0c 	bl	8003808 <_dtoa_r>
 8001bf0:	4606      	mov	r6, r0
 8001bf2:	1904      	adds	r4, r0, r4
 8001bf4:	7833      	ldrb	r3, [r6, #0]
 8001bf6:	2b30      	cmp	r3, #48	; 0x30
 8001bf8:	f000 8197 	beq.w	8001f2a <_svfprintf_r+0x13e2>
 8001bfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001bfe:	441c      	add	r4, r3
 8001c00:	ec51 0b1a 	vmov	r0, r1, d10
 8001c04:	2200      	movs	r2, #0
 8001c06:	2300      	movs	r3, #0
 8001c08:	f007 fd1c 	bl	8009644 <__aeabi_dcmpeq>
 8001c0c:	2800      	cmp	r0, #0
 8001c0e:	f040 80b1 	bne.w	8001d74 <_svfprintf_r+0x122c>
 8001c12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001c14:	42a3      	cmp	r3, r4
 8001c16:	d206      	bcs.n	8001c26 <_svfprintf_r+0x10de>
 8001c18:	2130      	movs	r1, #48	; 0x30
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	921b      	str	r2, [sp, #108]	; 0x6c
 8001c1e:	7019      	strb	r1, [r3, #0]
 8001c20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001c22:	429c      	cmp	r4, r3
 8001c24:	d8f9      	bhi.n	8001c1a <_svfprintf_r+0x10d2>
 8001c26:	1b9b      	subs	r3, r3, r6
 8001c28:	930b      	str	r3, [sp, #44]	; 0x2c
 8001c2a:	9b04      	ldr	r3, [sp, #16]
 8001c2c:	2b47      	cmp	r3, #71	; 0x47
 8001c2e:	d028      	beq.n	8001c82 <_svfprintf_r+0x113a>
 8001c30:	2d66      	cmp	r5, #102	; 0x66
 8001c32:	f040 81de 	bne.w	8001ff2 <_svfprintf_r+0x14aa>
 8001c36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001c38:	9a05      	ldr	r2, [sp, #20]
 8001c3a:	930a      	str	r3, [sp, #40]	; 0x28
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f00b 0b01 	and.w	fp, fp, #1
 8001c42:	f340 80f1 	ble.w	8001e28 <_svfprintf_r+0x12e0>
 8001c46:	ea5b 0102 	orrs.w	r1, fp, r2
 8001c4a:	f040 819f 	bne.w	8001f8c <_svfprintf_r+0x1444>
 8001c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c50:	9304      	str	r3, [sp, #16]
 8001c52:	9308      	str	r3, [sp, #32]
 8001c54:	2f00      	cmp	r7, #0
 8001c56:	f000 80f3 	beq.w	8001e40 <_svfprintf_r+0x12f8>
 8001c5a:	232d      	movs	r3, #45	; 0x2d
 8001c5c:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
 8001c60:	2300      	movs	r3, #0
 8001c62:	9305      	str	r3, [sp, #20]
 8001c64:	f7ff b974 	b.w	8000f50 <_svfprintf_r+0x408>
 8001c68:	0800ee64 	.word	0x0800ee64
 8001c6c:	0801e2d0 	.word	0x0801e2d0
 8001c70:	0801e2c8 	.word	0x0801e2c8
 8001c74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001c76:	1b9b      	subs	r3, r3, r6
 8001c78:	930b      	str	r3, [sp, #44]	; 0x2c
 8001c7a:	9b04      	ldr	r3, [sp, #16]
 8001c7c:	2b47      	cmp	r3, #71	; 0x47
 8001c7e:	f040 81b8 	bne.w	8001ff2 <_svfprintf_r+0x14aa>
 8001c82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001c84:	930a      	str	r3, [sp, #40]	; 0x28
 8001c86:	1cd9      	adds	r1, r3, #3
 8001c88:	db11      	blt.n	8001cae <_svfprintf_r+0x1166>
 8001c8a:	9a05      	ldr	r2, [sp, #20]
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	dc0e      	bgt.n	8001cae <_svfprintf_r+0x1166>
 8001c90:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 8001c94:	4293      	cmp	r3, r2
 8001c96:	f2c0 8104 	blt.w	8001ea2 <_svfprintf_r+0x135a>
 8001c9a:	f01b 0f01 	tst.w	fp, #1
 8001c9e:	f040 8163 	bne.w	8001f68 <_svfprintf_r+0x1420>
 8001ca2:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8001ca6:	9204      	str	r2, [sp, #16]
 8001ca8:	9308      	str	r3, [sp, #32]
 8001caa:	2567      	movs	r5, #103	; 0x67
 8001cac:	e7d2      	b.n	8001c54 <_svfprintf_r+0x110c>
 8001cae:	3d02      	subs	r5, #2
 8001cb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001cb2:	f88d 5064 	strb.w	r5, [sp, #100]	; 0x64
 8001cb6:	1e53      	subs	r3, r2, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	9317      	str	r3, [sp, #92]	; 0x5c
 8001cbc:	bfb6      	itet	lt
 8001cbe:	f1c2 0301 	rsblt	r3, r2, #1
 8001cc2:	222b      	movge	r2, #43	; 0x2b
 8001cc4:	222d      	movlt	r2, #45	; 0x2d
 8001cc6:	2b09      	cmp	r3, #9
 8001cc8:	f88d 2065 	strb.w	r2, [sp, #101]	; 0x65
 8001ccc:	dc74      	bgt.n	8001db8 <_svfprintf_r+0x1270>
 8001cce:	3330      	adds	r3, #48	; 0x30
 8001cd0:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8001cd4:	2330      	movs	r3, #48	; 0x30
 8001cd6:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
 8001cda:	2304      	movs	r3, #4
 8001cdc:	9311      	str	r3, [sp, #68]	; 0x44
 8001cde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001ce0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001ce2:	2a01      	cmp	r2, #1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	9308      	str	r3, [sp, #32]
 8001ce8:	f340 8147 	ble.w	8001f7a <_svfprintf_r+0x1432>
 8001cec:	9b08      	ldr	r3, [sp, #32]
 8001cee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001cf0:	4413      	add	r3, r2
 8001cf2:	9308      	str	r3, [sp, #32]
 8001cf4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001cf8:	9304      	str	r3, [sp, #16]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	930a      	str	r3, [sp, #40]	; 0x28
 8001cfe:	e7a9      	b.n	8001c54 <_svfprintf_r+0x110c>
 8001d00:	4642      	mov	r2, r8
 8001d02:	9e05      	ldr	r6, [sp, #20]
 8001d04:	46b8      	mov	r8, r7
 8001d06:	4617      	mov	r7, r2
 8001d08:	3301      	adds	r3, #1
 8001d0a:	442c      	add	r4, r5
 8001d0c:	2b07      	cmp	r3, #7
 8001d0e:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8001d12:	f8ca 7000 	str.w	r7, [sl]
 8001d16:	f8ca 5004 	str.w	r5, [sl, #4]
 8001d1a:	dc40      	bgt.n	8001d9e <_svfprintf_r+0x1256>
 8001d1c:	f10a 0a08 	add.w	sl, sl, #8
 8001d20:	e4c5      	b.n	80016ae <_svfprintf_r+0xb66>
 8001d22:	242d      	movs	r4, #45	; 0x2d
 8001d24:	f88d 4057 	strb.w	r4, [sp, #87]	; 0x57
 8001d28:	f7ff b901 	b.w	8000f2e <_svfprintf_r+0x3e6>
 8001d2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8001d30:	ee0a 0a10 	vmov	s20, r0
 8001d34:	ee0a 3a90 	vmov	s21, r3
 8001d38:	272d      	movs	r7, #45	; 0x2d
 8001d3a:	e5cc      	b.n	80018d6 <_svfprintf_r+0xd8e>
 8001d3c:	ee19 0a10 	vmov	r0, s18
 8001d40:	aa1d      	add	r2, sp, #116	; 0x74
 8001d42:	4641      	mov	r1, r8
 8001d44:	f004 fea6 	bl	8006a94 <__ssprint_r>
 8001d48:	2800      	cmp	r0, #0
 8001d4a:	f47f a816 	bne.w	8000d7a <_svfprintf_r+0x232>
 8001d4e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001d50:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001d52:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001d56:	e681      	b.n	8001a5c <_svfprintf_r+0xf14>
 8001d58:	ee19 0a10 	vmov	r0, s18
 8001d5c:	aa1d      	add	r2, sp, #116	; 0x74
 8001d5e:	4641      	mov	r1, r8
 8001d60:	f004 fe98 	bl	8006a94 <__ssprint_r>
 8001d64:	2800      	cmp	r0, #0
 8001d66:	f47f a808 	bne.w	8000d7a <_svfprintf_r+0x232>
 8001d6a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8001d6c:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001d6e:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001d72:	e4af      	b.n	80016d4 <_svfprintf_r+0xb8c>
 8001d74:	4623      	mov	r3, r4
 8001d76:	e756      	b.n	8001c26 <_svfprintf_r+0x10de>
 8001d78:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 8001d7c:	f7ff b813 	b.w	8000da6 <_svfprintf_r+0x25e>
 8001d80:	ee19 0a10 	vmov	r0, s18
 8001d84:	aa1d      	add	r2, sp, #116	; 0x74
 8001d86:	4641      	mov	r1, r8
 8001d88:	f004 fe84 	bl	8006a94 <__ssprint_r>
 8001d8c:	2800      	cmp	r0, #0
 8001d8e:	f47e aff4 	bne.w	8000d7a <_svfprintf_r+0x232>
 8001d92:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 8001d96:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001d98:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001d9c:	e6f2      	b.n	8001b84 <_svfprintf_r+0x103c>
 8001d9e:	ee19 0a10 	vmov	r0, s18
 8001da2:	aa1d      	add	r2, sp, #116	; 0x74
 8001da4:	4641      	mov	r1, r8
 8001da6:	f004 fe75 	bl	8006a94 <__ssprint_r>
 8001daa:	2800      	cmp	r0, #0
 8001dac:	f47e afe5 	bne.w	8000d7a <_svfprintf_r+0x232>
 8001db0:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001db2:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001db6:	e47a      	b.n	80016ae <_svfprintf_r+0xb66>
 8001db8:	f10d 0473 	add.w	r4, sp, #115	; 0x73
 8001dbc:	f8df c240 	ldr.w	ip, [pc, #576]	; 8002000 <_svfprintf_r+0x14b8>
 8001dc0:	4622      	mov	r2, r4
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	fb8c 2103 	smull	r2, r1, ip, r3
 8001dc8:	17da      	asrs	r2, r3, #31
 8001dca:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8001dce:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8001dd2:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
 8001dd6:	3130      	adds	r1, #48	; 0x30
 8001dd8:	f800 1c01 	strb.w	r1, [r0, #-1]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	2963      	cmp	r1, #99	; 0x63
 8001de0:	4613      	mov	r3, r2
 8001de2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001de6:	dcec      	bgt.n	8001dc2 <_svfprintf_r+0x127a>
 8001de8:	3330      	adds	r3, #48	; 0x30
 8001dea:	b2d9      	uxtb	r1, r3
 8001dec:	1e83      	subs	r3, r0, #2
 8001dee:	429c      	cmp	r4, r3
 8001df0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8001df4:	f240 80f1 	bls.w	8001fda <_svfprintf_r+0x1492>
 8001df8:	4613      	mov	r3, r2
 8001dfa:	f10d 0266 	add.w	r2, sp, #102	; 0x66
 8001dfe:	e001      	b.n	8001e04 <_svfprintf_r+0x12bc>
 8001e00:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001e04:	f802 1b01 	strb.w	r1, [r2], #1
 8001e08:	429c      	cmp	r4, r3
 8001e0a:	d1f9      	bne.n	8001e00 <_svfprintf_r+0x12b8>
 8001e0c:	f10d 0375 	add.w	r3, sp, #117	; 0x75
 8001e10:	f10d 0266 	add.w	r2, sp, #102	; 0x66
 8001e14:	1a1b      	subs	r3, r3, r0
 8001e16:	4413      	add	r3, r2
 8001e18:	aa19      	add	r2, sp, #100	; 0x64
 8001e1a:	1a9b      	subs	r3, r3, r2
 8001e1c:	9311      	str	r3, [sp, #68]	; 0x44
 8001e1e:	e75e      	b.n	8001cde <_svfprintf_r+0x1196>
 8001e20:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8001e24:	f7ff b8da 	b.w	8000fdc <_svfprintf_r+0x494>
 8001e28:	ea5b 0302 	orrs.w	r3, fp, r2
 8001e2c:	f040 80b6 	bne.w	8001f9c <_svfprintf_r+0x1454>
 8001e30:	2301      	movs	r3, #1
 8001e32:	9304      	str	r3, [sp, #16]
 8001e34:	9308      	str	r3, [sp, #32]
 8001e36:	e70d      	b.n	8001c54 <_svfprintf_r+0x110c>
 8001e38:	2d47      	cmp	r5, #71	; 0x47
 8001e3a:	f43f ad6b 	beq.w	8001914 <_svfprintf_r+0xdcc>
 8001e3e:	e56d      	b.n	800191c <_svfprintf_r+0xdd4>
 8001e40:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8001e44:	9705      	str	r7, [sp, #20]
 8001e46:	f7ff b880 	b.w	8000f4a <_svfprintf_r+0x402>
 8001e4a:	ee19 0a10 	vmov	r0, s18
 8001e4e:	aa1d      	add	r2, sp, #116	; 0x74
 8001e50:	4641      	mov	r1, r8
 8001e52:	f004 fe1f 	bl	8006a94 <__ssprint_r>
 8001e56:	2800      	cmp	r0, #0
 8001e58:	f47e af8f 	bne.w	8000d7a <_svfprintf_r+0x232>
 8001e5c:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001e5e:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001e62:	e41d      	b.n	80016a0 <_svfprintf_r+0xb58>
 8001e64:	2306      	movs	r3, #6
 8001e66:	9305      	str	r3, [sp, #20]
 8001e68:	e526      	b.n	80018b8 <_svfprintf_r+0xd70>
 8001e6a:	ee19 0a10 	vmov	r0, s18
 8001e6e:	aa1d      	add	r2, sp, #116	; 0x74
 8001e70:	4641      	mov	r1, r8
 8001e72:	f004 fe0f 	bl	8006a94 <__ssprint_r>
 8001e76:	2800      	cmp	r0, #0
 8001e78:	f47e af7f 	bne.w	8000d7a <_svfprintf_r+0x232>
 8001e7c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8001e7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001e80:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001e82:	1b5d      	subs	r5, r3, r5
 8001e84:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001e88:	e43c      	b.n	8001704 <_svfprintf_r+0xbbc>
 8001e8a:	9b05      	ldr	r3, [sp, #20]
 8001e8c:	9409      	str	r4, [sp, #36]	; 0x24
 8001e8e:	f8cd b00c 	str.w	fp, [sp, #12]
 8001e92:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8001e96:	9304      	str	r3, [sp, #16]
 8001e98:	9308      	str	r3, [sp, #32]
 8001e9a:	9005      	str	r0, [sp, #20]
 8001e9c:	900a      	str	r0, [sp, #40]	; 0x28
 8001e9e:	f7ff b854 	b.w	8000f4a <_svfprintf_r+0x402>
 8001ea2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001ea6:	4413      	add	r3, r2
 8001ea8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001eaa:	9308      	str	r3, [sp, #32]
 8001eac:	2a00      	cmp	r2, #0
 8001eae:	dd7d      	ble.n	8001fac <_svfprintf_r+0x1464>
 8001eb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001eb4:	9304      	str	r3, [sp, #16]
 8001eb6:	2567      	movs	r5, #103	; 0x67
 8001eb8:	e6cc      	b.n	8001c54 <_svfprintf_r+0x110c>
 8001eba:	2200      	movs	r2, #0
 8001ebc:	9205      	str	r2, [sp, #20]
 8001ebe:	f7fe be90 	b.w	8000be2 <_svfprintf_r+0x9a>
 8001ec2:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 8001ec6:	f7ff b935 	b.w	8001134 <_svfprintf_r+0x5ec>
 8001eca:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 8001ece:	f7ff b90b 	b.w	80010e8 <_svfprintf_r+0x5a0>
 8001ed2:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 8001ed6:	f7ff b986 	b.w	80011e6 <_svfprintf_r+0x69e>
 8001eda:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 8001ede:	f7fe bff6 	b.w	8000ece <_svfprintf_r+0x386>
 8001ee2:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 8001ee6:	f7ff b855 	b.w	8000f94 <_svfprintf_r+0x44c>
 8001eea:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 8001eee:	f7ff b8b8 	b.w	8001062 <_svfprintf_r+0x51a>
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	442a      	add	r2, r5
 8001ef6:	2b07      	cmp	r3, #7
 8001ef8:	e9cd 321e 	strd	r3, r2, [sp, #120]	; 0x78
 8001efc:	f8ca 7000 	str.w	r7, [sl]
 8001f00:	f8ca 5004 	str.w	r5, [sl, #4]
 8001f04:	f77f adc0 	ble.w	8001a88 <_svfprintf_r+0xf40>
 8001f08:	ee19 0a10 	vmov	r0, s18
 8001f0c:	aa1d      	add	r2, sp, #116	; 0x74
 8001f0e:	4641      	mov	r1, r8
 8001f10:	f004 fdc0 	bl	8006a94 <__ssprint_r>
 8001f14:	2800      	cmp	r0, #0
 8001f16:	f47e af30 	bne.w	8000d7a <_svfprintf_r+0x232>
 8001f1a:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 8001f1e:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001f22:	e5b3      	b.n	8001a8c <_svfprintf_r+0xf44>
 8001f24:	46b8      	mov	r8, r7
 8001f26:	f7fe bf28 	b.w	8000d7a <_svfprintf_r+0x232>
 8001f2a:	ec51 0b1a 	vmov	r0, r1, d10
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2300      	movs	r3, #0
 8001f32:	f007 fb87 	bl	8009644 <__aeabi_dcmpeq>
 8001f36:	2800      	cmp	r0, #0
 8001f38:	f47f ae60 	bne.w	8001bfc <_svfprintf_r+0x10b4>
 8001f3c:	9b05      	ldr	r3, [sp, #20]
 8001f3e:	f1c3 0301 	rsb	r3, r3, #1
 8001f42:	9317      	str	r3, [sp, #92]	; 0x5c
 8001f44:	e65b      	b.n	8001bfe <_svfprintf_r+0x10b6>
 8001f46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001f48:	4e2b      	ldr	r6, [pc, #172]	; (8001ff8 <_svfprintf_r+0x14b0>)
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	bfb8      	it	lt
 8001f4e:	242d      	movlt	r4, #45	; 0x2d
 8001f50:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
 8001f54:	9303      	str	r3, [sp, #12]
 8001f56:	bfa8      	it	ge
 8001f58:	f89d 4057 	ldrbge.w	r4, [sp, #87]	; 0x57
 8001f5c:	4b27      	ldr	r3, [pc, #156]	; (8001ffc <_svfprintf_r+0x14b4>)
 8001f5e:	bfb8      	it	lt
 8001f60:	f88d 4057 	strblt.w	r4, [sp, #87]	; 0x57
 8001f64:	f7fe bfe8 	b.w	8000f38 <_svfprintf_r+0x3f0>
 8001f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001f6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001f6c:	4413      	add	r3, r2
 8001f6e:	9308      	str	r3, [sp, #32]
 8001f70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001f74:	9304      	str	r3, [sp, #16]
 8001f76:	2567      	movs	r5, #103	; 0x67
 8001f78:	e66c      	b.n	8001c54 <_svfprintf_r+0x110c>
 8001f7a:	f01b 0201 	ands.w	r2, fp, #1
 8001f7e:	920a      	str	r2, [sp, #40]	; 0x28
 8001f80:	f47f aeb4 	bne.w	8001cec <_svfprintf_r+0x11a4>
 8001f84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001f88:	9304      	str	r3, [sp, #16]
 8001f8a:	e663      	b.n	8001c54 <_svfprintf_r+0x110c>
 8001f8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8001f8e:	440b      	add	r3, r1
 8001f90:	441a      	add	r2, r3
 8001f92:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8001f96:	9208      	str	r2, [sp, #32]
 8001f98:	9304      	str	r3, [sp, #16]
 8001f9a:	e65b      	b.n	8001c54 <_svfprintf_r+0x110c>
 8001f9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	441a      	add	r2, r3
 8001fa2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8001fa6:	9208      	str	r2, [sp, #32]
 8001fa8:	9304      	str	r3, [sp, #16]
 8001faa:	e653      	b.n	8001c54 <_svfprintf_r+0x110c>
 8001fac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001fae:	9a08      	ldr	r2, [sp, #32]
 8001fb0:	f1c3 0301 	rsb	r3, r3, #1
 8001fb4:	441a      	add	r2, r3
 8001fb6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8001fba:	9208      	str	r2, [sp, #32]
 8001fbc:	9304      	str	r3, [sp, #16]
 8001fbe:	2567      	movs	r5, #103	; 0x67
 8001fc0:	e648      	b.n	8001c54 <_svfprintf_r+0x110c>
 8001fc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001fc4:	f899 5001 	ldrb.w	r5, [r9, #1]
 8001fc8:	4689      	mov	r9, r1
 8001fca:	f852 1b04 	ldr.w	r1, [r2], #4
 8001fce:	9209      	str	r2, [sp, #36]	; 0x24
 8001fd0:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
 8001fd4:	9105      	str	r1, [sp, #20]
 8001fd6:	f7fe be02 	b.w	8000bde <_svfprintf_r+0x96>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	9311      	str	r3, [sp, #68]	; 0x44
 8001fde:	e67e      	b.n	8001cde <_svfprintf_r+0x1196>
 8001fe0:	ee19 2a10 	vmov	r2, s18
 8001fe4:	230c      	movs	r3, #12
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fec:	9306      	str	r3, [sp, #24]
 8001fee:	f7fe becd 	b.w	8000d8c <_svfprintf_r+0x244>
 8001ff2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001ff4:	930a      	str	r3, [sp, #40]	; 0x28
 8001ff6:	e65b      	b.n	8001cb0 <_svfprintf_r+0x1168>
 8001ff8:	0801e298 	.word	0x0801e298
 8001ffc:	0801e29c 	.word	0x0801e29c
 8002000:	66666667 	.word	0x66666667
 8002004:	00000000 	.word	0x00000000

08002008 <_vfprintf_r>:
 8002008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800200c:	ed2d 8b06 	vpush	{d8-d10}
 8002010:	b0bb      	sub	sp, #236	; 0xec
 8002012:	461c      	mov	r4, r3
 8002014:	4688      	mov	r8, r1
 8002016:	4691      	mov	r9, r2
 8002018:	ee09 0a10 	vmov	s18, r0
 800201c:	4605      	mov	r5, r0
 800201e:	f003 f887 	bl	8005130 <_localeconv_r>
 8002022:	6803      	ldr	r3, [r0, #0]
 8002024:	9310      	str	r3, [sp, #64]	; 0x40
 8002026:	4618      	mov	r0, r3
 8002028:	9409      	str	r4, [sp, #36]	; 0x24
 800202a:	f7fe fc29 	bl	8000880 <strlen>
 800202e:	900e      	str	r0, [sp, #56]	; 0x38
 8002030:	b11d      	cbz	r5, 800203a <_vfprintf_r+0x32>
 8002032:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 8242 	beq.w	80024be <_vfprintf_r+0x4b6>
 800203a:	f9b8 200c 	ldrsh.w	r2, [r8, #12]
 800203e:	0495      	lsls	r5, r2, #18
 8002040:	b293      	uxth	r3, r2
 8002042:	d40a      	bmi.n	800205a <_vfprintf_r+0x52>
 8002044:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8002048:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 800204c:	f8a8 300c 	strh.w	r3, [r8, #12]
 8002050:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002054:	b29b      	uxth	r3, r3
 8002056:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
 800205a:	0718      	lsls	r0, r3, #28
 800205c:	f140 80ab 	bpl.w	80021b6 <_vfprintf_r+0x1ae>
 8002060:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8002064:	2a00      	cmp	r2, #0
 8002066:	f000 80a6 	beq.w	80021b6 <_vfprintf_r+0x1ae>
 800206a:	f003 031a 	and.w	r3, r3, #26
 800206e:	2b0a      	cmp	r3, #10
 8002070:	f000 80b0 	beq.w	80021d4 <_vfprintf_r+0x1cc>
 8002074:	ed9f 7b94 	vldr	d7, [pc, #592]	; 80022c8 <_vfprintf_r+0x2c0>
 8002078:	2300      	movs	r3, #0
 800207a:	e9cd 331e 	strd	r3, r3, [sp, #120]	; 0x78
 800207e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002082:	aa2a      	add	r2, sp, #168	; 0xa8
 8002084:	930b      	str	r3, [sp, #44]	; 0x2c
 8002086:	921d      	str	r2, [sp, #116]	; 0x74
 8002088:	4692      	mov	sl, r2
 800208a:	930f      	str	r3, [sp, #60]	; 0x3c
 800208c:	9311      	str	r3, [sp, #68]	; 0x44
 800208e:	9307      	str	r3, [sp, #28]
 8002090:	f899 3000 	ldrb.w	r3, [r9]
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 81a4 	beq.w	80023e2 <_vfprintf_r+0x3da>
 800209a:	464c      	mov	r4, r9
 800209c:	e004      	b.n	80020a8 <_vfprintf_r+0xa0>
 800209e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 80e5 	beq.w	8002272 <_vfprintf_r+0x26a>
 80020a8:	2b25      	cmp	r3, #37	; 0x25
 80020aa:	d1f8      	bne.n	800209e <_vfprintf_r+0x96>
 80020ac:	ebb4 0509 	subs.w	r5, r4, r9
 80020b0:	f040 80e3 	bne.w	800227a <_vfprintf_r+0x272>
 80020b4:	7823      	ldrb	r3, [r4, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 8193 	beq.w	80023e2 <_vfprintf_r+0x3da>
 80020bc:	2300      	movs	r3, #0
 80020be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80020c6:	7865      	ldrb	r5, [r4, #1]
 80020c8:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
 80020cc:	f104 0901 	add.w	r9, r4, #1
 80020d0:	4618      	mov	r0, r3
 80020d2:	469b      	mov	fp, r3
 80020d4:	f109 0901 	add.w	r9, r9, #1
 80020d8:	f1a5 0220 	sub.w	r2, r5, #32
 80020dc:	2a58      	cmp	r2, #88	; 0x58
 80020de:	f200 80f7 	bhi.w	80022d0 <_vfprintf_r+0x2c8>
 80020e2:	e8df f012 	tbh	[pc, r2, lsl #1]
 80020e6:	027f      	.short	0x027f
 80020e8:	00f500f5 	.word	0x00f500f5
 80020ec:	00f5027a 	.word	0x00f5027a
 80020f0:	00f500f5 	.word	0x00f500f5
 80020f4:	00f500f5 	.word	0x00f500f5
 80020f8:	022d00f5 	.word	0x022d00f5
 80020fc:	00f50275 	.word	0x00f50275
 8002100:	023d0238 	.word	0x023d0238
 8002104:	027000f5 	.word	0x027000f5
 8002108:	00590059 	.word	0x00590059
 800210c:	00590059 	.word	0x00590059
 8002110:	00590059 	.word	0x00590059
 8002114:	00590059 	.word	0x00590059
 8002118:	00f50059 	.word	0x00f50059
 800211c:	00f500f5 	.word	0x00f500f5
 8002120:	00f500f5 	.word	0x00f500f5
 8002124:	00f500f5 	.word	0x00f500f5
 8002128:	00f500f5 	.word	0x00f500f5
 800212c:	025700f5 	.word	0x025700f5
 8002130:	00f50189 	.word	0x00f50189
 8002134:	00f50189 	.word	0x00f50189
 8002138:	00f500f5 	.word	0x00f500f5
 800213c:	02b600f5 	.word	0x02b600f5
 8002140:	00f500f5 	.word	0x00f500f5
 8002144:	00f50098 	.word	0x00f50098
 8002148:	00f500f5 	.word	0x00f500f5
 800214c:	00f500f5 	.word	0x00f500f5
 8002150:	00f50088 	.word	0x00f50088
 8002154:	029500f5 	.word	0x029500f5
 8002158:	00f500f5 	.word	0x00f500f5
 800215c:	00f500f5 	.word	0x00f500f5
 8002160:	00f500f5 	.word	0x00f500f5
 8002164:	00f500f5 	.word	0x00f500f5
 8002168:	00f500f5 	.word	0x00f500f5
 800216c:	01f00287 	.word	0x01f00287
 8002170:	01890189 	.word	0x01890189
 8002174:	02bb0189 	.word	0x02bb0189
 8002178:	00f501f0 	.word	0x00f501f0
 800217c:	02ec00f5 	.word	0x02ec00f5
 8002180:	02d600f5 	.word	0x02d600f5
 8002184:	02c5009a 	.word	0x02c5009a
 8002188:	00f502c0 	.word	0x00f502c0
 800218c:	00f5031b 	.word	0x00f5031b
 8002190:	00f5008a 	.word	0x00f5008a
 8002194:	02f900f5 	.word	0x02f900f5
 8002198:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 800219c:	2100      	movs	r1, #0
 800219e:	f819 5b01 	ldrb.w	r5, [r9], #1
 80021a2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80021a6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80021aa:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 80021ae:	2a09      	cmp	r2, #9
 80021b0:	d9f5      	bls.n	800219e <_vfprintf_r+0x196>
 80021b2:	9106      	str	r1, [sp, #24]
 80021b4:	e790      	b.n	80020d8 <_vfprintf_r+0xd0>
 80021b6:	ee19 0a10 	vmov	r0, s18
 80021ba:	4641      	mov	r1, r8
 80021bc:	f001 f9f2 	bl	80035a4 <__swsetup_r>
 80021c0:	2800      	cmp	r0, #0
 80021c2:	f041 8126 	bne.w	8003412 <_vfprintf_r+0x140a>
 80021c6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80021ca:	f003 031a 	and.w	r3, r3, #26
 80021ce:	2b0a      	cmp	r3, #10
 80021d0:	f47f af50 	bne.w	8002074 <_vfprintf_r+0x6c>
 80021d4:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f6ff af4b 	blt.w	8002074 <_vfprintf_r+0x6c>
 80021de:	ee19 0a10 	vmov	r0, s18
 80021e2:	4623      	mov	r3, r4
 80021e4:	464a      	mov	r2, r9
 80021e6:	4641      	mov	r1, r8
 80021e8:	b03b      	add	sp, #236	; 0xec
 80021ea:	ecbd 8b06 	vpop	{d8-d10}
 80021ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021f2:	f001 b9a1 	b.w	8003538 <__sbprintf>
 80021f6:	f04b 0b10 	orr.w	fp, fp, #16
 80021fa:	f01b 0120 	ands.w	r1, fp, #32
 80021fe:	f000 8150 	beq.w	80024a2 <_vfprintf_r+0x49a>
 8002202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002204:	3307      	adds	r3, #7
 8002206:	f023 0307 	bic.w	r3, r3, #7
 800220a:	6859      	ldr	r1, [r3, #4]
 800220c:	f853 0b08 	ldr.w	r0, [r3], #8
 8002210:	9309      	str	r3, [sp, #36]	; 0x24
 8002212:	2301      	movs	r3, #1
 8002214:	e00e      	b.n	8002234 <_vfprintf_r+0x22c>
 8002216:	f04b 0b10 	orr.w	fp, fp, #16
 800221a:	f01b 0120 	ands.w	r1, fp, #32
 800221e:	f000 8133 	beq.w	8002488 <_vfprintf_r+0x480>
 8002222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002224:	3307      	adds	r3, #7
 8002226:	f023 0307 	bic.w	r3, r3, #7
 800222a:	6859      	ldr	r1, [r3, #4]
 800222c:	f853 0b08 	ldr.w	r0, [r3], #8
 8002230:	9309      	str	r3, [sp, #36]	; 0x24
 8002232:	2300      	movs	r3, #0
 8002234:	2400      	movs	r4, #0
 8002236:	f88d 4057 	strb.w	r4, [sp, #87]	; 0x57
 800223a:	9a05      	ldr	r2, [sp, #20]
 800223c:	1c56      	adds	r6, r2, #1
 800223e:	f000 8291 	beq.w	8002764 <_vfprintf_r+0x75c>
 8002242:	f02b 0680 	bic.w	r6, fp, #128	; 0x80
 8002246:	9603      	str	r6, [sp, #12]
 8002248:	ea50 0601 	orrs.w	r6, r0, r1
 800224c:	f040 8288 	bne.w	8002760 <_vfprintf_r+0x758>
 8002250:	2a00      	cmp	r2, #0
 8002252:	f040 830d 	bne.w	8002870 <_vfprintf_r+0x868>
 8002256:	2b00      	cmp	r3, #0
 8002258:	f040 851e 	bne.w	8002c98 <_vfprintf_r+0xc90>
 800225c:	f01b 0301 	ands.w	r3, fp, #1
 8002260:	9308      	str	r3, [sp, #32]
 8002262:	f000 8594 	beq.w	8002d8e <_vfprintf_r+0xd86>
 8002266:	2330      	movs	r3, #48	; 0x30
 8002268:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
 800226c:	f10d 06a7 	add.w	r6, sp, #167	; 0xa7
 8002270:	e29d      	b.n	80027ae <_vfprintf_r+0x7a6>
 8002272:	ebb4 0509 	subs.w	r5, r4, r9
 8002276:	f000 80b4 	beq.w	80023e2 <_vfprintf_r+0x3da>
 800227a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800227c:	442b      	add	r3, r5
 800227e:	931f      	str	r3, [sp, #124]	; 0x7c
 8002280:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002282:	3301      	adds	r3, #1
 8002284:	2b07      	cmp	r3, #7
 8002286:	e9ca 9500 	strd	r9, r5, [sl]
 800228a:	931e      	str	r3, [sp, #120]	; 0x78
 800228c:	dc05      	bgt.n	800229a <_vfprintf_r+0x292>
 800228e:	f10a 0a08 	add.w	sl, sl, #8
 8002292:	9b07      	ldr	r3, [sp, #28]
 8002294:	442b      	add	r3, r5
 8002296:	9307      	str	r3, [sp, #28]
 8002298:	e70c      	b.n	80020b4 <_vfprintf_r+0xac>
 800229a:	ee19 0a10 	vmov	r0, s18
 800229e:	aa1d      	add	r2, sp, #116	; 0x74
 80022a0:	4641      	mov	r1, r8
 80022a2:	f005 f9dd 	bl	8007660 <__sprint_r>
 80022a6:	b918      	cbnz	r0, 80022b0 <_vfprintf_r+0x2a8>
 80022a8:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80022ac:	e7f1      	b.n	8002292 <_vfprintf_r+0x28a>
 80022ae:	46b0      	mov	r8, r6
 80022b0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80022b4:	065b      	lsls	r3, r3, #25
 80022b6:	f101 80ac 	bmi.w	8003412 <_vfprintf_r+0x140a>
 80022ba:	9807      	ldr	r0, [sp, #28]
 80022bc:	b03b      	add	sp, #236	; 0xec
 80022be:	ecbd 8b06 	vpop	{d8-d10}
 80022c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022c6:	bf00      	nop
	...
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f040 87e5 	bne.w	80032a0 <_vfprintf_r+0x1298>
 80022d6:	2d00      	cmp	r5, #0
 80022d8:	f000 8083 	beq.w	80023e2 <_vfprintf_r+0x3da>
 80022dc:	2300      	movs	r3, #0
 80022de:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
 80022e2:	2301      	movs	r3, #1
 80022e4:	f88d 5080 	strb.w	r5, [sp, #128]	; 0x80
 80022e8:	9304      	str	r3, [sp, #16]
 80022ea:	9308      	str	r3, [sp, #32]
 80022ec:	ae20      	add	r6, sp, #128	; 0x80
 80022ee:	2300      	movs	r3, #0
 80022f0:	f8cd b00c 	str.w	fp, [sp, #12]
 80022f4:	9305      	str	r3, [sp, #20]
 80022f6:	930a      	str	r3, [sp, #40]	; 0x28
 80022f8:	9b03      	ldr	r3, [sp, #12]
 80022fa:	f013 0302 	ands.w	r3, r3, #2
 80022fe:	d002      	beq.n	8002306 <_vfprintf_r+0x2fe>
 8002300:	9a04      	ldr	r2, [sp, #16]
 8002302:	3202      	adds	r2, #2
 8002304:	9204      	str	r2, [sp, #16]
 8002306:	9a03      	ldr	r2, [sp, #12]
 8002308:	f012 0b84 	ands.w	fp, r2, #132	; 0x84
 800230c:	d105      	bne.n	800231a <_vfprintf_r+0x312>
 800230e:	9a06      	ldr	r2, [sp, #24]
 8002310:	9904      	ldr	r1, [sp, #16]
 8002312:	1a57      	subs	r7, r2, r1
 8002314:	2f00      	cmp	r7, #0
 8002316:	f300 83a2 	bgt.w	8002a5e <_vfprintf_r+0xa56>
 800231a:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800231c:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 8002320:	b18a      	cbz	r2, 8002346 <_vfprintf_r+0x33e>
 8002322:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002324:	f10d 0157 	add.w	r1, sp, #87	; 0x57
 8002328:	3201      	adds	r2, #1
 800232a:	3401      	adds	r4, #1
 800232c:	f8ca 1000 	str.w	r1, [sl]
 8002330:	2a07      	cmp	r2, #7
 8002332:	f04f 0101 	mov.w	r1, #1
 8002336:	941f      	str	r4, [sp, #124]	; 0x7c
 8002338:	921e      	str	r2, [sp, #120]	; 0x78
 800233a:	f8ca 1004 	str.w	r1, [sl, #4]
 800233e:	f300 83dd 	bgt.w	8002afc <_vfprintf_r+0xaf4>
 8002342:	f10a 0a08 	add.w	sl, sl, #8
 8002346:	b183      	cbz	r3, 800236a <_vfprintf_r+0x362>
 8002348:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800234a:	aa16      	add	r2, sp, #88	; 0x58
 800234c:	3301      	adds	r3, #1
 800234e:	3402      	adds	r4, #2
 8002350:	f8ca 2000 	str.w	r2, [sl]
 8002354:	2b07      	cmp	r3, #7
 8002356:	f04f 0202 	mov.w	r2, #2
 800235a:	941f      	str	r4, [sp, #124]	; 0x7c
 800235c:	931e      	str	r3, [sp, #120]	; 0x78
 800235e:	f8ca 2004 	str.w	r2, [sl, #4]
 8002362:	f300 83da 	bgt.w	8002b1a <_vfprintf_r+0xb12>
 8002366:	f10a 0a08 	add.w	sl, sl, #8
 800236a:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 800236e:	f000 829b 	beq.w	80028a8 <_vfprintf_r+0x8a0>
 8002372:	9b05      	ldr	r3, [sp, #20]
 8002374:	9a08      	ldr	r2, [sp, #32]
 8002376:	eba3 0b02 	sub.w	fp, r3, r2
 800237a:	f1bb 0f00 	cmp.w	fp, #0
 800237e:	f300 82d6 	bgt.w	800292e <_vfprintf_r+0x926>
 8002382:	9b03      	ldr	r3, [sp, #12]
 8002384:	05df      	lsls	r7, r3, #23
 8002386:	f100 821b 	bmi.w	80027c0 <_vfprintf_r+0x7b8>
 800238a:	9b08      	ldr	r3, [sp, #32]
 800238c:	f8ca 3004 	str.w	r3, [sl, #4]
 8002390:	441c      	add	r4, r3
 8002392:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002394:	f8ca 6000 	str.w	r6, [sl]
 8002398:	3301      	adds	r3, #1
 800239a:	2b07      	cmp	r3, #7
 800239c:	941f      	str	r4, [sp, #124]	; 0x7c
 800239e:	931e      	str	r3, [sp, #120]	; 0x78
 80023a0:	f300 8350 	bgt.w	8002a44 <_vfprintf_r+0xa3c>
 80023a4:	f10a 0a08 	add.w	sl, sl, #8
 80023a8:	9b03      	ldr	r3, [sp, #12]
 80023aa:	075a      	lsls	r2, r3, #29
 80023ac:	d505      	bpl.n	80023ba <_vfprintf_r+0x3b2>
 80023ae:	9b06      	ldr	r3, [sp, #24]
 80023b0:	9a04      	ldr	r2, [sp, #16]
 80023b2:	1a9d      	subs	r5, r3, r2
 80023b4:	2d00      	cmp	r5, #0
 80023b6:	f300 83bd 	bgt.w	8002b34 <_vfprintf_r+0xb2c>
 80023ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80023be:	9904      	ldr	r1, [sp, #16]
 80023c0:	428a      	cmp	r2, r1
 80023c2:	bfac      	ite	ge
 80023c4:	189b      	addge	r3, r3, r2
 80023c6:	185b      	addlt	r3, r3, r1
 80023c8:	9307      	str	r3, [sp, #28]
 80023ca:	2c00      	cmp	r4, #0
 80023cc:	f040 82ea 	bne.w	80029a4 <_vfprintf_r+0x99c>
 80023d0:	2300      	movs	r3, #0
 80023d2:	931e      	str	r3, [sp, #120]	; 0x78
 80023d4:	f899 3000 	ldrb.w	r3, [r9]
 80023d8:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f47f ae5c 	bne.w	800209a <_vfprintf_r+0x92>
 80023e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f43f af63 	beq.w	80022b0 <_vfprintf_r+0x2a8>
 80023ea:	ee19 0a10 	vmov	r0, s18
 80023ee:	aa1d      	add	r2, sp, #116	; 0x74
 80023f0:	4641      	mov	r1, r8
 80023f2:	f005 f935 	bl	8007660 <__sprint_r>
 80023f6:	e75b      	b.n	80022b0 <_vfprintf_r+0x2a8>
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f040 87f6 	bne.w	80033ea <_vfprintf_r+0x13e2>
 80023fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002400:	3307      	adds	r3, #7
 8002402:	f023 0307 	bic.w	r3, r3, #7
 8002406:	ecb3 7b02 	vldmia	r3!, {d7}
 800240a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800240e:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 8002412:	9309      	str	r3, [sp, #36]	; 0x24
 8002414:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8002418:	ee08 3a90 	vmov	s17, r3
 800241c:	ee08 6a10 	vmov	s16, r6
 8002420:	4bb9      	ldr	r3, [pc, #740]	; (8002708 <_vfprintf_r+0x700>)
 8002422:	ec51 0b18 	vmov	r0, r1, d8
 8002426:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800242a:	f007 f93d 	bl	80096a8 <__aeabi_dcmpun>
 800242e:	2800      	cmp	r0, #0
 8002430:	f040 84b4 	bne.w	8002d9c <_vfprintf_r+0xd94>
 8002434:	4bb4      	ldr	r3, [pc, #720]	; (8002708 <_vfprintf_r+0x700>)
 8002436:	ec51 0b18 	vmov	r0, r1, d8
 800243a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800243e:	f007 f915 	bl	800966c <__aeabi_dcmple>
 8002442:	2800      	cmp	r0, #0
 8002444:	f040 84aa 	bne.w	8002d9c <_vfprintf_r+0xd94>
 8002448:	2200      	movs	r2, #0
 800244a:	2300      	movs	r3, #0
 800244c:	4630      	mov	r0, r6
 800244e:	4639      	mov	r1, r7
 8002450:	f007 f902 	bl	8009658 <__aeabi_dcmplt>
 8002454:	2800      	cmp	r0, #0
 8002456:	f040 8702 	bne.w	800325e <_vfprintf_r+0x1256>
 800245a:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 800245e:	4eab      	ldr	r6, [pc, #684]	; (800270c <_vfprintf_r+0x704>)
 8002460:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
 8002464:	9303      	str	r3, [sp, #12]
 8002466:	4baa      	ldr	r3, [pc, #680]	; (8002710 <_vfprintf_r+0x708>)
 8002468:	2200      	movs	r2, #0
 800246a:	2d47      	cmp	r5, #71	; 0x47
 800246c:	bfc8      	it	gt
 800246e:	461e      	movgt	r6, r3
 8002470:	2303      	movs	r3, #3
 8002472:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8002476:	9308      	str	r3, [sp, #32]
 8002478:	920a      	str	r2, [sp, #40]	; 0x28
 800247a:	2c00      	cmp	r4, #0
 800247c:	f43f af3c 	beq.w	80022f8 <_vfprintf_r+0x2f0>
 8002480:	9b04      	ldr	r3, [sp, #16]
 8002482:	3301      	adds	r3, #1
 8002484:	9304      	str	r3, [sp, #16]
 8002486:	e737      	b.n	80022f8 <_vfprintf_r+0x2f0>
 8002488:	f01b 0310 	ands.w	r3, fp, #16
 800248c:	d152      	bne.n	8002534 <_vfprintf_r+0x52c>
 800248e:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 8002492:	d04f      	beq.n	8002534 <_vfprintf_r+0x52c>
 8002494:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002496:	f852 0b04 	ldr.w	r0, [r2], #4
 800249a:	9209      	str	r2, [sp, #36]	; 0x24
 800249c:	4619      	mov	r1, r3
 800249e:	b280      	uxth	r0, r0
 80024a0:	e6c8      	b.n	8002234 <_vfprintf_r+0x22c>
 80024a2:	f01b 0310 	ands.w	r3, fp, #16
 80024a6:	d13f      	bne.n	8002528 <_vfprintf_r+0x520>
 80024a8:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 80024ac:	d03c      	beq.n	8002528 <_vfprintf_r+0x520>
 80024ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80024b0:	f852 0b04 	ldr.w	r0, [r2], #4
 80024b4:	9209      	str	r2, [sp, #36]	; 0x24
 80024b6:	4619      	mov	r1, r3
 80024b8:	b280      	uxth	r0, r0
 80024ba:	2301      	movs	r3, #1
 80024bc:	e6ba      	b.n	8002234 <_vfprintf_r+0x22c>
 80024be:	4628      	mov	r0, r5
 80024c0:	f002 fb02 	bl	8004ac8 <__sinit>
 80024c4:	e5b9      	b.n	800203a <_vfprintf_r+0x32>
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f040 879f 	bne.w	800340a <_vfprintf_r+0x1402>
 80024cc:	f01b 0f20 	tst.w	fp, #32
 80024d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024d2:	d068      	beq.n	80025a6 <_vfprintf_r+0x59e>
 80024d4:	3307      	adds	r3, #7
 80024d6:	f023 0307 	bic.w	r3, r3, #7
 80024da:	461a      	mov	r2, r3
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f852 0b08 	ldr.w	r0, [r2], #8
 80024e2:	9209      	str	r2, [sp, #36]	; 0x24
 80024e4:	4619      	mov	r1, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f2c0 843d 	blt.w	8002d66 <_vfprintf_r+0xd5e>
 80024ec:	9b05      	ldr	r3, [sp, #20]
 80024ee:	3301      	adds	r3, #1
 80024f0:	f000 8505 	beq.w	8002efe <_vfprintf_r+0xef6>
 80024f4:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
 80024f8:	9303      	str	r3, [sp, #12]
 80024fa:	ea50 0301 	orrs.w	r3, r0, r1
 80024fe:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8002502:	f000 83c5 	beq.w	8002c90 <_vfprintf_r+0xc88>
 8002506:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800250a:	280a      	cmp	r0, #10
 800250c:	f171 0300 	sbcs.w	r3, r1, #0
 8002510:	f080 84fc 	bcs.w	8002f0c <_vfprintf_r+0xf04>
 8002514:	3030      	adds	r0, #48	; 0x30
 8002516:	2301      	movs	r3, #1
 8002518:	f88d 00a7 	strb.w	r0, [sp, #167]	; 0xa7
 800251c:	f8cd b00c 	str.w	fp, [sp, #12]
 8002520:	9308      	str	r3, [sp, #32]
 8002522:	f10d 06a7 	add.w	r6, sp, #167	; 0xa7
 8002526:	e142      	b.n	80027ae <_vfprintf_r+0x7a6>
 8002528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800252a:	f853 0b04 	ldr.w	r0, [r3], #4
 800252e:	9309      	str	r3, [sp, #36]	; 0x24
 8002530:	2301      	movs	r3, #1
 8002532:	e67f      	b.n	8002234 <_vfprintf_r+0x22c>
 8002534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002536:	f853 0b04 	ldr.w	r0, [r3], #4
 800253a:	9309      	str	r3, [sp, #36]	; 0x24
 800253c:	460b      	mov	r3, r1
 800253e:	e679      	b.n	8002234 <_vfprintf_r+0x22c>
 8002540:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002542:	f852 1b04 	ldr.w	r1, [r2], #4
 8002546:	9106      	str	r1, [sp, #24]
 8002548:	2900      	cmp	r1, #0
 800254a:	f280 841b 	bge.w	8002d84 <_vfprintf_r+0xd7c>
 800254e:	9906      	ldr	r1, [sp, #24]
 8002550:	9209      	str	r2, [sp, #36]	; 0x24
 8002552:	4249      	negs	r1, r1
 8002554:	9106      	str	r1, [sp, #24]
 8002556:	f899 5000 	ldrb.w	r5, [r9]
 800255a:	f04b 0b04 	orr.w	fp, fp, #4
 800255e:	e5b9      	b.n	80020d4 <_vfprintf_r+0xcc>
 8002560:	4649      	mov	r1, r9
 8002562:	f811 5b01 	ldrb.w	r5, [r1], #1
 8002566:	2d2a      	cmp	r5, #42	; 0x2a
 8002568:	f000 87c5 	beq.w	80034f6 <_vfprintf_r+0x14ee>
 800256c:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8002570:	2a09      	cmp	r2, #9
 8002572:	4689      	mov	r9, r1
 8002574:	bf98      	it	ls
 8002576:	2100      	movls	r1, #0
 8002578:	f200 8733 	bhi.w	80033e2 <_vfprintf_r+0x13da>
 800257c:	f819 5b01 	ldrb.w	r5, [r9], #1
 8002580:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002584:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8002588:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 800258c:	2a09      	cmp	r2, #9
 800258e:	d9f5      	bls.n	800257c <_vfprintf_r+0x574>
 8002590:	9105      	str	r1, [sp, #20]
 8002592:	e5a1      	b.n	80020d8 <_vfprintf_r+0xd0>
 8002594:	2b00      	cmp	r3, #0
 8002596:	f040 8730 	bne.w	80033fa <_vfprintf_r+0x13f2>
 800259a:	f04b 0b10 	orr.w	fp, fp, #16
 800259e:	f01b 0f20 	tst.w	fp, #32
 80025a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025a4:	d196      	bne.n	80024d4 <_vfprintf_r+0x4cc>
 80025a6:	f853 0b04 	ldr.w	r0, [r3], #4
 80025aa:	9309      	str	r3, [sp, #36]	; 0x24
 80025ac:	f01b 0f10 	tst.w	fp, #16
 80025b0:	f040 83d4 	bne.w	8002d5c <_vfprintf_r+0xd54>
 80025b4:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80025b8:	f000 83d0 	beq.w	8002d5c <_vfprintf_r+0xd54>
 80025bc:	f340 31c0 	sbfx	r1, r0, #15, #1
 80025c0:	460b      	mov	r3, r1
 80025c2:	b200      	sxth	r0, r0
 80025c4:	e78f      	b.n	80024e6 <_vfprintf_r+0x4de>
 80025c6:	f899 5000 	ldrb.w	r5, [r9]
 80025ca:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 80025ce:	e581      	b.n	80020d4 <_vfprintf_r+0xcc>
 80025d0:	f899 5000 	ldrb.w	r5, [r9]
 80025d4:	2301      	movs	r3, #1
 80025d6:	202b      	movs	r0, #43	; 0x2b
 80025d8:	e57c      	b.n	80020d4 <_vfprintf_r+0xcc>
 80025da:	f899 5000 	ldrb.w	r5, [r9]
 80025de:	f04b 0b01 	orr.w	fp, fp, #1
 80025e2:	e577      	b.n	80020d4 <_vfprintf_r+0xcc>
 80025e4:	f899 5000 	ldrb.w	r5, [r9]
 80025e8:	2800      	cmp	r0, #0
 80025ea:	f47f ad73 	bne.w	80020d4 <_vfprintf_r+0xcc>
 80025ee:	2301      	movs	r3, #1
 80025f0:	2020      	movs	r0, #32
 80025f2:	e56f      	b.n	80020d4 <_vfprintf_r+0xcc>
 80025f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025f6:	2200      	movs	r2, #0
 80025f8:	f88d 2057 	strb.w	r2, [sp, #87]	; 0x57
 80025fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002600:	9309      	str	r3, [sp, #36]	; 0x24
 8002602:	2301      	movs	r3, #1
 8002604:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
 8002608:	9304      	str	r3, [sp, #16]
 800260a:	9308      	str	r3, [sp, #32]
 800260c:	ae20      	add	r6, sp, #128	; 0x80
 800260e:	e66e      	b.n	80022ee <_vfprintf_r+0x2e6>
 8002610:	2b00      	cmp	r3, #0
 8002612:	f040 86e2 	bne.w	80033da <_vfprintf_r+0x13d2>
 8002616:	4b3f      	ldr	r3, [pc, #252]	; (8002714 <_vfprintf_r+0x70c>)
 8002618:	930f      	str	r3, [sp, #60]	; 0x3c
 800261a:	f01b 0120 	ands.w	r1, fp, #32
 800261e:	d063      	beq.n	80026e8 <_vfprintf_r+0x6e0>
 8002620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002622:	3307      	adds	r3, #7
 8002624:	f023 0307 	bic.w	r3, r3, #7
 8002628:	6859      	ldr	r1, [r3, #4]
 800262a:	f853 0b08 	ldr.w	r0, [r3], #8
 800262e:	9309      	str	r3, [sp, #36]	; 0x24
 8002630:	f01b 0f01 	tst.w	fp, #1
 8002634:	d00b      	beq.n	800264e <_vfprintf_r+0x646>
 8002636:	ea50 0301 	orrs.w	r3, r0, r1
 800263a:	d008      	beq.n	800264e <_vfprintf_r+0x646>
 800263c:	2330      	movs	r3, #48	; 0x30
 800263e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8002642:	f88d 5059 	strb.w	r5, [sp, #89]	; 0x59
 8002646:	f04b 0b02 	orr.w	fp, fp, #2
 800264a:	2302      	movs	r3, #2
 800264c:	e5f2      	b.n	8002234 <_vfprintf_r+0x22c>
 800264e:	2302      	movs	r3, #2
 8002650:	e5f0      	b.n	8002234 <_vfprintf_r+0x22c>
 8002652:	f899 5000 	ldrb.w	r5, [r9]
 8002656:	f04b 0b08 	orr.w	fp, fp, #8
 800265a:	e53b      	b.n	80020d4 <_vfprintf_r+0xcc>
 800265c:	f899 5000 	ldrb.w	r5, [r9]
 8002660:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 8002664:	e536      	b.n	80020d4 <_vfprintf_r+0xcc>
 8002666:	f899 5000 	ldrb.w	r5, [r9]
 800266a:	f04b 0b20 	orr.w	fp, fp, #32
 800266e:	e531      	b.n	80020d4 <_vfprintf_r+0xcc>
 8002670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002672:	f853 0b04 	ldr.w	r0, [r3], #4
 8002676:	9309      	str	r3, [sp, #36]	; 0x24
 8002678:	2330      	movs	r3, #48	; 0x30
 800267a:	2578      	movs	r5, #120	; 0x78
 800267c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8002680:	4b25      	ldr	r3, [pc, #148]	; (8002718 <_vfprintf_r+0x710>)
 8002682:	930f      	str	r3, [sp, #60]	; 0x3c
 8002684:	f04b 0b02 	orr.w	fp, fp, #2
 8002688:	f88d 5059 	strb.w	r5, [sp, #89]	; 0x59
 800268c:	2100      	movs	r1, #0
 800268e:	2302      	movs	r3, #2
 8002690:	e5d0      	b.n	8002234 <_vfprintf_r+0x22c>
 8002692:	2b00      	cmp	r3, #0
 8002694:	f040 86ad 	bne.w	80033f2 <_vfprintf_r+0x13ea>
 8002698:	f01b 0f20 	tst.w	fp, #32
 800269c:	f040 8425 	bne.w	8002eea <_vfprintf_r+0xee2>
 80026a0:	f01b 0f10 	tst.w	fp, #16
 80026a4:	f040 849d 	bne.w	8002fe2 <_vfprintf_r+0xfda>
 80026a8:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80026ac:	f000 8499 	beq.w	8002fe2 <_vfprintf_r+0xfda>
 80026b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026b2:	9907      	ldr	r1, [sp, #28]
 80026b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80026b8:	9309      	str	r3, [sp, #36]	; 0x24
 80026ba:	8011      	strh	r1, [r2, #0]
 80026bc:	e4e8      	b.n	8002090 <_vfprintf_r+0x88>
 80026be:	f899 5000 	ldrb.w	r5, [r9]
 80026c2:	2d6c      	cmp	r5, #108	; 0x6c
 80026c4:	bf03      	ittte	eq
 80026c6:	f899 5001 	ldrbeq.w	r5, [r9, #1]
 80026ca:	f04b 0b20 	orreq.w	fp, fp, #32
 80026ce:	f109 0901 	addeq.w	r9, r9, #1
 80026d2:	f04b 0b10 	orrne.w	fp, fp, #16
 80026d6:	e4fd      	b.n	80020d4 <_vfprintf_r+0xcc>
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f040 8692 	bne.w	8003402 <_vfprintf_r+0x13fa>
 80026de:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <_vfprintf_r+0x710>)
 80026e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80026e2:	f01b 0120 	ands.w	r1, fp, #32
 80026e6:	d19b      	bne.n	8002620 <_vfprintf_r+0x618>
 80026e8:	f01b 0310 	ands.w	r3, fp, #16
 80026ec:	f040 8331 	bne.w	8002d52 <_vfprintf_r+0xd4a>
 80026f0:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 80026f4:	f000 832d 	beq.w	8002d52 <_vfprintf_r+0xd4a>
 80026f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80026fa:	f852 0b04 	ldr.w	r0, [r2], #4
 80026fe:	9209      	str	r2, [sp, #36]	; 0x24
 8002700:	4619      	mov	r1, r3
 8002702:	b280      	uxth	r0, r0
 8002704:	e794      	b.n	8002630 <_vfprintf_r+0x628>
 8002706:	bf00      	nop
 8002708:	7fefffff 	.word	0x7fefffff
 800270c:	0801e290 	.word	0x0801e290
 8002710:	0801e294 	.word	0x0801e294
 8002714:	0801e2b4 	.word	0x0801e2b4
 8002718:	0801e2a0 	.word	0x0801e2a0
 800271c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800271e:	9b05      	ldr	r3, [sp, #20]
 8002720:	f854 6b04 	ldr.w	r6, [r4], #4
 8002724:	2700      	movs	r7, #0
 8002726:	f88d 7057 	strb.w	r7, [sp, #87]	; 0x57
 800272a:	2e00      	cmp	r6, #0
 800272c:	f000 8427 	beq.w	8002f7e <_vfprintf_r+0xf76>
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	f000 8523 	beq.w	800317c <_vfprintf_r+0x1174>
 8002736:	461a      	mov	r2, r3
 8002738:	4639      	mov	r1, r7
 800273a:	4630      	mov	r0, r6
 800273c:	f003 f860 	bl	8005800 <memchr>
 8002740:	2800      	cmp	r0, #0
 8002742:	f000 8632 	beq.w	80033aa <_vfprintf_r+0x13a2>
 8002746:	1b83      	subs	r3, r0, r6
 8002748:	9308      	str	r3, [sp, #32]
 800274a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800274e:	9409      	str	r4, [sp, #36]	; 0x24
 8002750:	9705      	str	r7, [sp, #20]
 8002752:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8002756:	f8cd b00c 	str.w	fp, [sp, #12]
 800275a:	9304      	str	r3, [sp, #16]
 800275c:	970a      	str	r7, [sp, #40]	; 0x28
 800275e:	e68c      	b.n	800247a <_vfprintf_r+0x472>
 8002760:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8002764:	2b01      	cmp	r3, #1
 8002766:	f43f aed0 	beq.w	800250a <_vfprintf_r+0x502>
 800276a:	2b02      	cmp	r3, #2
 800276c:	f000 8088 	beq.w	8002880 <_vfprintf_r+0x878>
 8002770:	ae2a      	add	r6, sp, #168	; 0xa8
 8002772:	f000 0307 	and.w	r3, r0, #7
 8002776:	08c0      	lsrs	r0, r0, #3
 8002778:	ea40 7041 	orr.w	r0, r0, r1, lsl #29
 800277c:	08c9      	lsrs	r1, r1, #3
 800277e:	3330      	adds	r3, #48	; 0x30
 8002780:	ea50 0701 	orrs.w	r7, r0, r1
 8002784:	4632      	mov	r2, r6
 8002786:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800278a:	d1f2      	bne.n	8002772 <_vfprintf_r+0x76a>
 800278c:	f01b 0f01 	tst.w	fp, #1
 8002790:	f000 8084 	beq.w	800289c <_vfprintf_r+0x894>
 8002794:	2b30      	cmp	r3, #48	; 0x30
 8002796:	f000 8081 	beq.w	800289c <_vfprintf_r+0x894>
 800279a:	2330      	movs	r3, #48	; 0x30
 800279c:	3a02      	subs	r2, #2
 800279e:	f806 3c01 	strb.w	r3, [r6, #-1]
 80027a2:	ab2a      	add	r3, sp, #168	; 0xa8
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	f8cd b00c 	str.w	fp, [sp, #12]
 80027aa:	9308      	str	r3, [sp, #32]
 80027ac:	4616      	mov	r6, r2
 80027ae:	9b05      	ldr	r3, [sp, #20]
 80027b0:	9a08      	ldr	r2, [sp, #32]
 80027b2:	4293      	cmp	r3, r2
 80027b4:	bfb8      	it	lt
 80027b6:	4613      	movlt	r3, r2
 80027b8:	9304      	str	r3, [sp, #16]
 80027ba:	2300      	movs	r3, #0
 80027bc:	930a      	str	r3, [sp, #40]	; 0x28
 80027be:	e65c      	b.n	800247a <_vfprintf_r+0x472>
 80027c0:	2d65      	cmp	r5, #101	; 0x65
 80027c2:	f340 80f9 	ble.w	80029b8 <_vfprintf_r+0x9b0>
 80027c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80027ca:	2200      	movs	r2, #0
 80027cc:	2300      	movs	r3, #0
 80027ce:	f006 ff39 	bl	8009644 <__aeabi_dcmpeq>
 80027d2:	2800      	cmp	r0, #0
 80027d4:	f000 81e9 	beq.w	8002baa <_vfprintf_r+0xba2>
 80027d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80027da:	4ac5      	ldr	r2, [pc, #788]	; (8002af0 <_vfprintf_r+0xae8>)
 80027dc:	f8ca 2000 	str.w	r2, [sl]
 80027e0:	3301      	adds	r3, #1
 80027e2:	3401      	adds	r4, #1
 80027e4:	2201      	movs	r2, #1
 80027e6:	2b07      	cmp	r3, #7
 80027e8:	941f      	str	r4, [sp, #124]	; 0x7c
 80027ea:	931e      	str	r3, [sp, #120]	; 0x78
 80027ec:	f8ca 2004 	str.w	r2, [sl, #4]
 80027f0:	f300 846b 	bgt.w	80030ca <_vfprintf_r+0x10c2>
 80027f4:	f10a 0a08 	add.w	sl, sl, #8
 80027f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80027fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80027fc:	4293      	cmp	r3, r2
 80027fe:	f280 82bc 	bge.w	8002d7a <_vfprintf_r+0xd72>
 8002802:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002804:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002806:	441c      	add	r4, r3
 8002808:	e9ca 2300 	strd	r2, r3, [sl]
 800280c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800280e:	941f      	str	r4, [sp, #124]	; 0x7c
 8002810:	3301      	adds	r3, #1
 8002812:	2b07      	cmp	r3, #7
 8002814:	931e      	str	r3, [sp, #120]	; 0x78
 8002816:	f300 83a5 	bgt.w	8002f64 <_vfprintf_r+0xf5c>
 800281a:	f10a 0a08 	add.w	sl, sl, #8
 800281e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002820:	1e5d      	subs	r5, r3, #1
 8002822:	2d00      	cmp	r5, #0
 8002824:	f77f adc0 	ble.w	80023a8 <_vfprintf_r+0x3a0>
 8002828:	2d10      	cmp	r5, #16
 800282a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800282c:	4fb1      	ldr	r7, [pc, #708]	; (8002af4 <_vfprintf_r+0xaec>)
 800282e:	f340 8440 	ble.w	80030b2 <_vfprintf_r+0x10aa>
 8002832:	ee19 ba10 	vmov	fp, s18
 8002836:	2610      	movs	r6, #16
 8002838:	e005      	b.n	8002846 <_vfprintf_r+0x83e>
 800283a:	f10a 0a08 	add.w	sl, sl, #8
 800283e:	3d10      	subs	r5, #16
 8002840:	2d10      	cmp	r5, #16
 8002842:	f340 8436 	ble.w	80030b2 <_vfprintf_r+0x10aa>
 8002846:	3301      	adds	r3, #1
 8002848:	3410      	adds	r4, #16
 800284a:	2b07      	cmp	r3, #7
 800284c:	e9ca 7600 	strd	r7, r6, [sl]
 8002850:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8002854:	ddf1      	ble.n	800283a <_vfprintf_r+0x832>
 8002856:	aa1d      	add	r2, sp, #116	; 0x74
 8002858:	4641      	mov	r1, r8
 800285a:	4658      	mov	r0, fp
 800285c:	f004 ff00 	bl	8007660 <__sprint_r>
 8002860:	2800      	cmp	r0, #0
 8002862:	f47f ad25 	bne.w	80022b0 <_vfprintf_r+0x2a8>
 8002866:	e9dd 341e 	ldrd	r3, r4, [sp, #120]	; 0x78
 800286a:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800286e:	e7e6      	b.n	800283e <_vfprintf_r+0x836>
 8002870:	2b01      	cmp	r3, #1
 8002872:	f000 8548 	beq.w	8003306 <_vfprintf_r+0x12fe>
 8002876:	2b02      	cmp	r3, #2
 8002878:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800287c:	f47f af78 	bne.w	8002770 <_vfprintf_r+0x768>
 8002880:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002882:	ae2a      	add	r6, sp, #168	; 0xa8
 8002884:	f000 030f 	and.w	r3, r0, #15
 8002888:	0900      	lsrs	r0, r0, #4
 800288a:	5cd3      	ldrb	r3, [r2, r3]
 800288c:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8002890:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8002894:	0909      	lsrs	r1, r1, #4
 8002896:	ea50 0301 	orrs.w	r3, r0, r1
 800289a:	d1f3      	bne.n	8002884 <_vfprintf_r+0x87c>
 800289c:	ab2a      	add	r3, sp, #168	; 0xa8
 800289e:	1b9b      	subs	r3, r3, r6
 80028a0:	f8cd b00c 	str.w	fp, [sp, #12]
 80028a4:	9308      	str	r3, [sp, #32]
 80028a6:	e782      	b.n	80027ae <_vfprintf_r+0x7a6>
 80028a8:	9b06      	ldr	r3, [sp, #24]
 80028aa:	9a04      	ldr	r2, [sp, #16]
 80028ac:	eba3 0b02 	sub.w	fp, r3, r2
 80028b0:	f1bb 0f00 	cmp.w	fp, #0
 80028b4:	f77f ad5d 	ble.w	8002372 <_vfprintf_r+0x36a>
 80028b8:	f1bb 0f10 	cmp.w	fp, #16
 80028bc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80028be:	4f8d      	ldr	r7, [pc, #564]	; (8002af4 <_vfprintf_r+0xaec>)
 80028c0:	dd27      	ble.n	8002912 <_vfprintf_r+0x90a>
 80028c2:	4621      	mov	r1, r4
 80028c4:	2310      	movs	r3, #16
 80028c6:	ee19 4a10 	vmov	r4, s18
 80028ca:	e006      	b.n	80028da <_vfprintf_r+0x8d2>
 80028cc:	f1ab 0b10 	sub.w	fp, fp, #16
 80028d0:	f1bb 0f10 	cmp.w	fp, #16
 80028d4:	f10a 0a08 	add.w	sl, sl, #8
 80028d8:	dd1a      	ble.n	8002910 <_vfprintf_r+0x908>
 80028da:	3201      	adds	r2, #1
 80028dc:	3110      	adds	r1, #16
 80028de:	2a07      	cmp	r2, #7
 80028e0:	e9ca 7300 	strd	r7, r3, [sl]
 80028e4:	e9cd 211e 	strd	r2, r1, [sp, #120]	; 0x78
 80028e8:	ddf0      	ble.n	80028cc <_vfprintf_r+0x8c4>
 80028ea:	aa1d      	add	r2, sp, #116	; 0x74
 80028ec:	4641      	mov	r1, r8
 80028ee:	4620      	mov	r0, r4
 80028f0:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80028f4:	f004 feb4 	bl	8007660 <__sprint_r>
 80028f8:	2800      	cmp	r0, #0
 80028fa:	f47f acd9 	bne.w	80022b0 <_vfprintf_r+0x2a8>
 80028fe:	f1ab 0b10 	sub.w	fp, fp, #16
 8002902:	f1bb 0f10 	cmp.w	fp, #16
 8002906:	e9dd 211e 	ldrd	r2, r1, [sp, #120]	; 0x78
 800290a:	f04f 0310 	mov.w	r3, #16
 800290e:	dce4      	bgt.n	80028da <_vfprintf_r+0x8d2>
 8002910:	460c      	mov	r4, r1
 8002912:	3201      	adds	r2, #1
 8002914:	445c      	add	r4, fp
 8002916:	2a07      	cmp	r2, #7
 8002918:	e9cd 241e 	strd	r2, r4, [sp, #120]	; 0x78
 800291c:	f8ca 7000 	str.w	r7, [sl]
 8002920:	f8ca b004 	str.w	fp, [sl, #4]
 8002924:	f300 83df 	bgt.w	80030e6 <_vfprintf_r+0x10de>
 8002928:	f10a 0a08 	add.w	sl, sl, #8
 800292c:	e521      	b.n	8002372 <_vfprintf_r+0x36a>
 800292e:	f1bb 0f10 	cmp.w	fp, #16
 8002932:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002934:	4f6f      	ldr	r7, [pc, #444]	; (8002af4 <_vfprintf_r+0xaec>)
 8002936:	dd27      	ble.n	8002988 <_vfprintf_r+0x980>
 8002938:	4621      	mov	r1, r4
 800293a:	2310      	movs	r3, #16
 800293c:	ee19 4a10 	vmov	r4, s18
 8002940:	e006      	b.n	8002950 <_vfprintf_r+0x948>
 8002942:	f1ab 0b10 	sub.w	fp, fp, #16
 8002946:	f1bb 0f10 	cmp.w	fp, #16
 800294a:	f10a 0a08 	add.w	sl, sl, #8
 800294e:	dd1a      	ble.n	8002986 <_vfprintf_r+0x97e>
 8002950:	3201      	adds	r2, #1
 8002952:	3110      	adds	r1, #16
 8002954:	2a07      	cmp	r2, #7
 8002956:	e9ca 7300 	strd	r7, r3, [sl]
 800295a:	e9cd 211e 	strd	r2, r1, [sp, #120]	; 0x78
 800295e:	ddf0      	ble.n	8002942 <_vfprintf_r+0x93a>
 8002960:	aa1d      	add	r2, sp, #116	; 0x74
 8002962:	4641      	mov	r1, r8
 8002964:	4620      	mov	r0, r4
 8002966:	f004 fe7b 	bl	8007660 <__sprint_r>
 800296a:	2800      	cmp	r0, #0
 800296c:	f47f aca0 	bne.w	80022b0 <_vfprintf_r+0x2a8>
 8002970:	f1ab 0b10 	sub.w	fp, fp, #16
 8002974:	f1bb 0f10 	cmp.w	fp, #16
 8002978:	e9dd 211e 	ldrd	r2, r1, [sp, #120]	; 0x78
 800297c:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8002980:	f04f 0310 	mov.w	r3, #16
 8002984:	dce4      	bgt.n	8002950 <_vfprintf_r+0x948>
 8002986:	460c      	mov	r4, r1
 8002988:	3201      	adds	r2, #1
 800298a:	445c      	add	r4, fp
 800298c:	2a07      	cmp	r2, #7
 800298e:	e9cd 241e 	strd	r2, r4, [sp, #120]	; 0x78
 8002992:	f8ca 7000 	str.w	r7, [sl]
 8002996:	f8ca b004 	str.w	fp, [sl, #4]
 800299a:	f300 81cc 	bgt.w	8002d36 <_vfprintf_r+0xd2e>
 800299e:	f10a 0a08 	add.w	sl, sl, #8
 80029a2:	e4ee      	b.n	8002382 <_vfprintf_r+0x37a>
 80029a4:	ee19 0a10 	vmov	r0, s18
 80029a8:	aa1d      	add	r2, sp, #116	; 0x74
 80029aa:	4641      	mov	r1, r8
 80029ac:	f004 fe58 	bl	8007660 <__sprint_r>
 80029b0:	2800      	cmp	r0, #0
 80029b2:	f43f ad0d 	beq.w	80023d0 <_vfprintf_r+0x3c8>
 80029b6:	e47b      	b.n	80022b0 <_vfprintf_r+0x2a8>
 80029b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	f340 8171 	ble.w	8002ca2 <_vfprintf_r+0xc9a>
 80029c0:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 80029c2:	f8ca 6000 	str.w	r6, [sl]
 80029c6:	3501      	adds	r5, #1
 80029c8:	3401      	adds	r4, #1
 80029ca:	2301      	movs	r3, #1
 80029cc:	2d07      	cmp	r5, #7
 80029ce:	941f      	str	r4, [sp, #124]	; 0x7c
 80029d0:	951e      	str	r5, [sp, #120]	; 0x78
 80029d2:	f8ca 3004 	str.w	r3, [sl, #4]
 80029d6:	f300 830c 	bgt.w	8002ff2 <_vfprintf_r+0xfea>
 80029da:	f10a 0a08 	add.w	sl, sl, #8
 80029de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80029e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80029e2:	3501      	adds	r5, #1
 80029e4:	441c      	add	r4, r3
 80029e6:	2d07      	cmp	r5, #7
 80029e8:	e9ca 2300 	strd	r2, r3, [sl]
 80029ec:	e9cd 541e 	strd	r5, r4, [sp, #120]	; 0x78
 80029f0:	f300 830d 	bgt.w	800300e <_vfprintf_r+0x1006>
 80029f4:	f10a 0a08 	add.w	sl, sl, #8
 80029f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80029fc:	2200      	movs	r2, #0
 80029fe:	2300      	movs	r3, #0
 8002a00:	f006 fe20 	bl	8009644 <__aeabi_dcmpeq>
 8002a04:	2800      	cmp	r0, #0
 8002a06:	f040 816b 	bne.w	8002ce0 <_vfprintf_r+0xcd8>
 8002a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002a0c:	3501      	adds	r5, #1
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	3601      	adds	r6, #1
 8002a12:	441c      	add	r4, r3
 8002a14:	2d07      	cmp	r5, #7
 8002a16:	f8ca 6000 	str.w	r6, [sl]
 8002a1a:	951e      	str	r5, [sp, #120]	; 0x78
 8002a1c:	f8ca 3004 	str.w	r3, [sl, #4]
 8002a20:	941f      	str	r4, [sp, #124]	; 0x7c
 8002a22:	f300 814f 	bgt.w	8002cc4 <_vfprintf_r+0xcbc>
 8002a26:	f10a 0a08 	add.w	sl, sl, #8
 8002a2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002a2c:	f8ca 3004 	str.w	r3, [sl, #4]
 8002a30:	3501      	adds	r5, #1
 8002a32:	441c      	add	r4, r3
 8002a34:	2d07      	cmp	r5, #7
 8002a36:	ab19      	add	r3, sp, #100	; 0x64
 8002a38:	e9cd 541e 	strd	r5, r4, [sp, #120]	; 0x78
 8002a3c:	f8ca 3000 	str.w	r3, [sl]
 8002a40:	f77f acb0 	ble.w	80023a4 <_vfprintf_r+0x39c>
 8002a44:	ee19 0a10 	vmov	r0, s18
 8002a48:	aa1d      	add	r2, sp, #116	; 0x74
 8002a4a:	4641      	mov	r1, r8
 8002a4c:	f004 fe08 	bl	8007660 <__sprint_r>
 8002a50:	2800      	cmp	r0, #0
 8002a52:	f47f ac2d 	bne.w	80022b0 <_vfprintf_r+0x2a8>
 8002a56:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8002a58:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8002a5c:	e4a4      	b.n	80023a8 <_vfprintf_r+0x3a0>
 8002a5e:	2f10      	cmp	r7, #16
 8002a60:	e9dd 211e 	ldrd	r2, r1, [sp, #120]	; 0x78
 8002a64:	dd34      	ble.n	8002ad0 <_vfprintf_r+0xac8>
 8002a66:	9312      	str	r3, [sp, #72]	; 0x48
 8002a68:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8002a6c:	2410      	movs	r4, #16
 8002a6e:	46b1      	mov	r9, r6
 8002a70:	460b      	mov	r3, r1
 8002a72:	4646      	mov	r6, r8
 8002a74:	46b8      	mov	r8, r7
 8002a76:	462f      	mov	r7, r5
 8002a78:	ee19 5a10 	vmov	r5, s18
 8002a7c:	e006      	b.n	8002a8c <_vfprintf_r+0xa84>
 8002a7e:	f1a8 0810 	sub.w	r8, r8, #16
 8002a82:	f1b8 0f10 	cmp.w	r8, #16
 8002a86:	f10a 0a08 	add.w	sl, sl, #8
 8002a8a:	dd19      	ble.n	8002ac0 <_vfprintf_r+0xab8>
 8002a8c:	3201      	adds	r2, #1
 8002a8e:	491a      	ldr	r1, [pc, #104]	; (8002af8 <_vfprintf_r+0xaf0>)
 8002a90:	3310      	adds	r3, #16
 8002a92:	2a07      	cmp	r2, #7
 8002a94:	e9ca 1400 	strd	r1, r4, [sl]
 8002a98:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8002a9c:	ddef      	ble.n	8002a7e <_vfprintf_r+0xa76>
 8002a9e:	aa1d      	add	r2, sp, #116	; 0x74
 8002aa0:	4631      	mov	r1, r6
 8002aa2:	4628      	mov	r0, r5
 8002aa4:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8002aa8:	f004 fdda 	bl	8007660 <__sprint_r>
 8002aac:	2800      	cmp	r0, #0
 8002aae:	f47f abfe 	bne.w	80022ae <_vfprintf_r+0x2a6>
 8002ab2:	f1a8 0810 	sub.w	r8, r8, #16
 8002ab6:	f1b8 0f10 	cmp.w	r8, #16
 8002aba:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 8002abe:	dce5      	bgt.n	8002a8c <_vfprintf_r+0xa84>
 8002ac0:	463d      	mov	r5, r7
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4647      	mov	r7, r8
 8002ac6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002ac8:	46b0      	mov	r8, r6
 8002aca:	464e      	mov	r6, r9
 8002acc:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8002ad0:	f8ca 7004 	str.w	r7, [sl, #4]
 8002ad4:	3201      	adds	r2, #1
 8002ad6:	187c      	adds	r4, r7, r1
 8002ad8:	2a07      	cmp	r2, #7
 8002ada:	4907      	ldr	r1, [pc, #28]	; (8002af8 <_vfprintf_r+0xaf0>)
 8002adc:	f8ca 1000 	str.w	r1, [sl]
 8002ae0:	e9cd 241e 	strd	r2, r4, [sp, #120]	; 0x78
 8002ae4:	f300 82d5 	bgt.w	8003092 <_vfprintf_r+0x108a>
 8002ae8:	f10a 0a08 	add.w	sl, sl, #8
 8002aec:	e416      	b.n	800231c <_vfprintf_r+0x314>
 8002aee:	bf00      	nop
 8002af0:	0801e2d0 	.word	0x0801e2d0
 8002af4:	0800ee84 	.word	0x0800ee84
 8002af8:	0800ee74 	.word	0x0800ee74
 8002afc:	ee19 0a10 	vmov	r0, s18
 8002b00:	aa1d      	add	r2, sp, #116	; 0x74
 8002b02:	4641      	mov	r1, r8
 8002b04:	9312      	str	r3, [sp, #72]	; 0x48
 8002b06:	f004 fdab 	bl	8007660 <__sprint_r>
 8002b0a:	2800      	cmp	r0, #0
 8002b0c:	f47f abd0 	bne.w	80022b0 <_vfprintf_r+0x2a8>
 8002b10:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8002b12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002b14:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8002b18:	e415      	b.n	8002346 <_vfprintf_r+0x33e>
 8002b1a:	ee19 0a10 	vmov	r0, s18
 8002b1e:	aa1d      	add	r2, sp, #116	; 0x74
 8002b20:	4641      	mov	r1, r8
 8002b22:	f004 fd9d 	bl	8007660 <__sprint_r>
 8002b26:	2800      	cmp	r0, #0
 8002b28:	f47f abc2 	bne.w	80022b0 <_vfprintf_r+0x2a8>
 8002b2c:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8002b2e:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8002b32:	e41a      	b.n	800236a <_vfprintf_r+0x362>
 8002b34:	2d10      	cmp	r5, #16
 8002b36:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002b38:	dd20      	ble.n	8002b7c <_vfprintf_r+0xb74>
 8002b3a:	ee19 7a10 	vmov	r7, s18
 8002b3e:	2610      	movs	r6, #16
 8002b40:	e004      	b.n	8002b4c <_vfprintf_r+0xb44>
 8002b42:	3d10      	subs	r5, #16
 8002b44:	2d10      	cmp	r5, #16
 8002b46:	f10a 0a08 	add.w	sl, sl, #8
 8002b4a:	dd17      	ble.n	8002b7c <_vfprintf_r+0xb74>
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	4a91      	ldr	r2, [pc, #580]	; (8002d94 <_vfprintf_r+0xd8c>)
 8002b50:	3410      	adds	r4, #16
 8002b52:	2b07      	cmp	r3, #7
 8002b54:	e9ca 2600 	strd	r2, r6, [sl]
 8002b58:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8002b5c:	ddf1      	ble.n	8002b42 <_vfprintf_r+0xb3a>
 8002b5e:	aa1d      	add	r2, sp, #116	; 0x74
 8002b60:	4641      	mov	r1, r8
 8002b62:	4638      	mov	r0, r7
 8002b64:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8002b68:	f004 fd7a 	bl	8007660 <__sprint_r>
 8002b6c:	2800      	cmp	r0, #0
 8002b6e:	f47f ab9f 	bne.w	80022b0 <_vfprintf_r+0x2a8>
 8002b72:	3d10      	subs	r5, #16
 8002b74:	2d10      	cmp	r5, #16
 8002b76:	e9dd 341e 	ldrd	r3, r4, [sp, #120]	; 0x78
 8002b7a:	dce7      	bgt.n	8002b4c <_vfprintf_r+0xb44>
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	4a85      	ldr	r2, [pc, #532]	; (8002d94 <_vfprintf_r+0xd8c>)
 8002b80:	f8ca 5004 	str.w	r5, [sl, #4]
 8002b84:	442c      	add	r4, r5
 8002b86:	2b07      	cmp	r3, #7
 8002b88:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8002b8c:	f8ca 2000 	str.w	r2, [sl]
 8002b90:	f77f ac13 	ble.w	80023ba <_vfprintf_r+0x3b2>
 8002b94:	ee19 0a10 	vmov	r0, s18
 8002b98:	aa1d      	add	r2, sp, #116	; 0x74
 8002b9a:	4641      	mov	r1, r8
 8002b9c:	f004 fd60 	bl	8007660 <__sprint_r>
 8002ba0:	2800      	cmp	r0, #0
 8002ba2:	f47f ab85 	bne.w	80022b0 <_vfprintf_r+0x2a8>
 8002ba6:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8002ba8:	e407      	b.n	80023ba <_vfprintf_r+0x3b2>
 8002baa:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8002bac:	2900      	cmp	r1, #0
 8002bae:	f340 823c 	ble.w	800302a <_vfprintf_r+0x1022>
 8002bb2:	e9dd 370a 	ldrd	r3, r7, [sp, #40]	; 0x28
 8002bb6:	429f      	cmp	r7, r3
 8002bb8:	bfa8      	it	ge
 8002bba:	461f      	movge	r7, r3
 8002bbc:	2f00      	cmp	r7, #0
 8002bbe:	dd0b      	ble.n	8002bd8 <_vfprintf_r+0xbd0>
 8002bc0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	443c      	add	r4, r7
 8002bc6:	2b07      	cmp	r3, #7
 8002bc8:	e9ca 6700 	strd	r6, r7, [sl]
 8002bcc:	941f      	str	r4, [sp, #124]	; 0x7c
 8002bce:	931e      	str	r3, [sp, #120]	; 0x78
 8002bd0:	f300 83cb 	bgt.w	800336a <_vfprintf_r+0x1362>
 8002bd4:	f10a 0a08 	add.w	sl, sl, #8
 8002bd8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002bda:	2f00      	cmp	r7, #0
 8002bdc:	bfa8      	it	ge
 8002bde:	1bed      	subge	r5, r5, r7
 8002be0:	2d00      	cmp	r5, #0
 8002be2:	f300 81d5 	bgt.w	8002f90 <_vfprintf_r+0xf88>
 8002be6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8002be8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002bea:	429d      	cmp	r5, r3
 8002bec:	f280 81ae 	bge.w	8002f4c <_vfprintf_r+0xf44>
 8002bf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002bf2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002bf4:	441c      	add	r4, r3
 8002bf6:	e9ca 2300 	strd	r2, r3, [sl]
 8002bfa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002bfc:	941f      	str	r4, [sp, #124]	; 0x7c
 8002bfe:	3301      	adds	r3, #1
 8002c00:	2b07      	cmp	r3, #7
 8002c02:	931e      	str	r3, [sp, #120]	; 0x78
 8002c04:	f300 83a3 	bgt.w	800334e <_vfprintf_r+0x1346>
 8002c08:	f10a 0a08 	add.w	sl, sl, #8
 8002c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002c10:	1b5d      	subs	r5, r3, r5
 8002c12:	1a9f      	subs	r7, r3, r2
 8002c14:	42af      	cmp	r7, r5
 8002c16:	bfa8      	it	ge
 8002c18:	462f      	movge	r7, r5
 8002c1a:	2f00      	cmp	r7, #0
 8002c1c:	dd0e      	ble.n	8002c3c <_vfprintf_r+0xc34>
 8002c1e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002c20:	f8ca 7004 	str.w	r7, [sl, #4]
 8002c24:	3301      	adds	r3, #1
 8002c26:	4416      	add	r6, r2
 8002c28:	443c      	add	r4, r7
 8002c2a:	2b07      	cmp	r3, #7
 8002c2c:	f8ca 6000 	str.w	r6, [sl]
 8002c30:	941f      	str	r4, [sp, #124]	; 0x7c
 8002c32:	931e      	str	r3, [sp, #120]	; 0x78
 8002c34:	f300 83a6 	bgt.w	8003384 <_vfprintf_r+0x137c>
 8002c38:	f10a 0a08 	add.w	sl, sl, #8
 8002c3c:	2f00      	cmp	r7, #0
 8002c3e:	bfa8      	it	ge
 8002c40:	1bed      	subge	r5, r5, r7
 8002c42:	2d00      	cmp	r5, #0
 8002c44:	f77f abb0 	ble.w	80023a8 <_vfprintf_r+0x3a0>
 8002c48:	2d10      	cmp	r5, #16
 8002c4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002c4c:	4f52      	ldr	r7, [pc, #328]	; (8002d98 <_vfprintf_r+0xd90>)
 8002c4e:	f340 8230 	ble.w	80030b2 <_vfprintf_r+0x10aa>
 8002c52:	ee19 ba10 	vmov	fp, s18
 8002c56:	2610      	movs	r6, #16
 8002c58:	e005      	b.n	8002c66 <_vfprintf_r+0xc5e>
 8002c5a:	f10a 0a08 	add.w	sl, sl, #8
 8002c5e:	3d10      	subs	r5, #16
 8002c60:	2d10      	cmp	r5, #16
 8002c62:	f340 8226 	ble.w	80030b2 <_vfprintf_r+0x10aa>
 8002c66:	3301      	adds	r3, #1
 8002c68:	3410      	adds	r4, #16
 8002c6a:	2b07      	cmp	r3, #7
 8002c6c:	e9ca 7600 	strd	r7, r6, [sl]
 8002c70:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8002c74:	ddf1      	ble.n	8002c5a <_vfprintf_r+0xc52>
 8002c76:	aa1d      	add	r2, sp, #116	; 0x74
 8002c78:	4641      	mov	r1, r8
 8002c7a:	4658      	mov	r0, fp
 8002c7c:	f004 fcf0 	bl	8007660 <__sprint_r>
 8002c80:	2800      	cmp	r0, #0
 8002c82:	f47f ab15 	bne.w	80022b0 <_vfprintf_r+0x2a8>
 8002c86:	e9dd 341e 	ldrd	r3, r4, [sp, #120]	; 0x78
 8002c8a:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8002c8e:	e7e6      	b.n	8002c5e <_vfprintf_r+0xc56>
 8002c90:	9b05      	ldr	r3, [sp, #20]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f040 8337 	bne.w	8003306 <_vfprintf_r+0x12fe>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	9305      	str	r3, [sp, #20]
 8002c9c:	9308      	str	r3, [sp, #32]
 8002c9e:	ae2a      	add	r6, sp, #168	; 0xa8
 8002ca0:	e585      	b.n	80027ae <_vfprintf_r+0x7a6>
 8002ca2:	9b03      	ldr	r3, [sp, #12]
 8002ca4:	07d9      	lsls	r1, r3, #31
 8002ca6:	f53f ae8b 	bmi.w	80029c0 <_vfprintf_r+0x9b8>
 8002caa:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8002cac:	f8ca 6000 	str.w	r6, [sl]
 8002cb0:	3501      	adds	r5, #1
 8002cb2:	3401      	adds	r4, #1
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	2d07      	cmp	r5, #7
 8002cb8:	941f      	str	r4, [sp, #124]	; 0x7c
 8002cba:	951e      	str	r5, [sp, #120]	; 0x78
 8002cbc:	f8ca 3004 	str.w	r3, [sl, #4]
 8002cc0:	f77f aeb1 	ble.w	8002a26 <_vfprintf_r+0xa1e>
 8002cc4:	ee19 0a10 	vmov	r0, s18
 8002cc8:	aa1d      	add	r2, sp, #116	; 0x74
 8002cca:	4641      	mov	r1, r8
 8002ccc:	f004 fcc8 	bl	8007660 <__sprint_r>
 8002cd0:	2800      	cmp	r0, #0
 8002cd2:	f47f aaed 	bne.w	80022b0 <_vfprintf_r+0x2a8>
 8002cd6:	e9dd 541e 	ldrd	r5, r4, [sp, #120]	; 0x78
 8002cda:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8002cde:	e6a4      	b.n	8002a2a <_vfprintf_r+0xa22>
 8002ce0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002ce2:	1e5e      	subs	r6, r3, #1
 8002ce4:	2e00      	cmp	r6, #0
 8002ce6:	f77f aea0 	ble.w	8002a2a <_vfprintf_r+0xa22>
 8002cea:	2e10      	cmp	r6, #16
 8002cec:	4f2a      	ldr	r7, [pc, #168]	; (8002d98 <_vfprintf_r+0xd90>)
 8002cee:	f340 8257 	ble.w	80031a0 <_vfprintf_r+0x1198>
 8002cf2:	f8cd 9014 	str.w	r9, [sp, #20]
 8002cf6:	f04f 0b10 	mov.w	fp, #16
 8002cfa:	ee19 9a10 	vmov	r9, s18
 8002cfe:	e005      	b.n	8002d0c <_vfprintf_r+0xd04>
 8002d00:	f10a 0a08 	add.w	sl, sl, #8
 8002d04:	3e10      	subs	r6, #16
 8002d06:	2e10      	cmp	r6, #16
 8002d08:	f340 8248 	ble.w	800319c <_vfprintf_r+0x1194>
 8002d0c:	3501      	adds	r5, #1
 8002d0e:	3410      	adds	r4, #16
 8002d10:	2d07      	cmp	r5, #7
 8002d12:	e9ca 7b00 	strd	r7, fp, [sl]
 8002d16:	e9cd 541e 	strd	r5, r4, [sp, #120]	; 0x78
 8002d1a:	ddf1      	ble.n	8002d00 <_vfprintf_r+0xcf8>
 8002d1c:	aa1d      	add	r2, sp, #116	; 0x74
 8002d1e:	4641      	mov	r1, r8
 8002d20:	4648      	mov	r0, r9
 8002d22:	f004 fc9d 	bl	8007660 <__sprint_r>
 8002d26:	2800      	cmp	r0, #0
 8002d28:	f47f aac2 	bne.w	80022b0 <_vfprintf_r+0x2a8>
 8002d2c:	e9dd 541e 	ldrd	r5, r4, [sp, #120]	; 0x78
 8002d30:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8002d34:	e7e6      	b.n	8002d04 <_vfprintf_r+0xcfc>
 8002d36:	ee19 0a10 	vmov	r0, s18
 8002d3a:	aa1d      	add	r2, sp, #116	; 0x74
 8002d3c:	4641      	mov	r1, r8
 8002d3e:	f004 fc8f 	bl	8007660 <__sprint_r>
 8002d42:	2800      	cmp	r0, #0
 8002d44:	f47f aab4 	bne.w	80022b0 <_vfprintf_r+0x2a8>
 8002d48:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8002d4a:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8002d4e:	f7ff bb18 	b.w	8002382 <_vfprintf_r+0x37a>
 8002d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d54:	f853 0b04 	ldr.w	r0, [r3], #4
 8002d58:	9309      	str	r3, [sp, #36]	; 0x24
 8002d5a:	e469      	b.n	8002630 <_vfprintf_r+0x628>
 8002d5c:	17c1      	asrs	r1, r0, #31
 8002d5e:	460b      	mov	r3, r1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f6bf abc3 	bge.w	80024ec <_vfprintf_r+0x4e4>
 8002d66:	4240      	negs	r0, r0
 8002d68:	f04f 042d 	mov.w	r4, #45	; 0x2d
 8002d6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002d70:	f88d 4057 	strb.w	r4, [sp, #87]	; 0x57
 8002d74:	2301      	movs	r3, #1
 8002d76:	f7ff ba60 	b.w	800223a <_vfprintf_r+0x232>
 8002d7a:	9b03      	ldr	r3, [sp, #12]
 8002d7c:	07dd      	lsls	r5, r3, #31
 8002d7e:	f57f ab13 	bpl.w	80023a8 <_vfprintf_r+0x3a0>
 8002d82:	e53e      	b.n	8002802 <_vfprintf_r+0x7fa>
 8002d84:	f899 5000 	ldrb.w	r5, [r9]
 8002d88:	9209      	str	r2, [sp, #36]	; 0x24
 8002d8a:	f7ff b9a3 	b.w	80020d4 <_vfprintf_r+0xcc>
 8002d8e:	ae2a      	add	r6, sp, #168	; 0xa8
 8002d90:	e50d      	b.n	80027ae <_vfprintf_r+0x7a6>
 8002d92:	bf00      	nop
 8002d94:	0800ee74 	.word	0x0800ee74
 8002d98:	0800ee84 	.word	0x0800ee84
 8002d9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	f006 fc80 	bl	80096a8 <__aeabi_dcmpun>
 8002da8:	2800      	cmp	r0, #0
 8002daa:	f040 8365 	bne.w	8003478 <_vfprintf_r+0x1470>
 8002dae:	9b05      	ldr	r3, [sp, #20]
 8002db0:	3301      	adds	r3, #1
 8002db2:	f025 0720 	bic.w	r7, r5, #32
 8002db6:	f000 82f5 	beq.w	80033a4 <_vfprintf_r+0x139c>
 8002dba:	2f47      	cmp	r7, #71	; 0x47
 8002dbc:	f000 8281 	beq.w	80032c2 <_vfprintf_r+0x12ba>
 8002dc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002dc4:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
 8002dc8:	2900      	cmp	r1, #0
 8002dca:	9203      	str	r2, [sp, #12]
 8002dcc:	f2c0 824c 	blt.w	8003268 <_vfprintf_r+0x1260>
 8002dd0:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	9312      	str	r3, [sp, #72]	; 0x48
 8002dd8:	eeb0 aa47 	vmov.f32	s20, s14
 8002ddc:	eef0 aa67 	vmov.f32	s21, s15
 8002de0:	2d66      	cmp	r5, #102	; 0x66
 8002de2:	f000 81e9 	beq.w	80031b8 <_vfprintf_r+0x11b0>
 8002de6:	2d46      	cmp	r5, #70	; 0x46
 8002de8:	f000 81e6 	beq.w	80031b8 <_vfprintf_r+0x11b0>
 8002dec:	eeb0 0a4a 	vmov.f32	s0, s20
 8002df0:	eef0 0a6a 	vmov.f32	s1, s21
 8002df4:	2f45      	cmp	r7, #69	; 0x45
 8002df6:	bf0a      	itet	eq
 8002df8:	9b05      	ldreq	r3, [sp, #20]
 8002dfa:	9c05      	ldrne	r4, [sp, #20]
 8002dfc:	1c5c      	addeq	r4, r3, #1
 8002dfe:	ab1b      	add	r3, sp, #108	; 0x6c
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	ab18      	add	r3, sp, #96	; 0x60
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	ee19 0a10 	vmov	r0, s18
 8002e0a:	ab17      	add	r3, sp, #92	; 0x5c
 8002e0c:	4622      	mov	r2, r4
 8002e0e:	2102      	movs	r1, #2
 8002e10:	f000 fcfa 	bl	8003808 <_dtoa_r>
 8002e14:	2d67      	cmp	r5, #103	; 0x67
 8002e16:	4606      	mov	r6, r0
 8002e18:	f040 823d 	bne.w	8003296 <_vfprintf_r+0x128e>
 8002e1c:	f01b 0f01 	tst.w	fp, #1
 8002e20:	f040 823c 	bne.w	800329c <_vfprintf_r+0x1294>
 8002e24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002e26:	2f47      	cmp	r7, #71	; 0x47
 8002e28:	eba3 0306 	sub.w	r3, r3, r6
 8002e2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e2e:	f040 836e 	bne.w	800350e <_vfprintf_r+0x1506>
 8002e32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002e34:	930a      	str	r3, [sp, #40]	; 0x28
 8002e36:	1cd9      	adds	r1, r3, #3
 8002e38:	db03      	blt.n	8002e42 <_vfprintf_r+0xe3a>
 8002e3a:	9a05      	ldr	r2, [sp, #20]
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	f340 8278 	ble.w	8003332 <_vfprintf_r+0x132a>
 8002e42:	3d02      	subs	r5, #2
 8002e44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002e46:	f88d 5064 	strb.w	r5, [sp, #100]	; 0x64
 8002e4a:	1e53      	subs	r3, r2, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	9317      	str	r3, [sp, #92]	; 0x5c
 8002e50:	bfb6      	itet	lt
 8002e52:	f1c2 0301 	rsblt	r3, r2, #1
 8002e56:	222b      	movge	r2, #43	; 0x2b
 8002e58:	222d      	movlt	r2, #45	; 0x2d
 8002e5a:	2b09      	cmp	r3, #9
 8002e5c:	f88d 2065 	strb.w	r2, [sp, #101]	; 0x65
 8002e60:	f340 82f5 	ble.w	800344e <_vfprintf_r+0x1446>
 8002e64:	f10d 0473 	add.w	r4, sp, #115	; 0x73
 8002e68:	4fc0      	ldr	r7, [pc, #768]	; (800316c <_vfprintf_r+0x1164>)
 8002e6a:	4622      	mov	r2, r4
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	fb87 2103 	smull	r2, r1, r7, r3
 8002e72:	17da      	asrs	r2, r3, #31
 8002e74:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8002e78:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002e7c:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
 8002e80:	3130      	adds	r1, #48	; 0x30
 8002e82:	f800 1c01 	strb.w	r1, [r0, #-1]
 8002e86:	4619      	mov	r1, r3
 8002e88:	2963      	cmp	r1, #99	; 0x63
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8002e90:	dcec      	bgt.n	8002e6c <_vfprintf_r+0xe64>
 8002e92:	3330      	adds	r3, #48	; 0x30
 8002e94:	b2d9      	uxtb	r1, r3
 8002e96:	1e83      	subs	r3, r0, #2
 8002e98:	429c      	cmp	r4, r3
 8002e9a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002e9e:	f240 8327 	bls.w	80034f0 <_vfprintf_r+0x14e8>
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	f10d 0266 	add.w	r2, sp, #102	; 0x66
 8002ea8:	e001      	b.n	8002eae <_vfprintf_r+0xea6>
 8002eaa:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002eae:	f802 1b01 	strb.w	r1, [r2], #1
 8002eb2:	429c      	cmp	r4, r3
 8002eb4:	d1f9      	bne.n	8002eaa <_vfprintf_r+0xea2>
 8002eb6:	f10d 0375 	add.w	r3, sp, #117	; 0x75
 8002eba:	f10d 0266 	add.w	r2, sp, #102	; 0x66
 8002ebe:	1a1b      	subs	r3, r3, r0
 8002ec0:	4413      	add	r3, r2
 8002ec2:	aa19      	add	r2, sp, #100	; 0x64
 8002ec4:	1a9b      	subs	r3, r3, r2
 8002ec6:	9311      	str	r3, [sp, #68]	; 0x44
 8002ec8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002eca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002ecc:	2a01      	cmp	r2, #1
 8002ece:	4413      	add	r3, r2
 8002ed0:	9308      	str	r3, [sp, #32]
 8002ed2:	f340 82c8 	ble.w	8003466 <_vfprintf_r+0x145e>
 8002ed6:	9b08      	ldr	r3, [sp, #32]
 8002ed8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002eda:	4413      	add	r3, r2
 8002edc:	9308      	str	r3, [sp, #32]
 8002ede:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002ee2:	9304      	str	r3, [sp, #16]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	930a      	str	r3, [sp, #40]	; 0x28
 8002ee8:	e19e      	b.n	8003228 <_vfprintf_r+0x1220>
 8002eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002eec:	9807      	ldr	r0, [sp, #28]
 8002eee:	f853 1b04 	ldr.w	r1, [r3], #4
 8002ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8002ef4:	17c2      	asrs	r2, r0, #31
 8002ef6:	e9c1 0200 	strd	r0, r2, [r1]
 8002efa:	f7ff b8c9 	b.w	8002090 <_vfprintf_r+0x88>
 8002efe:	280a      	cmp	r0, #10
 8002f00:	f171 0300 	sbcs.w	r3, r1, #0
 8002f04:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8002f08:	f4ff ab04 	bcc.w	8002514 <_vfprintf_r+0x50c>
 8002f0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8002f10:	ae2a      	add	r6, sp, #168	; 0xa8
 8002f12:	46a1      	mov	r9, r4
 8002f14:	220a      	movs	r2, #10
 8002f16:	2300      	movs	r3, #0
 8002f18:	4604      	mov	r4, r0
 8002f1a:	460f      	mov	r7, r1
 8002f1c:	f006 fc02 	bl	8009724 <__aeabi_uldivmod>
 8002f20:	3230      	adds	r2, #48	; 0x30
 8002f22:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8002f26:	2300      	movs	r3, #0
 8002f28:	4620      	mov	r0, r4
 8002f2a:	4639      	mov	r1, r7
 8002f2c:	220a      	movs	r2, #10
 8002f2e:	f006 fbf9 	bl	8009724 <__aeabi_uldivmod>
 8002f32:	2c0a      	cmp	r4, #10
 8002f34:	f177 0300 	sbcs.w	r3, r7, #0
 8002f38:	d2ec      	bcs.n	8002f14 <_vfprintf_r+0xf0c>
 8002f3a:	ab2a      	add	r3, sp, #168	; 0xa8
 8002f3c:	1b9b      	subs	r3, r3, r6
 8002f3e:	464c      	mov	r4, r9
 8002f40:	9308      	str	r3, [sp, #32]
 8002f42:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8002f46:	f8cd b00c 	str.w	fp, [sp, #12]
 8002f4a:	e430      	b.n	80027ae <_vfprintf_r+0x7a6>
 8002f4c:	9b03      	ldr	r3, [sp, #12]
 8002f4e:	07d8      	lsls	r0, r3, #31
 8002f50:	f53f ae4e 	bmi.w	8002bf0 <_vfprintf_r+0xbe8>
 8002f54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002f58:	1a9f      	subs	r7, r3, r2
 8002f5a:	1b5d      	subs	r5, r3, r5
 8002f5c:	42af      	cmp	r7, r5
 8002f5e:	bfa8      	it	ge
 8002f60:	462f      	movge	r7, r5
 8002f62:	e66b      	b.n	8002c3c <_vfprintf_r+0xc34>
 8002f64:	ee19 0a10 	vmov	r0, s18
 8002f68:	aa1d      	add	r2, sp, #116	; 0x74
 8002f6a:	4641      	mov	r1, r8
 8002f6c:	f004 fb78 	bl	8007660 <__sprint_r>
 8002f70:	2800      	cmp	r0, #0
 8002f72:	f47f a99d 	bne.w	80022b0 <_vfprintf_r+0x2a8>
 8002f76:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8002f78:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8002f7c:	e44f      	b.n	800281e <_vfprintf_r+0x816>
 8002f7e:	2b06      	cmp	r3, #6
 8002f80:	bf28      	it	cs
 8002f82:	2306      	movcs	r3, #6
 8002f84:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8002f88:	4e79      	ldr	r6, [pc, #484]	; (8003170 <_vfprintf_r+0x1168>)
 8002f8a:	9304      	str	r3, [sp, #16]
 8002f8c:	f7ff b9af 	b.w	80022ee <_vfprintf_r+0x2e6>
 8002f90:	2d10      	cmp	r5, #16
 8002f92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002f94:	4f77      	ldr	r7, [pc, #476]	; (8003174 <_vfprintf_r+0x116c>)
 8002f96:	f340 8155 	ble.w	8003244 <_vfprintf_r+0x123c>
 8002f9a:	463a      	mov	r2, r7
 8002f9c:	9605      	str	r6, [sp, #20]
 8002f9e:	4647      	mov	r7, r8
 8002fa0:	ee19 6a10 	vmov	r6, s18
 8002fa4:	f04f 0b10 	mov.w	fp, #16
 8002fa8:	4690      	mov	r8, r2
 8002faa:	e005      	b.n	8002fb8 <_vfprintf_r+0xfb0>
 8002fac:	f10a 0a08 	add.w	sl, sl, #8
 8002fb0:	3d10      	subs	r5, #16
 8002fb2:	2d10      	cmp	r5, #16
 8002fb4:	f340 8142 	ble.w	800323c <_vfprintf_r+0x1234>
 8002fb8:	3301      	adds	r3, #1
 8002fba:	3410      	adds	r4, #16
 8002fbc:	2b07      	cmp	r3, #7
 8002fbe:	e9ca 8b00 	strd	r8, fp, [sl]
 8002fc2:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8002fc6:	ddf1      	ble.n	8002fac <_vfprintf_r+0xfa4>
 8002fc8:	aa1d      	add	r2, sp, #116	; 0x74
 8002fca:	4639      	mov	r1, r7
 8002fcc:	4630      	mov	r0, r6
 8002fce:	f004 fb47 	bl	8007660 <__sprint_r>
 8002fd2:	2800      	cmp	r0, #0
 8002fd4:	f040 8244 	bne.w	8003460 <_vfprintf_r+0x1458>
 8002fd8:	e9dd 341e 	ldrd	r3, r4, [sp, #120]	; 0x78
 8002fdc:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8002fe0:	e7e6      	b.n	8002fb0 <_vfprintf_r+0xfa8>
 8002fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fe4:	9907      	ldr	r1, [sp, #28]
 8002fe6:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fea:	6011      	str	r1, [r2, #0]
 8002fec:	9309      	str	r3, [sp, #36]	; 0x24
 8002fee:	f7ff b84f 	b.w	8002090 <_vfprintf_r+0x88>
 8002ff2:	ee19 0a10 	vmov	r0, s18
 8002ff6:	aa1d      	add	r2, sp, #116	; 0x74
 8002ff8:	4641      	mov	r1, r8
 8002ffa:	f004 fb31 	bl	8007660 <__sprint_r>
 8002ffe:	2800      	cmp	r0, #0
 8003000:	f47f a956 	bne.w	80022b0 <_vfprintf_r+0x2a8>
 8003004:	e9dd 541e 	ldrd	r5, r4, [sp, #120]	; 0x78
 8003008:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800300c:	e4e7      	b.n	80029de <_vfprintf_r+0x9d6>
 800300e:	ee19 0a10 	vmov	r0, s18
 8003012:	aa1d      	add	r2, sp, #116	; 0x74
 8003014:	4641      	mov	r1, r8
 8003016:	f004 fb23 	bl	8007660 <__sprint_r>
 800301a:	2800      	cmp	r0, #0
 800301c:	f47f a948 	bne.w	80022b0 <_vfprintf_r+0x2a8>
 8003020:	e9dd 541e 	ldrd	r5, r4, [sp, #120]	; 0x78
 8003024:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8003028:	e4e6      	b.n	80029f8 <_vfprintf_r+0x9f0>
 800302a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800302c:	4a52      	ldr	r2, [pc, #328]	; (8003178 <_vfprintf_r+0x1170>)
 800302e:	f8ca 2000 	str.w	r2, [sl]
 8003032:	3301      	adds	r3, #1
 8003034:	3401      	adds	r4, #1
 8003036:	2201      	movs	r2, #1
 8003038:	2b07      	cmp	r3, #7
 800303a:	941f      	str	r4, [sp, #124]	; 0x7c
 800303c:	931e      	str	r3, [sp, #120]	; 0x78
 800303e:	f8ca 2004 	str.w	r2, [sl, #4]
 8003042:	f300 811a 	bgt.w	800327a <_vfprintf_r+0x1272>
 8003046:	f10a 0a08 	add.w	sl, sl, #8
 800304a:	2900      	cmp	r1, #0
 800304c:	d159      	bne.n	8003102 <_vfprintf_r+0x10fa>
 800304e:	9b03      	ldr	r3, [sp, #12]
 8003050:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	4313      	orrs	r3, r2
 8003058:	f43f a9a6 	beq.w	80023a8 <_vfprintf_r+0x3a0>
 800305c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800305e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003060:	191a      	adds	r2, r3, r4
 8003062:	e9ca 1300 	strd	r1, r3, [sl]
 8003066:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003068:	921f      	str	r2, [sp, #124]	; 0x7c
 800306a:	3301      	adds	r3, #1
 800306c:	2b07      	cmp	r3, #7
 800306e:	931e      	str	r3, [sp, #120]	; 0x78
 8003070:	f300 812d 	bgt.w	80032ce <_vfprintf_r+0x12c6>
 8003074:	f10a 0a08 	add.w	sl, sl, #8
 8003078:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800307a:	f8ca 6000 	str.w	r6, [sl]
 800307e:	3301      	adds	r3, #1
 8003080:	188c      	adds	r4, r1, r2
 8003082:	2b07      	cmp	r3, #7
 8003084:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8003088:	f8ca 1004 	str.w	r1, [sl, #4]
 800308c:	f77f a98a 	ble.w	80023a4 <_vfprintf_r+0x39c>
 8003090:	e4d8      	b.n	8002a44 <_vfprintf_r+0xa3c>
 8003092:	ee19 0a10 	vmov	r0, s18
 8003096:	aa1d      	add	r2, sp, #116	; 0x74
 8003098:	4641      	mov	r1, r8
 800309a:	9312      	str	r3, [sp, #72]	; 0x48
 800309c:	f004 fae0 	bl	8007660 <__sprint_r>
 80030a0:	2800      	cmp	r0, #0
 80030a2:	f47f a905 	bne.w	80022b0 <_vfprintf_r+0x2a8>
 80030a6:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 80030a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80030aa:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80030ae:	f7ff b935 	b.w	800231c <_vfprintf_r+0x314>
 80030b2:	3301      	adds	r3, #1
 80030b4:	442c      	add	r4, r5
 80030b6:	2b07      	cmp	r3, #7
 80030b8:	f8ca 7000 	str.w	r7, [sl]
 80030bc:	f8ca 5004 	str.w	r5, [sl, #4]
 80030c0:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 80030c4:	f77f a96e 	ble.w	80023a4 <_vfprintf_r+0x39c>
 80030c8:	e4bc      	b.n	8002a44 <_vfprintf_r+0xa3c>
 80030ca:	ee19 0a10 	vmov	r0, s18
 80030ce:	aa1d      	add	r2, sp, #116	; 0x74
 80030d0:	4641      	mov	r1, r8
 80030d2:	f004 fac5 	bl	8007660 <__sprint_r>
 80030d6:	2800      	cmp	r0, #0
 80030d8:	f47f a8ea 	bne.w	80022b0 <_vfprintf_r+0x2a8>
 80030dc:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 80030de:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80030e2:	f7ff bb89 	b.w	80027f8 <_vfprintf_r+0x7f0>
 80030e6:	ee19 0a10 	vmov	r0, s18
 80030ea:	aa1d      	add	r2, sp, #116	; 0x74
 80030ec:	4641      	mov	r1, r8
 80030ee:	f004 fab7 	bl	8007660 <__sprint_r>
 80030f2:	2800      	cmp	r0, #0
 80030f4:	f47f a8dc 	bne.w	80022b0 <_vfprintf_r+0x2a8>
 80030f8:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 80030fa:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80030fe:	f7ff b938 	b.w	8002372 <_vfprintf_r+0x36a>
 8003102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003104:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003106:	191a      	adds	r2, r3, r4
 8003108:	e9ca 0300 	strd	r0, r3, [sl]
 800310c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800310e:	921f      	str	r2, [sp, #124]	; 0x7c
 8003110:	3301      	adds	r3, #1
 8003112:	2b07      	cmp	r3, #7
 8003114:	931e      	str	r3, [sp, #120]	; 0x78
 8003116:	f300 80da 	bgt.w	80032ce <_vfprintf_r+0x12c6>
 800311a:	f10a 0a08 	add.w	sl, sl, #8
 800311e:	2900      	cmp	r1, #0
 8003120:	daaa      	bge.n	8003078 <_vfprintf_r+0x1070>
 8003122:	424d      	negs	r5, r1
 8003124:	3110      	adds	r1, #16
 8003126:	4f13      	ldr	r7, [pc, #76]	; (8003174 <_vfprintf_r+0x116c>)
 8003128:	f280 8178 	bge.w	800341c <_vfprintf_r+0x1414>
 800312c:	ee19 ba10 	vmov	fp, s18
 8003130:	2410      	movs	r4, #16
 8003132:	e005      	b.n	8003140 <_vfprintf_r+0x1138>
 8003134:	f10a 0a08 	add.w	sl, sl, #8
 8003138:	3d10      	subs	r5, #16
 800313a:	2d10      	cmp	r5, #16
 800313c:	f340 816e 	ble.w	800341c <_vfprintf_r+0x1414>
 8003140:	3301      	adds	r3, #1
 8003142:	3210      	adds	r2, #16
 8003144:	2b07      	cmp	r3, #7
 8003146:	e9ca 7400 	strd	r7, r4, [sl]
 800314a:	e9cd 321e 	strd	r3, r2, [sp, #120]	; 0x78
 800314e:	ddf1      	ble.n	8003134 <_vfprintf_r+0x112c>
 8003150:	aa1d      	add	r2, sp, #116	; 0x74
 8003152:	4641      	mov	r1, r8
 8003154:	4658      	mov	r0, fp
 8003156:	f004 fa83 	bl	8007660 <__sprint_r>
 800315a:	2800      	cmp	r0, #0
 800315c:	f47f a8a8 	bne.w	80022b0 <_vfprintf_r+0x2a8>
 8003160:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 8003164:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8003168:	e7e6      	b.n	8003138 <_vfprintf_r+0x1130>
 800316a:	bf00      	nop
 800316c:	66666667 	.word	0x66666667
 8003170:	0801e2c8 	.word	0x0801e2c8
 8003174:	0800ee84 	.word	0x0800ee84
 8003178:	0801e2d0 	.word	0x0801e2d0
 800317c:	4630      	mov	r0, r6
 800317e:	9409      	str	r4, [sp, #36]	; 0x24
 8003180:	9705      	str	r7, [sp, #20]
 8003182:	f8cd b00c 	str.w	fp, [sp, #12]
 8003186:	f7fd fb7b 	bl	8000880 <strlen>
 800318a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 800318e:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8003192:	9008      	str	r0, [sp, #32]
 8003194:	9304      	str	r3, [sp, #16]
 8003196:	970a      	str	r7, [sp, #40]	; 0x28
 8003198:	f7ff b96f 	b.w	800247a <_vfprintf_r+0x472>
 800319c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80031a0:	f8ca 7000 	str.w	r7, [sl]
 80031a4:	3501      	adds	r5, #1
 80031a6:	4434      	add	r4, r6
 80031a8:	2d07      	cmp	r5, #7
 80031aa:	e9cd 541e 	strd	r5, r4, [sp, #120]	; 0x78
 80031ae:	f8ca 6004 	str.w	r6, [sl, #4]
 80031b2:	f77f ac38 	ble.w	8002a26 <_vfprintf_r+0xa1e>
 80031b6:	e585      	b.n	8002cc4 <_vfprintf_r+0xcbc>
 80031b8:	9c05      	ldr	r4, [sp, #20]
 80031ba:	eeb0 0a4a 	vmov.f32	s0, s20
 80031be:	eef0 0a6a 	vmov.f32	s1, s21
 80031c2:	ab1b      	add	r3, sp, #108	; 0x6c
 80031c4:	9301      	str	r3, [sp, #4]
 80031c6:	ab18      	add	r3, sp, #96	; 0x60
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	4622      	mov	r2, r4
 80031cc:	ab17      	add	r3, sp, #92	; 0x5c
 80031ce:	ee19 0a10 	vmov	r0, s18
 80031d2:	2103      	movs	r1, #3
 80031d4:	f000 fb18 	bl	8003808 <_dtoa_r>
 80031d8:	4606      	mov	r6, r0
 80031da:	1904      	adds	r4, r0, r4
 80031dc:	7833      	ldrb	r3, [r6, #0]
 80031de:	2b30      	cmp	r3, #48	; 0x30
 80031e0:	d062      	beq.n	80032a8 <_vfprintf_r+0x12a0>
 80031e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80031e4:	441c      	add	r4, r3
 80031e6:	ec51 0b1a 	vmov	r0, r1, d10
 80031ea:	2200      	movs	r2, #0
 80031ec:	2300      	movs	r3, #0
 80031ee:	f006 fa29 	bl	8009644 <__aeabi_dcmpeq>
 80031f2:	2800      	cmp	r0, #0
 80031f4:	f000 808b 	beq.w	800330e <_vfprintf_r+0x1306>
 80031f8:	4623      	mov	r3, r4
 80031fa:	1b9b      	subs	r3, r3, r6
 80031fc:	2f47      	cmp	r7, #71	; 0x47
 80031fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8003200:	f43f ae17 	beq.w	8002e32 <_vfprintf_r+0xe2a>
 8003204:	2d66      	cmp	r5, #102	; 0x66
 8003206:	f040 8182 	bne.w	800350e <_vfprintf_r+0x1506>
 800320a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800320c:	9a05      	ldr	r2, [sp, #20]
 800320e:	930a      	str	r3, [sp, #40]	; 0x28
 8003210:	2b00      	cmp	r3, #0
 8003212:	f00b 0b01 	and.w	fp, fp, #1
 8003216:	f340 815c 	ble.w	80034d2 <_vfprintf_r+0x14ca>
 800321a:	ea5b 0102 	orrs.w	r1, fp, r2
 800321e:	f040 8145 	bne.w	80034ac <_vfprintf_r+0x14a4>
 8003222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003224:	9304      	str	r3, [sp, #16]
 8003226:	9308      	str	r3, [sp, #32]
 8003228:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800322a:	2b00      	cmp	r3, #0
 800322c:	d07b      	beq.n	8003326 <_vfprintf_r+0x131e>
 800322e:	232d      	movs	r3, #45	; 0x2d
 8003230:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
 8003234:	2300      	movs	r3, #0
 8003236:	9305      	str	r3, [sp, #20]
 8003238:	f7ff b922 	b.w	8002480 <_vfprintf_r+0x478>
 800323c:	4642      	mov	r2, r8
 800323e:	9e05      	ldr	r6, [sp, #20]
 8003240:	46b8      	mov	r8, r7
 8003242:	4617      	mov	r7, r2
 8003244:	3301      	adds	r3, #1
 8003246:	442c      	add	r4, r5
 8003248:	2b07      	cmp	r3, #7
 800324a:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 800324e:	f8ca 7000 	str.w	r7, [sl]
 8003252:	f8ca 5004 	str.w	r5, [sl, #4]
 8003256:	dc49      	bgt.n	80032ec <_vfprintf_r+0x12e4>
 8003258:	f10a 0a08 	add.w	sl, sl, #8
 800325c:	e4c3      	b.n	8002be6 <_vfprintf_r+0xbde>
 800325e:	242d      	movs	r4, #45	; 0x2d
 8003260:	f88d 4057 	strb.w	r4, [sp, #87]	; 0x57
 8003264:	f7ff b8fb 	b.w	800245e <_vfprintf_r+0x456>
 8003268:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800326c:	ee0a 3a90 	vmov	s21, r3
 8003270:	232d      	movs	r3, #45	; 0x2d
 8003272:	ee0a 0a10 	vmov	s20, r0
 8003276:	9312      	str	r3, [sp, #72]	; 0x48
 8003278:	e5b2      	b.n	8002de0 <_vfprintf_r+0xdd8>
 800327a:	ee19 0a10 	vmov	r0, s18
 800327e:	aa1d      	add	r2, sp, #116	; 0x74
 8003280:	4641      	mov	r1, r8
 8003282:	f004 f9ed 	bl	8007660 <__sprint_r>
 8003286:	2800      	cmp	r0, #0
 8003288:	f47f a812 	bne.w	80022b0 <_vfprintf_r+0x2a8>
 800328c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800328e:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8003290:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8003294:	e6d9      	b.n	800304a <_vfprintf_r+0x1042>
 8003296:	2d47      	cmp	r5, #71	; 0x47
 8003298:	f43f adc0 	beq.w	8002e1c <_vfprintf_r+0xe14>
 800329c:	4434      	add	r4, r6
 800329e:	e7a2      	b.n	80031e6 <_vfprintf_r+0x11de>
 80032a0:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 80032a4:	f7ff b817 	b.w	80022d6 <_vfprintf_r+0x2ce>
 80032a8:	ec51 0b1a 	vmov	r0, r1, d10
 80032ac:	2200      	movs	r2, #0
 80032ae:	2300      	movs	r3, #0
 80032b0:	f006 f9c8 	bl	8009644 <__aeabi_dcmpeq>
 80032b4:	2800      	cmp	r0, #0
 80032b6:	d194      	bne.n	80031e2 <_vfprintf_r+0x11da>
 80032b8:	9b05      	ldr	r3, [sp, #20]
 80032ba:	f1c3 0301 	rsb	r3, r3, #1
 80032be:	9317      	str	r3, [sp, #92]	; 0x5c
 80032c0:	e790      	b.n	80031e4 <_vfprintf_r+0x11dc>
 80032c2:	9b05      	ldr	r3, [sp, #20]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	bf08      	it	eq
 80032c8:	2301      	moveq	r3, #1
 80032ca:	9305      	str	r3, [sp, #20]
 80032cc:	e578      	b.n	8002dc0 <_vfprintf_r+0xdb8>
 80032ce:	ee19 0a10 	vmov	r0, s18
 80032d2:	aa1d      	add	r2, sp, #116	; 0x74
 80032d4:	4641      	mov	r1, r8
 80032d6:	f004 f9c3 	bl	8007660 <__sprint_r>
 80032da:	2800      	cmp	r0, #0
 80032dc:	f47e afe8 	bne.w	80022b0 <_vfprintf_r+0x2a8>
 80032e0:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 80032e4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80032e6:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80032ea:	e718      	b.n	800311e <_vfprintf_r+0x1116>
 80032ec:	ee19 0a10 	vmov	r0, s18
 80032f0:	aa1d      	add	r2, sp, #116	; 0x74
 80032f2:	4641      	mov	r1, r8
 80032f4:	f004 f9b4 	bl	8007660 <__sprint_r>
 80032f8:	2800      	cmp	r0, #0
 80032fa:	f47e afd9 	bne.w	80022b0 <_vfprintf_r+0x2a8>
 80032fe:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8003300:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8003304:	e46f      	b.n	8002be6 <_vfprintf_r+0xbde>
 8003306:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800330a:	f7ff b903 	b.w	8002514 <_vfprintf_r+0x50c>
 800330e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003310:	42a3      	cmp	r3, r4
 8003312:	f4bf af72 	bcs.w	80031fa <_vfprintf_r+0x11f2>
 8003316:	2130      	movs	r1, #48	; 0x30
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	921b      	str	r2, [sp, #108]	; 0x6c
 800331c:	7019      	strb	r1, [r3, #0]
 800331e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003320:	429c      	cmp	r4, r3
 8003322:	d8f9      	bhi.n	8003318 <_vfprintf_r+0x1310>
 8003324:	e769      	b.n	80031fa <_vfprintf_r+0x11f2>
 8003326:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003328:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 800332c:	9305      	str	r3, [sp, #20]
 800332e:	f7ff b8a4 	b.w	800247a <_vfprintf_r+0x472>
 8003332:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 8003336:	4293      	cmp	r3, r2
 8003338:	db43      	blt.n	80033c2 <_vfprintf_r+0x13ba>
 800333a:	f01b 0f01 	tst.w	fp, #1
 800333e:	f040 80ac 	bne.w	800349a <_vfprintf_r+0x1492>
 8003342:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8003346:	9204      	str	r2, [sp, #16]
 8003348:	9308      	str	r3, [sp, #32]
 800334a:	2567      	movs	r5, #103	; 0x67
 800334c:	e76c      	b.n	8003228 <_vfprintf_r+0x1220>
 800334e:	ee19 0a10 	vmov	r0, s18
 8003352:	aa1d      	add	r2, sp, #116	; 0x74
 8003354:	4641      	mov	r1, r8
 8003356:	f004 f983 	bl	8007660 <__sprint_r>
 800335a:	2800      	cmp	r0, #0
 800335c:	f47e afa8 	bne.w	80022b0 <_vfprintf_r+0x2a8>
 8003360:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8003362:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8003364:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8003368:	e450      	b.n	8002c0c <_vfprintf_r+0xc04>
 800336a:	ee19 0a10 	vmov	r0, s18
 800336e:	aa1d      	add	r2, sp, #116	; 0x74
 8003370:	4641      	mov	r1, r8
 8003372:	f004 f975 	bl	8007660 <__sprint_r>
 8003376:	2800      	cmp	r0, #0
 8003378:	f47e af9a 	bne.w	80022b0 <_vfprintf_r+0x2a8>
 800337c:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800337e:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8003382:	e429      	b.n	8002bd8 <_vfprintf_r+0xbd0>
 8003384:	ee19 0a10 	vmov	r0, s18
 8003388:	aa1d      	add	r2, sp, #116	; 0x74
 800338a:	4641      	mov	r1, r8
 800338c:	f004 f968 	bl	8007660 <__sprint_r>
 8003390:	2800      	cmp	r0, #0
 8003392:	f47e af8d 	bne.w	80022b0 <_vfprintf_r+0x2a8>
 8003396:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8003398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800339a:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800339c:	1b5d      	subs	r5, r3, r5
 800339e:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80033a2:	e44b      	b.n	8002c3c <_vfprintf_r+0xc34>
 80033a4:	2306      	movs	r3, #6
 80033a6:	9305      	str	r3, [sp, #20]
 80033a8:	e50a      	b.n	8002dc0 <_vfprintf_r+0xdb8>
 80033aa:	9b05      	ldr	r3, [sp, #20]
 80033ac:	9409      	str	r4, [sp, #36]	; 0x24
 80033ae:	f8cd b00c 	str.w	fp, [sp, #12]
 80033b2:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 80033b6:	9304      	str	r3, [sp, #16]
 80033b8:	9308      	str	r3, [sp, #32]
 80033ba:	9005      	str	r0, [sp, #20]
 80033bc:	900a      	str	r0, [sp, #40]	; 0x28
 80033be:	f7ff b85c 	b.w	800247a <_vfprintf_r+0x472>
 80033c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80033c6:	4413      	add	r3, r2
 80033c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80033ca:	9308      	str	r3, [sp, #32]
 80033cc:	2a00      	cmp	r2, #0
 80033ce:	dd75      	ble.n	80034bc <_vfprintf_r+0x14b4>
 80033d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80033d4:	9304      	str	r3, [sp, #16]
 80033d6:	2567      	movs	r5, #103	; 0x67
 80033d8:	e726      	b.n	8003228 <_vfprintf_r+0x1220>
 80033da:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 80033de:	f7ff b91a 	b.w	8002616 <_vfprintf_r+0x60e>
 80033e2:	2200      	movs	r2, #0
 80033e4:	9205      	str	r2, [sp, #20]
 80033e6:	f7fe be77 	b.w	80020d8 <_vfprintf_r+0xd0>
 80033ea:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 80033ee:	f7ff b806 	b.w	80023fe <_vfprintf_r+0x3f6>
 80033f2:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 80033f6:	f7ff b94f 	b.w	8002698 <_vfprintf_r+0x690>
 80033fa:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 80033fe:	f7ff b8cc 	b.w	800259a <_vfprintf_r+0x592>
 8003402:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 8003406:	f7ff b96a 	b.w	80026de <_vfprintf_r+0x6d6>
 800340a:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 800340e:	f7ff b85d 	b.w	80024cc <_vfprintf_r+0x4c4>
 8003412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003416:	9307      	str	r3, [sp, #28]
 8003418:	f7fe bf4f 	b.w	80022ba <_vfprintf_r+0x2b2>
 800341c:	3301      	adds	r3, #1
 800341e:	442a      	add	r2, r5
 8003420:	2b07      	cmp	r3, #7
 8003422:	e9cd 321e 	strd	r3, r2, [sp, #120]	; 0x78
 8003426:	f8ca 7000 	str.w	r7, [sl]
 800342a:	f8ca 5004 	str.w	r5, [sl, #4]
 800342e:	f77f ae21 	ble.w	8003074 <_vfprintf_r+0x106c>
 8003432:	ee19 0a10 	vmov	r0, s18
 8003436:	aa1d      	add	r2, sp, #116	; 0x74
 8003438:	4641      	mov	r1, r8
 800343a:	f004 f911 	bl	8007660 <__sprint_r>
 800343e:	2800      	cmp	r0, #0
 8003440:	f47e af36 	bne.w	80022b0 <_vfprintf_r+0x2a8>
 8003444:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 8003448:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800344c:	e614      	b.n	8003078 <_vfprintf_r+0x1070>
 800344e:	3330      	adds	r3, #48	; 0x30
 8003450:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8003454:	2330      	movs	r3, #48	; 0x30
 8003456:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
 800345a:	2304      	movs	r3, #4
 800345c:	9311      	str	r3, [sp, #68]	; 0x44
 800345e:	e533      	b.n	8002ec8 <_vfprintf_r+0xec0>
 8003460:	46b8      	mov	r8, r7
 8003462:	f7fe bf25 	b.w	80022b0 <_vfprintf_r+0x2a8>
 8003466:	f01b 0201 	ands.w	r2, fp, #1
 800346a:	920a      	str	r2, [sp, #40]	; 0x28
 800346c:	f47f ad33 	bne.w	8002ed6 <_vfprintf_r+0xece>
 8003470:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003474:	9304      	str	r3, [sp, #16]
 8003476:	e6d7      	b.n	8003228 <_vfprintf_r+0x1220>
 8003478:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800347a:	4e26      	ldr	r6, [pc, #152]	; (8003514 <_vfprintf_r+0x150c>)
 800347c:	2b00      	cmp	r3, #0
 800347e:	bfb8      	it	lt
 8003480:	242d      	movlt	r4, #45	; 0x2d
 8003482:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
 8003486:	9303      	str	r3, [sp, #12]
 8003488:	bfa8      	it	ge
 800348a:	f89d 4057 	ldrbge.w	r4, [sp, #87]	; 0x57
 800348e:	4b22      	ldr	r3, [pc, #136]	; (8003518 <_vfprintf_r+0x1510>)
 8003490:	bfb8      	it	lt
 8003492:	f88d 4057 	strblt.w	r4, [sp, #87]	; 0x57
 8003496:	f7fe bfe7 	b.w	8002468 <_vfprintf_r+0x460>
 800349a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800349c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800349e:	4413      	add	r3, r2
 80034a0:	9308      	str	r3, [sp, #32]
 80034a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80034a6:	9304      	str	r3, [sp, #16]
 80034a8:	2567      	movs	r5, #103	; 0x67
 80034aa:	e6bd      	b.n	8003228 <_vfprintf_r+0x1220>
 80034ac:	990e      	ldr	r1, [sp, #56]	; 0x38
 80034ae:	440b      	add	r3, r1
 80034b0:	441a      	add	r2, r3
 80034b2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80034b6:	9208      	str	r2, [sp, #32]
 80034b8:	9304      	str	r3, [sp, #16]
 80034ba:	e6b5      	b.n	8003228 <_vfprintf_r+0x1220>
 80034bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034be:	9a08      	ldr	r2, [sp, #32]
 80034c0:	f1c3 0301 	rsb	r3, r3, #1
 80034c4:	441a      	add	r2, r3
 80034c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80034ca:	9208      	str	r2, [sp, #32]
 80034cc:	9304      	str	r3, [sp, #16]
 80034ce:	2567      	movs	r5, #103	; 0x67
 80034d0:	e6aa      	b.n	8003228 <_vfprintf_r+0x1220>
 80034d2:	ea5b 0302 	orrs.w	r3, fp, r2
 80034d6:	d103      	bne.n	80034e0 <_vfprintf_r+0x14d8>
 80034d8:	2301      	movs	r3, #1
 80034da:	9304      	str	r3, [sp, #16]
 80034dc:	9308      	str	r3, [sp, #32]
 80034de:	e6a3      	b.n	8003228 <_vfprintf_r+0x1220>
 80034e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034e2:	3301      	adds	r3, #1
 80034e4:	441a      	add	r2, r3
 80034e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80034ea:	9208      	str	r2, [sp, #32]
 80034ec:	9304      	str	r3, [sp, #16]
 80034ee:	e69b      	b.n	8003228 <_vfprintf_r+0x1220>
 80034f0:	2302      	movs	r3, #2
 80034f2:	9311      	str	r3, [sp, #68]	; 0x44
 80034f4:	e4e8      	b.n	8002ec8 <_vfprintf_r+0xec0>
 80034f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034f8:	f899 5001 	ldrb.w	r5, [r9, #1]
 80034fc:	4689      	mov	r9, r1
 80034fe:	f852 1b04 	ldr.w	r1, [r2], #4
 8003502:	9209      	str	r2, [sp, #36]	; 0x24
 8003504:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
 8003508:	9105      	str	r1, [sp, #20]
 800350a:	f7fe bde3 	b.w	80020d4 <_vfprintf_r+0xcc>
 800350e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003510:	930a      	str	r3, [sp, #40]	; 0x28
 8003512:	e497      	b.n	8002e44 <_vfprintf_r+0xe3c>
 8003514:	0801e298 	.word	0x0801e298
 8003518:	0801e29c 	.word	0x0801e29c

0800351c <vfprintf>:
 800351c:	b410      	push	{r4}
 800351e:	4c05      	ldr	r4, [pc, #20]	; (8003534 <vfprintf+0x18>)
 8003520:	4684      	mov	ip, r0
 8003522:	4613      	mov	r3, r2
 8003524:	6820      	ldr	r0, [r4, #0]
 8003526:	f85d 4b04 	ldr.w	r4, [sp], #4
 800352a:	460a      	mov	r2, r1
 800352c:	4661      	mov	r1, ip
 800352e:	f7fe bd6b 	b.w	8002008 <_vfprintf_r>
 8003532:	bf00      	nop
 8003534:	20000008 	.word	0x20000008

08003538 <__sbprintf>:
 8003538:	b570      	push	{r4, r5, r6, lr}
 800353a:	460c      	mov	r4, r1
 800353c:	8989      	ldrh	r1, [r1, #12]
 800353e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8003542:	f021 0102 	bic.w	r1, r1, #2
 8003546:	f8ad 100c 	strh.w	r1, [sp, #12]
 800354a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800354c:	9119      	str	r1, [sp, #100]	; 0x64
 800354e:	89e1      	ldrh	r1, [r4, #14]
 8003550:	f8ad 100e 	strh.w	r1, [sp, #14]
 8003554:	69e1      	ldr	r1, [r4, #28]
 8003556:	9107      	str	r1, [sp, #28]
 8003558:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800355a:	9109      	str	r1, [sp, #36]	; 0x24
 800355c:	a91a      	add	r1, sp, #104	; 0x68
 800355e:	9100      	str	r1, [sp, #0]
 8003560:	9104      	str	r1, [sp, #16]
 8003562:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003566:	9102      	str	r1, [sp, #8]
 8003568:	9105      	str	r1, [sp, #20]
 800356a:	2100      	movs	r1, #0
 800356c:	9106      	str	r1, [sp, #24]
 800356e:	4669      	mov	r1, sp
 8003570:	4606      	mov	r6, r0
 8003572:	f7fe fd49 	bl	8002008 <_vfprintf_r>
 8003576:	1e05      	subs	r5, r0, #0
 8003578:	db07      	blt.n	800358a <__sbprintf+0x52>
 800357a:	4669      	mov	r1, sp
 800357c:	4630      	mov	r0, r6
 800357e:	f001 f979 	bl	8004874 <_fflush_r>
 8003582:	2800      	cmp	r0, #0
 8003584:	bf18      	it	ne
 8003586:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800358a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800358e:	065b      	lsls	r3, r3, #25
 8003590:	d503      	bpl.n	800359a <__sbprintf+0x62>
 8003592:	89a3      	ldrh	r3, [r4, #12]
 8003594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003598:	81a3      	strh	r3, [r4, #12]
 800359a:	4628      	mov	r0, r5
 800359c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 80035a0:	bd70      	pop	{r4, r5, r6, pc}
 80035a2:	bf00      	nop

080035a4 <__swsetup_r>:
 80035a4:	b538      	push	{r3, r4, r5, lr}
 80035a6:	4b33      	ldr	r3, [pc, #204]	; (8003674 <__swsetup_r+0xd0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4605      	mov	r5, r0
 80035ac:	460c      	mov	r4, r1
 80035ae:	b10b      	cbz	r3, 80035b4 <__swsetup_r+0x10>
 80035b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035b2:	b312      	cbz	r2, 80035fa <__swsetup_r+0x56>
 80035b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035b8:	0718      	lsls	r0, r3, #28
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	d525      	bpl.n	800360a <__swsetup_r+0x66>
 80035be:	6921      	ldr	r1, [r4, #16]
 80035c0:	2900      	cmp	r1, #0
 80035c2:	d02d      	beq.n	8003620 <__swsetup_r+0x7c>
 80035c4:	f012 0001 	ands.w	r0, r2, #1
 80035c8:	d007      	beq.n	80035da <__swsetup_r+0x36>
 80035ca:	2000      	movs	r0, #0
 80035cc:	60a0      	str	r0, [r4, #8]
 80035ce:	6960      	ldr	r0, [r4, #20]
 80035d0:	4240      	negs	r0, r0
 80035d2:	61a0      	str	r0, [r4, #24]
 80035d4:	b139      	cbz	r1, 80035e6 <__swsetup_r+0x42>
 80035d6:	2000      	movs	r0, #0
 80035d8:	bd38      	pop	{r3, r4, r5, pc}
 80035da:	0795      	lsls	r5, r2, #30
 80035dc:	bf58      	it	pl
 80035de:	6960      	ldrpl	r0, [r4, #20]
 80035e0:	60a0      	str	r0, [r4, #8]
 80035e2:	2900      	cmp	r1, #0
 80035e4:	d1f7      	bne.n	80035d6 <__swsetup_r+0x32>
 80035e6:	0612      	lsls	r2, r2, #24
 80035e8:	bf58      	it	pl
 80035ea:	4608      	movpl	r0, r1
 80035ec:	d5f4      	bpl.n	80035d8 <__swsetup_r+0x34>
 80035ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035f2:	81a3      	strh	r3, [r4, #12]
 80035f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035f8:	bd38      	pop	{r3, r4, r5, pc}
 80035fa:	4618      	mov	r0, r3
 80035fc:	f001 fa64 	bl	8004ac8 <__sinit>
 8003600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003604:	0718      	lsls	r0, r3, #28
 8003606:	b29a      	uxth	r2, r3
 8003608:	d4d9      	bmi.n	80035be <__swsetup_r+0x1a>
 800360a:	06d1      	lsls	r1, r2, #27
 800360c:	d52a      	bpl.n	8003664 <__swsetup_r+0xc0>
 800360e:	0752      	lsls	r2, r2, #29
 8003610:	d414      	bmi.n	800363c <__swsetup_r+0x98>
 8003612:	6921      	ldr	r1, [r4, #16]
 8003614:	f043 0308 	orr.w	r3, r3, #8
 8003618:	81a3      	strh	r3, [r4, #12]
 800361a:	b29a      	uxth	r2, r3
 800361c:	2900      	cmp	r1, #0
 800361e:	d1d1      	bne.n	80035c4 <__swsetup_r+0x20>
 8003620:	f402 7020 	and.w	r0, r2, #640	; 0x280
 8003624:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003628:	d0cc      	beq.n	80035c4 <__swsetup_r+0x20>
 800362a:	4621      	mov	r1, r4
 800362c:	4628      	mov	r0, r5
 800362e:	f001 fd87 	bl	8005140 <__smakebuf_r>
 8003632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003636:	6921      	ldr	r1, [r4, #16]
 8003638:	b29a      	uxth	r2, r3
 800363a:	e7c3      	b.n	80035c4 <__swsetup_r+0x20>
 800363c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800363e:	b151      	cbz	r1, 8003656 <__swsetup_r+0xb2>
 8003640:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8003644:	4291      	cmp	r1, r2
 8003646:	d004      	beq.n	8003652 <__swsetup_r+0xae>
 8003648:	4628      	mov	r0, r5
 800364a:	f001 faad 	bl	8004ba8 <_free_r>
 800364e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	6322      	str	r2, [r4, #48]	; 0x30
 8003656:	6921      	ldr	r1, [r4, #16]
 8003658:	2200      	movs	r2, #0
 800365a:	e9c4 1200 	strd	r1, r2, [r4]
 800365e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003662:	e7d7      	b.n	8003614 <__swsetup_r+0x70>
 8003664:	2209      	movs	r2, #9
 8003666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800366a:	602a      	str	r2, [r5, #0]
 800366c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003670:	81a3      	strh	r3, [r4, #12]
 8003672:	bd38      	pop	{r3, r4, r5, pc}
 8003674:	20000008 	.word	0x20000008

08003678 <__register_exitproc>:
 8003678:	b470      	push	{r4, r5, r6}
 800367a:	4c18      	ldr	r4, [pc, #96]	; (80036dc <__register_exitproc+0x64>)
 800367c:	6825      	ldr	r5, [r4, #0]
 800367e:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8003682:	b31c      	cbz	r4, 80036cc <__register_exitproc+0x54>
 8003684:	6865      	ldr	r5, [r4, #4]
 8003686:	2d1f      	cmp	r5, #31
 8003688:	dc25      	bgt.n	80036d6 <__register_exitproc+0x5e>
 800368a:	b938      	cbnz	r0, 800369c <__register_exitproc+0x24>
 800368c:	1cab      	adds	r3, r5, #2
 800368e:	3501      	adds	r5, #1
 8003690:	6065      	str	r5, [r4, #4]
 8003692:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8003696:	2000      	movs	r0, #0
 8003698:	bc70      	pop	{r4, r5, r6}
 800369a:	4770      	bx	lr
 800369c:	eb04 0c85 	add.w	ip, r4, r5, lsl #2
 80036a0:	2802      	cmp	r0, #2
 80036a2:	f8cc 2088 	str.w	r2, [ip, #136]	; 0x88
 80036a6:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 80036aa:	f04f 0201 	mov.w	r2, #1
 80036ae:	fa02 f205 	lsl.w	r2, r2, r5
 80036b2:	ea46 0602 	orr.w	r6, r6, r2
 80036b6:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 80036ba:	f8cc 3108 	str.w	r3, [ip, #264]	; 0x108
 80036be:	d1e5      	bne.n	800368c <__register_exitproc+0x14>
 80036c0:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 80036ca:	e7df      	b.n	800368c <__register_exitproc+0x14>
 80036cc:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 80036d0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80036d4:	e7d6      	b.n	8003684 <__register_exitproc+0xc>
 80036d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036da:	e7dd      	b.n	8003698 <__register_exitproc+0x20>
 80036dc:	0800ee50 	.word	0x0800ee50

080036e0 <quorem>:
 80036e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e4:	6903      	ldr	r3, [r0, #16]
 80036e6:	690c      	ldr	r4, [r1, #16]
 80036e8:	42a3      	cmp	r3, r4
 80036ea:	b083      	sub	sp, #12
 80036ec:	f2c0 8087 	blt.w	80037fe <quorem+0x11e>
 80036f0:	3c01      	subs	r4, #1
 80036f2:	f101 0514 	add.w	r5, r1, #20
 80036f6:	00a3      	lsls	r3, r4, #2
 80036f8:	f100 0814 	add.w	r8, r0, #20
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8003702:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8003706:	3301      	adds	r3, #1
 8003708:	4681      	mov	r9, r0
 800370a:	429a      	cmp	r2, r3
 800370c:	eb08 0084 	add.w	r0, r8, r4, lsl #2
 8003710:	eb05 0784 	add.w	r7, r5, r4, lsl #2
 8003714:	9001      	str	r0, [sp, #4]
 8003716:	fbb2 f6f3 	udiv	r6, r2, r3
 800371a:	d33b      	bcc.n	8003794 <quorem+0xb4>
 800371c:	2300      	movs	r3, #0
 800371e:	46ae      	mov	lr, r5
 8003720:	4640      	mov	r0, r8
 8003722:	469b      	mov	fp, r3
 8003724:	f85e ab04 	ldr.w	sl, [lr], #4
 8003728:	6802      	ldr	r2, [r0, #0]
 800372a:	fa1f fc8a 	uxth.w	ip, sl
 800372e:	fb06 330c 	mla	r3, r6, ip, r3
 8003732:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8003736:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
 800373a:	fb06 ca0a 	mla	sl, r6, sl, ip
 800373e:	fa1f fc83 	uxth.w	ip, r3
 8003742:	ebab 0c0c 	sub.w	ip, fp, ip
 8003746:	fa1f f38a 	uxth.w	r3, sl
 800374a:	fa1c fc82 	uxtah	ip, ip, r2
 800374e:	ebc3 4212 	rsb	r2, r3, r2, lsr #16
 8003752:	eb02 422c 	add.w	r2, r2, ip, asr #16
 8003756:	fa1f fc8c 	uxth.w	ip, ip
 800375a:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
 800375e:	4577      	cmp	r7, lr
 8003760:	f840 3b04 	str.w	r3, [r0], #4
 8003764:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003768:	ea4f 431a 	mov.w	r3, sl, lsr #16
 800376c:	d2da      	bcs.n	8003724 <quorem+0x44>
 800376e:	9b00      	ldr	r3, [sp, #0]
 8003770:	f858 3003 	ldr.w	r3, [r8, r3]
 8003774:	b973      	cbnz	r3, 8003794 <quorem+0xb4>
 8003776:	9b01      	ldr	r3, [sp, #4]
 8003778:	3b04      	subs	r3, #4
 800377a:	4598      	cmp	r8, r3
 800377c:	d304      	bcc.n	8003788 <quorem+0xa8>
 800377e:	e007      	b.n	8003790 <quorem+0xb0>
 8003780:	4598      	cmp	r8, r3
 8003782:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003786:	d203      	bcs.n	8003790 <quorem+0xb0>
 8003788:	f853 2904 	ldr.w	r2, [r3], #-4
 800378c:	2a00      	cmp	r2, #0
 800378e:	d0f7      	beq.n	8003780 <quorem+0xa0>
 8003790:	f8c9 4010 	str.w	r4, [r9, #16]
 8003794:	4648      	mov	r0, r9
 8003796:	f002 fc7f 	bl	8006098 <__mcmp>
 800379a:	2800      	cmp	r0, #0
 800379c:	db2b      	blt.n	80037f6 <quorem+0x116>
 800379e:	3601      	adds	r6, #1
 80037a0:	4640      	mov	r0, r8
 80037a2:	2300      	movs	r3, #0
 80037a4:	f855 1b04 	ldr.w	r1, [r5], #4
 80037a8:	f8d0 c000 	ldr.w	ip, [r0]
 80037ac:	b28a      	uxth	r2, r1
 80037ae:	1a9a      	subs	r2, r3, r2
 80037b0:	0c0b      	lsrs	r3, r1, #16
 80037b2:	fa12 f28c 	uxtah	r2, r2, ip
 80037b6:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
 80037ba:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80037be:	b292      	uxth	r2, r2
 80037c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80037c4:	42af      	cmp	r7, r5
 80037c6:	f840 2b04 	str.w	r2, [r0], #4
 80037ca:	ea4f 4323 	mov.w	r3, r3, asr #16
 80037ce:	d2e9      	bcs.n	80037a4 <quorem+0xc4>
 80037d0:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 80037d4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80037d8:	b96a      	cbnz	r2, 80037f6 <quorem+0x116>
 80037da:	3b04      	subs	r3, #4
 80037dc:	4598      	cmp	r8, r3
 80037de:	d304      	bcc.n	80037ea <quorem+0x10a>
 80037e0:	e007      	b.n	80037f2 <quorem+0x112>
 80037e2:	4598      	cmp	r8, r3
 80037e4:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80037e8:	d203      	bcs.n	80037f2 <quorem+0x112>
 80037ea:	f853 2904 	ldr.w	r2, [r3], #-4
 80037ee:	2a00      	cmp	r2, #0
 80037f0:	d0f7      	beq.n	80037e2 <quorem+0x102>
 80037f2:	f8c9 4010 	str.w	r4, [r9, #16]
 80037f6:	4630      	mov	r0, r6
 80037f8:	b003      	add	sp, #12
 80037fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037fe:	2000      	movs	r0, #0
 8003800:	b003      	add	sp, #12
 8003802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003806:	bf00      	nop

08003808 <_dtoa_r>:
 8003808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800380c:	ed2d 8b06 	vpush	{d8-d10}
 8003810:	b095      	sub	sp, #84	; 0x54
 8003812:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003816:	9101      	str	r1, [sp, #4]
 8003818:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800381a:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800381c:	9209      	str	r2, [sp, #36]	; 0x24
 800381e:	ec59 8b10 	vmov	r8, r9, d0
 8003822:	4604      	mov	r4, r0
 8003824:	9306      	str	r3, [sp, #24]
 8003826:	b141      	cbz	r1, 800383a <_dtoa_r+0x32>
 8003828:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800382a:	604a      	str	r2, [r1, #4]
 800382c:	2301      	movs	r3, #1
 800382e:	4093      	lsls	r3, r2
 8003830:	608b      	str	r3, [r1, #8]
 8003832:	f002 f975 	bl	8005b20 <_Bfree>
 8003836:	2300      	movs	r3, #0
 8003838:	6423      	str	r3, [r4, #64]	; 0x40
 800383a:	f1b9 0a00 	subs.w	sl, r9, #0
 800383e:	bfb4      	ite	lt
 8003840:	2301      	movlt	r3, #1
 8003842:	2300      	movge	r3, #0
 8003844:	602b      	str	r3, [r5, #0]
 8003846:	4b7c      	ldr	r3, [pc, #496]	; (8003a38 <_dtoa_r+0x230>)
 8003848:	bfbc      	itt	lt
 800384a:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
 800384e:	f8cd a00c 	strlt.w	sl, [sp, #12]
 8003852:	ea33 030a 	bics.w	r3, r3, sl
 8003856:	f000 80b2 	beq.w	80039be <_dtoa_r+0x1b6>
 800385a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800385e:	2200      	movs	r2, #0
 8003860:	ec51 0b17 	vmov	r0, r1, d7
 8003864:	eeb0 9a47 	vmov.f32	s18, s14
 8003868:	eef0 9a67 	vmov.f32	s19, s15
 800386c:	2300      	movs	r3, #0
 800386e:	f005 fee9 	bl	8009644 <__aeabi_dcmpeq>
 8003872:	4607      	mov	r7, r0
 8003874:	b180      	cbz	r0, 8003898 <_dtoa_r+0x90>
 8003876:	9a06      	ldr	r2, [sp, #24]
 8003878:	2301      	movs	r3, #1
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 82db 	beq.w	8003e3a <_dtoa_r+0x632>
 8003884:	486d      	ldr	r0, [pc, #436]	; (8003a3c <_dtoa_r+0x234>)
 8003886:	6018      	str	r0, [r3, #0]
 8003888:	1e43      	subs	r3, r0, #1
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	9800      	ldr	r0, [sp, #0]
 800388e:	b015      	add	sp, #84	; 0x54
 8003890:	ecbd 8b06 	vpop	{d8-d10}
 8003894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003898:	aa12      	add	r2, sp, #72	; 0x48
 800389a:	a913      	add	r1, sp, #76	; 0x4c
 800389c:	4620      	mov	r0, r4
 800389e:	eeb0 0a49 	vmov.f32	s0, s18
 80038a2:	eef0 0a69 	vmov.f32	s1, s19
 80038a6:	f002 fd4f 	bl	8006348 <__d2b>
 80038aa:	eeb0 8a49 	vmov.f32	s16, s18
 80038ae:	eef0 8a69 	vmov.f32	s17, s19
 80038b2:	ea5f 561a 	movs.w	r6, sl, lsr #20
 80038b6:	4605      	mov	r5, r0
 80038b8:	f040 8099 	bne.w	80039ee <_dtoa_r+0x1e6>
 80038bc:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
 80038c0:	443e      	add	r6, r7
 80038c2:	f206 4032 	addw	r0, r6, #1074	; 0x432
 80038c6:	2820      	cmp	r0, #32
 80038c8:	f340 83ab 	ble.w	8004022 <_dtoa_r+0x81a>
 80038cc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80038d0:	fa0a fa00 	lsl.w	sl, sl, r0
 80038d4:	f206 4012 	addw	r0, r6, #1042	; 0x412
 80038d8:	fa28 f000 	lsr.w	r0, r8, r0
 80038dc:	ea4a 0000 	orr.w	r0, sl, r0
 80038e0:	f005 fbce 	bl	8009080 <__aeabi_ui2d>
 80038e4:	2301      	movs	r3, #1
 80038e6:	3e01      	subs	r6, #1
 80038e8:	930d      	str	r3, [sp, #52]	; 0x34
 80038ea:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80038ee:	4b54      	ldr	r3, [pc, #336]	; (8003a40 <_dtoa_r+0x238>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	f005 fa87 	bl	8008e04 <__aeabi_dsub>
 80038f6:	a34a      	add	r3, pc, #296	; (adr r3, 8003a20 <_dtoa_r+0x218>)
 80038f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fc:	f005 fc3a 	bl	8009174 <__aeabi_dmul>
 8003900:	a349      	add	r3, pc, #292	; (adr r3, 8003a28 <_dtoa_r+0x220>)
 8003902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003906:	f005 fa7f 	bl	8008e08 <__adddf3>
 800390a:	4680      	mov	r8, r0
 800390c:	4630      	mov	r0, r6
 800390e:	4689      	mov	r9, r1
 8003910:	f005 fbc6 	bl	80090a0 <__aeabi_i2d>
 8003914:	a346      	add	r3, pc, #280	; (adr r3, 8003a30 <_dtoa_r+0x228>)
 8003916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391a:	f005 fc2b 	bl	8009174 <__aeabi_dmul>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	4640      	mov	r0, r8
 8003924:	4649      	mov	r1, r9
 8003926:	f005 fa6f 	bl	8008e08 <__adddf3>
 800392a:	4680      	mov	r8, r0
 800392c:	4689      	mov	r9, r1
 800392e:	f005 fed1 	bl	80096d4 <__aeabi_d2iz>
 8003932:	2200      	movs	r2, #0
 8003934:	4683      	mov	fp, r0
 8003936:	2300      	movs	r3, #0
 8003938:	4640      	mov	r0, r8
 800393a:	4649      	mov	r1, r9
 800393c:	f005 fe8c 	bl	8009658 <__aeabi_dcmplt>
 8003940:	2800      	cmp	r0, #0
 8003942:	f040 826d 	bne.w	8003e20 <_dtoa_r+0x618>
 8003946:	f1bb 0f16 	cmp.w	fp, #22
 800394a:	f200 825c 	bhi.w	8003e06 <_dtoa_r+0x5fe>
 800394e:	4b3d      	ldr	r3, [pc, #244]	; (8003a44 <_dtoa_r+0x23c>)
 8003950:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003958:	ec51 0b19 	vmov	r0, r1, d9
 800395c:	f005 fe7c 	bl	8009658 <__aeabi_dcmplt>
 8003960:	2800      	cmp	r0, #0
 8003962:	d075      	beq.n	8003a50 <_dtoa_r+0x248>
 8003964:	2300      	movs	r3, #0
 8003966:	1bbe      	subs	r6, r7, r6
 8003968:	930c      	str	r3, [sp, #48]	; 0x30
 800396a:	1e73      	subs	r3, r6, #1
 800396c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003970:	9304      	str	r3, [sp, #16]
 8003972:	f100 824f 	bmi.w	8003e14 <_dtoa_r+0x60c>
 8003976:	2300      	movs	r3, #0
 8003978:	9308      	str	r3, [sp, #32]
 800397a:	f1bb 0f00 	cmp.w	fp, #0
 800397e:	da6e      	bge.n	8003a5e <_dtoa_r+0x256>
 8003980:	9b08      	ldr	r3, [sp, #32]
 8003982:	f8cd b014 	str.w	fp, [sp, #20]
 8003986:	eba3 030b 	sub.w	r3, r3, fp
 800398a:	9308      	str	r3, [sp, #32]
 800398c:	f1cb 0300 	rsb	r3, fp, #0
 8003990:	930b      	str	r3, [sp, #44]	; 0x2c
 8003992:	9b01      	ldr	r3, [sp, #4]
 8003994:	2b09      	cmp	r3, #9
 8003996:	f04f 0b00 	mov.w	fp, #0
 800399a:	d869      	bhi.n	8003a70 <_dtoa_r+0x268>
 800399c:	2b05      	cmp	r3, #5
 800399e:	f340 833e 	ble.w	800401e <_dtoa_r+0x816>
 80039a2:	3b04      	subs	r3, #4
 80039a4:	9301      	str	r3, [sp, #4]
 80039a6:	2600      	movs	r6, #0
 80039a8:	9b01      	ldr	r3, [sp, #4]
 80039aa:	3b02      	subs	r3, #2
 80039ac:	2b03      	cmp	r3, #3
 80039ae:	f200 8699 	bhi.w	80046e4 <_dtoa_r+0xedc>
 80039b2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80039b6:	044e      	.short	0x044e
 80039b8:	0443044b 	.word	0x0443044b
 80039bc:	0426      	.short	0x0426
 80039be:	9a06      	ldr	r2, [sp, #24]
 80039c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80039c4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	ea5a 0308 	orrs.w	r3, sl, r8
 80039ce:	d11d      	bne.n	8003a0c <_dtoa_r+0x204>
 80039d0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 867d 	beq.w	80046d2 <_dtoa_r+0xeca>
 80039d8:	4b1b      	ldr	r3, [pc, #108]	; (8003a48 <_dtoa_r+0x240>)
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	3308      	adds	r3, #8
 80039de:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80039e0:	9800      	ldr	r0, [sp, #0]
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	b015      	add	sp, #84	; 0x54
 80039e6:	ecbd 8b06 	vpop	{d8-d10}
 80039ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039ee:	ee18 3a90 	vmov	r3, s17
 80039f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039f6:	ec51 0b19 	vmov	r0, r1, d9
 80039fa:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80039fe:	970d      	str	r7, [sp, #52]	; 0x34
 8003a00:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8003a04:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8003a06:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003a0a:	e770      	b.n	80038ee <_dtoa_r+0xe6>
 8003a0c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f040 83db 	bne.w	80041ca <_dtoa_r+0x9c2>
 8003a14:	4b0d      	ldr	r3, [pc, #52]	; (8003a4c <_dtoa_r+0x244>)
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	e738      	b.n	800388c <_dtoa_r+0x84>
 8003a1a:	bf00      	nop
 8003a1c:	f3af 8000 	nop.w
 8003a20:	636f4361 	.word	0x636f4361
 8003a24:	3fd287a7 	.word	0x3fd287a7
 8003a28:	8b60c8b3 	.word	0x8b60c8b3
 8003a2c:	3fc68a28 	.word	0x3fc68a28
 8003a30:	509f79fb 	.word	0x509f79fb
 8003a34:	3fd34413 	.word	0x3fd34413
 8003a38:	7ff00000 	.word	0x7ff00000
 8003a3c:	0801e2d1 	.word	0x0801e2d1
 8003a40:	3ff80000 	.word	0x3ff80000
 8003a44:	0800eea8 	.word	0x0800eea8
 8003a48:	0801e2d8 	.word	0x0801e2d8
 8003a4c:	0801e2d4 	.word	0x0801e2d4
 8003a50:	1bbe      	subs	r6, r7, r6
 8003a52:	1e73      	subs	r3, r6, #1
 8003a54:	9304      	str	r3, [sp, #16]
 8003a56:	f100 849a 	bmi.w	800438e <_dtoa_r+0xb86>
 8003a5a:	900c      	str	r0, [sp, #48]	; 0x30
 8003a5c:	9008      	str	r0, [sp, #32]
 8003a5e:	9b04      	ldr	r3, [sp, #16]
 8003a60:	445b      	add	r3, fp
 8003a62:	e9cd 3b04 	strd	r3, fp, [sp, #16]
 8003a66:	2300      	movs	r3, #0
 8003a68:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a6a:	9b01      	ldr	r3, [sp, #4]
 8003a6c:	2b09      	cmp	r3, #9
 8003a6e:	d995      	bls.n	800399c <_dtoa_r+0x194>
 8003a70:	2300      	movs	r3, #0
 8003a72:	2601      	movs	r6, #1
 8003a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a78:	9301      	str	r3, [sp, #4]
 8003a7a:	960a      	str	r6, [sp, #40]	; 0x28
 8003a7c:	9207      	str	r2, [sp, #28]
 8003a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a80:	9b07      	ldr	r3, [sp, #28]
 8003a82:	930f      	str	r3, [sp, #60]	; 0x3c
 8003a84:	2100      	movs	r1, #0
 8003a86:	6461      	str	r1, [r4, #68]	; 0x44
 8003a88:	4620      	mov	r0, r4
 8003a8a:	f002 f823 	bl	8005ad4 <_Balloc>
 8003a8e:	9000      	str	r0, [sp, #0]
 8003a90:	2800      	cmp	r0, #0
 8003a92:	f000 862f 	beq.w	80046f4 <_dtoa_r+0xeec>
 8003a96:	9b00      	ldr	r3, [sp, #0]
 8003a98:	6423      	str	r3, [r4, #64]	; 0x40
 8003a9a:	9b07      	ldr	r3, [sp, #28]
 8003a9c:	2b0e      	cmp	r3, #14
 8003a9e:	f200 80f9 	bhi.w	8003c94 <_dtoa_r+0x48c>
 8003aa2:	2e00      	cmp	r6, #0
 8003aa4:	f000 80f6 	beq.w	8003c94 <_dtoa_r+0x48c>
 8003aa8:	9905      	ldr	r1, [sp, #20]
 8003aaa:	2900      	cmp	r1, #0
 8003aac:	f340 8471 	ble.w	8004392 <_dtoa_r+0xb8a>
 8003ab0:	4bbd      	ldr	r3, [pc, #756]	; (8003da8 <_dtoa_r+0x5a0>)
 8003ab2:	f001 020f 	and.w	r2, r1, #15
 8003ab6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003aba:	ea4f 1821 	mov.w	r8, r1, asr #4
 8003abe:	05c9      	lsls	r1, r1, #23
 8003ac0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003ac4:	f140 8403 	bpl.w	80042ce <_dtoa_r+0xac6>
 8003ac8:	4bb8      	ldr	r3, [pc, #736]	; (8003dac <_dtoa_r+0x5a4>)
 8003aca:	ec51 0b19 	vmov	r0, r1, d9
 8003ace:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003ad2:	f005 fc79 	bl	80093c8 <__aeabi_ddiv>
 8003ad6:	ec41 0b18 	vmov	d8, r0, r1
 8003ada:	f008 080f 	and.w	r8, r8, #15
 8003ade:	f04f 0a03 	mov.w	sl, #3
 8003ae2:	f1b8 0f00 	cmp.w	r8, #0
 8003ae6:	d013      	beq.n	8003b10 <_dtoa_r+0x308>
 8003ae8:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 8003dac <_dtoa_r+0x5a4>
 8003aec:	f018 0f01 	tst.w	r8, #1
 8003af0:	d009      	beq.n	8003b06 <_dtoa_r+0x2fe>
 8003af2:	4630      	mov	r0, r6
 8003af4:	4639      	mov	r1, r7
 8003af6:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003afa:	f005 fb3b 	bl	8009174 <__aeabi_dmul>
 8003afe:	f10a 0a01 	add.w	sl, sl, #1
 8003b02:	4606      	mov	r6, r0
 8003b04:	460f      	mov	r7, r1
 8003b06:	ea5f 0868 	movs.w	r8, r8, asr #1
 8003b0a:	f109 0908 	add.w	r9, r9, #8
 8003b0e:	d1ed      	bne.n	8003aec <_dtoa_r+0x2e4>
 8003b10:	ec51 0b18 	vmov	r0, r1, d8
 8003b14:	4632      	mov	r2, r6
 8003b16:	463b      	mov	r3, r7
 8003b18:	f005 fc56 	bl	80093c8 <__aeabi_ddiv>
 8003b1c:	ec41 0b1a 	vmov	d10, r0, r1
 8003b20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b22:	b15b      	cbz	r3, 8003b3c <_dtoa_r+0x334>
 8003b24:	ec57 6b1a 	vmov	r6, r7, d10
 8003b28:	4ba1      	ldr	r3, [pc, #644]	; (8003db0 <_dtoa_r+0x5a8>)
 8003b2a:	ee1a 0a10 	vmov	r0, s20
 8003b2e:	2200      	movs	r2, #0
 8003b30:	4639      	mov	r1, r7
 8003b32:	f005 fd91 	bl	8009658 <__aeabi_dcmplt>
 8003b36:	2800      	cmp	r0, #0
 8003b38:	f040 8552 	bne.w	80045e0 <_dtoa_r+0xdd8>
 8003b3c:	4650      	mov	r0, sl
 8003b3e:	f005 faaf 	bl	80090a0 <__aeabi_i2d>
 8003b42:	ec53 2b1a 	vmov	r2, r3, d10
 8003b46:	f005 fb15 	bl	8009174 <__aeabi_dmul>
 8003b4a:	4b9a      	ldr	r3, [pc, #616]	; (8003db4 <_dtoa_r+0x5ac>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f005 f95b 	bl	8008e08 <__adddf3>
 8003b52:	9b07      	ldr	r3, [sp, #28]
 8003b54:	4680      	mov	r8, r0
 8003b56:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 83f3 	beq.w	8004346 <_dtoa_r+0xb3e>
 8003b60:	9b05      	ldr	r3, [sp, #20]
 8003b62:	9310      	str	r3, [sp, #64]	; 0x40
 8003b64:	9b07      	ldr	r3, [sp, #28]
 8003b66:	930e      	str	r3, [sp, #56]	; 0x38
 8003b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 84c0 	beq.w	80044f0 <_dtoa_r+0xce8>
 8003b70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b72:	4b8d      	ldr	r3, [pc, #564]	; (8003da8 <_dtoa_r+0x5a0>)
 8003b74:	4990      	ldr	r1, [pc, #576]	; (8003db8 <_dtoa_r+0x5b0>)
 8003b76:	f8dd a000 	ldr.w	sl, [sp]
 8003b7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003b7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003b82:	2000      	movs	r0, #0
 8003b84:	f005 fc20 	bl	80093c8 <__aeabi_ddiv>
 8003b88:	4642      	mov	r2, r8
 8003b8a:	464b      	mov	r3, r9
 8003b8c:	f005 f93a 	bl	8008e04 <__aeabi_dsub>
 8003b90:	ec59 8b1a 	vmov	r8, r9, d10
 8003b94:	ec41 0b18 	vmov	d8, r0, r1
 8003b98:	4649      	mov	r1, r9
 8003b9a:	ee1a 0a10 	vmov	r0, s20
 8003b9e:	f005 fd99 	bl	80096d4 <__aeabi_d2iz>
 8003ba2:	4607      	mov	r7, r0
 8003ba4:	f005 fa7c 	bl	80090a0 <__aeabi_i2d>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	ee1a 0a10 	vmov	r0, s20
 8003bb0:	4649      	mov	r1, r9
 8003bb2:	f005 f927 	bl	8008e04 <__aeabi_dsub>
 8003bb6:	3730      	adds	r7, #48	; 0x30
 8003bb8:	f80a 7b01 	strb.w	r7, [sl], #1
 8003bbc:	ec53 2b18 	vmov	r2, r3, d8
 8003bc0:	4606      	mov	r6, r0
 8003bc2:	460f      	mov	r7, r1
 8003bc4:	f005 fd48 	bl	8009658 <__aeabi_dcmplt>
 8003bc8:	2800      	cmp	r0, #0
 8003bca:	f040 8555 	bne.w	8004678 <_dtoa_r+0xe70>
 8003bce:	f04f 0800 	mov.w	r8, #0
 8003bd2:	ee0a 5a10 	vmov	s20, r5
 8003bd6:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8003bda:	4655      	mov	r5, sl
 8003bdc:	ec5b ab18 	vmov	sl, fp, d8
 8003be0:	ee08 4a10 	vmov	s16, r4
 8003be4:	4644      	mov	r4, r8
 8003be6:	e02a      	b.n	8003c3e <_dtoa_r+0x436>
 8003be8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bea:	3401      	adds	r4, #1
 8003bec:	429c      	cmp	r4, r3
 8003bee:	da4b      	bge.n	8003c88 <_dtoa_r+0x480>
 8003bf0:	4b72      	ldr	r3, [pc, #456]	; (8003dbc <_dtoa_r+0x5b4>)
 8003bf2:	4650      	mov	r0, sl
 8003bf4:	4659      	mov	r1, fp
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f005 fabc 	bl	8009174 <__aeabi_dmul>
 8003bfc:	4b6f      	ldr	r3, [pc, #444]	; (8003dbc <_dtoa_r+0x5b4>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	4682      	mov	sl, r0
 8003c02:	468b      	mov	fp, r1
 8003c04:	4630      	mov	r0, r6
 8003c06:	4639      	mov	r1, r7
 8003c08:	f005 fab4 	bl	8009174 <__aeabi_dmul>
 8003c0c:	4689      	mov	r9, r1
 8003c0e:	4680      	mov	r8, r0
 8003c10:	f005 fd60 	bl	80096d4 <__aeabi_d2iz>
 8003c14:	4607      	mov	r7, r0
 8003c16:	f005 fa43 	bl	80090a0 <__aeabi_i2d>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4640      	mov	r0, r8
 8003c20:	4649      	mov	r1, r9
 8003c22:	f005 f8ef 	bl	8008e04 <__aeabi_dsub>
 8003c26:	3730      	adds	r7, #48	; 0x30
 8003c28:	f805 7b01 	strb.w	r7, [r5], #1
 8003c2c:	4652      	mov	r2, sl
 8003c2e:	465b      	mov	r3, fp
 8003c30:	4606      	mov	r6, r0
 8003c32:	460f      	mov	r7, r1
 8003c34:	f005 fd10 	bl	8009658 <__aeabi_dcmplt>
 8003c38:	2800      	cmp	r0, #0
 8003c3a:	f040 8518 	bne.w	800466e <_dtoa_r+0xe66>
 8003c3e:	4632      	mov	r2, r6
 8003c40:	463b      	mov	r3, r7
 8003c42:	495b      	ldr	r1, [pc, #364]	; (8003db0 <_dtoa_r+0x5a8>)
 8003c44:	2000      	movs	r0, #0
 8003c46:	f005 f8dd 	bl	8008e04 <__aeabi_dsub>
 8003c4a:	4652      	mov	r2, sl
 8003c4c:	465b      	mov	r3, fp
 8003c4e:	f005 fd03 	bl	8009658 <__aeabi_dcmplt>
 8003c52:	2800      	cmp	r0, #0
 8003c54:	d0c8      	beq.n	8003be8 <_dtoa_r+0x3e0>
 8003c56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003c58:	9a00      	ldr	r2, [sp, #0]
 8003c5a:	9305      	str	r3, [sp, #20]
 8003c5c:	46aa      	mov	sl, r5
 8003c5e:	ee18 4a10 	vmov	r4, s16
 8003c62:	ee1a 5a10 	vmov	r5, s20
 8003c66:	e002      	b.n	8003c6e <_dtoa_r+0x466>
 8003c68:	4592      	cmp	sl, r2
 8003c6a:	f000 84ea 	beq.w	8004642 <_dtoa_r+0xe3a>
 8003c6e:	46d1      	mov	r9, sl
 8003c70:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
 8003c74:	2b39      	cmp	r3, #57	; 0x39
 8003c76:	d0f7      	beq.n	8003c68 <_dtoa_r+0x460>
 8003c78:	3301      	adds	r3, #1
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	f88a 3000 	strb.w	r3, [sl]
 8003c80:	9b05      	ldr	r3, [sp, #20]
 8003c82:	3301      	adds	r3, #1
 8003c84:	9305      	str	r3, [sp, #20]
 8003c86:	e1ab      	b.n	8003fe0 <_dtoa_r+0x7d8>
 8003c88:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8003c8c:	ee1a 5a10 	vmov	r5, s20
 8003c90:	ee18 4a10 	vmov	r4, s16
 8003c94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f2c0 8094 	blt.w	8003dc4 <_dtoa_r+0x5bc>
 8003c9c:	9a05      	ldr	r2, [sp, #20]
 8003c9e:	2a0e      	cmp	r2, #14
 8003ca0:	f300 8090 	bgt.w	8003dc4 <_dtoa_r+0x5bc>
 8003ca4:	4b40      	ldr	r3, [pc, #256]	; (8003da8 <_dtoa_r+0x5a0>)
 8003ca6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003caa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	da1b      	bge.n	8003cec <_dtoa_r+0x4e4>
 8003cb4:	9b07      	ldr	r3, [sp, #28]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	dc18      	bgt.n	8003cec <_dtoa_r+0x4e4>
 8003cba:	f040 835d 	bne.w	8004378 <_dtoa_r+0xb70>
 8003cbe:	4b40      	ldr	r3, [pc, #256]	; (8003dc0 <_dtoa_r+0x5b8>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	4640      	mov	r0, r8
 8003cc4:	4649      	mov	r1, r9
 8003cc6:	f005 fa55 	bl	8009174 <__aeabi_dmul>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	ec51 0b19 	vmov	r0, r1, d9
 8003cd2:	f005 fccb 	bl	800966c <__aeabi_dcmple>
 8003cd6:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8003cda:	4656      	mov	r6, sl
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	f000 82d0 	beq.w	8004282 <_dtoa_r+0xa7a>
 8003ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ce4:	f8dd 8000 	ldr.w	r8, [sp]
 8003ce8:	43df      	mvns	r7, r3
 8003cea:	e2d2      	b.n	8004292 <_dtoa_r+0xa8a>
 8003cec:	4642      	mov	r2, r8
 8003cee:	464b      	mov	r3, r9
 8003cf0:	ec51 0b19 	vmov	r0, r1, d9
 8003cf4:	f005 fb68 	bl	80093c8 <__aeabi_ddiv>
 8003cf8:	f005 fcec 	bl	80096d4 <__aeabi_d2iz>
 8003cfc:	4606      	mov	r6, r0
 8003cfe:	4683      	mov	fp, r0
 8003d00:	f005 f9ce 	bl	80090a0 <__aeabi_i2d>
 8003d04:	4642      	mov	r2, r8
 8003d06:	464b      	mov	r3, r9
 8003d08:	f005 fa34 	bl	8009174 <__aeabi_dmul>
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4602      	mov	r2, r0
 8003d10:	ec51 0b19 	vmov	r0, r1, d9
 8003d14:	f005 f876 	bl	8008e04 <__aeabi_dsub>
 8003d18:	f8dd a000 	ldr.w	sl, [sp]
 8003d1c:	4633      	mov	r3, r6
 8003d1e:	3330      	adds	r3, #48	; 0x30
 8003d20:	f80a 3b01 	strb.w	r3, [sl], #1
 8003d24:	9b07      	ldr	r3, [sp, #28]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	f000 838e 	beq.w	8004448 <_dtoa_r+0xc40>
 8003d2c:	f04f 0b01 	mov.w	fp, #1
 8003d30:	ee08 5a10 	vmov	s16, r5
 8003d34:	ee08 4a90 	vmov	s17, r4
 8003d38:	461d      	mov	r5, r3
 8003d3a:	4654      	mov	r4, sl
 8003d3c:	46da      	mov	sl, fp
 8003d3e:	e01d      	b.n	8003d7c <_dtoa_r+0x574>
 8003d40:	4642      	mov	r2, r8
 8003d42:	464b      	mov	r3, r9
 8003d44:	4630      	mov	r0, r6
 8003d46:	4639      	mov	r1, r7
 8003d48:	f005 fb3e 	bl	80093c8 <__aeabi_ddiv>
 8003d4c:	f005 fcc2 	bl	80096d4 <__aeabi_d2iz>
 8003d50:	4683      	mov	fp, r0
 8003d52:	f005 f9a5 	bl	80090a0 <__aeabi_i2d>
 8003d56:	4642      	mov	r2, r8
 8003d58:	464b      	mov	r3, r9
 8003d5a:	f005 fa0b 	bl	8009174 <__aeabi_dmul>
 8003d5e:	f10a 0a01 	add.w	sl, sl, #1
 8003d62:	460b      	mov	r3, r1
 8003d64:	4602      	mov	r2, r0
 8003d66:	4639      	mov	r1, r7
 8003d68:	4630      	mov	r0, r6
 8003d6a:	f005 f84b 	bl	8008e04 <__aeabi_dsub>
 8003d6e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 8003d72:	45aa      	cmp	sl, r5
 8003d74:	f804 3b01 	strb.w	r3, [r4], #1
 8003d78:	f000 8361 	beq.w	800443e <_dtoa_r+0xc36>
 8003d7c:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <_dtoa_r+0x5b4>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f005 f9f8 	bl	8009174 <__aeabi_dmul>
 8003d84:	2200      	movs	r2, #0
 8003d86:	2300      	movs	r3, #0
 8003d88:	4606      	mov	r6, r0
 8003d8a:	460f      	mov	r7, r1
 8003d8c:	f005 fc5a 	bl	8009644 <__aeabi_dcmpeq>
 8003d90:	2800      	cmp	r0, #0
 8003d92:	d0d5      	beq.n	8003d40 <_dtoa_r+0x538>
 8003d94:	46a2      	mov	sl, r4
 8003d96:	ee18 5a10 	vmov	r5, s16
 8003d9a:	ee18 4a90 	vmov	r4, s17
 8003d9e:	9b05      	ldr	r3, [sp, #20]
 8003da0:	3301      	adds	r3, #1
 8003da2:	9305      	str	r3, [sp, #20]
 8003da4:	46d1      	mov	r9, sl
 8003da6:	e11b      	b.n	8003fe0 <_dtoa_r+0x7d8>
 8003da8:	0800eea8 	.word	0x0800eea8
 8003dac:	0800ef98 	.word	0x0800ef98
 8003db0:	3ff00000 	.word	0x3ff00000
 8003db4:	401c0000 	.word	0x401c0000
 8003db8:	3fe00000 	.word	0x3fe00000
 8003dbc:	40240000 	.word	0x40240000
 8003dc0:	40140000 	.word	0x40140000
 8003dc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003dc6:	2a00      	cmp	r2, #0
 8003dc8:	d03f      	beq.n	8003e4a <_dtoa_r+0x642>
 8003dca:	9a01      	ldr	r2, [sp, #4]
 8003dcc:	2a01      	cmp	r2, #1
 8003dce:	f340 829c 	ble.w	800430a <_dtoa_r+0xb02>
 8003dd2:	9b07      	ldr	r3, [sp, #28]
 8003dd4:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8003dd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003dda:	4543      	cmp	r3, r8
 8003ddc:	f2c0 826e 	blt.w	80042bc <_dtoa_r+0xab4>
 8003de0:	eba3 0808 	sub.w	r8, r3, r8
 8003de4:	9b07      	ldr	r3, [sp, #28]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f2c0 8366 	blt.w	80044b8 <_dtoa_r+0xcb0>
 8003dec:	9a04      	ldr	r2, [sp, #16]
 8003dee:	441a      	add	r2, r3
 8003df0:	9204      	str	r2, [sp, #16]
 8003df2:	9a08      	ldr	r2, [sp, #32]
 8003df4:	4617      	mov	r7, r2
 8003df6:	441a      	add	r2, r3
 8003df8:	9208      	str	r2, [sp, #32]
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	f001 ff97 	bl	8005d30 <__i2b>
 8003e02:	4606      	mov	r6, r0
 8003e04:	e025      	b.n	8003e52 <_dtoa_r+0x64a>
 8003e06:	2301      	movs	r3, #1
 8003e08:	1bbe      	subs	r6, r7, r6
 8003e0a:	930c      	str	r3, [sp, #48]	; 0x30
 8003e0c:	1e73      	subs	r3, r6, #1
 8003e0e:	9304      	str	r3, [sp, #16]
 8003e10:	f57f adb1 	bpl.w	8003976 <_dtoa_r+0x16e>
 8003e14:	f1c6 0301 	rsb	r3, r6, #1
 8003e18:	9308      	str	r3, [sp, #32]
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	9304      	str	r3, [sp, #16]
 8003e1e:	e5ac      	b.n	800397a <_dtoa_r+0x172>
 8003e20:	4658      	mov	r0, fp
 8003e22:	f005 f93d 	bl	80090a0 <__aeabi_i2d>
 8003e26:	4642      	mov	r2, r8
 8003e28:	464b      	mov	r3, r9
 8003e2a:	f005 fc0b 	bl	8009644 <__aeabi_dcmpeq>
 8003e2e:	2800      	cmp	r0, #0
 8003e30:	f47f ad89 	bne.w	8003946 <_dtoa_r+0x13e>
 8003e34:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003e38:	e585      	b.n	8003946 <_dtoa_r+0x13e>
 8003e3a:	4b87      	ldr	r3, [pc, #540]	; (8004058 <_dtoa_r+0x850>)
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	9800      	ldr	r0, [sp, #0]
 8003e40:	b015      	add	sp, #84	; 0x54
 8003e42:	ecbd 8b06 	vpop	{d8-d10}
 8003e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e4a:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8003e4e:	9f08      	ldr	r7, [sp, #32]
 8003e50:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003e52:	2f00      	cmp	r7, #0
 8003e54:	dd0c      	ble.n	8003e70 <_dtoa_r+0x668>
 8003e56:	9a04      	ldr	r2, [sp, #16]
 8003e58:	2a00      	cmp	r2, #0
 8003e5a:	dd09      	ble.n	8003e70 <_dtoa_r+0x668>
 8003e5c:	9908      	ldr	r1, [sp, #32]
 8003e5e:	42ba      	cmp	r2, r7
 8003e60:	4613      	mov	r3, r2
 8003e62:	bfa8      	it	ge
 8003e64:	463b      	movge	r3, r7
 8003e66:	1ac9      	subs	r1, r1, r3
 8003e68:	1aff      	subs	r7, r7, r3
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	9108      	str	r1, [sp, #32]
 8003e6e:	9304      	str	r3, [sp, #16]
 8003e70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e72:	b1db      	cbz	r3, 8003eac <_dtoa_r+0x6a4>
 8003e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 8282 	beq.w	8004380 <_dtoa_r+0xb78>
 8003e7c:	f1b8 0f00 	cmp.w	r8, #0
 8003e80:	dd0f      	ble.n	8003ea2 <_dtoa_r+0x69a>
 8003e82:	4631      	mov	r1, r6
 8003e84:	4642      	mov	r2, r8
 8003e86:	4620      	mov	r0, r4
 8003e88:	f002 f82e 	bl	8005ee8 <__pow5mult>
 8003e8c:	462a      	mov	r2, r5
 8003e8e:	4601      	mov	r1, r0
 8003e90:	4606      	mov	r6, r0
 8003e92:	4620      	mov	r0, r4
 8003e94:	f001 ff7a 	bl	8005d8c <__multiply>
 8003e98:	4629      	mov	r1, r5
 8003e9a:	4605      	mov	r5, r0
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	f001 fe3f 	bl	8005b20 <_Bfree>
 8003ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ea4:	ebb3 0208 	subs.w	r2, r3, r8
 8003ea8:	f040 8300 	bne.w	80044ac <_dtoa_r+0xca4>
 8003eac:	2101      	movs	r1, #1
 8003eae:	4620      	mov	r0, r4
 8003eb0:	f001 ff3e 	bl	8005d30 <__i2b>
 8003eb4:	f1bb 0f00 	cmp.w	fp, #0
 8003eb8:	4682      	mov	sl, r0
 8003eba:	f300 80b7 	bgt.w	800402c <_dtoa_r+0x824>
 8003ebe:	9b01      	ldr	r3, [sp, #4]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	f340 8186 	ble.w	80041d2 <_dtoa_r+0x9ca>
 8003ec6:	f04f 0800 	mov.w	r8, #0
 8003eca:	2001      	movs	r0, #1
 8003ecc:	f1bb 0f00 	cmp.w	fp, #0
 8003ed0:	f040 80b8 	bne.w	8004044 <_dtoa_r+0x83c>
 8003ed4:	9a04      	ldr	r2, [sp, #16]
 8003ed6:	4410      	add	r0, r2
 8003ed8:	f010 001f 	ands.w	r0, r0, #31
 8003edc:	f000 8096 	beq.w	800400c <_dtoa_r+0x804>
 8003ee0:	f1c0 0320 	rsb	r3, r0, #32
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	f340 83f8 	ble.w	80046da <_dtoa_r+0xed2>
 8003eea:	9b08      	ldr	r3, [sp, #32]
 8003eec:	f1c0 001c 	rsb	r0, r0, #28
 8003ef0:	4403      	add	r3, r0
 8003ef2:	4402      	add	r2, r0
 8003ef4:	9308      	str	r3, [sp, #32]
 8003ef6:	4407      	add	r7, r0
 8003ef8:	9204      	str	r2, [sp, #16]
 8003efa:	9b08      	ldr	r3, [sp, #32]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	dd05      	ble.n	8003f0c <_dtoa_r+0x704>
 8003f00:	4629      	mov	r1, r5
 8003f02:	461a      	mov	r2, r3
 8003f04:	4620      	mov	r0, r4
 8003f06:	f002 f84f 	bl	8005fa8 <__lshift>
 8003f0a:	4605      	mov	r5, r0
 8003f0c:	9b04      	ldr	r3, [sp, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	dd05      	ble.n	8003f1e <_dtoa_r+0x716>
 8003f12:	4651      	mov	r1, sl
 8003f14:	461a      	mov	r2, r3
 8003f16:	4620      	mov	r0, r4
 8003f18:	f002 f846 	bl	8005fa8 <__lshift>
 8003f1c:	4682      	mov	sl, r0
 8003f1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f040 8137 	bne.w	8004194 <_dtoa_r+0x98c>
 8003f26:	9b07      	ldr	r3, [sp, #28]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f340 811e 	ble.w	800416a <_dtoa_r+0x962>
 8003f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f040 80a1 	bne.w	8004078 <_dtoa_r+0x870>
 8003f36:	9b05      	ldr	r3, [sp, #20]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	9305      	str	r3, [sp, #20]
 8003f3c:	f8dd 8000 	ldr.w	r8, [sp]
 8003f40:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8003f44:	2701      	movs	r7, #1
 8003f46:	e007      	b.n	8003f58 <_dtoa_r+0x750>
 8003f48:	4629      	mov	r1, r5
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	220a      	movs	r2, #10
 8003f4e:	4620      	mov	r0, r4
 8003f50:	f001 fdf0 	bl	8005b34 <__multadd>
 8003f54:	3701      	adds	r7, #1
 8003f56:	4605      	mov	r5, r0
 8003f58:	4651      	mov	r1, sl
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	f7ff fbc0 	bl	80036e0 <quorem>
 8003f60:	454f      	cmp	r7, r9
 8003f62:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8003f66:	f808 0b01 	strb.w	r0, [r8], #1
 8003f6a:	dbed      	blt.n	8003f48 <_dtoa_r+0x740>
 8003f6c:	9a07      	ldr	r2, [sp, #28]
 8003f6e:	2a00      	cmp	r2, #0
 8003f70:	bfc8      	it	gt
 8003f72:	4693      	movgt	fp, r2
 8003f74:	9a00      	ldr	r2, [sp, #0]
 8003f76:	bfd8      	it	le
 8003f78:	f04f 0b01 	movle.w	fp, #1
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	4493      	add	fp, r2
 8003f80:	2700      	movs	r7, #0
 8003f82:	4629      	mov	r1, r5
 8003f84:	2201      	movs	r2, #1
 8003f86:	4620      	mov	r0, r4
 8003f88:	9301      	str	r3, [sp, #4]
 8003f8a:	f002 f80d 	bl	8005fa8 <__lshift>
 8003f8e:	4651      	mov	r1, sl
 8003f90:	4605      	mov	r5, r0
 8003f92:	f002 f881 	bl	8006098 <__mcmp>
 8003f96:	2800      	cmp	r0, #0
 8003f98:	f340 81a5 	ble.w	80042e6 <_dtoa_r+0xade>
 8003f9c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
 8003fa0:	9a00      	ldr	r2, [sp, #0]
 8003fa2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003fa6:	e004      	b.n	8003fb2 <_dtoa_r+0x7aa>
 8003fa8:	455a      	cmp	r2, fp
 8003faa:	f000 81a7 	beq.w	80042fc <_dtoa_r+0xaf4>
 8003fae:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
 8003fb2:	2b39      	cmp	r3, #57	; 0x39
 8003fb4:	f10b 0901 	add.w	r9, fp, #1
 8003fb8:	d0f6      	beq.n	8003fa8 <_dtoa_r+0x7a0>
 8003fba:	3301      	adds	r3, #1
 8003fbc:	f88b 3000 	strb.w	r3, [fp]
 8003fc0:	4651      	mov	r1, sl
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	f001 fdac 	bl	8005b20 <_Bfree>
 8003fc8:	b156      	cbz	r6, 8003fe0 <_dtoa_r+0x7d8>
 8003fca:	b12f      	cbz	r7, 8003fd8 <_dtoa_r+0x7d0>
 8003fcc:	42b7      	cmp	r7, r6
 8003fce:	d003      	beq.n	8003fd8 <_dtoa_r+0x7d0>
 8003fd0:	4639      	mov	r1, r7
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	f001 fda4 	bl	8005b20 <_Bfree>
 8003fd8:	4631      	mov	r1, r6
 8003fda:	4620      	mov	r0, r4
 8003fdc:	f001 fda0 	bl	8005b20 <_Bfree>
 8003fe0:	4629      	mov	r1, r5
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	f001 fd9c 	bl	8005b20 <_Bfree>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f889 3000 	strb.w	r3, [r9]
 8003fee:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f43f ac48 	beq.w	800388c <_dtoa_r+0x84>
 8003ffc:	9800      	ldr	r0, [sp, #0]
 8003ffe:	f8c3 9000 	str.w	r9, [r3]
 8004002:	b015      	add	sp, #84	; 0x54
 8004004:	ecbd 8b06 	vpop	{d8-d10}
 8004008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800400c:	201c      	movs	r0, #28
 800400e:	9b08      	ldr	r3, [sp, #32]
 8004010:	4403      	add	r3, r0
 8004012:	9308      	str	r3, [sp, #32]
 8004014:	9b04      	ldr	r3, [sp, #16]
 8004016:	4403      	add	r3, r0
 8004018:	4407      	add	r7, r0
 800401a:	9304      	str	r3, [sp, #16]
 800401c:	e76d      	b.n	8003efa <_dtoa_r+0x6f2>
 800401e:	2601      	movs	r6, #1
 8004020:	e4c2      	b.n	80039a8 <_dtoa_r+0x1a0>
 8004022:	f1c0 0020 	rsb	r0, r0, #32
 8004026:	fa08 f000 	lsl.w	r0, r8, r0
 800402a:	e459      	b.n	80038e0 <_dtoa_r+0xd8>
 800402c:	4601      	mov	r1, r0
 800402e:	465a      	mov	r2, fp
 8004030:	4620      	mov	r0, r4
 8004032:	f001 ff59 	bl	8005ee8 <__pow5mult>
 8004036:	9b01      	ldr	r3, [sp, #4]
 8004038:	2b01      	cmp	r3, #1
 800403a:	4682      	mov	sl, r0
 800403c:	f340 81d5 	ble.w	80043ea <_dtoa_r+0xbe2>
 8004040:	f04f 0800 	mov.w	r8, #0
 8004044:	f8da 3010 	ldr.w	r3, [sl, #16]
 8004048:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800404c:	6918      	ldr	r0, [r3, #16]
 800404e:	f001 fe1f 	bl	8005c90 <__hi0bits>
 8004052:	f1c0 0020 	rsb	r0, r0, #32
 8004056:	e73d      	b.n	8003ed4 <_dtoa_r+0x6cc>
 8004058:	0801e2d0 	.word	0x0801e2d0
 800405c:	4631      	mov	r1, r6
 800405e:	2300      	movs	r3, #0
 8004060:	220a      	movs	r2, #10
 8004062:	4620      	mov	r0, r4
 8004064:	f001 fd66 	bl	8005b34 <__multadd>
 8004068:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800406a:	2b00      	cmp	r3, #0
 800406c:	4606      	mov	r6, r0
 800406e:	f340 8323 	ble.w	80046b8 <_dtoa_r+0xeb0>
 8004072:	f8cd 9014 	str.w	r9, [sp, #20]
 8004076:	9307      	str	r3, [sp, #28]
 8004078:	2f00      	cmp	r7, #0
 800407a:	f300 8118 	bgt.w	80042ae <_dtoa_r+0xaa6>
 800407e:	f1b8 0f00 	cmp.w	r8, #0
 8004082:	f040 81fc 	bne.w	800447e <_dtoa_r+0xc76>
 8004086:	46b0      	mov	r8, r6
 8004088:	9b02      	ldr	r3, [sp, #8]
 800408a:	9f00      	ldr	r7, [sp, #0]
 800408c:	9907      	ldr	r1, [sp, #28]
 800408e:	f003 0201 	and.w	r2, r3, #1
 8004092:	1e7b      	subs	r3, r7, #1
 8004094:	4419      	add	r1, r3
 8004096:	9b01      	ldr	r3, [sp, #4]
 8004098:	920a      	str	r2, [sp, #40]	; 0x28
 800409a:	4313      	orrs	r3, r2
 800409c:	9108      	str	r1, [sp, #32]
 800409e:	9309      	str	r3, [sp, #36]	; 0x24
 80040a0:	4651      	mov	r1, sl
 80040a2:	4628      	mov	r0, r5
 80040a4:	f7ff fb1c 	bl	80036e0 <quorem>
 80040a8:	4631      	mov	r1, r6
 80040aa:	4683      	mov	fp, r0
 80040ac:	4628      	mov	r0, r5
 80040ae:	f001 fff3 	bl	8006098 <__mcmp>
 80040b2:	4642      	mov	r2, r8
 80040b4:	4651      	mov	r1, sl
 80040b6:	4681      	mov	r9, r0
 80040b8:	4620      	mov	r0, r4
 80040ba:	f002 f80f 	bl	80060dc <__mdiff>
 80040be:	68c2      	ldr	r2, [r0, #12]
 80040c0:	4601      	mov	r1, r0
 80040c2:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 80040c6:	2a00      	cmp	r2, #0
 80040c8:	d142      	bne.n	8004150 <_dtoa_r+0x948>
 80040ca:	9004      	str	r0, [sp, #16]
 80040cc:	4628      	mov	r0, r5
 80040ce:	9307      	str	r3, [sp, #28]
 80040d0:	f001 ffe2 	bl	8006098 <__mcmp>
 80040d4:	9904      	ldr	r1, [sp, #16]
 80040d6:	9002      	str	r0, [sp, #8]
 80040d8:	4620      	mov	r0, r4
 80040da:	f001 fd21 	bl	8005b20 <_Bfree>
 80040de:	9a02      	ldr	r2, [sp, #8]
 80040e0:	9b07      	ldr	r3, [sp, #28]
 80040e2:	b91a      	cbnz	r2, 80040ec <_dtoa_r+0x8e4>
 80040e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040e6:	2900      	cmp	r1, #0
 80040e8:	f000 82d6 	beq.w	8004698 <_dtoa_r+0xe90>
 80040ec:	f1b9 0f00 	cmp.w	r9, #0
 80040f0:	f2c0 8187 	blt.w	8004402 <_dtoa_r+0xbfa>
 80040f4:	9901      	ldr	r1, [sp, #4]
 80040f6:	ea49 0901 	orr.w	r9, r9, r1
 80040fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80040fc:	ea51 0109 	orrs.w	r1, r1, r9
 8004100:	f000 817f 	beq.w	8004402 <_dtoa_r+0xbfa>
 8004104:	2a00      	cmp	r2, #0
 8004106:	f300 81e7 	bgt.w	80044d8 <_dtoa_r+0xcd0>
 800410a:	9a08      	ldr	r2, [sp, #32]
 800410c:	703b      	strb	r3, [r7, #0]
 800410e:	f107 0901 	add.w	r9, r7, #1
 8004112:	4297      	cmp	r7, r2
 8004114:	46cb      	mov	fp, r9
 8004116:	f000 81e5 	beq.w	80044e4 <_dtoa_r+0xcdc>
 800411a:	4629      	mov	r1, r5
 800411c:	2300      	movs	r3, #0
 800411e:	220a      	movs	r2, #10
 8004120:	4620      	mov	r0, r4
 8004122:	f001 fd07 	bl	8005b34 <__multadd>
 8004126:	4546      	cmp	r6, r8
 8004128:	4605      	mov	r5, r0
 800412a:	4631      	mov	r1, r6
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	f04f 020a 	mov.w	r2, #10
 8004134:	4620      	mov	r0, r4
 8004136:	d012      	beq.n	800415e <_dtoa_r+0x956>
 8004138:	f001 fcfc 	bl	8005b34 <__multadd>
 800413c:	4641      	mov	r1, r8
 800413e:	4606      	mov	r6, r0
 8004140:	2300      	movs	r3, #0
 8004142:	220a      	movs	r2, #10
 8004144:	4620      	mov	r0, r4
 8004146:	f001 fcf5 	bl	8005b34 <__multadd>
 800414a:	464f      	mov	r7, r9
 800414c:	4680      	mov	r8, r0
 800414e:	e7a7      	b.n	80040a0 <_dtoa_r+0x898>
 8004150:	4620      	mov	r0, r4
 8004152:	9302      	str	r3, [sp, #8]
 8004154:	f001 fce4 	bl	8005b20 <_Bfree>
 8004158:	9b02      	ldr	r3, [sp, #8]
 800415a:	2201      	movs	r2, #1
 800415c:	e7c6      	b.n	80040ec <_dtoa_r+0x8e4>
 800415e:	f001 fce9 	bl	8005b34 <__multadd>
 8004162:	464f      	mov	r7, r9
 8004164:	4606      	mov	r6, r0
 8004166:	4680      	mov	r8, r0
 8004168:	e79a      	b.n	80040a0 <_dtoa_r+0x898>
 800416a:	9b01      	ldr	r3, [sp, #4]
 800416c:	2b02      	cmp	r3, #2
 800416e:	dc77      	bgt.n	8004260 <_dtoa_r+0xa58>
 8004170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004172:	2b00      	cmp	r3, #0
 8004174:	d180      	bne.n	8004078 <_dtoa_r+0x870>
 8004176:	9b05      	ldr	r3, [sp, #20]
 8004178:	4651      	mov	r1, sl
 800417a:	3301      	adds	r3, #1
 800417c:	4628      	mov	r0, r5
 800417e:	9305      	str	r3, [sp, #20]
 8004180:	f7ff faae 	bl	80036e0 <quorem>
 8004184:	f8dd b000 	ldr.w	fp, [sp]
 8004188:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800418c:	f80b 3b01 	strb.w	r3, [fp], #1
 8004190:	2700      	movs	r7, #0
 8004192:	e6f6      	b.n	8003f82 <_dtoa_r+0x77a>
 8004194:	4651      	mov	r1, sl
 8004196:	4628      	mov	r0, r5
 8004198:	f001 ff7e 	bl	8006098 <__mcmp>
 800419c:	2800      	cmp	r0, #0
 800419e:	f6bf aec2 	bge.w	8003f26 <_dtoa_r+0x71e>
 80041a2:	4629      	mov	r1, r5
 80041a4:	2300      	movs	r3, #0
 80041a6:	220a      	movs	r2, #10
 80041a8:	4620      	mov	r0, r4
 80041aa:	f001 fcc3 	bl	8005b34 <__multadd>
 80041ae:	9b05      	ldr	r3, [sp, #20]
 80041b0:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 80041b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041b6:	4605      	mov	r5, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f47f af4f 	bne.w	800405c <_dtoa_r+0x854>
 80041be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f340 8270 	ble.w	80046a6 <_dtoa_r+0xe9e>
 80041c6:	9307      	str	r3, [sp, #28]
 80041c8:	e6b8      	b.n	8003f3c <_dtoa_r+0x734>
 80041ca:	4bbd      	ldr	r3, [pc, #756]	; (80044c0 <_dtoa_r+0xcb8>)
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	3303      	adds	r3, #3
 80041d0:	e405      	b.n	80039de <_dtoa_r+0x1d6>
 80041d2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80041d6:	2900      	cmp	r1, #0
 80041d8:	f47f ae75 	bne.w	8003ec6 <_dtoa_r+0x6be>
 80041dc:	f3c2 0313 	ubfx	r3, r2, #0, #20
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f47f ae70 	bne.w	8003ec6 <_dtoa_r+0x6be>
 80041e6:	4bb7      	ldr	r3, [pc, #732]	; (80044c4 <_dtoa_r+0xcbc>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 823d 	beq.w	800466a <_dtoa_r+0xe62>
 80041f0:	9b08      	ldr	r3, [sp, #32]
 80041f2:	3301      	adds	r3, #1
 80041f4:	9308      	str	r3, [sp, #32]
 80041f6:	9b04      	ldr	r3, [sp, #16]
 80041f8:	3301      	adds	r3, #1
 80041fa:	9304      	str	r3, [sp, #16]
 80041fc:	f04f 0801 	mov.w	r8, #1
 8004200:	e663      	b.n	8003eca <_dtoa_r+0x6c2>
 8004202:	2301      	movs	r3, #1
 8004204:	930a      	str	r3, [sp, #40]	; 0x28
 8004206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004208:	9a05      	ldr	r2, [sp, #20]
 800420a:	4413      	add	r3, r2
 800420c:	930f      	str	r3, [sp, #60]	; 0x3c
 800420e:	3301      	adds	r3, #1
 8004210:	2b01      	cmp	r3, #1
 8004212:	461f      	mov	r7, r3
 8004214:	9307      	str	r3, [sp, #28]
 8004216:	bfb8      	it	lt
 8004218:	2701      	movlt	r7, #1
 800421a:	2100      	movs	r1, #0
 800421c:	2f17      	cmp	r7, #23
 800421e:	6461      	str	r1, [r4, #68]	; 0x44
 8004220:	f77f ac32 	ble.w	8003a88 <_dtoa_r+0x280>
 8004224:	2201      	movs	r2, #1
 8004226:	2304      	movs	r3, #4
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	f103 0014 	add.w	r0, r3, #20
 800422e:	42b8      	cmp	r0, r7
 8004230:	4611      	mov	r1, r2
 8004232:	f102 0201 	add.w	r2, r2, #1
 8004236:	d9f7      	bls.n	8004228 <_dtoa_r+0xa20>
 8004238:	6461      	str	r1, [r4, #68]	; 0x44
 800423a:	e425      	b.n	8003a88 <_dtoa_r+0x280>
 800423c:	2301      	movs	r3, #1
 800423e:	930a      	str	r3, [sp, #40]	; 0x28
 8004240:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004242:	2f00      	cmp	r7, #0
 8004244:	dd4a      	ble.n	80042dc <_dtoa_r+0xad4>
 8004246:	970f      	str	r7, [sp, #60]	; 0x3c
 8004248:	9707      	str	r7, [sp, #28]
 800424a:	e7e6      	b.n	800421a <_dtoa_r+0xa12>
 800424c:	2300      	movs	r3, #0
 800424e:	930a      	str	r3, [sp, #40]	; 0x28
 8004250:	e7d9      	b.n	8004206 <_dtoa_r+0x9fe>
 8004252:	2300      	movs	r3, #0
 8004254:	930a      	str	r3, [sp, #40]	; 0x28
 8004256:	e7f3      	b.n	8004240 <_dtoa_r+0xa38>
 8004258:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800425a:	f8cd 9014 	str.w	r9, [sp, #20]
 800425e:	9307      	str	r3, [sp, #28]
 8004260:	9b07      	ldr	r3, [sp, #28]
 8004262:	2b00      	cmp	r3, #0
 8004264:	f47f ad3d 	bne.w	8003ce2 <_dtoa_r+0x4da>
 8004268:	4651      	mov	r1, sl
 800426a:	2205      	movs	r2, #5
 800426c:	4620      	mov	r0, r4
 800426e:	f001 fc61 	bl	8005b34 <__multadd>
 8004272:	4601      	mov	r1, r0
 8004274:	4682      	mov	sl, r0
 8004276:	4628      	mov	r0, r5
 8004278:	f001 ff0e 	bl	8006098 <__mcmp>
 800427c:	2800      	cmp	r0, #0
 800427e:	f77f ad30 	ble.w	8003ce2 <_dtoa_r+0x4da>
 8004282:	9800      	ldr	r0, [sp, #0]
 8004284:	9f05      	ldr	r7, [sp, #20]
 8004286:	2331      	movs	r3, #49	; 0x31
 8004288:	4680      	mov	r8, r0
 800428a:	f800 3b01 	strb.w	r3, [r0], #1
 800428e:	3701      	adds	r7, #1
 8004290:	9000      	str	r0, [sp, #0]
 8004292:	4651      	mov	r1, sl
 8004294:	4620      	mov	r0, r4
 8004296:	f001 fc43 	bl	8005b20 <_Bfree>
 800429a:	1c7b      	adds	r3, r7, #1
 800429c:	f8dd 9000 	ldr.w	r9, [sp]
 80042a0:	9305      	str	r3, [sp, #20]
 80042a2:	f8cd 8000 	str.w	r8, [sp]
 80042a6:	2e00      	cmp	r6, #0
 80042a8:	f47f ae96 	bne.w	8003fd8 <_dtoa_r+0x7d0>
 80042ac:	e698      	b.n	8003fe0 <_dtoa_r+0x7d8>
 80042ae:	4631      	mov	r1, r6
 80042b0:	463a      	mov	r2, r7
 80042b2:	4620      	mov	r0, r4
 80042b4:	f001 fe78 	bl	8005fa8 <__lshift>
 80042b8:	4606      	mov	r6, r0
 80042ba:	e6e0      	b.n	800407e <_dtoa_r+0x876>
 80042bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042be:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80042c2:	eba8 0303 	sub.w	r3, r8, r3
 80042c6:	449b      	add	fp, r3
 80042c8:	f04f 0800 	mov.w	r8, #0
 80042cc:	e58a      	b.n	8003de4 <_dtoa_r+0x5dc>
 80042ce:	f04f 0a02 	mov.w	sl, #2
 80042d2:	eeb0 8a49 	vmov.f32	s16, s18
 80042d6:	eef0 8a69 	vmov.f32	s17, s19
 80042da:	e402      	b.n	8003ae2 <_dtoa_r+0x2da>
 80042dc:	2301      	movs	r3, #1
 80042de:	9309      	str	r3, [sp, #36]	; 0x24
 80042e0:	9307      	str	r3, [sp, #28]
 80042e2:	f7ff bbcd 	b.w	8003a80 <_dtoa_r+0x278>
 80042e6:	d103      	bne.n	80042f0 <_dtoa_r+0xae8>
 80042e8:	9b01      	ldr	r3, [sp, #4]
 80042ea:	07db      	lsls	r3, r3, #31
 80042ec:	f53f ae56 	bmi.w	8003f9c <_dtoa_r+0x794>
 80042f0:	46d9      	mov	r9, fp
 80042f2:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
 80042f6:	2b30      	cmp	r3, #48	; 0x30
 80042f8:	d0fa      	beq.n	80042f0 <_dtoa_r+0xae8>
 80042fa:	e661      	b.n	8003fc0 <_dtoa_r+0x7b8>
 80042fc:	9b05      	ldr	r3, [sp, #20]
 80042fe:	9a00      	ldr	r2, [sp, #0]
 8004300:	3301      	adds	r3, #1
 8004302:	9305      	str	r3, [sp, #20]
 8004304:	2331      	movs	r3, #49	; 0x31
 8004306:	7013      	strb	r3, [r2, #0]
 8004308:	e65a      	b.n	8003fc0 <_dtoa_r+0x7b8>
 800430a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800430c:	2a00      	cmp	r2, #0
 800430e:	f000 8163 	beq.w	80045d8 <_dtoa_r+0xdd0>
 8004312:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004316:	9a04      	ldr	r2, [sp, #16]
 8004318:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800431c:	441a      	add	r2, r3
 800431e:	9204      	str	r2, [sp, #16]
 8004320:	9a08      	ldr	r2, [sp, #32]
 8004322:	4617      	mov	r7, r2
 8004324:	441a      	add	r2, r3
 8004326:	9208      	str	r2, [sp, #32]
 8004328:	e567      	b.n	8003dfa <_dtoa_r+0x5f2>
 800432a:	4650      	mov	r0, sl
 800432c:	f004 feb8 	bl	80090a0 <__aeabi_i2d>
 8004330:	ec53 2b1a 	vmov	r2, r3, d10
 8004334:	f004 ff1e 	bl	8009174 <__aeabi_dmul>
 8004338:	4b63      	ldr	r3, [pc, #396]	; (80044c8 <_dtoa_r+0xcc0>)
 800433a:	2200      	movs	r2, #0
 800433c:	f004 fd64 	bl	8008e08 <__adddf3>
 8004340:	4680      	mov	r8, r0
 8004342:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8004346:	4b61      	ldr	r3, [pc, #388]	; (80044cc <_dtoa_r+0xcc4>)
 8004348:	2200      	movs	r2, #0
 800434a:	ec51 0b1a 	vmov	r0, r1, d10
 800434e:	f004 fd59 	bl	8008e04 <__aeabi_dsub>
 8004352:	4642      	mov	r2, r8
 8004354:	464b      	mov	r3, r9
 8004356:	4606      	mov	r6, r0
 8004358:	460f      	mov	r7, r1
 800435a:	f005 f99b 	bl	8009694 <__aeabi_dcmpgt>
 800435e:	2800      	cmp	r0, #0
 8004360:	f040 817f 	bne.w	8004662 <_dtoa_r+0xe5a>
 8004364:	4630      	mov	r0, r6
 8004366:	4639      	mov	r1, r7
 8004368:	4642      	mov	r2, r8
 800436a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800436e:	f005 f973 	bl	8009658 <__aeabi_dcmplt>
 8004372:	2800      	cmp	r0, #0
 8004374:	f43f ac8e 	beq.w	8003c94 <_dtoa_r+0x48c>
 8004378:	f04f 0a00 	mov.w	sl, #0
 800437c:	4656      	mov	r6, sl
 800437e:	e4b0      	b.n	8003ce2 <_dtoa_r+0x4da>
 8004380:	4629      	mov	r1, r5
 8004382:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004384:	4620      	mov	r0, r4
 8004386:	f001 fdaf 	bl	8005ee8 <__pow5mult>
 800438a:	4605      	mov	r5, r0
 800438c:	e58e      	b.n	8003eac <_dtoa_r+0x6a4>
 800438e:	900c      	str	r0, [sp, #48]	; 0x30
 8004390:	e540      	b.n	8003e14 <_dtoa_r+0x60c>
 8004392:	f000 814e 	beq.w	8004632 <_dtoa_r+0xe2a>
 8004396:	9a05      	ldr	r2, [sp, #20]
 8004398:	4b4d      	ldr	r3, [pc, #308]	; (80044d0 <_dtoa_r+0xcc8>)
 800439a:	4256      	negs	r6, r2
 800439c:	f006 020f 	and.w	r2, r6, #15
 80043a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80043a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a8:	ec51 0b19 	vmov	r0, r1, d9
 80043ac:	f004 fee2 	bl	8009174 <__aeabi_dmul>
 80043b0:	1136      	asrs	r6, r6, #4
 80043b2:	ec41 0b1a 	vmov	d10, r0, r1
 80043b6:	f000 8188 	beq.w	80046ca <_dtoa_r+0xec2>
 80043ba:	4f46      	ldr	r7, [pc, #280]	; (80044d4 <_dtoa_r+0xccc>)
 80043bc:	2300      	movs	r3, #0
 80043be:	f04f 0a02 	mov.w	sl, #2
 80043c2:	07f2      	lsls	r2, r6, #31
 80043c4:	d506      	bpl.n	80043d4 <_dtoa_r+0xbcc>
 80043c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043ca:	f004 fed3 	bl	8009174 <__aeabi_dmul>
 80043ce:	f10a 0a01 	add.w	sl, sl, #1
 80043d2:	2301      	movs	r3, #1
 80043d4:	1076      	asrs	r6, r6, #1
 80043d6:	f107 0708 	add.w	r7, r7, #8
 80043da:	d1f2      	bne.n	80043c2 <_dtoa_r+0xbba>
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f43f ab9f 	beq.w	8003b20 <_dtoa_r+0x318>
 80043e2:	ec41 0b1a 	vmov	d10, r0, r1
 80043e6:	f7ff bb9b 	b.w	8003b20 <_dtoa_r+0x318>
 80043ea:	9b02      	ldr	r3, [sp, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f47f ae27 	bne.w	8004040 <_dtoa_r+0x838>
 80043f2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80043f6:	f3c2 0313 	ubfx	r3, r2, #0, #20
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f43f aef3 	beq.w	80041e6 <_dtoa_r+0x9de>
 8004400:	e61e      	b.n	8004040 <_dtoa_r+0x838>
 8004402:	2a00      	cmp	r2, #0
 8004404:	dd12      	ble.n	800442c <_dtoa_r+0xc24>
 8004406:	4629      	mov	r1, r5
 8004408:	2201      	movs	r2, #1
 800440a:	4620      	mov	r0, r4
 800440c:	9301      	str	r3, [sp, #4]
 800440e:	f001 fdcb 	bl	8005fa8 <__lshift>
 8004412:	4651      	mov	r1, sl
 8004414:	4605      	mov	r5, r0
 8004416:	f001 fe3f 	bl	8006098 <__mcmp>
 800441a:	2800      	cmp	r0, #0
 800441c:	9b01      	ldr	r3, [sp, #4]
 800441e:	f340 8135 	ble.w	800468c <_dtoa_r+0xe84>
 8004422:	2b39      	cmp	r3, #57	; 0x39
 8004424:	f000 8113 	beq.w	800464e <_dtoa_r+0xe46>
 8004428:	f10b 0331 	add.w	r3, fp, #49	; 0x31
 800442c:	46b9      	mov	r9, r7
 800442e:	f809 3b01 	strb.w	r3, [r9], #1
 8004432:	9b05      	ldr	r3, [sp, #20]
 8004434:	3301      	adds	r3, #1
 8004436:	4637      	mov	r7, r6
 8004438:	9305      	str	r3, [sp, #20]
 800443a:	4646      	mov	r6, r8
 800443c:	e5c0      	b.n	8003fc0 <_dtoa_r+0x7b8>
 800443e:	46a2      	mov	sl, r4
 8004440:	ee18 5a10 	vmov	r5, s16
 8004444:	ee18 4a90 	vmov	r4, s17
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	f004 fcdc 	bl	8008e08 <__adddf3>
 8004450:	4642      	mov	r2, r8
 8004452:	464b      	mov	r3, r9
 8004454:	4606      	mov	r6, r0
 8004456:	460f      	mov	r7, r1
 8004458:	f005 f91c 	bl	8009694 <__aeabi_dcmpgt>
 800445c:	b960      	cbnz	r0, 8004478 <_dtoa_r+0xc70>
 800445e:	4642      	mov	r2, r8
 8004460:	464b      	mov	r3, r9
 8004462:	4630      	mov	r0, r6
 8004464:	4639      	mov	r1, r7
 8004466:	f005 f8ed 	bl	8009644 <__aeabi_dcmpeq>
 800446a:	2800      	cmp	r0, #0
 800446c:	f43f ac97 	beq.w	8003d9e <_dtoa_r+0x596>
 8004470:	ea5f 71cb 	movs.w	r1, fp, lsl #31
 8004474:	f57f ac93 	bpl.w	8003d9e <_dtoa_r+0x596>
 8004478:	9a00      	ldr	r2, [sp, #0]
 800447a:	f7ff bbf8 	b.w	8003c6e <_dtoa_r+0x466>
 800447e:	6871      	ldr	r1, [r6, #4]
 8004480:	4620      	mov	r0, r4
 8004482:	f001 fb27 	bl	8005ad4 <_Balloc>
 8004486:	4607      	mov	r7, r0
 8004488:	2800      	cmp	r0, #0
 800448a:	f000 813a 	beq.w	8004702 <_dtoa_r+0xefa>
 800448e:	6933      	ldr	r3, [r6, #16]
 8004490:	3302      	adds	r3, #2
 8004492:	009a      	lsls	r2, r3, #2
 8004494:	f106 010c 	add.w	r1, r6, #12
 8004498:	300c      	adds	r0, #12
 800449a:	f001 fa01 	bl	80058a0 <memcpy>
 800449e:	4639      	mov	r1, r7
 80044a0:	2201      	movs	r2, #1
 80044a2:	4620      	mov	r0, r4
 80044a4:	f001 fd80 	bl	8005fa8 <__lshift>
 80044a8:	4680      	mov	r8, r0
 80044aa:	e5ed      	b.n	8004088 <_dtoa_r+0x880>
 80044ac:	4629      	mov	r1, r5
 80044ae:	4620      	mov	r0, r4
 80044b0:	f001 fd1a 	bl	8005ee8 <__pow5mult>
 80044b4:	4605      	mov	r5, r0
 80044b6:	e4f9      	b.n	8003eac <_dtoa_r+0x6a4>
 80044b8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80044bc:	1a9f      	subs	r7, r3, r2
 80044be:	e49c      	b.n	8003dfa <_dtoa_r+0x5f2>
 80044c0:	0801e2d4 	.word	0x0801e2d4
 80044c4:	7ff00000 	.word	0x7ff00000
 80044c8:	401c0000 	.word	0x401c0000
 80044cc:	40140000 	.word	0x40140000
 80044d0:	0800eea8 	.word	0x0800eea8
 80044d4:	0800ef98 	.word	0x0800ef98
 80044d8:	2b39      	cmp	r3, #57	; 0x39
 80044da:	f000 80b8 	beq.w	800464e <_dtoa_r+0xe46>
 80044de:	46b9      	mov	r9, r7
 80044e0:	3301      	adds	r3, #1
 80044e2:	e7a4      	b.n	800442e <_dtoa_r+0xc26>
 80044e4:	9a05      	ldr	r2, [sp, #20]
 80044e6:	3201      	adds	r2, #1
 80044e8:	4637      	mov	r7, r6
 80044ea:	9205      	str	r2, [sp, #20]
 80044ec:	4646      	mov	r6, r8
 80044ee:	e548      	b.n	8003f82 <_dtoa_r+0x77a>
 80044f0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80044f2:	498d      	ldr	r1, [pc, #564]	; (8004728 <_dtoa_r+0xf20>)
 80044f4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80044f8:	4642      	mov	r2, r8
 80044fa:	464b      	mov	r3, r9
 80044fc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8004500:	f004 fe38 	bl	8009174 <__aeabi_dmul>
 8004504:	ec5a 9b1a 	vmov	r9, sl, d10
 8004508:	ec41 0b18 	vmov	d8, r0, r1
 800450c:	4651      	mov	r1, sl
 800450e:	ee1a 0a10 	vmov	r0, s20
 8004512:	f005 f8df 	bl	80096d4 <__aeabi_d2iz>
 8004516:	4607      	mov	r7, r0
 8004518:	f004 fdc2 	bl	80090a0 <__aeabi_i2d>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	ee1a 0a10 	vmov	r0, s20
 8004524:	4651      	mov	r1, sl
 8004526:	f004 fc6d 	bl	8008e04 <__aeabi_dsub>
 800452a:	4606      	mov	r6, r0
 800452c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800452e:	f8dd 8000 	ldr.w	r8, [sp]
 8004532:	3730      	adds	r7, #48	; 0x30
 8004534:	2801      	cmp	r0, #1
 8004536:	f808 7b01 	strb.w	r7, [r8], #1
 800453a:	460f      	mov	r7, r1
 800453c:	f000 80ba 	beq.w	80046b4 <_dtoa_r+0xeac>
 8004540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004542:	9a00      	ldr	r2, [sp, #0]
 8004544:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8004548:	4413      	add	r3, r2
 800454a:	469b      	mov	fp, r3
 800454c:	46c2      	mov	sl, r8
 800454e:	4b77      	ldr	r3, [pc, #476]	; (800472c <_dtoa_r+0xf24>)
 8004550:	2200      	movs	r2, #0
 8004552:	4630      	mov	r0, r6
 8004554:	4639      	mov	r1, r7
 8004556:	f004 fe0d 	bl	8009174 <__aeabi_dmul>
 800455a:	4689      	mov	r9, r1
 800455c:	4680      	mov	r8, r0
 800455e:	f005 f8b9 	bl	80096d4 <__aeabi_d2iz>
 8004562:	4607      	mov	r7, r0
 8004564:	f004 fd9c 	bl	80090a0 <__aeabi_i2d>
 8004568:	3730      	adds	r7, #48	; 0x30
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	4640      	mov	r0, r8
 8004570:	4649      	mov	r1, r9
 8004572:	f004 fc47 	bl	8008e04 <__aeabi_dsub>
 8004576:	f80a 7b01 	strb.w	r7, [sl], #1
 800457a:	45da      	cmp	sl, fp
 800457c:	4606      	mov	r6, r0
 800457e:	460f      	mov	r7, r1
 8004580:	d1e5      	bne.n	800454e <_dtoa_r+0xd46>
 8004582:	46da      	mov	sl, fp
 8004584:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8004588:	4b69      	ldr	r3, [pc, #420]	; (8004730 <_dtoa_r+0xf28>)
 800458a:	ec59 8b18 	vmov	r8, r9, d8
 800458e:	2200      	movs	r2, #0
 8004590:	ee18 0a10 	vmov	r0, s16
 8004594:	4649      	mov	r1, r9
 8004596:	f004 fc37 	bl	8008e08 <__adddf3>
 800459a:	4632      	mov	r2, r6
 800459c:	463b      	mov	r3, r7
 800459e:	f005 f85b 	bl	8009658 <__aeabi_dcmplt>
 80045a2:	2800      	cmp	r0, #0
 80045a4:	d16d      	bne.n	8004682 <_dtoa_r+0xe7a>
 80045a6:	ee18 2a10 	vmov	r2, s16
 80045aa:	464b      	mov	r3, r9
 80045ac:	4960      	ldr	r1, [pc, #384]	; (8004730 <_dtoa_r+0xf28>)
 80045ae:	2000      	movs	r0, #0
 80045b0:	f004 fc28 	bl	8008e04 <__aeabi_dsub>
 80045b4:	4632      	mov	r2, r6
 80045b6:	463b      	mov	r3, r7
 80045b8:	f005 f86c 	bl	8009694 <__aeabi_dcmpgt>
 80045bc:	2800      	cmp	r0, #0
 80045be:	f43f ab69 	beq.w	8003c94 <_dtoa_r+0x48c>
 80045c2:	46d1      	mov	r9, sl
 80045c4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80045c8:	f819 3c01 	ldrb.w	r3, [r9, #-1]
 80045cc:	2b30      	cmp	r3, #48	; 0x30
 80045ce:	d0f8      	beq.n	80045c2 <_dtoa_r+0xdba>
 80045d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80045d2:	3301      	adds	r3, #1
 80045d4:	9305      	str	r3, [sp, #20]
 80045d6:	e503      	b.n	8003fe0 <_dtoa_r+0x7d8>
 80045d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80045da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80045de:	e69a      	b.n	8004316 <_dtoa_r+0xb0e>
 80045e0:	9b07      	ldr	r3, [sp, #28]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f43f aea1 	beq.w	800432a <_dtoa_r+0xb22>
 80045e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f77f ab52 	ble.w	8003c94 <_dtoa_r+0x48c>
 80045f0:	9a05      	ldr	r2, [sp, #20]
 80045f2:	930e      	str	r3, [sp, #56]	; 0x38
 80045f4:	3a01      	subs	r2, #1
 80045f6:	4b4d      	ldr	r3, [pc, #308]	; (800472c <_dtoa_r+0xf24>)
 80045f8:	9210      	str	r2, [sp, #64]	; 0x40
 80045fa:	ee1a 0a10 	vmov	r0, s20
 80045fe:	4639      	mov	r1, r7
 8004600:	2200      	movs	r2, #0
 8004602:	f004 fdb7 	bl	8009174 <__aeabi_dmul>
 8004606:	4602      	mov	r2, r0
 8004608:	4616      	mov	r6, r2
 800460a:	460f      	mov	r7, r1
 800460c:	f10a 0001 	add.w	r0, sl, #1
 8004610:	f004 fd46 	bl	80090a0 <__aeabi_i2d>
 8004614:	4632      	mov	r2, r6
 8004616:	463b      	mov	r3, r7
 8004618:	f004 fdac 	bl	8009174 <__aeabi_dmul>
 800461c:	4b45      	ldr	r3, [pc, #276]	; (8004734 <_dtoa_r+0xf2c>)
 800461e:	2200      	movs	r2, #0
 8004620:	f004 fbf2 	bl	8008e08 <__adddf3>
 8004624:	ec47 6b1a 	vmov	d10, r6, r7
 8004628:	4680      	mov	r8, r0
 800462a:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800462e:	f7ff ba9b 	b.w	8003b68 <_dtoa_r+0x360>
 8004632:	f04f 0a02 	mov.w	sl, #2
 8004636:	eeb0 aa49 	vmov.f32	s20, s18
 800463a:	eef0 aa69 	vmov.f32	s21, s19
 800463e:	f7ff ba6f 	b.w	8003b20 <_dtoa_r+0x318>
 8004642:	9b05      	ldr	r3, [sp, #20]
 8004644:	3301      	adds	r3, #1
 8004646:	9305      	str	r3, [sp, #20]
 8004648:	2331      	movs	r3, #49	; 0x31
 800464a:	f7ff bb17 	b.w	8003c7c <_dtoa_r+0x474>
 800464e:	9b05      	ldr	r3, [sp, #20]
 8004650:	46bb      	mov	fp, r7
 8004652:	3301      	adds	r3, #1
 8004654:	9305      	str	r3, [sp, #20]
 8004656:	2339      	movs	r3, #57	; 0x39
 8004658:	4637      	mov	r7, r6
 800465a:	f80b 3b01 	strb.w	r3, [fp], #1
 800465e:	4646      	mov	r6, r8
 8004660:	e49e      	b.n	8003fa0 <_dtoa_r+0x798>
 8004662:	f04f 0a00 	mov.w	sl, #0
 8004666:	4656      	mov	r6, sl
 8004668:	e60b      	b.n	8004282 <_dtoa_r+0xa7a>
 800466a:	4698      	mov	r8, r3
 800466c:	e42d      	b.n	8003eca <_dtoa_r+0x6c2>
 800466e:	46aa      	mov	sl, r5
 8004670:	ee18 4a10 	vmov	r4, s16
 8004674:	ee1a 5a10 	vmov	r5, s20
 8004678:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800467a:	3301      	adds	r3, #1
 800467c:	9305      	str	r3, [sp, #20]
 800467e:	46d1      	mov	r9, sl
 8004680:	e4ae      	b.n	8003fe0 <_dtoa_r+0x7d8>
 8004682:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004684:	9a00      	ldr	r2, [sp, #0]
 8004686:	9305      	str	r3, [sp, #20]
 8004688:	f7ff baf1 	b.w	8003c6e <_dtoa_r+0x466>
 800468c:	f47f aece 	bne.w	800442c <_dtoa_r+0xc24>
 8004690:	07da      	lsls	r2, r3, #31
 8004692:	f57f aecb 	bpl.w	800442c <_dtoa_r+0xc24>
 8004696:	e6c4      	b.n	8004422 <_dtoa_r+0xc1a>
 8004698:	2b39      	cmp	r3, #57	; 0x39
 800469a:	d0d8      	beq.n	800464e <_dtoa_r+0xe46>
 800469c:	f1b9 0f00 	cmp.w	r9, #0
 80046a0:	f73f aec2 	bgt.w	8004428 <_dtoa_r+0xc20>
 80046a4:	e6c2      	b.n	800442c <_dtoa_r+0xc24>
 80046a6:	9b01      	ldr	r3, [sp, #4]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	f73f add5 	bgt.w	8004258 <_dtoa_r+0xa50>
 80046ae:	f8cd 9014 	str.w	r9, [sp, #20]
 80046b2:	e560      	b.n	8004176 <_dtoa_r+0x96e>
 80046b4:	46c2      	mov	sl, r8
 80046b6:	e767      	b.n	8004588 <_dtoa_r+0xd80>
 80046b8:	9b01      	ldr	r3, [sp, #4]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	f73f adcc 	bgt.w	8004258 <_dtoa_r+0xa50>
 80046c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046c2:	f8cd 9014 	str.w	r9, [sp, #20]
 80046c6:	9307      	str	r3, [sp, #28]
 80046c8:	e4d6      	b.n	8004078 <_dtoa_r+0x870>
 80046ca:	f04f 0a02 	mov.w	sl, #2
 80046ce:	f7ff ba27 	b.w	8003b20 <_dtoa_r+0x318>
 80046d2:	4b19      	ldr	r3, [pc, #100]	; (8004738 <_dtoa_r+0xf30>)
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	f7ff b8d9 	b.w	800388c <_dtoa_r+0x84>
 80046da:	f43f ac0e 	beq.w	8003efa <_dtoa_r+0x6f2>
 80046de:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 80046e2:	e494      	b.n	800400e <_dtoa_r+0x806>
 80046e4:	2600      	movs	r6, #0
 80046e6:	6466      	str	r6, [r4, #68]	; 0x44
 80046e8:	4631      	mov	r1, r6
 80046ea:	4620      	mov	r0, r4
 80046ec:	f001 f9f2 	bl	8005ad4 <_Balloc>
 80046f0:	9000      	str	r0, [sp, #0]
 80046f2:	b968      	cbnz	r0, 8004710 <_dtoa_r+0xf08>
 80046f4:	4b11      	ldr	r3, [pc, #68]	; (800473c <_dtoa_r+0xf34>)
 80046f6:	4812      	ldr	r0, [pc, #72]	; (8004740 <_dtoa_r+0xf38>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80046fe:	f003 fe79 	bl	80083f4 <__assert_func>
 8004702:	4b0e      	ldr	r3, [pc, #56]	; (800473c <_dtoa_r+0xf34>)
 8004704:	480e      	ldr	r0, [pc, #56]	; (8004740 <_dtoa_r+0xf38>)
 8004706:	463a      	mov	r2, r7
 8004708:	f240 21ea 	movw	r1, #746	; 0x2ea
 800470c:	f003 fe72 	bl	80083f4 <__assert_func>
 8004710:	9b00      	ldr	r3, [sp, #0]
 8004712:	6423      	str	r3, [r4, #64]	; 0x40
 8004714:	2201      	movs	r2, #1
 8004716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800471a:	9609      	str	r6, [sp, #36]	; 0x24
 800471c:	930f      	str	r3, [sp, #60]	; 0x3c
 800471e:	920a      	str	r2, [sp, #40]	; 0x28
 8004720:	9307      	str	r3, [sp, #28]
 8004722:	f7ff bab7 	b.w	8003c94 <_dtoa_r+0x48c>
 8004726:	bf00      	nop
 8004728:	0800eea8 	.word	0x0800eea8
 800472c:	40240000 	.word	0x40240000
 8004730:	3fe00000 	.word	0x3fe00000
 8004734:	401c0000 	.word	0x401c0000
 8004738:	0801e2d8 	.word	0x0801e2d8
 800473c:	0801e2e4 	.word	0x0801e2e4
 8004740:	0801e2f8 	.word	0x0801e2f8

08004744 <__sflush_r>:
 8004744:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800474c:	460c      	mov	r4, r1
 800474e:	0711      	lsls	r1, r2, #28
 8004750:	4680      	mov	r8, r0
 8004752:	d447      	bmi.n	80047e4 <__sflush_r+0xa0>
 8004754:	6863      	ldr	r3, [r4, #4]
 8004756:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800475a:	2b00      	cmp	r3, #0
 800475c:	81a2      	strh	r2, [r4, #12]
 800475e:	dd5e      	ble.n	800481e <__sflush_r+0xda>
 8004760:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004762:	2d00      	cmp	r5, #0
 8004764:	d058      	beq.n	8004818 <__sflush_r+0xd4>
 8004766:	2300      	movs	r3, #0
 8004768:	f8d8 6000 	ldr.w	r6, [r8]
 800476c:	f8c8 3000 	str.w	r3, [r8]
 8004770:	b293      	uxth	r3, r2
 8004772:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004776:	d156      	bne.n	8004826 <__sflush_r+0xe2>
 8004778:	2301      	movs	r3, #1
 800477a:	69e1      	ldr	r1, [r4, #28]
 800477c:	4640      	mov	r0, r8
 800477e:	47a8      	blx	r5
 8004780:	1c43      	adds	r3, r0, #1
 8004782:	d067      	beq.n	8004854 <__sflush_r+0x110>
 8004784:	89a3      	ldrh	r3, [r4, #12]
 8004786:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004788:	075f      	lsls	r7, r3, #29
 800478a:	d505      	bpl.n	8004798 <__sflush_r+0x54>
 800478c:	6863      	ldr	r3, [r4, #4]
 800478e:	1ac0      	subs	r0, r0, r3
 8004790:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004792:	b10b      	cbz	r3, 8004798 <__sflush_r+0x54>
 8004794:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004796:	1ac0      	subs	r0, r0, r3
 8004798:	69e1      	ldr	r1, [r4, #28]
 800479a:	4602      	mov	r2, r0
 800479c:	2300      	movs	r3, #0
 800479e:	4640      	mov	r0, r8
 80047a0:	47a8      	blx	r5
 80047a2:	1c41      	adds	r1, r0, #1
 80047a4:	d141      	bne.n	800482a <__sflush_r+0xe6>
 80047a6:	f8d8 3000 	ldr.w	r3, [r8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d03d      	beq.n	800482a <__sflush_r+0xe6>
 80047ae:	2b1d      	cmp	r3, #29
 80047b0:	d001      	beq.n	80047b6 <__sflush_r+0x72>
 80047b2:	2b16      	cmp	r3, #22
 80047b4:	d156      	bne.n	8004864 <__sflush_r+0x120>
 80047b6:	89a3      	ldrh	r3, [r4, #12]
 80047b8:	6922      	ldr	r2, [r4, #16]
 80047ba:	6022      	str	r2, [r4, #0]
 80047bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047c0:	2100      	movs	r1, #0
 80047c2:	6061      	str	r1, [r4, #4]
 80047c4:	81a3      	strh	r3, [r4, #12]
 80047c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80047c8:	f8c8 6000 	str.w	r6, [r8]
 80047cc:	b321      	cbz	r1, 8004818 <__sflush_r+0xd4>
 80047ce:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80047d2:	4299      	cmp	r1, r3
 80047d4:	d002      	beq.n	80047dc <__sflush_r+0x98>
 80047d6:	4640      	mov	r0, r8
 80047d8:	f000 f9e6 	bl	8004ba8 <_free_r>
 80047dc:	2000      	movs	r0, #0
 80047de:	6320      	str	r0, [r4, #48]	; 0x30
 80047e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047e4:	6926      	ldr	r6, [r4, #16]
 80047e6:	b1be      	cbz	r6, 8004818 <__sflush_r+0xd4>
 80047e8:	b293      	uxth	r3, r2
 80047ea:	6825      	ldr	r5, [r4, #0]
 80047ec:	6026      	str	r6, [r4, #0]
 80047ee:	079a      	lsls	r2, r3, #30
 80047f0:	bf0c      	ite	eq
 80047f2:	6963      	ldreq	r3, [r4, #20]
 80047f4:	2300      	movne	r3, #0
 80047f6:	1bad      	subs	r5, r5, r6
 80047f8:	60a3      	str	r3, [r4, #8]
 80047fa:	e00b      	b.n	8004814 <__sflush_r+0xd0>
 80047fc:	462b      	mov	r3, r5
 80047fe:	4632      	mov	r2, r6
 8004800:	69e1      	ldr	r1, [r4, #28]
 8004802:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8004804:	4640      	mov	r0, r8
 8004806:	47b8      	blx	r7
 8004808:	f1b0 0c00 	subs.w	ip, r0, #0
 800480c:	eba5 050c 	sub.w	r5, r5, ip
 8004810:	4466      	add	r6, ip
 8004812:	dd17      	ble.n	8004844 <__sflush_r+0x100>
 8004814:	2d00      	cmp	r5, #0
 8004816:	dcf1      	bgt.n	80047fc <__sflush_r+0xb8>
 8004818:	2000      	movs	r0, #0
 800481a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800481e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004820:	2b00      	cmp	r3, #0
 8004822:	dc9d      	bgt.n	8004760 <__sflush_r+0x1c>
 8004824:	e7f8      	b.n	8004818 <__sflush_r+0xd4>
 8004826:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004828:	e7ae      	b.n	8004788 <__sflush_r+0x44>
 800482a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800482e:	6922      	ldr	r2, [r4, #16]
 8004830:	6022      	str	r2, [r4, #0]
 8004832:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004836:	81a3      	strh	r3, [r4, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	04db      	lsls	r3, r3, #19
 800483c:	6062      	str	r2, [r4, #4]
 800483e:	d5c2      	bpl.n	80047c6 <__sflush_r+0x82>
 8004840:	6520      	str	r0, [r4, #80]	; 0x50
 8004842:	e7c0      	b.n	80047c6 <__sflush_r+0x82>
 8004844:	89a3      	ldrh	r3, [r4, #12]
 8004846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800484a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800484e:	81a3      	strh	r3, [r4, #12]
 8004850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004854:	f8d8 3000 	ldr.w	r3, [r8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d093      	beq.n	8004784 <__sflush_r+0x40>
 800485c:	2b1d      	cmp	r3, #29
 800485e:	d006      	beq.n	800486e <__sflush_r+0x12a>
 8004860:	2b16      	cmp	r3, #22
 8004862:	d004      	beq.n	800486e <__sflush_r+0x12a>
 8004864:	89a3      	ldrh	r3, [r4, #12]
 8004866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800486a:	81a3      	strh	r3, [r4, #12]
 800486c:	e7d5      	b.n	800481a <__sflush_r+0xd6>
 800486e:	f8c8 6000 	str.w	r6, [r8]
 8004872:	e7d1      	b.n	8004818 <__sflush_r+0xd4>

08004874 <_fflush_r>:
 8004874:	b538      	push	{r3, r4, r5, lr}
 8004876:	460d      	mov	r5, r1
 8004878:	4604      	mov	r4, r0
 800487a:	b108      	cbz	r0, 8004880 <_fflush_r+0xc>
 800487c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800487e:	b11b      	cbz	r3, 8004888 <_fflush_r+0x14>
 8004880:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 8004884:	b930      	cbnz	r0, 8004894 <_fflush_r+0x20>
 8004886:	bd38      	pop	{r3, r4, r5, pc}
 8004888:	f000 f91e 	bl	8004ac8 <__sinit>
 800488c:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 8004890:	2800      	cmp	r0, #0
 8004892:	d0f8      	beq.n	8004886 <_fflush_r+0x12>
 8004894:	4629      	mov	r1, r5
 8004896:	4620      	mov	r0, r4
 8004898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800489c:	f7ff bf52 	b.w	8004744 <__sflush_r>

080048a0 <fflush>:
 80048a0:	b538      	push	{r3, r4, r5, lr}
 80048a2:	b1b8      	cbz	r0, 80048d4 <fflush+0x34>
 80048a4:	4b0f      	ldr	r3, [pc, #60]	; (80048e4 <fflush+0x44>)
 80048a6:	681d      	ldr	r5, [r3, #0]
 80048a8:	4604      	mov	r4, r0
 80048aa:	b10d      	cbz	r5, 80048b0 <fflush+0x10>
 80048ac:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80048ae:	b14b      	cbz	r3, 80048c4 <fflush+0x24>
 80048b0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80048b4:	b900      	cbnz	r0, 80048b8 <fflush+0x18>
 80048b6:	bd38      	pop	{r3, r4, r5, pc}
 80048b8:	4621      	mov	r1, r4
 80048ba:	4628      	mov	r0, r5
 80048bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048c0:	f7ff bf40 	b.w	8004744 <__sflush_r>
 80048c4:	4628      	mov	r0, r5
 80048c6:	f000 f8ff 	bl	8004ac8 <__sinit>
 80048ca:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80048ce:	2800      	cmp	r0, #0
 80048d0:	d0f1      	beq.n	80048b6 <fflush+0x16>
 80048d2:	e7f1      	b.n	80048b8 <fflush+0x18>
 80048d4:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <fflush+0x48>)
 80048d6:	4905      	ldr	r1, [pc, #20]	; (80048ec <fflush+0x4c>)
 80048d8:	6818      	ldr	r0, [r3, #0]
 80048da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048de:	f000 bc01 	b.w	80050e4 <_fwalk_reent>
 80048e2:	bf00      	nop
 80048e4:	20000008 	.word	0x20000008
 80048e8:	0800ee50 	.word	0x0800ee50
 80048ec:	08004875 	.word	0x08004875

080048f0 <__fp_lock>:
 80048f0:	2000      	movs	r0, #0
 80048f2:	4770      	bx	lr

080048f4 <_cleanup_r>:
 80048f4:	4901      	ldr	r1, [pc, #4]	; (80048fc <_cleanup_r+0x8>)
 80048f6:	f000 bbf5 	b.w	80050e4 <_fwalk_reent>
 80048fa:	bf00      	nop
 80048fc:	08008505 	.word	0x08008505

08004900 <__fp_unlock>:
 8004900:	2000      	movs	r0, #0
 8004902:	4770      	bx	lr

08004904 <__sinit.part.0>:
 8004904:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004908:	4a2d      	ldr	r2, [pc, #180]	; (80049c0 <__sinit.part.0+0xbc>)
 800490a:	6846      	ldr	r6, [r0, #4]
 800490c:	63c2      	str	r2, [r0, #60]	; 0x3c
 800490e:	2400      	movs	r4, #0
 8004910:	2303      	movs	r3, #3
 8004912:	e9c0 43b8 	strd	r4, r3, [r0, #736]	; 0x2e0
 8004916:	4607      	mov	r7, r0
 8004918:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 800491c:	2304      	movs	r3, #4
 800491e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 8004922:	4621      	mov	r1, r4
 8004924:	e9c6 4302 	strd	r4, r3, [r6, #8]
 8004928:	2208      	movs	r2, #8
 800492a:	e9c6 4400 	strd	r4, r4, [r6]
 800492e:	e9c6 4404 	strd	r4, r4, [r6, #16]
 8004932:	6674      	str	r4, [r6, #100]	; 0x64
 8004934:	61b4      	str	r4, [r6, #24]
 8004936:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 800493a:	f7fb fd59 	bl	80003f0 <memset>
 800493e:	f8df b08c 	ldr.w	fp, [pc, #140]	; 80049cc <__sinit.part.0+0xc8>
 8004942:	68bd      	ldr	r5, [r7, #8]
 8004944:	f8df a088 	ldr.w	sl, [pc, #136]	; 80049d0 <__sinit.part.0+0xcc>
 8004948:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80049d4 <__sinit.part.0+0xd0>
 800494c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80049d8 <__sinit.part.0+0xd4>
 8004950:	4b1c      	ldr	r3, [pc, #112]	; (80049c4 <__sinit.part.0+0xc0>)
 8004952:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8004956:	e9c6 6b07 	strd	r6, fp, [r6, #28]
 800495a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 800495e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8004962:	2208      	movs	r2, #8
 8004964:	60eb      	str	r3, [r5, #12]
 8004966:	e9c5 4400 	strd	r4, r4, [r5]
 800496a:	e9c5 4404 	strd	r4, r4, [r5, #16]
 800496e:	666c      	str	r4, [r5, #100]	; 0x64
 8004970:	60ac      	str	r4, [r5, #8]
 8004972:	61ac      	str	r4, [r5, #24]
 8004974:	4621      	mov	r1, r4
 8004976:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800497a:	f7fb fd39 	bl	80003f0 <memset>
 800497e:	e9c5 5b07 	strd	r5, fp, [r5, #28]
 8004982:	e9c5 a909 	strd	sl, r9, [r5, #36]	; 0x24
 8004986:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800498a:	68fd      	ldr	r5, [r7, #12]
 800498c:	4b0e      	ldr	r3, [pc, #56]	; (80049c8 <__sinit.part.0+0xc4>)
 800498e:	60eb      	str	r3, [r5, #12]
 8004990:	e9c5 4400 	strd	r4, r4, [r5]
 8004994:	e9c5 4404 	strd	r4, r4, [r5, #16]
 8004998:	666c      	str	r4, [r5, #100]	; 0x64
 800499a:	60ac      	str	r4, [r5, #8]
 800499c:	61ac      	str	r4, [r5, #24]
 800499e:	4621      	mov	r1, r4
 80049a0:	2208      	movs	r2, #8
 80049a2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80049a6:	f7fb fd23 	bl	80003f0 <memset>
 80049aa:	2301      	movs	r3, #1
 80049ac:	e9c5 5b07 	strd	r5, fp, [r5, #28]
 80049b0:	e9c5 980a 	strd	r9, r8, [r5, #40]	; 0x28
 80049b4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 80049b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80049ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049be:	bf00      	nop
 80049c0:	080048f5 	.word	0x080048f5
 80049c4:	00010009 	.word	0x00010009
 80049c8:	00020012 	.word	0x00020012
 80049cc:	08006a05 	.word	0x08006a05
 80049d0:	08006a2d 	.word	0x08006a2d
 80049d4:	08006a6d 	.word	0x08006a6d
 80049d8:	08006a8d 	.word	0x08006a8d

080049dc <__sfmoreglue>:
 80049dc:	b570      	push	{r4, r5, r6, lr}
 80049de:	2268      	movs	r2, #104	; 0x68
 80049e0:	1e4d      	subs	r5, r1, #1
 80049e2:	fb02 f505 	mul.w	r5, r2, r5
 80049e6:	460e      	mov	r6, r1
 80049e8:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80049ec:	f000 fc58 	bl	80052a0 <_malloc_r>
 80049f0:	4604      	mov	r4, r0
 80049f2:	b140      	cbz	r0, 8004a06 <__sfmoreglue+0x2a>
 80049f4:	2100      	movs	r1, #0
 80049f6:	300c      	adds	r0, #12
 80049f8:	e9c4 1600 	strd	r1, r6, [r4]
 80049fc:	60a0      	str	r0, [r4, #8]
 80049fe:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a02:	f7fb fcf5 	bl	80003f0 <memset>
 8004a06:	4620      	mov	r0, r4
 8004a08:	bd70      	pop	{r4, r5, r6, pc}
 8004a0a:	bf00      	nop

08004a0c <__sfp>:
 8004a0c:	4b27      	ldr	r3, [pc, #156]	; (8004aac <__sfp+0xa0>)
 8004a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a12:	681e      	ldr	r6, [r3, #0]
 8004a14:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8004a16:	4607      	mov	r7, r0
 8004a18:	b35b      	cbz	r3, 8004a72 <__sfp+0x66>
 8004a1a:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
 8004a1e:	f04f 0804 	mov.w	r8, #4
 8004a22:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	d504      	bpl.n	8004a34 <__sfp+0x28>
 8004a2a:	e01e      	b.n	8004a6a <__sfp+0x5e>
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8004a32:	d01a      	beq.n	8004a6a <__sfp+0x5e>
 8004a34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	2d00      	cmp	r5, #0
 8004a3c:	d1f6      	bne.n	8004a2c <__sfp+0x20>
 8004a3e:	4b1c      	ldr	r3, [pc, #112]	; (8004ab0 <__sfp+0xa4>)
 8004a40:	6665      	str	r5, [r4, #100]	; 0x64
 8004a42:	e9c4 5500 	strd	r5, r5, [r4]
 8004a46:	e9c4 5302 	strd	r5, r3, [r4, #8]
 8004a4a:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a4e:	61a5      	str	r5, [r4, #24]
 8004a50:	2208      	movs	r2, #8
 8004a52:	4629      	mov	r1, r5
 8004a54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a58:	f7fb fcca 	bl	80003f0 <memset>
 8004a5c:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 8004a60:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
 8004a64:	4620      	mov	r0, r4
 8004a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a6a:	6835      	ldr	r5, [r6, #0]
 8004a6c:	b12d      	cbz	r5, 8004a7a <__sfp+0x6e>
 8004a6e:	462e      	mov	r6, r5
 8004a70:	e7d7      	b.n	8004a22 <__sfp+0x16>
 8004a72:	4630      	mov	r0, r6
 8004a74:	f7ff ff46 	bl	8004904 <__sinit.part.0>
 8004a78:	e7cf      	b.n	8004a1a <__sfp+0xe>
 8004a7a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8004a7e:	4638      	mov	r0, r7
 8004a80:	f000 fc0e 	bl	80052a0 <_malloc_r>
 8004a84:	4604      	mov	r4, r0
 8004a86:	b168      	cbz	r0, 8004aa4 <__sfp+0x98>
 8004a88:	6005      	str	r5, [r0, #0]
 8004a8a:	f8c0 8004 	str.w	r8, [r0, #4]
 8004a8e:	300c      	adds	r0, #12
 8004a90:	4629      	mov	r1, r5
 8004a92:	60a0      	str	r0, [r4, #8]
 8004a94:	4625      	mov	r5, r4
 8004a96:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8004a9a:	f7fb fca9 	bl	80003f0 <memset>
 8004a9e:	6034      	str	r4, [r6, #0]
 8004aa0:	462e      	mov	r6, r5
 8004aa2:	e7be      	b.n	8004a22 <__sfp+0x16>
 8004aa4:	230c      	movs	r3, #12
 8004aa6:	6030      	str	r0, [r6, #0]
 8004aa8:	603b      	str	r3, [r7, #0]
 8004aaa:	e7db      	b.n	8004a64 <__sfp+0x58>
 8004aac:	0800ee50 	.word	0x0800ee50
 8004ab0:	ffff0001 	.word	0xffff0001

08004ab4 <_cleanup>:
 8004ab4:	4b02      	ldr	r3, [pc, #8]	; (8004ac0 <_cleanup+0xc>)
 8004ab6:	4903      	ldr	r1, [pc, #12]	; (8004ac4 <_cleanup+0x10>)
 8004ab8:	6818      	ldr	r0, [r3, #0]
 8004aba:	f000 bb13 	b.w	80050e4 <_fwalk_reent>
 8004abe:	bf00      	nop
 8004ac0:	0800ee50 	.word	0x0800ee50
 8004ac4:	08008505 	.word	0x08008505

08004ac8 <__sinit>:
 8004ac8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004aca:	b103      	cbz	r3, 8004ace <__sinit+0x6>
 8004acc:	4770      	bx	lr
 8004ace:	e719      	b.n	8004904 <__sinit.part.0>

08004ad0 <__sfp_lock_acquire>:
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop

08004ad4 <__sfp_lock_release>:
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop

08004ad8 <__sinit_lock_acquire>:
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop

08004adc <__sinit_lock_release>:
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop

08004ae0 <__fp_lock_all>:
 8004ae0:	4b02      	ldr	r3, [pc, #8]	; (8004aec <__fp_lock_all+0xc>)
 8004ae2:	4903      	ldr	r1, [pc, #12]	; (8004af0 <__fp_lock_all+0x10>)
 8004ae4:	6818      	ldr	r0, [r3, #0]
 8004ae6:	f000 badd 	b.w	80050a4 <_fwalk>
 8004aea:	bf00      	nop
 8004aec:	20000008 	.word	0x20000008
 8004af0:	080048f1 	.word	0x080048f1

08004af4 <__fp_unlock_all>:
 8004af4:	4b02      	ldr	r3, [pc, #8]	; (8004b00 <__fp_unlock_all+0xc>)
 8004af6:	4903      	ldr	r1, [pc, #12]	; (8004b04 <__fp_unlock_all+0x10>)
 8004af8:	6818      	ldr	r0, [r3, #0]
 8004afa:	f000 bad3 	b.w	80050a4 <_fwalk>
 8004afe:	bf00      	nop
 8004b00:	20000008 	.word	0x20000008
 8004b04:	08004901 	.word	0x08004901

08004b08 <_malloc_trim_r>:
 8004b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0a:	4f24      	ldr	r7, [pc, #144]	; (8004b9c <_malloc_trim_r+0x94>)
 8004b0c:	460c      	mov	r4, r1
 8004b0e:	4606      	mov	r6, r0
 8004b10:	f000 ffdc 	bl	8005acc <__malloc_lock>
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	6855      	ldr	r5, [r2, #4]
 8004b18:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
 8004b1c:	330f      	adds	r3, #15
 8004b1e:	f025 0503 	bic.w	r5, r5, #3
 8004b22:	442b      	add	r3, r5
 8004b24:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004b28:	f023 030f 	bic.w	r3, r3, #15
 8004b2c:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
 8004b30:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8004b34:	db07      	blt.n	8004b46 <_malloc_trim_r+0x3e>
 8004b36:	2100      	movs	r1, #0
 8004b38:	4630      	mov	r0, r6
 8004b3a:	f005 fad9 	bl	800a0f0 <_sbrk_r>
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	442b      	add	r3, r5
 8004b42:	4298      	cmp	r0, r3
 8004b44:	d004      	beq.n	8004b50 <_malloc_trim_r+0x48>
 8004b46:	4630      	mov	r0, r6
 8004b48:	f000 ffc2 	bl	8005ad0 <__malloc_unlock>
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b50:	4261      	negs	r1, r4
 8004b52:	4630      	mov	r0, r6
 8004b54:	f005 facc 	bl	800a0f0 <_sbrk_r>
 8004b58:	3001      	adds	r0, #1
 8004b5a:	d00d      	beq.n	8004b78 <_malloc_trim_r+0x70>
 8004b5c:	4a10      	ldr	r2, [pc, #64]	; (8004ba0 <_malloc_trim_r+0x98>)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	1b2d      	subs	r5, r5, r4
 8004b62:	f045 0501 	orr.w	r5, r5, #1
 8004b66:	605d      	str	r5, [r3, #4]
 8004b68:	6813      	ldr	r3, [r2, #0]
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	1b1b      	subs	r3, r3, r4
 8004b6e:	6013      	str	r3, [r2, #0]
 8004b70:	f000 ffae 	bl	8005ad0 <__malloc_unlock>
 8004b74:	2001      	movs	r0, #1
 8004b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b78:	2100      	movs	r1, #0
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	f005 fab8 	bl	800a0f0 <_sbrk_r>
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	1a83      	subs	r3, r0, r2
 8004b84:	2b0f      	cmp	r3, #15
 8004b86:	ddde      	ble.n	8004b46 <_malloc_trim_r+0x3e>
 8004b88:	f043 0301 	orr.w	r3, r3, #1
 8004b8c:	6053      	str	r3, [r2, #4]
 8004b8e:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <_malloc_trim_r+0x9c>)
 8004b90:	4903      	ldr	r1, [pc, #12]	; (8004ba0 <_malloc_trim_r+0x98>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	1ac0      	subs	r0, r0, r3
 8004b96:	6008      	str	r0, [r1, #0]
 8004b98:	e7d5      	b.n	8004b46 <_malloc_trim_r+0x3e>
 8004b9a:	bf00      	nop
 8004b9c:	20000438 	.word	0x20000438
 8004ba0:	20000c44 	.word	0x20000c44
 8004ba4:	20000840 	.word	0x20000840

08004ba8 <_free_r>:
 8004ba8:	2900      	cmp	r1, #0
 8004baa:	d061      	beq.n	8004c70 <_free_r+0xc8>
 8004bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bae:	460c      	mov	r4, r1
 8004bb0:	4606      	mov	r6, r0
 8004bb2:	f000 ff8b 	bl	8005acc <__malloc_lock>
 8004bb6:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8004bba:	4f7b      	ldr	r7, [pc, #492]	; (8004da8 <_free_r+0x200>)
 8004bbc:	f1a4 0508 	sub.w	r5, r4, #8
 8004bc0:	f022 0101 	bic.w	r1, r2, #1
 8004bc4:	eb05 0c01 	add.w	ip, r5, r1
 8004bc8:	68b8      	ldr	r0, [r7, #8]
 8004bca:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8004bce:	4560      	cmp	r0, ip
 8004bd0:	f023 0303 	bic.w	r3, r3, #3
 8004bd4:	f000 808b 	beq.w	8004cee <_free_r+0x146>
 8004bd8:	07d2      	lsls	r2, r2, #31
 8004bda:	f8cc 3004 	str.w	r3, [ip, #4]
 8004bde:	d432      	bmi.n	8004c46 <_free_r+0x9e>
 8004be0:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8004be4:	1aad      	subs	r5, r5, r2
 8004be6:	4411      	add	r1, r2
 8004be8:	68aa      	ldr	r2, [r5, #8]
 8004bea:	f107 0008 	add.w	r0, r7, #8
 8004bee:	4282      	cmp	r2, r0
 8004bf0:	d06a      	beq.n	8004cc8 <_free_r+0x120>
 8004bf2:	eb0c 0403 	add.w	r4, ip, r3
 8004bf6:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8004bfa:	68ec      	ldr	r4, [r5, #12]
 8004bfc:	60d4      	str	r4, [r2, #12]
 8004bfe:	f01e 0f01 	tst.w	lr, #1
 8004c02:	60a2      	str	r2, [r4, #8]
 8004c04:	f000 8097 	beq.w	8004d36 <_free_r+0x18e>
 8004c08:	f041 0301 	orr.w	r3, r1, #1
 8004c0c:	606b      	str	r3, [r5, #4]
 8004c0e:	f8cc 1000 	str.w	r1, [ip]
 8004c12:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004c16:	d235      	bcs.n	8004c84 <_free_r+0xdc>
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	08cb      	lsrs	r3, r1, #3
 8004c1c:	0948      	lsrs	r0, r1, #5
 8004c1e:	2101      	movs	r1, #1
 8004c20:	3301      	adds	r3, #1
 8004c22:	4081      	lsls	r1, r0
 8004c24:	4311      	orrs	r1, r2
 8004c26:	6079      	str	r1, [r7, #4]
 8004c28:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 8004c2c:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
 8004c30:	3a08      	subs	r2, #8
 8004c32:	e9c5 1202 	strd	r1, r2, [r5, #8]
 8004c36:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 8004c3a:	60cd      	str	r5, [r1, #12]
 8004c3c:	4630      	mov	r0, r6
 8004c3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c42:	f000 bf45 	b.w	8005ad0 <__malloc_unlock>
 8004c46:	eb0c 0203 	add.w	r2, ip, r3
 8004c4a:	6852      	ldr	r2, [r2, #4]
 8004c4c:	07d0      	lsls	r0, r2, #31
 8004c4e:	d410      	bmi.n	8004c72 <_free_r+0xca>
 8004c50:	4419      	add	r1, r3
 8004c52:	f107 0008 	add.w	r0, r7, #8
 8004c56:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8004c5a:	4283      	cmp	r3, r0
 8004c5c:	d073      	beq.n	8004d46 <_free_r+0x19e>
 8004c5e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8004c62:	60da      	str	r2, [r3, #12]
 8004c64:	6093      	str	r3, [r2, #8]
 8004c66:	f041 0301 	orr.w	r3, r1, #1
 8004c6a:	606b      	str	r3, [r5, #4]
 8004c6c:	5069      	str	r1, [r5, r1]
 8004c6e:	e7d0      	b.n	8004c12 <_free_r+0x6a>
 8004c70:	4770      	bx	lr
 8004c72:	f041 0301 	orr.w	r3, r1, #1
 8004c76:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004c7a:	f844 3c04 	str.w	r3, [r4, #-4]
 8004c7e:	f8cc 1000 	str.w	r1, [ip]
 8004c82:	d3c9      	bcc.n	8004c18 <_free_r+0x70>
 8004c84:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 8004c88:	ea4f 2351 	mov.w	r3, r1, lsr #9
 8004c8c:	d248      	bcs.n	8004d20 <_free_r+0x178>
 8004c8e:	098b      	lsrs	r3, r1, #6
 8004c90:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8004c94:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004c98:	00c3      	lsls	r3, r0, #3
 8004c9a:	18f8      	adds	r0, r7, r3
 8004c9c:	58fb      	ldr	r3, [r7, r3]
 8004c9e:	3808      	subs	r0, #8
 8004ca0:	4298      	cmp	r0, r3
 8004ca2:	d059      	beq.n	8004d58 <_free_r+0x1b0>
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	f022 0203 	bic.w	r2, r2, #3
 8004caa:	428a      	cmp	r2, r1
 8004cac:	d902      	bls.n	8004cb4 <_free_r+0x10c>
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	4298      	cmp	r0, r3
 8004cb2:	d1f7      	bne.n	8004ca4 <_free_r+0xfc>
 8004cb4:	68d8      	ldr	r0, [r3, #12]
 8004cb6:	e9c5 3002 	strd	r3, r0, [r5, #8]
 8004cba:	6085      	str	r5, [r0, #8]
 8004cbc:	60dd      	str	r5, [r3, #12]
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004cc4:	f000 bf04 	b.w	8005ad0 <__malloc_unlock>
 8004cc8:	eb0c 0203 	add.w	r2, ip, r3
 8004ccc:	6852      	ldr	r2, [r2, #4]
 8004cce:	07d2      	lsls	r2, r2, #31
 8004cd0:	d463      	bmi.n	8004d9a <_free_r+0x1f2>
 8004cd2:	440b      	add	r3, r1
 8004cd4:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
 8004cd8:	60ca      	str	r2, [r1, #12]
 8004cda:	6091      	str	r1, [r2, #8]
 8004cdc:	f043 0201 	orr.w	r2, r3, #1
 8004ce0:	606a      	str	r2, [r5, #4]
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	50eb      	str	r3, [r5, r3]
 8004ce6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004cea:	f000 bef1 	b.w	8005ad0 <__malloc_unlock>
 8004cee:	440b      	add	r3, r1
 8004cf0:	07d1      	lsls	r1, r2, #31
 8004cf2:	d407      	bmi.n	8004d04 <_free_r+0x15c>
 8004cf4:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8004cf8:	1aad      	subs	r5, r5, r2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
 8004d00:	60ca      	str	r2, [r1, #12]
 8004d02:	6091      	str	r1, [r2, #8]
 8004d04:	f043 0201 	orr.w	r2, r3, #1
 8004d08:	606a      	str	r2, [r5, #4]
 8004d0a:	4a28      	ldr	r2, [pc, #160]	; (8004dac <_free_r+0x204>)
 8004d0c:	60bd      	str	r5, [r7, #8]
 8004d0e:	6812      	ldr	r2, [r2, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d893      	bhi.n	8004c3c <_free_r+0x94>
 8004d14:	4b26      	ldr	r3, [pc, #152]	; (8004db0 <_free_r+0x208>)
 8004d16:	4630      	mov	r0, r6
 8004d18:	6819      	ldr	r1, [r3, #0]
 8004d1a:	f7ff fef5 	bl	8004b08 <_malloc_trim_r>
 8004d1e:	e78d      	b.n	8004c3c <_free_r+0x94>
 8004d20:	2b14      	cmp	r3, #20
 8004d22:	d90a      	bls.n	8004d3a <_free_r+0x192>
 8004d24:	2b54      	cmp	r3, #84	; 0x54
 8004d26:	d81f      	bhi.n	8004d68 <_free_r+0x1c0>
 8004d28:	0b0b      	lsrs	r3, r1, #12
 8004d2a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8004d2e:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 8004d32:	00c3      	lsls	r3, r0, #3
 8004d34:	e7b1      	b.n	8004c9a <_free_r+0xf2>
 8004d36:	4419      	add	r1, r3
 8004d38:	e78d      	b.n	8004c56 <_free_r+0xae>
 8004d3a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8004d3e:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 8004d42:	00c3      	lsls	r3, r0, #3
 8004d44:	e7a9      	b.n	8004c9a <_free_r+0xf2>
 8004d46:	f041 0301 	orr.w	r3, r1, #1
 8004d4a:	e9c7 5504 	strd	r5, r5, [r7, #16]
 8004d4e:	e9c5 0002 	strd	r0, r0, [r5, #8]
 8004d52:	606b      	str	r3, [r5, #4]
 8004d54:	5069      	str	r1, [r5, r1]
 8004d56:	e771      	b.n	8004c3c <_free_r+0x94>
 8004d58:	6879      	ldr	r1, [r7, #4]
 8004d5a:	1092      	asrs	r2, r2, #2
 8004d5c:	2401      	movs	r4, #1
 8004d5e:	fa04 f202 	lsl.w	r2, r4, r2
 8004d62:	430a      	orrs	r2, r1
 8004d64:	607a      	str	r2, [r7, #4]
 8004d66:	e7a6      	b.n	8004cb6 <_free_r+0x10e>
 8004d68:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004d6c:	d806      	bhi.n	8004d7c <_free_r+0x1d4>
 8004d6e:	0bcb      	lsrs	r3, r1, #15
 8004d70:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8004d74:	f103 0277 	add.w	r2, r3, #119	; 0x77
 8004d78:	00c3      	lsls	r3, r0, #3
 8004d7a:	e78e      	b.n	8004c9a <_free_r+0xf2>
 8004d7c:	f240 5254 	movw	r2, #1364	; 0x554
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d806      	bhi.n	8004d92 <_free_r+0x1ea>
 8004d84:	0c8b      	lsrs	r3, r1, #18
 8004d86:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8004d8a:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8004d8e:	00c3      	lsls	r3, r0, #3
 8004d90:	e783      	b.n	8004c9a <_free_r+0xf2>
 8004d92:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8004d96:	227e      	movs	r2, #126	; 0x7e
 8004d98:	e77f      	b.n	8004c9a <_free_r+0xf2>
 8004d9a:	f041 0301 	orr.w	r3, r1, #1
 8004d9e:	606b      	str	r3, [r5, #4]
 8004da0:	f8cc 1000 	str.w	r1, [ip]
 8004da4:	e74a      	b.n	8004c3c <_free_r+0x94>
 8004da6:	bf00      	nop
 8004da8:	20000438 	.word	0x20000438
 8004dac:	20000844 	.word	0x20000844
 8004db0:	20000c40 	.word	0x20000c40

08004db4 <__sfvwrite_r>:
 8004db4:	6893      	ldr	r3, [r2, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 8085 	beq.w	8004ec6 <__sfvwrite_r+0x112>
 8004dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8004dc4:	460c      	mov	r4, r1
 8004dc6:	0719      	lsls	r1, r3, #28
 8004dc8:	4680      	mov	r8, r0
 8004dca:	b083      	sub	sp, #12
 8004dcc:	4617      	mov	r7, r2
 8004dce:	b298      	uxth	r0, r3
 8004dd0:	d525      	bpl.n	8004e1e <__sfvwrite_r+0x6a>
 8004dd2:	6923      	ldr	r3, [r4, #16]
 8004dd4:	b31b      	cbz	r3, 8004e1e <__sfvwrite_r+0x6a>
 8004dd6:	f010 0302 	ands.w	r3, r0, #2
 8004dda:	683d      	ldr	r5, [r7, #0]
 8004ddc:	d02d      	beq.n	8004e3a <__sfvwrite_r+0x86>
 8004dde:	f04f 0a00 	mov.w	sl, #0
 8004de2:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 80050a0 <__sfvwrite_r+0x2ec>
 8004de6:	4656      	mov	r6, sl
 8004de8:	46b9      	mov	r9, r7
 8004dea:	455e      	cmp	r6, fp
 8004dec:	4633      	mov	r3, r6
 8004dee:	4652      	mov	r2, sl
 8004df0:	bf28      	it	cs
 8004df2:	465b      	movcs	r3, fp
 8004df4:	4640      	mov	r0, r8
 8004df6:	2e00      	cmp	r6, #0
 8004df8:	d052      	beq.n	8004ea0 <__sfvwrite_r+0xec>
 8004dfa:	69e1      	ldr	r1, [r4, #28]
 8004dfc:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8004dfe:	47b8      	blx	r7
 8004e00:	2800      	cmp	r0, #0
 8004e02:	dd56      	ble.n	8004eb2 <__sfvwrite_r+0xfe>
 8004e04:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004e08:	1a1b      	subs	r3, r3, r0
 8004e0a:	4482      	add	sl, r0
 8004e0c:	1a36      	subs	r6, r6, r0
 8004e0e:	f8c9 3008 	str.w	r3, [r9, #8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1e9      	bne.n	8004dea <__sfvwrite_r+0x36>
 8004e16:	2000      	movs	r0, #0
 8004e18:	b003      	add	sp, #12
 8004e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e1e:	4621      	mov	r1, r4
 8004e20:	4640      	mov	r0, r8
 8004e22:	f7fe fbbf 	bl	80035a4 <__swsetup_r>
 8004e26:	2800      	cmp	r0, #0
 8004e28:	f040 8136 	bne.w	8005098 <__sfvwrite_r+0x2e4>
 8004e2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e30:	683d      	ldr	r5, [r7, #0]
 8004e32:	b298      	uxth	r0, r3
 8004e34:	f010 0302 	ands.w	r3, r0, #2
 8004e38:	d1d1      	bne.n	8004dde <__sfvwrite_r+0x2a>
 8004e3a:	f010 0901 	ands.w	r9, r0, #1
 8004e3e:	d144      	bne.n	8004eca <__sfvwrite_r+0x116>
 8004e40:	464e      	mov	r6, r9
 8004e42:	9700      	str	r7, [sp, #0]
 8004e44:	b346      	cbz	r6, 8004e98 <__sfvwrite_r+0xe4>
 8004e46:	0582      	lsls	r2, r0, #22
 8004e48:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8004e4c:	f140 8083 	bpl.w	8004f56 <__sfvwrite_r+0x1a2>
 8004e50:	45b3      	cmp	fp, r6
 8004e52:	465a      	mov	r2, fp
 8004e54:	f200 80b2 	bhi.w	8004fbc <__sfvwrite_r+0x208>
 8004e58:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8004e5c:	f040 80bf 	bne.w	8004fde <__sfvwrite_r+0x22a>
 8004e60:	6820      	ldr	r0, [r4, #0]
 8004e62:	9201      	str	r2, [sp, #4]
 8004e64:	4649      	mov	r1, r9
 8004e66:	f000 fdb5 	bl	80059d4 <memmove>
 8004e6a:	68a3      	ldr	r3, [r4, #8]
 8004e6c:	9a01      	ldr	r2, [sp, #4]
 8004e6e:	eba3 010b 	sub.w	r1, r3, fp
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	60a1      	str	r1, [r4, #8]
 8004e76:	4413      	add	r3, r2
 8004e78:	46b2      	mov	sl, r6
 8004e7a:	6023      	str	r3, [r4, #0]
 8004e7c:	2600      	movs	r6, #0
 8004e7e:	9b00      	ldr	r3, [sp, #0]
 8004e80:	6898      	ldr	r0, [r3, #8]
 8004e82:	eba0 000a 	sub.w	r0, r0, sl
 8004e86:	44d1      	add	r9, sl
 8004e88:	6098      	str	r0, [r3, #8]
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	d0c3      	beq.n	8004e16 <__sfvwrite_r+0x62>
 8004e8e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8004e92:	b280      	uxth	r0, r0
 8004e94:	2e00      	cmp	r6, #0
 8004e96:	d1d6      	bne.n	8004e46 <__sfvwrite_r+0x92>
 8004e98:	e9d5 9600 	ldrd	r9, r6, [r5]
 8004e9c:	3508      	adds	r5, #8
 8004e9e:	e7d1      	b.n	8004e44 <__sfvwrite_r+0x90>
 8004ea0:	e9d5 a600 	ldrd	sl, r6, [r5]
 8004ea4:	3508      	adds	r5, #8
 8004ea6:	e7a0      	b.n	8004dea <__sfvwrite_r+0x36>
 8004ea8:	4621      	mov	r1, r4
 8004eaa:	4640      	mov	r0, r8
 8004eac:	f7ff fce2 	bl	8004874 <_fflush_r>
 8004eb0:	b380      	cbz	r0, 8004f14 <__sfvwrite_r+0x160>
 8004eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ebe:	81a3      	strh	r3, [r4, #12]
 8004ec0:	b003      	add	sp, #12
 8004ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	4770      	bx	lr
 8004eca:	461e      	mov	r6, r3
 8004ecc:	46aa      	mov	sl, r5
 8004ece:	4699      	mov	r9, r3
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	461d      	mov	r5, r3
 8004ed4:	9700      	str	r7, [sp, #0]
 8004ed6:	b356      	cbz	r6, 8004f2e <__sfvwrite_r+0x17a>
 8004ed8:	b388      	cbz	r0, 8004f3e <__sfvwrite_r+0x18a>
 8004eda:	464a      	mov	r2, r9
 8004edc:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
 8004ee0:	6820      	ldr	r0, [r4, #0]
 8004ee2:	42b2      	cmp	r2, r6
 8004ee4:	bf28      	it	cs
 8004ee6:	4632      	movcs	r2, r6
 8004ee8:	4288      	cmp	r0, r1
 8004eea:	d905      	bls.n	8004ef8 <__sfvwrite_r+0x144>
 8004eec:	68a1      	ldr	r1, [r4, #8]
 8004eee:	eb03 0b01 	add.w	fp, r3, r1
 8004ef2:	455a      	cmp	r2, fp
 8004ef4:	f300 80a6 	bgt.w	8005044 <__sfvwrite_r+0x290>
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	dc63      	bgt.n	8004fc4 <__sfvwrite_r+0x210>
 8004efc:	69e1      	ldr	r1, [r4, #28]
 8004efe:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8004f00:	462a      	mov	r2, r5
 8004f02:	4640      	mov	r0, r8
 8004f04:	47b8      	blx	r7
 8004f06:	f1b0 0b00 	subs.w	fp, r0, #0
 8004f0a:	ddd2      	ble.n	8004eb2 <__sfvwrite_r+0xfe>
 8004f0c:	ebb9 090b 	subs.w	r9, r9, fp
 8004f10:	d0ca      	beq.n	8004ea8 <__sfvwrite_r+0xf4>
 8004f12:	2001      	movs	r0, #1
 8004f14:	9a00      	ldr	r2, [sp, #0]
 8004f16:	6893      	ldr	r3, [r2, #8]
 8004f18:	eba3 030b 	sub.w	r3, r3, fp
 8004f1c:	445d      	add	r5, fp
 8004f1e:	eba6 060b 	sub.w	r6, r6, fp
 8004f22:	6093      	str	r3, [r2, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f43f af76 	beq.w	8004e16 <__sfvwrite_r+0x62>
 8004f2a:	2e00      	cmp	r6, #0
 8004f2c:	d1d4      	bne.n	8004ed8 <__sfvwrite_r+0x124>
 8004f2e:	f10a 0308 	add.w	r3, sl, #8
 8004f32:	e953 5602 	ldrd	r5, r6, [r3, #-8]
 8004f36:	469a      	mov	sl, r3
 8004f38:	3308      	adds	r3, #8
 8004f3a:	2e00      	cmp	r6, #0
 8004f3c:	d0f9      	beq.n	8004f32 <__sfvwrite_r+0x17e>
 8004f3e:	4632      	mov	r2, r6
 8004f40:	210a      	movs	r1, #10
 8004f42:	4628      	mov	r0, r5
 8004f44:	f000 fc5c 	bl	8005800 <memchr>
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	f000 809c 	beq.w	8005086 <__sfvwrite_r+0x2d2>
 8004f4e:	3001      	adds	r0, #1
 8004f50:	eba0 0905 	sub.w	r9, r0, r5
 8004f54:	e7c1      	b.n	8004eda <__sfvwrite_r+0x126>
 8004f56:	6820      	ldr	r0, [r4, #0]
 8004f58:	6923      	ldr	r3, [r4, #16]
 8004f5a:	4298      	cmp	r0, r3
 8004f5c:	d816      	bhi.n	8004f8c <__sfvwrite_r+0x1d8>
 8004f5e:	6963      	ldr	r3, [r4, #20]
 8004f60:	42b3      	cmp	r3, r6
 8004f62:	d813      	bhi.n	8004f8c <__sfvwrite_r+0x1d8>
 8004f64:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004f68:	42b2      	cmp	r2, r6
 8004f6a:	bf28      	it	cs
 8004f6c:	4632      	movcs	r2, r6
 8004f6e:	69e1      	ldr	r1, [r4, #28]
 8004f70:	fb92 f2f3 	sdiv	r2, r2, r3
 8004f74:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8004f76:	fb02 f303 	mul.w	r3, r2, r3
 8004f7a:	4640      	mov	r0, r8
 8004f7c:	464a      	mov	r2, r9
 8004f7e:	47b8      	blx	r7
 8004f80:	f1b0 0a00 	subs.w	sl, r0, #0
 8004f84:	dd95      	ble.n	8004eb2 <__sfvwrite_r+0xfe>
 8004f86:	eba6 060a 	sub.w	r6, r6, sl
 8004f8a:	e778      	b.n	8004e7e <__sfvwrite_r+0xca>
 8004f8c:	45b3      	cmp	fp, r6
 8004f8e:	46da      	mov	sl, fp
 8004f90:	bf28      	it	cs
 8004f92:	46b2      	movcs	sl, r6
 8004f94:	4652      	mov	r2, sl
 8004f96:	4649      	mov	r1, r9
 8004f98:	f000 fd1c 	bl	80059d4 <memmove>
 8004f9c:	68a3      	ldr	r3, [r4, #8]
 8004f9e:	6822      	ldr	r2, [r4, #0]
 8004fa0:	eba3 030a 	sub.w	r3, r3, sl
 8004fa4:	4452      	add	r2, sl
 8004fa6:	60a3      	str	r3, [r4, #8]
 8004fa8:	6022      	str	r2, [r4, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1eb      	bne.n	8004f86 <__sfvwrite_r+0x1d2>
 8004fae:	4621      	mov	r1, r4
 8004fb0:	4640      	mov	r0, r8
 8004fb2:	f7ff fc5f 	bl	8004874 <_fflush_r>
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d0e5      	beq.n	8004f86 <__sfvwrite_r+0x1d2>
 8004fba:	e77a      	b.n	8004eb2 <__sfvwrite_r+0xfe>
 8004fbc:	6820      	ldr	r0, [r4, #0]
 8004fbe:	46b3      	mov	fp, r6
 8004fc0:	4632      	mov	r2, r6
 8004fc2:	e74e      	b.n	8004e62 <__sfvwrite_r+0xae>
 8004fc4:	4629      	mov	r1, r5
 8004fc6:	9201      	str	r2, [sp, #4]
 8004fc8:	f000 fd04 	bl	80059d4 <memmove>
 8004fcc:	9a01      	ldr	r2, [sp, #4]
 8004fce:	68a3      	ldr	r3, [r4, #8]
 8004fd0:	1a9b      	subs	r3, r3, r2
 8004fd2:	60a3      	str	r3, [r4, #8]
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	6023      	str	r3, [r4, #0]
 8004fda:	4693      	mov	fp, r2
 8004fdc:	e796      	b.n	8004f0c <__sfvwrite_r+0x158>
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	6921      	ldr	r1, [r4, #16]
 8004fe2:	eba3 0b01 	sub.w	fp, r3, r1
 8004fe6:	6963      	ldr	r3, [r4, #20]
 8004fe8:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 8004fec:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 8004ff0:	f10b 0301 	add.w	r3, fp, #1
 8004ff4:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 8004ff8:	4433      	add	r3, r6
 8004ffa:	4553      	cmp	r3, sl
 8004ffc:	4652      	mov	r2, sl
 8004ffe:	bf84      	itt	hi
 8005000:	469a      	movhi	sl, r3
 8005002:	4652      	movhi	r2, sl
 8005004:	0543      	lsls	r3, r0, #21
 8005006:	d52c      	bpl.n	8005062 <__sfvwrite_r+0x2ae>
 8005008:	4611      	mov	r1, r2
 800500a:	4640      	mov	r0, r8
 800500c:	f000 f948 	bl	80052a0 <_malloc_r>
 8005010:	2800      	cmp	r0, #0
 8005012:	d03b      	beq.n	800508c <__sfvwrite_r+0x2d8>
 8005014:	465a      	mov	r2, fp
 8005016:	6921      	ldr	r1, [r4, #16]
 8005018:	9001      	str	r0, [sp, #4]
 800501a:	f000 fc41 	bl	80058a0 <memcpy>
 800501e:	89a2      	ldrh	r2, [r4, #12]
 8005020:	9b01      	ldr	r3, [sp, #4]
 8005022:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8005026:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800502a:	81a2      	strh	r2, [r4, #12]
 800502c:	eb03 000b 	add.w	r0, r3, fp
 8005030:	6123      	str	r3, [r4, #16]
 8005032:	ebaa 030b 	sub.w	r3, sl, fp
 8005036:	f8c4 a014 	str.w	sl, [r4, #20]
 800503a:	60a3      	str	r3, [r4, #8]
 800503c:	6020      	str	r0, [r4, #0]
 800503e:	46b3      	mov	fp, r6
 8005040:	4632      	mov	r2, r6
 8005042:	e70e      	b.n	8004e62 <__sfvwrite_r+0xae>
 8005044:	4629      	mov	r1, r5
 8005046:	465a      	mov	r2, fp
 8005048:	f000 fcc4 	bl	80059d4 <memmove>
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	445b      	add	r3, fp
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	4621      	mov	r1, r4
 8005054:	4640      	mov	r0, r8
 8005056:	f7ff fc0d 	bl	8004874 <_fflush_r>
 800505a:	2800      	cmp	r0, #0
 800505c:	f43f af56 	beq.w	8004f0c <__sfvwrite_r+0x158>
 8005060:	e727      	b.n	8004eb2 <__sfvwrite_r+0xfe>
 8005062:	4640      	mov	r0, r8
 8005064:	f001 fae2 	bl	800662c <_realloc_r>
 8005068:	4603      	mov	r3, r0
 800506a:	2800      	cmp	r0, #0
 800506c:	d1de      	bne.n	800502c <__sfvwrite_r+0x278>
 800506e:	6921      	ldr	r1, [r4, #16]
 8005070:	4640      	mov	r0, r8
 8005072:	f7ff fd99 	bl	8004ba8 <_free_r>
 8005076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800507a:	220c      	movs	r2, #12
 800507c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005080:	f8c8 2000 	str.w	r2, [r8]
 8005084:	e717      	b.n	8004eb6 <__sfvwrite_r+0x102>
 8005086:	1c72      	adds	r2, r6, #1
 8005088:	4691      	mov	r9, r2
 800508a:	e727      	b.n	8004edc <__sfvwrite_r+0x128>
 800508c:	220c      	movs	r2, #12
 800508e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005092:	f8c8 2000 	str.w	r2, [r8]
 8005096:	e70e      	b.n	8004eb6 <__sfvwrite_r+0x102>
 8005098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800509c:	e6bc      	b.n	8004e18 <__sfvwrite_r+0x64>
 800509e:	bf00      	nop
 80050a0:	7ffffc00 	.word	0x7ffffc00

080050a4 <_fwalk>:
 80050a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a8:	4688      	mov	r8, r1
 80050aa:	f500 7738 	add.w	r7, r0, #736	; 0x2e0
 80050ae:	2600      	movs	r6, #0
 80050b0:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 80050b4:	3d01      	subs	r5, #1
 80050b6:	d40f      	bmi.n	80050d8 <_fwalk+0x34>
 80050b8:	89a3      	ldrh	r3, [r4, #12]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80050c0:	d906      	bls.n	80050d0 <_fwalk+0x2c>
 80050c2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80050c6:	3301      	adds	r3, #1
 80050c8:	4620      	mov	r0, r4
 80050ca:	d001      	beq.n	80050d0 <_fwalk+0x2c>
 80050cc:	47c0      	blx	r8
 80050ce:	4306      	orrs	r6, r0
 80050d0:	1c6b      	adds	r3, r5, #1
 80050d2:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80050d6:	d1ef      	bne.n	80050b8 <_fwalk+0x14>
 80050d8:	683f      	ldr	r7, [r7, #0]
 80050da:	2f00      	cmp	r7, #0
 80050dc:	d1e8      	bne.n	80050b0 <_fwalk+0xc>
 80050de:	4630      	mov	r0, r6
 80050e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080050e4 <_fwalk_reent>:
 80050e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050e8:	4607      	mov	r7, r0
 80050ea:	4688      	mov	r8, r1
 80050ec:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
 80050f0:	f04f 0900 	mov.w	r9, #0
 80050f4:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 80050f8:	3d01      	subs	r5, #1
 80050fa:	d411      	bmi.n	8005120 <_fwalk_reent+0x3c>
 80050fc:	89a3      	ldrh	r3, [r4, #12]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8005104:	d908      	bls.n	8005118 <_fwalk_reent+0x34>
 8005106:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800510a:	3301      	adds	r3, #1
 800510c:	4621      	mov	r1, r4
 800510e:	d003      	beq.n	8005118 <_fwalk_reent+0x34>
 8005110:	4638      	mov	r0, r7
 8005112:	47c0      	blx	r8
 8005114:	ea49 0900 	orr.w	r9, r9, r0
 8005118:	1c6b      	adds	r3, r5, #1
 800511a:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800511e:	d1ed      	bne.n	80050fc <_fwalk_reent+0x18>
 8005120:	6836      	ldr	r6, [r6, #0]
 8005122:	2e00      	cmp	r6, #0
 8005124:	d1e6      	bne.n	80050f4 <_fwalk_reent+0x10>
 8005126:	4648      	mov	r0, r9
 8005128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800512c <__localeconv_l>:
 800512c:	30f0      	adds	r0, #240	; 0xf0
 800512e:	4770      	bx	lr

08005130 <_localeconv_r>:
 8005130:	4800      	ldr	r0, [pc, #0]	; (8005134 <_localeconv_r+0x4>)
 8005132:	4770      	bx	lr
 8005134:	20000938 	.word	0x20000938

08005138 <localeconv>:
 8005138:	4800      	ldr	r0, [pc, #0]	; (800513c <localeconv+0x4>)
 800513a:	4770      	bx	lr
 800513c:	20000938 	.word	0x20000938

08005140 <__smakebuf_r>:
 8005140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005144:	898b      	ldrh	r3, [r1, #12]
 8005146:	460c      	mov	r4, r1
 8005148:	0799      	lsls	r1, r3, #30
 800514a:	b096      	sub	sp, #88	; 0x58
 800514c:	d508      	bpl.n	8005160 <__smakebuf_r+0x20>
 800514e:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8005152:	2201      	movs	r2, #1
 8005154:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8005158:	6023      	str	r3, [r4, #0]
 800515a:	b016      	add	sp, #88	; 0x58
 800515c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005160:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005164:	2900      	cmp	r1, #0
 8005166:	4606      	mov	r6, r0
 8005168:	db27      	blt.n	80051ba <__smakebuf_r+0x7a>
 800516a:	466a      	mov	r2, sp
 800516c:	f004 ffdb 	bl	800a126 <_fstat_r>
 8005170:	2800      	cmp	r0, #0
 8005172:	db21      	blt.n	80051b8 <__smakebuf_r+0x78>
 8005174:	9d01      	ldr	r5, [sp, #4]
 8005176:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 800517a:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
 800517e:	fab5 f585 	clz	r5, r5
 8005182:	f44f 6880 	mov.w	r8, #1024	; 0x400
 8005186:	096d      	lsrs	r5, r5, #5
 8005188:	f44f 6700 	mov.w	r7, #2048	; 0x800
 800518c:	4641      	mov	r1, r8
 800518e:	4630      	mov	r0, r6
 8005190:	f000 f886 	bl	80052a0 <_malloc_r>
 8005194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005198:	b1f0      	cbz	r0, 80051d8 <__smakebuf_r+0x98>
 800519a:	4a20      	ldr	r2, [pc, #128]	; (800521c <__smakebuf_r+0xdc>)
 800519c:	63f2      	str	r2, [r6, #60]	; 0x3c
 800519e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051a2:	f8c4 8014 	str.w	r8, [r4, #20]
 80051a6:	81a3      	strh	r3, [r4, #12]
 80051a8:	6020      	str	r0, [r4, #0]
 80051aa:	6120      	str	r0, [r4, #16]
 80051ac:	bb35      	cbnz	r5, 80051fc <__smakebuf_r+0xbc>
 80051ae:	433b      	orrs	r3, r7
 80051b0:	81a3      	strh	r3, [r4, #12]
 80051b2:	b016      	add	sp, #88	; 0x58
 80051b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051b8:	89a3      	ldrh	r3, [r4, #12]
 80051ba:	f013 0580 	ands.w	r5, r3, #128	; 0x80
 80051be:	d019      	beq.n	80051f4 <__smakebuf_r+0xb4>
 80051c0:	f04f 0840 	mov.w	r8, #64	; 0x40
 80051c4:	4641      	mov	r1, r8
 80051c6:	4630      	mov	r0, r6
 80051c8:	f000 f86a 	bl	80052a0 <_malloc_r>
 80051cc:	2500      	movs	r5, #0
 80051ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051d2:	462f      	mov	r7, r5
 80051d4:	2800      	cmp	r0, #0
 80051d6:	d1e0      	bne.n	800519a <__smakebuf_r+0x5a>
 80051d8:	059a      	lsls	r2, r3, #22
 80051da:	d4be      	bmi.n	800515a <__smakebuf_r+0x1a>
 80051dc:	f023 0303 	bic.w	r3, r3, #3
 80051e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051e4:	f043 0302 	orr.w	r3, r3, #2
 80051e8:	2101      	movs	r1, #1
 80051ea:	e9c4 2104 	strd	r2, r1, [r4, #16]
 80051ee:	81a3      	strh	r3, [r4, #12]
 80051f0:	6022      	str	r2, [r4, #0]
 80051f2:	e7b2      	b.n	800515a <__smakebuf_r+0x1a>
 80051f4:	f44f 6880 	mov.w	r8, #1024	; 0x400
 80051f8:	462f      	mov	r7, r5
 80051fa:	e7c7      	b.n	800518c <__smakebuf_r+0x4c>
 80051fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005200:	4630      	mov	r0, r6
 8005202:	f004 ff95 	bl	800a130 <_isatty_r>
 8005206:	b910      	cbnz	r0, 800520e <__smakebuf_r+0xce>
 8005208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800520c:	e7cf      	b.n	80051ae <__smakebuf_r+0x6e>
 800520e:	89a3      	ldrh	r3, [r4, #12]
 8005210:	f023 0303 	bic.w	r3, r3, #3
 8005214:	f043 0301 	orr.w	r3, r3, #1
 8005218:	b21b      	sxth	r3, r3
 800521a:	e7c8      	b.n	80051ae <__smakebuf_r+0x6e>
 800521c:	080048f5 	.word	0x080048f5

08005220 <__swhatbuf_r>:
 8005220:	b570      	push	{r4, r5, r6, lr}
 8005222:	460c      	mov	r4, r1
 8005224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005228:	2900      	cmp	r1, #0
 800522a:	b096      	sub	sp, #88	; 0x58
 800522c:	4615      	mov	r5, r2
 800522e:	461e      	mov	r6, r3
 8005230:	db14      	blt.n	800525c <__swhatbuf_r+0x3c>
 8005232:	466a      	mov	r2, sp
 8005234:	f004 ff77 	bl	800a126 <_fstat_r>
 8005238:	2800      	cmp	r0, #0
 800523a:	db0f      	blt.n	800525c <__swhatbuf_r+0x3c>
 800523c:	9a01      	ldr	r2, [sp, #4]
 800523e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005242:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 8005246:	fab2 f282 	clz	r2, r2
 800524a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800524e:	0952      	lsrs	r2, r2, #5
 8005250:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005254:	6032      	str	r2, [r6, #0]
 8005256:	602b      	str	r3, [r5, #0]
 8005258:	b016      	add	sp, #88	; 0x58
 800525a:	bd70      	pop	{r4, r5, r6, pc}
 800525c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8005260:	2300      	movs	r3, #0
 8005262:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 8005266:	6033      	str	r3, [r6, #0]
 8005268:	d004      	beq.n	8005274 <__swhatbuf_r+0x54>
 800526a:	2240      	movs	r2, #64	; 0x40
 800526c:	4618      	mov	r0, r3
 800526e:	602a      	str	r2, [r5, #0]
 8005270:	b016      	add	sp, #88	; 0x58
 8005272:	bd70      	pop	{r4, r5, r6, pc}
 8005274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005278:	602b      	str	r3, [r5, #0]
 800527a:	b016      	add	sp, #88	; 0x58
 800527c:	bd70      	pop	{r4, r5, r6, pc}
 800527e:	bf00      	nop

08005280 <malloc>:
 8005280:	4b02      	ldr	r3, [pc, #8]	; (800528c <malloc+0xc>)
 8005282:	4601      	mov	r1, r0
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	f000 b80b 	b.w	80052a0 <_malloc_r>
 800528a:	bf00      	nop
 800528c:	20000008 	.word	0x20000008

08005290 <free>:
 8005290:	4b02      	ldr	r3, [pc, #8]	; (800529c <free+0xc>)
 8005292:	4601      	mov	r1, r0
 8005294:	6818      	ldr	r0, [r3, #0]
 8005296:	f7ff bc87 	b.w	8004ba8 <_free_r>
 800529a:	bf00      	nop
 800529c:	20000008 	.word	0x20000008

080052a0 <_malloc_r>:
 80052a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052a4:	f101 060b 	add.w	r6, r1, #11
 80052a8:	2e16      	cmp	r6, #22
 80052aa:	b083      	sub	sp, #12
 80052ac:	4604      	mov	r4, r0
 80052ae:	d824      	bhi.n	80052fa <_malloc_r+0x5a>
 80052b0:	2910      	cmp	r1, #16
 80052b2:	f200 80ba 	bhi.w	800542a <_malloc_r+0x18a>
 80052b6:	f000 fc09 	bl	8005acc <__malloc_lock>
 80052ba:	2610      	movs	r6, #16
 80052bc:	2218      	movs	r2, #24
 80052be:	2002      	movs	r0, #2
 80052c0:	4fb7      	ldr	r7, [pc, #732]	; (80055a0 <_malloc_r+0x300>)
 80052c2:	443a      	add	r2, r7
 80052c4:	f1a2 0108 	sub.w	r1, r2, #8
 80052c8:	6853      	ldr	r3, [r2, #4]
 80052ca:	428b      	cmp	r3, r1
 80052cc:	f000 80ba 	beq.w	8005444 <_malloc_r+0x1a4>
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	68d9      	ldr	r1, [r3, #12]
 80052d4:	f022 0203 	bic.w	r2, r2, #3
 80052d8:	441a      	add	r2, r3
 80052da:	689d      	ldr	r5, [r3, #8]
 80052dc:	60e9      	str	r1, [r5, #12]
 80052de:	608d      	str	r5, [r1, #8]
 80052e0:	6851      	ldr	r1, [r2, #4]
 80052e2:	f041 0101 	orr.w	r1, r1, #1
 80052e6:	4620      	mov	r0, r4
 80052e8:	6051      	str	r1, [r2, #4]
 80052ea:	f103 0508 	add.w	r5, r3, #8
 80052ee:	f000 fbef 	bl	8005ad0 <__malloc_unlock>
 80052f2:	4628      	mov	r0, r5
 80052f4:	b003      	add	sp, #12
 80052f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052fa:	f036 0607 	bics.w	r6, r6, #7
 80052fe:	f100 8094 	bmi.w	800542a <_malloc_r+0x18a>
 8005302:	42b1      	cmp	r1, r6
 8005304:	f200 8091 	bhi.w	800542a <_malloc_r+0x18a>
 8005308:	f000 fbe0 	bl	8005acc <__malloc_lock>
 800530c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
 8005310:	f0c0 8196 	bcc.w	8005640 <_malloc_r+0x3a0>
 8005314:	0a73      	lsrs	r3, r6, #9
 8005316:	f000 808f 	beq.w	8005438 <_malloc_r+0x198>
 800531a:	2b04      	cmp	r3, #4
 800531c:	f200 816b 	bhi.w	80055f6 <_malloc_r+0x356>
 8005320:	09b3      	lsrs	r3, r6, #6
 8005322:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8005326:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 800532a:	00c3      	lsls	r3, r0, #3
 800532c:	4f9c      	ldr	r7, [pc, #624]	; (80055a0 <_malloc_r+0x300>)
 800532e:	443b      	add	r3, r7
 8005330:	f1a3 0508 	sub.w	r5, r3, #8
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	429d      	cmp	r5, r3
 8005338:	d106      	bne.n	8005348 <_malloc_r+0xa8>
 800533a:	e00c      	b.n	8005356 <_malloc_r+0xb6>
 800533c:	2900      	cmp	r1, #0
 800533e:	f280 812b 	bge.w	8005598 <_malloc_r+0x2f8>
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	429d      	cmp	r5, r3
 8005346:	d006      	beq.n	8005356 <_malloc_r+0xb6>
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	f022 0203 	bic.w	r2, r2, #3
 800534e:	1b91      	subs	r1, r2, r6
 8005350:	290f      	cmp	r1, #15
 8005352:	ddf3      	ble.n	800533c <_malloc_r+0x9c>
 8005354:	4660      	mov	r0, ip
 8005356:	693d      	ldr	r5, [r7, #16]
 8005358:	f8df c248 	ldr.w	ip, [pc, #584]	; 80055a4 <_malloc_r+0x304>
 800535c:	4565      	cmp	r5, ip
 800535e:	d07c      	beq.n	800545a <_malloc_r+0x1ba>
 8005360:	686a      	ldr	r2, [r5, #4]
 8005362:	f022 0203 	bic.w	r2, r2, #3
 8005366:	1b93      	subs	r3, r2, r6
 8005368:	2b0f      	cmp	r3, #15
 800536a:	f300 8177 	bgt.w	800565c <_malloc_r+0x3bc>
 800536e:	2b00      	cmp	r3, #0
 8005370:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 8005374:	f280 8168 	bge.w	8005648 <_malloc_r+0x3a8>
 8005378:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800537c:	f080 8116 	bcs.w	80055ac <_malloc_r+0x30c>
 8005380:	08d3      	lsrs	r3, r2, #3
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	3301      	adds	r3, #1
 8005386:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 800538a:	2201      	movs	r2, #1
 800538c:	fa02 f20e 	lsl.w	r2, r2, lr
 8005390:	430a      	orrs	r2, r1
 8005392:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
 8005396:	f8c5 e008 	str.w	lr, [r5, #8]
 800539a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 800539e:	3908      	subs	r1, #8
 80053a0:	60e9      	str	r1, [r5, #12]
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 80053a8:	f8ce 500c 	str.w	r5, [lr, #12]
 80053ac:	1083      	asrs	r3, r0, #2
 80053ae:	2101      	movs	r1, #1
 80053b0:	4099      	lsls	r1, r3
 80053b2:	4291      	cmp	r1, r2
 80053b4:	d857      	bhi.n	8005466 <_malloc_r+0x1c6>
 80053b6:	4211      	tst	r1, r2
 80053b8:	d106      	bne.n	80053c8 <_malloc_r+0x128>
 80053ba:	f020 0003 	bic.w	r0, r0, #3
 80053be:	0049      	lsls	r1, r1, #1
 80053c0:	4211      	tst	r1, r2
 80053c2:	f100 0004 	add.w	r0, r0, #4
 80053c6:	d0fa      	beq.n	80053be <_malloc_r+0x11e>
 80053c8:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 80053cc:	464d      	mov	r5, r9
 80053ce:	4686      	mov	lr, r0
 80053d0:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80053d4:	4545      	cmp	r5, r8
 80053d6:	d108      	bne.n	80053ea <_malloc_r+0x14a>
 80053d8:	e119      	b.n	800560e <_malloc_r+0x36e>
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f280 8120 	bge.w	8005620 <_malloc_r+0x380>
 80053e0:	f8d8 800c 	ldr.w	r8, [r8, #12]
 80053e4:	4545      	cmp	r5, r8
 80053e6:	f000 8112 	beq.w	800560e <_malloc_r+0x36e>
 80053ea:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80053ee:	f022 0203 	bic.w	r2, r2, #3
 80053f2:	1b93      	subs	r3, r2, r6
 80053f4:	2b0f      	cmp	r3, #15
 80053f6:	ddf0      	ble.n	80053da <_malloc_r+0x13a>
 80053f8:	4620      	mov	r0, r4
 80053fa:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
 80053fe:	eb08 0106 	add.w	r1, r8, r6
 8005402:	f046 0601 	orr.w	r6, r6, #1
 8005406:	f8c8 6004 	str.w	r6, [r8, #4]
 800540a:	60ec      	str	r4, [r5, #12]
 800540c:	60a5      	str	r5, [r4, #8]
 800540e:	f043 0401 	orr.w	r4, r3, #1
 8005412:	e9c7 1104 	strd	r1, r1, [r7, #16]
 8005416:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 800541a:	604c      	str	r4, [r1, #4]
 800541c:	f848 3002 	str.w	r3, [r8, r2]
 8005420:	f000 fb56 	bl	8005ad0 <__malloc_unlock>
 8005424:	f108 0508 	add.w	r5, r8, #8
 8005428:	e002      	b.n	8005430 <_malloc_r+0x190>
 800542a:	230c      	movs	r3, #12
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	2500      	movs	r5, #0
 8005430:	4628      	mov	r0, r5
 8005432:	b003      	add	sp, #12
 8005434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005438:	f44f 7300 	mov.w	r3, #512	; 0x200
 800543c:	2040      	movs	r0, #64	; 0x40
 800543e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 8005442:	e773      	b.n	800532c <_malloc_r+0x8c>
 8005444:	68d3      	ldr	r3, [r2, #12]
 8005446:	429a      	cmp	r2, r3
 8005448:	bf08      	it	eq
 800544a:	3002      	addeq	r0, #2
 800544c:	f47f af40 	bne.w	80052d0 <_malloc_r+0x30>
 8005450:	693d      	ldr	r5, [r7, #16]
 8005452:	f8df c150 	ldr.w	ip, [pc, #336]	; 80055a4 <_malloc_r+0x304>
 8005456:	4565      	cmp	r5, ip
 8005458:	d182      	bne.n	8005360 <_malloc_r+0xc0>
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	1083      	asrs	r3, r0, #2
 800545e:	2101      	movs	r1, #1
 8005460:	4099      	lsls	r1, r3
 8005462:	4291      	cmp	r1, r2
 8005464:	d9a7      	bls.n	80053b6 <_malloc_r+0x116>
 8005466:	68bd      	ldr	r5, [r7, #8]
 8005468:	686b      	ldr	r3, [r5, #4]
 800546a:	f023 0803 	bic.w	r8, r3, #3
 800546e:	4546      	cmp	r6, r8
 8005470:	d803      	bhi.n	800547a <_malloc_r+0x1da>
 8005472:	eba8 0306 	sub.w	r3, r8, r6
 8005476:	2b0f      	cmp	r3, #15
 8005478:	dc7e      	bgt.n	8005578 <_malloc_r+0x2d8>
 800547a:	f8df 912c 	ldr.w	r9, [pc, #300]	; 80055a8 <_malloc_r+0x308>
 800547e:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8005482:	f8d9 3000 	ldr.w	r3, [r9]
 8005486:	3201      	adds	r2, #1
 8005488:	4433      	add	r3, r6
 800548a:	eb05 0a08 	add.w	sl, r5, r8
 800548e:	f000 812f 	beq.w	80056f0 <_malloc_r+0x450>
 8005492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005496:	330f      	adds	r3, #15
 8005498:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
 800549c:	f02b 0b0f 	bic.w	fp, fp, #15
 80054a0:	4659      	mov	r1, fp
 80054a2:	4620      	mov	r0, r4
 80054a4:	f004 fe24 	bl	800a0f0 <_sbrk_r>
 80054a8:	1c41      	adds	r1, r0, #1
 80054aa:	4602      	mov	r2, r0
 80054ac:	f000 80ef 	beq.w	800568e <_malloc_r+0x3ee>
 80054b0:	4582      	cmp	sl, r0
 80054b2:	f200 80ea 	bhi.w	800568a <_malloc_r+0x3ea>
 80054b6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80054ba:	4459      	add	r1, fp
 80054bc:	f8c9 1004 	str.w	r1, [r9, #4]
 80054c0:	460b      	mov	r3, r1
 80054c2:	f000 814b 	beq.w	800575c <_malloc_r+0x4bc>
 80054c6:	f8d7 1408 	ldr.w	r1, [r7, #1032]	; 0x408
 80054ca:	3101      	adds	r1, #1
 80054cc:	bf1b      	ittet	ne
 80054ce:	eba2 0a0a 	subne.w	sl, r2, sl
 80054d2:	4453      	addne	r3, sl
 80054d4:	f8c7 2408 	streq.w	r2, [r7, #1032]	; 0x408
 80054d8:	f8c9 3004 	strne.w	r3, [r9, #4]
 80054dc:	f012 0307 	ands.w	r3, r2, #7
 80054e0:	f000 8112 	beq.w	8005708 <_malloc_r+0x468>
 80054e4:	f1c3 0108 	rsb	r1, r3, #8
 80054e8:	440a      	add	r2, r1
 80054ea:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 80054ee:	4493      	add	fp, r2
 80054f0:	3108      	adds	r1, #8
 80054f2:	eba1 010b 	sub.w	r1, r1, fp
 80054f6:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 80054fa:	4651      	mov	r1, sl
 80054fc:	4620      	mov	r0, r4
 80054fe:	9201      	str	r2, [sp, #4]
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	f004 fdf5 	bl	800a0f0 <_sbrk_r>
 8005506:	1c42      	adds	r2, r0, #1
 8005508:	e9dd 3200 	ldrd	r3, r2, [sp]
 800550c:	f000 814b 	beq.w	80057a6 <_malloc_r+0x506>
 8005510:	1a83      	subs	r3, r0, r2
 8005512:	eb03 0b0a 	add.w	fp, r3, sl
 8005516:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800551a:	60ba      	str	r2, [r7, #8]
 800551c:	f04b 0301 	orr.w	r3, fp, #1
 8005520:	eb0a 0100 	add.w	r1, sl, r0
 8005524:	42bd      	cmp	r5, r7
 8005526:	6053      	str	r3, [r2, #4]
 8005528:	f8c9 1004 	str.w	r1, [r9, #4]
 800552c:	f000 8122 	beq.w	8005774 <_malloc_r+0x4d4>
 8005530:	f1b8 0f0f 	cmp.w	r8, #15
 8005534:	f240 8120 	bls.w	8005778 <_malloc_r+0x4d8>
 8005538:	686b      	ldr	r3, [r5, #4]
 800553a:	f1a8 000c 	sub.w	r0, r8, #12
 800553e:	f020 0007 	bic.w	r0, r0, #7
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	4303      	orrs	r3, r0
 8005548:	606b      	str	r3, [r5, #4]
 800554a:	f04f 0c05 	mov.w	ip, #5
 800554e:	182b      	adds	r3, r5, r0
 8005550:	280f      	cmp	r0, #15
 8005552:	e9c3 cc01 	strd	ip, ip, [r3, #4]
 8005556:	f200 812d 	bhi.w	80057b4 <_malloc_r+0x514>
 800555a:	6853      	ldr	r3, [r2, #4]
 800555c:	4615      	mov	r5, r2
 800555e:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 8005562:	428a      	cmp	r2, r1
 8005564:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
 8005568:	bf38      	it	cc
 800556a:	f8c9 102c 	strcc.w	r1, [r9, #44]	; 0x2c
 800556e:	428a      	cmp	r2, r1
 8005570:	bf38      	it	cc
 8005572:	f8c9 1030 	strcc.w	r1, [r9, #48]	; 0x30
 8005576:	e08c      	b.n	8005692 <_malloc_r+0x3f2>
 8005578:	19aa      	adds	r2, r5, r6
 800557a:	f043 0301 	orr.w	r3, r3, #1
 800557e:	f046 0601 	orr.w	r6, r6, #1
 8005582:	606e      	str	r6, [r5, #4]
 8005584:	4620      	mov	r0, r4
 8005586:	60ba      	str	r2, [r7, #8]
 8005588:	6053      	str	r3, [r2, #4]
 800558a:	f000 faa1 	bl	8005ad0 <__malloc_unlock>
 800558e:	3508      	adds	r5, #8
 8005590:	4628      	mov	r0, r5
 8005592:	b003      	add	sp, #12
 8005594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005598:	68d9      	ldr	r1, [r3, #12]
 800559a:	441a      	add	r2, r3
 800559c:	e69d      	b.n	80052da <_malloc_r+0x3a>
 800559e:	bf00      	nop
 80055a0:	20000438 	.word	0x20000438
 80055a4:	20000440 	.word	0x20000440
 80055a8:	20000c40 	.word	0x20000c40
 80055ac:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 80055b0:	ea4f 2352 	mov.w	r3, r2, lsr #9
 80055b4:	d363      	bcc.n	800567e <_malloc_r+0x3de>
 80055b6:	2b14      	cmp	r3, #20
 80055b8:	f200 80b8 	bhi.w	800572c <_malloc_r+0x48c>
 80055bc:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 80055c0:	00c9      	lsls	r1, r1, #3
 80055c2:	335b      	adds	r3, #91	; 0x5b
 80055c4:	eb07 0e01 	add.w	lr, r7, r1
 80055c8:	5879      	ldr	r1, [r7, r1]
 80055ca:	f1ae 0e08 	sub.w	lr, lr, #8
 80055ce:	458e      	cmp	lr, r1
 80055d0:	f000 8091 	beq.w	80056f6 <_malloc_r+0x456>
 80055d4:	684b      	ldr	r3, [r1, #4]
 80055d6:	f023 0303 	bic.w	r3, r3, #3
 80055da:	4293      	cmp	r3, r2
 80055dc:	d902      	bls.n	80055e4 <_malloc_r+0x344>
 80055de:	6889      	ldr	r1, [r1, #8]
 80055e0:	458e      	cmp	lr, r1
 80055e2:	d1f7      	bne.n	80055d4 <_malloc_r+0x334>
 80055e4:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	e9c5 1e02 	strd	r1, lr, [r5, #8]
 80055ee:	f8ce 5008 	str.w	r5, [lr, #8]
 80055f2:	60cd      	str	r5, [r1, #12]
 80055f4:	e6da      	b.n	80053ac <_malloc_r+0x10c>
 80055f6:	2b14      	cmp	r3, #20
 80055f8:	d959      	bls.n	80056ae <_malloc_r+0x40e>
 80055fa:	2b54      	cmp	r3, #84	; 0x54
 80055fc:	f200 809e 	bhi.w	800573c <_malloc_r+0x49c>
 8005600:	0b33      	lsrs	r3, r6, #12
 8005602:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8005606:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 800560a:	00c3      	lsls	r3, r0, #3
 800560c:	e68e      	b.n	800532c <_malloc_r+0x8c>
 800560e:	f10e 0e01 	add.w	lr, lr, #1
 8005612:	f01e 0f03 	tst.w	lr, #3
 8005616:	f105 0508 	add.w	r5, r5, #8
 800561a:	f47f aed9 	bne.w	80053d0 <_malloc_r+0x130>
 800561e:	e051      	b.n	80056c4 <_malloc_r+0x424>
 8005620:	4442      	add	r2, r8
 8005622:	4645      	mov	r5, r8
 8005624:	6853      	ldr	r3, [r2, #4]
 8005626:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800562a:	f043 0301 	orr.w	r3, r3, #1
 800562e:	6053      	str	r3, [r2, #4]
 8005630:	f855 3f08 	ldr.w	r3, [r5, #8]!
 8005634:	4620      	mov	r0, r4
 8005636:	60d9      	str	r1, [r3, #12]
 8005638:	608b      	str	r3, [r1, #8]
 800563a:	f000 fa49 	bl	8005ad0 <__malloc_unlock>
 800563e:	e6f7      	b.n	8005430 <_malloc_r+0x190>
 8005640:	08f0      	lsrs	r0, r6, #3
 8005642:	f106 0208 	add.w	r2, r6, #8
 8005646:	e63b      	b.n	80052c0 <_malloc_r+0x20>
 8005648:	442a      	add	r2, r5
 800564a:	4620      	mov	r0, r4
 800564c:	6853      	ldr	r3, [r2, #4]
 800564e:	f043 0301 	orr.w	r3, r3, #1
 8005652:	6053      	str	r3, [r2, #4]
 8005654:	3508      	adds	r5, #8
 8005656:	f000 fa3b 	bl	8005ad0 <__malloc_unlock>
 800565a:	e6e9      	b.n	8005430 <_malloc_r+0x190>
 800565c:	19a9      	adds	r1, r5, r6
 800565e:	4620      	mov	r0, r4
 8005660:	f046 0601 	orr.w	r6, r6, #1
 8005664:	f043 0401 	orr.w	r4, r3, #1
 8005668:	606e      	str	r6, [r5, #4]
 800566a:	e9c7 1104 	strd	r1, r1, [r7, #16]
 800566e:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 8005672:	604c      	str	r4, [r1, #4]
 8005674:	50ab      	str	r3, [r5, r2]
 8005676:	f000 fa2b 	bl	8005ad0 <__malloc_unlock>
 800567a:	3508      	adds	r5, #8
 800567c:	e6d8      	b.n	8005430 <_malloc_r+0x190>
 800567e:	0993      	lsrs	r3, r2, #6
 8005680:	f103 0139 	add.w	r1, r3, #57	; 0x39
 8005684:	00c9      	lsls	r1, r1, #3
 8005686:	3338      	adds	r3, #56	; 0x38
 8005688:	e79c      	b.n	80055c4 <_malloc_r+0x324>
 800568a:	42bd      	cmp	r5, r7
 800568c:	d060      	beq.n	8005750 <_malloc_r+0x4b0>
 800568e:	68bd      	ldr	r5, [r7, #8]
 8005690:	686b      	ldr	r3, [r5, #4]
 8005692:	f023 0b03 	bic.w	fp, r3, #3
 8005696:	455e      	cmp	r6, fp
 8005698:	ebab 0306 	sub.w	r3, fp, r6
 800569c:	d802      	bhi.n	80056a4 <_malloc_r+0x404>
 800569e:	2b0f      	cmp	r3, #15
 80056a0:	f73f af6a 	bgt.w	8005578 <_malloc_r+0x2d8>
 80056a4:	4620      	mov	r0, r4
 80056a6:	f000 fa13 	bl	8005ad0 <__malloc_unlock>
 80056aa:	2500      	movs	r5, #0
 80056ac:	e6c0      	b.n	8005430 <_malloc_r+0x190>
 80056ae:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 80056b2:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 80056b6:	00c3      	lsls	r3, r0, #3
 80056b8:	e638      	b.n	800532c <_malloc_r+0x8c>
 80056ba:	f859 3908 	ldr.w	r3, [r9], #-8
 80056be:	454b      	cmp	r3, r9
 80056c0:	f040 8096 	bne.w	80057f0 <_malloc_r+0x550>
 80056c4:	f010 0f03 	tst.w	r0, #3
 80056c8:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80056cc:	d1f5      	bne.n	80056ba <_malloc_r+0x41a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	ea23 0301 	bic.w	r3, r3, r1
 80056d4:	607b      	str	r3, [r7, #4]
 80056d6:	0049      	lsls	r1, r1, #1
 80056d8:	4299      	cmp	r1, r3
 80056da:	f63f aec4 	bhi.w	8005466 <_malloc_r+0x1c6>
 80056de:	b919      	cbnz	r1, 80056e8 <_malloc_r+0x448>
 80056e0:	e6c1      	b.n	8005466 <_malloc_r+0x1c6>
 80056e2:	0049      	lsls	r1, r1, #1
 80056e4:	f10e 0e04 	add.w	lr, lr, #4
 80056e8:	4219      	tst	r1, r3
 80056ea:	d0fa      	beq.n	80056e2 <_malloc_r+0x442>
 80056ec:	4670      	mov	r0, lr
 80056ee:	e66b      	b.n	80053c8 <_malloc_r+0x128>
 80056f0:	f103 0b10 	add.w	fp, r3, #16
 80056f4:	e6d4      	b.n	80054a0 <_malloc_r+0x200>
 80056f6:	109a      	asrs	r2, r3, #2
 80056f8:	f04f 0801 	mov.w	r8, #1
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	fa08 f202 	lsl.w	r2, r8, r2
 8005702:	431a      	orrs	r2, r3
 8005704:	607a      	str	r2, [r7, #4]
 8005706:	e770      	b.n	80055ea <_malloc_r+0x34a>
 8005708:	eb02 010b 	add.w	r1, r2, fp
 800570c:	4249      	negs	r1, r1
 800570e:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 8005712:	4651      	mov	r1, sl
 8005714:	4620      	mov	r0, r4
 8005716:	9301      	str	r3, [sp, #4]
 8005718:	9200      	str	r2, [sp, #0]
 800571a:	f004 fce9 	bl	800a0f0 <_sbrk_r>
 800571e:	1c43      	adds	r3, r0, #1
 8005720:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005724:	f47f aef4 	bne.w	8005510 <_malloc_r+0x270>
 8005728:	469a      	mov	sl, r3
 800572a:	e6f4      	b.n	8005516 <_malloc_r+0x276>
 800572c:	2b54      	cmp	r3, #84	; 0x54
 800572e:	d826      	bhi.n	800577e <_malloc_r+0x4de>
 8005730:	0b13      	lsrs	r3, r2, #12
 8005732:	f103 016f 	add.w	r1, r3, #111	; 0x6f
 8005736:	00c9      	lsls	r1, r1, #3
 8005738:	336e      	adds	r3, #110	; 0x6e
 800573a:	e743      	b.n	80055c4 <_malloc_r+0x324>
 800573c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005740:	d826      	bhi.n	8005790 <_malloc_r+0x4f0>
 8005742:	0bf3      	lsrs	r3, r6, #15
 8005744:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8005748:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 800574c:	00c3      	lsls	r3, r0, #3
 800574e:	e5ed      	b.n	800532c <_malloc_r+0x8c>
 8005750:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005754:	445b      	add	r3, fp
 8005756:	f8c9 3004 	str.w	r3, [r9, #4]
 800575a:	e6b4      	b.n	80054c6 <_malloc_r+0x226>
 800575c:	f3ca 000b 	ubfx	r0, sl, #0, #12
 8005760:	2800      	cmp	r0, #0
 8005762:	f47f aeb0 	bne.w	80054c6 <_malloc_r+0x226>
 8005766:	68bd      	ldr	r5, [r7, #8]
 8005768:	eb08 030b 	add.w	r3, r8, fp
 800576c:	f043 0301 	orr.w	r3, r3, #1
 8005770:	606b      	str	r3, [r5, #4]
 8005772:	e6f4      	b.n	800555e <_malloc_r+0x2be>
 8005774:	4615      	mov	r5, r2
 8005776:	e6f2      	b.n	800555e <_malloc_r+0x2be>
 8005778:	2301      	movs	r3, #1
 800577a:	6053      	str	r3, [r2, #4]
 800577c:	e792      	b.n	80056a4 <_malloc_r+0x404>
 800577e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005782:	d821      	bhi.n	80057c8 <_malloc_r+0x528>
 8005784:	0bd3      	lsrs	r3, r2, #15
 8005786:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800578a:	00c9      	lsls	r1, r1, #3
 800578c:	3377      	adds	r3, #119	; 0x77
 800578e:	e719      	b.n	80055c4 <_malloc_r+0x324>
 8005790:	f240 5254 	movw	r2, #1364	; 0x554
 8005794:	4293      	cmp	r3, r2
 8005796:	d821      	bhi.n	80057dc <_malloc_r+0x53c>
 8005798:	0cb3      	lsrs	r3, r6, #18
 800579a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 800579e:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 80057a2:	00c3      	lsls	r3, r0, #3
 80057a4:	e5c2      	b.n	800532c <_malloc_r+0x8c>
 80057a6:	3b08      	subs	r3, #8
 80057a8:	449b      	add	fp, r3
 80057aa:	ebab 0b02 	sub.w	fp, fp, r2
 80057ae:	f04f 0a00 	mov.w	sl, #0
 80057b2:	e6b0      	b.n	8005516 <_malloc_r+0x276>
 80057b4:	f105 0108 	add.w	r1, r5, #8
 80057b8:	4620      	mov	r0, r4
 80057ba:	f7ff f9f5 	bl	8004ba8 <_free_r>
 80057be:	68bd      	ldr	r5, [r7, #8]
 80057c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80057c4:	686b      	ldr	r3, [r5, #4]
 80057c6:	e6ca      	b.n	800555e <_malloc_r+0x2be>
 80057c8:	f240 5154 	movw	r1, #1364	; 0x554
 80057cc:	428b      	cmp	r3, r1
 80057ce:	d80b      	bhi.n	80057e8 <_malloc_r+0x548>
 80057d0:	0c93      	lsrs	r3, r2, #18
 80057d2:	f103 017d 	add.w	r1, r3, #125	; 0x7d
 80057d6:	00c9      	lsls	r1, r1, #3
 80057d8:	337c      	adds	r3, #124	; 0x7c
 80057da:	e6f3      	b.n	80055c4 <_malloc_r+0x324>
 80057dc:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80057e0:	207f      	movs	r0, #127	; 0x7f
 80057e2:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 80057e6:	e5a1      	b.n	800532c <_malloc_r+0x8c>
 80057e8:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80057ec:	237e      	movs	r3, #126	; 0x7e
 80057ee:	e6e9      	b.n	80055c4 <_malloc_r+0x324>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	e770      	b.n	80056d6 <_malloc_r+0x436>
	...

08005800 <memchr>:
 8005800:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005804:	2a10      	cmp	r2, #16
 8005806:	db2b      	blt.n	8005860 <memchr+0x60>
 8005808:	f010 0f07 	tst.w	r0, #7
 800580c:	d008      	beq.n	8005820 <memchr+0x20>
 800580e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005812:	3a01      	subs	r2, #1
 8005814:	428b      	cmp	r3, r1
 8005816:	d02d      	beq.n	8005874 <memchr+0x74>
 8005818:	f010 0f07 	tst.w	r0, #7
 800581c:	b342      	cbz	r2, 8005870 <memchr+0x70>
 800581e:	d1f6      	bne.n	800580e <memchr+0xe>
 8005820:	b4f0      	push	{r4, r5, r6, r7}
 8005822:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8005826:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800582a:	f022 0407 	bic.w	r4, r2, #7
 800582e:	f07f 0700 	mvns.w	r7, #0
 8005832:	2300      	movs	r3, #0
 8005834:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8005838:	3c08      	subs	r4, #8
 800583a:	ea85 0501 	eor.w	r5, r5, r1
 800583e:	ea86 0601 	eor.w	r6, r6, r1
 8005842:	fa85 f547 	uadd8	r5, r5, r7
 8005846:	faa3 f587 	sel	r5, r3, r7
 800584a:	fa86 f647 	uadd8	r6, r6, r7
 800584e:	faa5 f687 	sel	r6, r5, r7
 8005852:	b98e      	cbnz	r6, 8005878 <memchr+0x78>
 8005854:	d1ee      	bne.n	8005834 <memchr+0x34>
 8005856:	bcf0      	pop	{r4, r5, r6, r7}
 8005858:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800585c:	f002 0207 	and.w	r2, r2, #7
 8005860:	b132      	cbz	r2, 8005870 <memchr+0x70>
 8005862:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005866:	3a01      	subs	r2, #1
 8005868:	ea83 0301 	eor.w	r3, r3, r1
 800586c:	b113      	cbz	r3, 8005874 <memchr+0x74>
 800586e:	d1f8      	bne.n	8005862 <memchr+0x62>
 8005870:	2000      	movs	r0, #0
 8005872:	4770      	bx	lr
 8005874:	3801      	subs	r0, #1
 8005876:	4770      	bx	lr
 8005878:	2d00      	cmp	r5, #0
 800587a:	bf06      	itte	eq
 800587c:	4635      	moveq	r5, r6
 800587e:	3803      	subeq	r0, #3
 8005880:	3807      	subne	r0, #7
 8005882:	f015 0f01 	tst.w	r5, #1
 8005886:	d107      	bne.n	8005898 <memchr+0x98>
 8005888:	3001      	adds	r0, #1
 800588a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800588e:	bf02      	ittt	eq
 8005890:	3001      	addeq	r0, #1
 8005892:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8005896:	3001      	addeq	r0, #1
 8005898:	bcf0      	pop	{r4, r5, r6, r7}
 800589a:	3801      	subs	r0, #1
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop

080058a0 <memcpy>:
 80058a0:	4684      	mov	ip, r0
 80058a2:	ea41 0300 	orr.w	r3, r1, r0
 80058a6:	f013 0303 	ands.w	r3, r3, #3
 80058aa:	d16d      	bne.n	8005988 <memcpy+0xe8>
 80058ac:	3a40      	subs	r2, #64	; 0x40
 80058ae:	d341      	bcc.n	8005934 <memcpy+0x94>
 80058b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80058b4:	f840 3b04 	str.w	r3, [r0], #4
 80058b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80058bc:	f840 3b04 	str.w	r3, [r0], #4
 80058c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80058c4:	f840 3b04 	str.w	r3, [r0], #4
 80058c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80058cc:	f840 3b04 	str.w	r3, [r0], #4
 80058d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80058d4:	f840 3b04 	str.w	r3, [r0], #4
 80058d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80058dc:	f840 3b04 	str.w	r3, [r0], #4
 80058e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80058e4:	f840 3b04 	str.w	r3, [r0], #4
 80058e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80058ec:	f840 3b04 	str.w	r3, [r0], #4
 80058f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80058f4:	f840 3b04 	str.w	r3, [r0], #4
 80058f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80058fc:	f840 3b04 	str.w	r3, [r0], #4
 8005900:	f851 3b04 	ldr.w	r3, [r1], #4
 8005904:	f840 3b04 	str.w	r3, [r0], #4
 8005908:	f851 3b04 	ldr.w	r3, [r1], #4
 800590c:	f840 3b04 	str.w	r3, [r0], #4
 8005910:	f851 3b04 	ldr.w	r3, [r1], #4
 8005914:	f840 3b04 	str.w	r3, [r0], #4
 8005918:	f851 3b04 	ldr.w	r3, [r1], #4
 800591c:	f840 3b04 	str.w	r3, [r0], #4
 8005920:	f851 3b04 	ldr.w	r3, [r1], #4
 8005924:	f840 3b04 	str.w	r3, [r0], #4
 8005928:	f851 3b04 	ldr.w	r3, [r1], #4
 800592c:	f840 3b04 	str.w	r3, [r0], #4
 8005930:	3a40      	subs	r2, #64	; 0x40
 8005932:	d2bd      	bcs.n	80058b0 <memcpy+0x10>
 8005934:	3230      	adds	r2, #48	; 0x30
 8005936:	d311      	bcc.n	800595c <memcpy+0xbc>
 8005938:	f851 3b04 	ldr.w	r3, [r1], #4
 800593c:	f840 3b04 	str.w	r3, [r0], #4
 8005940:	f851 3b04 	ldr.w	r3, [r1], #4
 8005944:	f840 3b04 	str.w	r3, [r0], #4
 8005948:	f851 3b04 	ldr.w	r3, [r1], #4
 800594c:	f840 3b04 	str.w	r3, [r0], #4
 8005950:	f851 3b04 	ldr.w	r3, [r1], #4
 8005954:	f840 3b04 	str.w	r3, [r0], #4
 8005958:	3a10      	subs	r2, #16
 800595a:	d2ed      	bcs.n	8005938 <memcpy+0x98>
 800595c:	320c      	adds	r2, #12
 800595e:	d305      	bcc.n	800596c <memcpy+0xcc>
 8005960:	f851 3b04 	ldr.w	r3, [r1], #4
 8005964:	f840 3b04 	str.w	r3, [r0], #4
 8005968:	3a04      	subs	r2, #4
 800596a:	d2f9      	bcs.n	8005960 <memcpy+0xc0>
 800596c:	3204      	adds	r2, #4
 800596e:	d008      	beq.n	8005982 <memcpy+0xe2>
 8005970:	07d2      	lsls	r2, r2, #31
 8005972:	bf1c      	itt	ne
 8005974:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8005978:	f800 3b01 	strbne.w	r3, [r0], #1
 800597c:	d301      	bcc.n	8005982 <memcpy+0xe2>
 800597e:	880b      	ldrh	r3, [r1, #0]
 8005980:	8003      	strh	r3, [r0, #0]
 8005982:	4660      	mov	r0, ip
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	2a08      	cmp	r2, #8
 800598a:	d313      	bcc.n	80059b4 <memcpy+0x114>
 800598c:	078b      	lsls	r3, r1, #30
 800598e:	d08d      	beq.n	80058ac <memcpy+0xc>
 8005990:	f010 0303 	ands.w	r3, r0, #3
 8005994:	d08a      	beq.n	80058ac <memcpy+0xc>
 8005996:	f1c3 0304 	rsb	r3, r3, #4
 800599a:	1ad2      	subs	r2, r2, r3
 800599c:	07db      	lsls	r3, r3, #31
 800599e:	bf1c      	itt	ne
 80059a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80059a4:	f800 3b01 	strbne.w	r3, [r0], #1
 80059a8:	d380      	bcc.n	80058ac <memcpy+0xc>
 80059aa:	f831 3b02 	ldrh.w	r3, [r1], #2
 80059ae:	f820 3b02 	strh.w	r3, [r0], #2
 80059b2:	e77b      	b.n	80058ac <memcpy+0xc>
 80059b4:	3a04      	subs	r2, #4
 80059b6:	d3d9      	bcc.n	800596c <memcpy+0xcc>
 80059b8:	3a01      	subs	r2, #1
 80059ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059be:	f800 3b01 	strb.w	r3, [r0], #1
 80059c2:	d2f9      	bcs.n	80059b8 <memcpy+0x118>
 80059c4:	780b      	ldrb	r3, [r1, #0]
 80059c6:	7003      	strb	r3, [r0, #0]
 80059c8:	784b      	ldrb	r3, [r1, #1]
 80059ca:	7043      	strb	r3, [r0, #1]
 80059cc:	788b      	ldrb	r3, [r1, #2]
 80059ce:	7083      	strb	r3, [r0, #2]
 80059d0:	4660      	mov	r0, ip
 80059d2:	4770      	bx	lr

080059d4 <memmove>:
 80059d4:	4288      	cmp	r0, r1
 80059d6:	d90d      	bls.n	80059f4 <memmove+0x20>
 80059d8:	188b      	adds	r3, r1, r2
 80059da:	4283      	cmp	r3, r0
 80059dc:	d90a      	bls.n	80059f4 <memmove+0x20>
 80059de:	eb00 0c02 	add.w	ip, r0, r2
 80059e2:	b1ba      	cbz	r2, 8005a14 <memmove+0x40>
 80059e4:	4662      	mov	r2, ip
 80059e6:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 80059ea:	f802 cd01 	strb.w	ip, [r2, #-1]!
 80059ee:	4299      	cmp	r1, r3
 80059f0:	d1f9      	bne.n	80059e6 <memmove+0x12>
 80059f2:	4770      	bx	lr
 80059f4:	2a0f      	cmp	r2, #15
 80059f6:	d80e      	bhi.n	8005a16 <memmove+0x42>
 80059f8:	4603      	mov	r3, r0
 80059fa:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 80059fe:	b14a      	cbz	r2, 8005a14 <memmove+0x40>
 8005a00:	f10c 0c01 	add.w	ip, ip, #1
 8005a04:	3b01      	subs	r3, #1
 8005a06:	448c      	add	ip, r1
 8005a08:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a0c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a10:	4561      	cmp	r1, ip
 8005a12:	d1f9      	bne.n	8005a08 <memmove+0x34>
 8005a14:	4770      	bx	lr
 8005a16:	ea40 0301 	orr.w	r3, r0, r1
 8005a1a:	079b      	lsls	r3, r3, #30
 8005a1c:	d150      	bne.n	8005ac0 <memmove+0xec>
 8005a1e:	f1a2 0310 	sub.w	r3, r2, #16
 8005a22:	b570      	push	{r4, r5, r6, lr}
 8005a24:	f101 0c20 	add.w	ip, r1, #32
 8005a28:	f023 050f 	bic.w	r5, r3, #15
 8005a2c:	f101 0e10 	add.w	lr, r1, #16
 8005a30:	f100 0410 	add.w	r4, r0, #16
 8005a34:	44ac      	add	ip, r5
 8005a36:	091b      	lsrs	r3, r3, #4
 8005a38:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 8005a3c:	f844 5c10 	str.w	r5, [r4, #-16]
 8005a40:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 8005a44:	f844 5c0c 	str.w	r5, [r4, #-12]
 8005a48:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 8005a4c:	f844 5c08 	str.w	r5, [r4, #-8]
 8005a50:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 8005a54:	f844 5c04 	str.w	r5, [r4, #-4]
 8005a58:	f10e 0e10 	add.w	lr, lr, #16
 8005a5c:	45e6      	cmp	lr, ip
 8005a5e:	f104 0410 	add.w	r4, r4, #16
 8005a62:	d1e9      	bne.n	8005a38 <memmove+0x64>
 8005a64:	3301      	adds	r3, #1
 8005a66:	f012 0f0c 	tst.w	r2, #12
 8005a6a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8005a6e:	f002 040f 	and.w	r4, r2, #15
 8005a72:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8005a76:	d027      	beq.n	8005ac8 <memmove+0xf4>
 8005a78:	3c04      	subs	r4, #4
 8005a7a:	f024 0603 	bic.w	r6, r4, #3
 8005a7e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 8005a82:	441e      	add	r6, r3
 8005a84:	1f1c      	subs	r4, r3, #4
 8005a86:	468e      	mov	lr, r1
 8005a88:	f85e 5b04 	ldr.w	r5, [lr], #4
 8005a8c:	f844 5f04 	str.w	r5, [r4, #4]!
 8005a90:	42b4      	cmp	r4, r6
 8005a92:	d1f9      	bne.n	8005a88 <memmove+0xb4>
 8005a94:	f10c 0401 	add.w	r4, ip, #1
 8005a98:	f002 0203 	and.w	r2, r2, #3
 8005a9c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005aa0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005aa4:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8005aa8:	b14a      	cbz	r2, 8005abe <memmove+0xea>
 8005aaa:	f10c 0c01 	add.w	ip, ip, #1
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	448c      	add	ip, r1
 8005ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005aba:	4561      	cmp	r1, ip
 8005abc:	d1f9      	bne.n	8005ab2 <memmove+0xde>
 8005abe:	bd70      	pop	{r4, r5, r6, pc}
 8005ac0:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	e79b      	b.n	8005a00 <memmove+0x2c>
 8005ac8:	4622      	mov	r2, r4
 8005aca:	e7eb      	b.n	8005aa4 <memmove+0xd0>

08005acc <__malloc_lock>:
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop

08005ad0 <__malloc_unlock>:
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop

08005ad4 <_Balloc>:
 8005ad4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005ad6:	b570      	push	{r4, r5, r6, lr}
 8005ad8:	4605      	mov	r5, r0
 8005ada:	460c      	mov	r4, r1
 8005adc:	b14b      	cbz	r3, 8005af2 <_Balloc+0x1e>
 8005ade:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005ae2:	b180      	cbz	r0, 8005b06 <_Balloc+0x32>
 8005ae4:	6802      	ldr	r2, [r0, #0]
 8005ae6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8005aea:	2300      	movs	r3, #0
 8005aec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005af0:	bd70      	pop	{r4, r5, r6, pc}
 8005af2:	2221      	movs	r2, #33	; 0x21
 8005af4:	2104      	movs	r1, #4
 8005af6:	f002 fca3 	bl	8008440 <_calloc_r>
 8005afa:	4603      	mov	r3, r0
 8005afc:	64e8      	str	r0, [r5, #76]	; 0x4c
 8005afe:	2800      	cmp	r0, #0
 8005b00:	d1ed      	bne.n	8005ade <_Balloc+0xa>
 8005b02:	2000      	movs	r0, #0
 8005b04:	bd70      	pop	{r4, r5, r6, pc}
 8005b06:	2101      	movs	r1, #1
 8005b08:	fa01 f604 	lsl.w	r6, r1, r4
 8005b0c:	1d72      	adds	r2, r6, #5
 8005b0e:	0092      	lsls	r2, r2, #2
 8005b10:	4628      	mov	r0, r5
 8005b12:	f002 fc95 	bl	8008440 <_calloc_r>
 8005b16:	2800      	cmp	r0, #0
 8005b18:	d0f3      	beq.n	8005b02 <_Balloc+0x2e>
 8005b1a:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8005b1e:	e7e4      	b.n	8005aea <_Balloc+0x16>

08005b20 <_Bfree>:
 8005b20:	b131      	cbz	r1, 8005b30 <_Bfree+0x10>
 8005b22:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005b24:	684a      	ldr	r2, [r1, #4]
 8005b26:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005b2a:	6008      	str	r0, [r1, #0]
 8005b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop

08005b34 <__multadd>:
 8005b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b36:	690c      	ldr	r4, [r1, #16]
 8005b38:	4606      	mov	r6, r0
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	460d      	mov	r5, r1
 8005b3e:	f101 0e14 	add.w	lr, r1, #20
 8005b42:	2000      	movs	r0, #0
 8005b44:	f8de 1000 	ldr.w	r1, [lr]
 8005b48:	fa1f fc81 	uxth.w	ip, r1
 8005b4c:	fb02 330c 	mla	r3, r2, ip, r3
 8005b50:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8005b54:	0c09      	lsrs	r1, r1, #16
 8005b56:	fb02 cc01 	mla	ip, r2, r1, ip
 8005b5a:	3001      	adds	r0, #1
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 8005b62:	4284      	cmp	r4, r0
 8005b64:	f84e 3b04 	str.w	r3, [lr], #4
 8005b68:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8005b6c:	dcea      	bgt.n	8005b44 <__multadd+0x10>
 8005b6e:	b13b      	cbz	r3, 8005b80 <__multadd+0x4c>
 8005b70:	68aa      	ldr	r2, [r5, #8]
 8005b72:	42a2      	cmp	r2, r4
 8005b74:	dd07      	ble.n	8005b86 <__multadd+0x52>
 8005b76:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8005b7a:	3401      	adds	r4, #1
 8005b7c:	6153      	str	r3, [r2, #20]
 8005b7e:	612c      	str	r4, [r5, #16]
 8005b80:	4628      	mov	r0, r5
 8005b82:	b003      	add	sp, #12
 8005b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b86:	6869      	ldr	r1, [r5, #4]
 8005b88:	9301      	str	r3, [sp, #4]
 8005b8a:	3101      	adds	r1, #1
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	f7ff ffa1 	bl	8005ad4 <_Balloc>
 8005b92:	9b01      	ldr	r3, [sp, #4]
 8005b94:	4607      	mov	r7, r0
 8005b96:	b1b8      	cbz	r0, 8005bc8 <__multadd+0x94>
 8005b98:	692a      	ldr	r2, [r5, #16]
 8005b9a:	9301      	str	r3, [sp, #4]
 8005b9c:	3202      	adds	r2, #2
 8005b9e:	f105 010c 	add.w	r1, r5, #12
 8005ba2:	0092      	lsls	r2, r2, #2
 8005ba4:	300c      	adds	r0, #12
 8005ba6:	f7ff fe7b 	bl	80058a0 <memcpy>
 8005baa:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8005bac:	6869      	ldr	r1, [r5, #4]
 8005bae:	9b01      	ldr	r3, [sp, #4]
 8005bb0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8005bb4:	6028      	str	r0, [r5, #0]
 8005bb6:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8005bba:	463d      	mov	r5, r7
 8005bbc:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8005bc0:	3401      	adds	r4, #1
 8005bc2:	6153      	str	r3, [r2, #20]
 8005bc4:	612c      	str	r4, [r5, #16]
 8005bc6:	e7db      	b.n	8005b80 <__multadd+0x4c>
 8005bc8:	4b02      	ldr	r3, [pc, #8]	; (8005bd4 <__multadd+0xa0>)
 8005bca:	4803      	ldr	r0, [pc, #12]	; (8005bd8 <__multadd+0xa4>)
 8005bcc:	463a      	mov	r2, r7
 8005bce:	21b5      	movs	r1, #181	; 0xb5
 8005bd0:	f002 fc10 	bl	80083f4 <__assert_func>
 8005bd4:	0801e2e4 	.word	0x0801e2e4
 8005bd8:	0801e32c 	.word	0x0801e32c

08005bdc <__s2b>:
 8005bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005be0:	460c      	mov	r4, r1
 8005be2:	4928      	ldr	r1, [pc, #160]	; (8005c84 <__s2b+0xa8>)
 8005be4:	461f      	mov	r7, r3
 8005be6:	4616      	mov	r6, r2
 8005be8:	f103 0208 	add.w	r2, r3, #8
 8005bec:	fb81 3102 	smull	r3, r1, r1, r2
 8005bf0:	2f09      	cmp	r7, #9
 8005bf2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005bf6:	4605      	mov	r5, r0
 8005bf8:	ebc3 0361 	rsb	r3, r3, r1, asr #1
 8005bfc:	dd39      	ble.n	8005c72 <__s2b+0x96>
 8005bfe:	f04f 0c01 	mov.w	ip, #1
 8005c02:	2100      	movs	r1, #0
 8005c04:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8005c08:	4563      	cmp	r3, ip
 8005c0a:	f101 0101 	add.w	r1, r1, #1
 8005c0e:	dcf9      	bgt.n	8005c04 <__s2b+0x28>
 8005c10:	4628      	mov	r0, r5
 8005c12:	f7ff ff5f 	bl	8005ad4 <_Balloc>
 8005c16:	4601      	mov	r1, r0
 8005c18:	b368      	cbz	r0, 8005c76 <__s2b+0x9a>
 8005c1a:	9b08      	ldr	r3, [sp, #32]
 8005c1c:	6143      	str	r3, [r0, #20]
 8005c1e:	2e09      	cmp	r6, #9
 8005c20:	f04f 0301 	mov.w	r3, #1
 8005c24:	6103      	str	r3, [r0, #16]
 8005c26:	dc12      	bgt.n	8005c4e <__s2b+0x72>
 8005c28:	340a      	adds	r4, #10
 8005c2a:	2609      	movs	r6, #9
 8005c2c:	42b7      	cmp	r7, r6
 8005c2e:	dd0b      	ble.n	8005c48 <__s2b+0x6c>
 8005c30:	1bbe      	subs	r6, r7, r6
 8005c32:	4426      	add	r6, r4
 8005c34:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005c38:	220a      	movs	r2, #10
 8005c3a:	3b30      	subs	r3, #48	; 0x30
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	f7ff ff79 	bl	8005b34 <__multadd>
 8005c42:	42a6      	cmp	r6, r4
 8005c44:	4601      	mov	r1, r0
 8005c46:	d1f5      	bne.n	8005c34 <__s2b+0x58>
 8005c48:	4608      	mov	r0, r1
 8005c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c4e:	f104 0909 	add.w	r9, r4, #9
 8005c52:	46c8      	mov	r8, r9
 8005c54:	4434      	add	r4, r6
 8005c56:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005c5a:	220a      	movs	r2, #10
 8005c5c:	3b30      	subs	r3, #48	; 0x30
 8005c5e:	4628      	mov	r0, r5
 8005c60:	f7ff ff68 	bl	8005b34 <__multadd>
 8005c64:	45a0      	cmp	r8, r4
 8005c66:	4601      	mov	r1, r0
 8005c68:	d1f5      	bne.n	8005c56 <__s2b+0x7a>
 8005c6a:	f1a6 0408 	sub.w	r4, r6, #8
 8005c6e:	444c      	add	r4, r9
 8005c70:	e7dc      	b.n	8005c2c <__s2b+0x50>
 8005c72:	2100      	movs	r1, #0
 8005c74:	e7cc      	b.n	8005c10 <__s2b+0x34>
 8005c76:	460a      	mov	r2, r1
 8005c78:	4b03      	ldr	r3, [pc, #12]	; (8005c88 <__s2b+0xac>)
 8005c7a:	4804      	ldr	r0, [pc, #16]	; (8005c8c <__s2b+0xb0>)
 8005c7c:	21ce      	movs	r1, #206	; 0xce
 8005c7e:	f002 fbb9 	bl	80083f4 <__assert_func>
 8005c82:	bf00      	nop
 8005c84:	38e38e39 	.word	0x38e38e39
 8005c88:	0801e2e4 	.word	0x0801e2e4
 8005c8c:	0801e32c 	.word	0x0801e32c

08005c90 <__hi0bits>:
 8005c90:	0c03      	lsrs	r3, r0, #16
 8005c92:	041b      	lsls	r3, r3, #16
 8005c94:	b9d3      	cbnz	r3, 8005ccc <__hi0bits+0x3c>
 8005c96:	0400      	lsls	r0, r0, #16
 8005c98:	2310      	movs	r3, #16
 8005c9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005c9e:	bf04      	itt	eq
 8005ca0:	0200      	lsleq	r0, r0, #8
 8005ca2:	3308      	addeq	r3, #8
 8005ca4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005ca8:	bf04      	itt	eq
 8005caa:	0100      	lsleq	r0, r0, #4
 8005cac:	3304      	addeq	r3, #4
 8005cae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005cb2:	bf04      	itt	eq
 8005cb4:	0080      	lsleq	r0, r0, #2
 8005cb6:	3302      	addeq	r3, #2
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	db05      	blt.n	8005cc8 <__hi0bits+0x38>
 8005cbc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005cc0:	f103 0301 	add.w	r3, r3, #1
 8005cc4:	bf08      	it	eq
 8005cc6:	2320      	moveq	r3, #32
 8005cc8:	4618      	mov	r0, r3
 8005cca:	4770      	bx	lr
 8005ccc:	2300      	movs	r3, #0
 8005cce:	e7e4      	b.n	8005c9a <__hi0bits+0xa>

08005cd0 <__lo0bits>:
 8005cd0:	6803      	ldr	r3, [r0, #0]
 8005cd2:	f013 0207 	ands.w	r2, r3, #7
 8005cd6:	4601      	mov	r1, r0
 8005cd8:	d007      	beq.n	8005cea <__lo0bits+0x1a>
 8005cda:	07da      	lsls	r2, r3, #31
 8005cdc:	d41f      	bmi.n	8005d1e <__lo0bits+0x4e>
 8005cde:	0798      	lsls	r0, r3, #30
 8005ce0:	d521      	bpl.n	8005d26 <__lo0bits+0x56>
 8005ce2:	085b      	lsrs	r3, r3, #1
 8005ce4:	600b      	str	r3, [r1, #0]
 8005ce6:	2001      	movs	r0, #1
 8005ce8:	4770      	bx	lr
 8005cea:	b298      	uxth	r0, r3
 8005cec:	b1a0      	cbz	r0, 8005d18 <__lo0bits+0x48>
 8005cee:	4610      	mov	r0, r2
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	b90a      	cbnz	r2, 8005cf8 <__lo0bits+0x28>
 8005cf4:	3008      	adds	r0, #8
 8005cf6:	0a1b      	lsrs	r3, r3, #8
 8005cf8:	071a      	lsls	r2, r3, #28
 8005cfa:	bf04      	itt	eq
 8005cfc:	091b      	lsreq	r3, r3, #4
 8005cfe:	3004      	addeq	r0, #4
 8005d00:	079a      	lsls	r2, r3, #30
 8005d02:	bf04      	itt	eq
 8005d04:	089b      	lsreq	r3, r3, #2
 8005d06:	3002      	addeq	r0, #2
 8005d08:	07da      	lsls	r2, r3, #31
 8005d0a:	d403      	bmi.n	8005d14 <__lo0bits+0x44>
 8005d0c:	085b      	lsrs	r3, r3, #1
 8005d0e:	f100 0001 	add.w	r0, r0, #1
 8005d12:	d006      	beq.n	8005d22 <__lo0bits+0x52>
 8005d14:	600b      	str	r3, [r1, #0]
 8005d16:	4770      	bx	lr
 8005d18:	0c1b      	lsrs	r3, r3, #16
 8005d1a:	2010      	movs	r0, #16
 8005d1c:	e7e8      	b.n	8005cf0 <__lo0bits+0x20>
 8005d1e:	2000      	movs	r0, #0
 8005d20:	4770      	bx	lr
 8005d22:	2020      	movs	r0, #32
 8005d24:	4770      	bx	lr
 8005d26:	089b      	lsrs	r3, r3, #2
 8005d28:	600b      	str	r3, [r1, #0]
 8005d2a:	2002      	movs	r0, #2
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop

08005d30 <__i2b>:
 8005d30:	b538      	push	{r3, r4, r5, lr}
 8005d32:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005d34:	4604      	mov	r4, r0
 8005d36:	460d      	mov	r5, r1
 8005d38:	b14b      	cbz	r3, 8005d4e <__i2b+0x1e>
 8005d3a:	6858      	ldr	r0, [r3, #4]
 8005d3c:	b1b0      	cbz	r0, 8005d6c <__i2b+0x3c>
 8005d3e:	6802      	ldr	r2, [r0, #0]
 8005d40:	605a      	str	r2, [r3, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	2301      	movs	r3, #1
 8005d46:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005d4a:	60c2      	str	r2, [r0, #12]
 8005d4c:	bd38      	pop	{r3, r4, r5, pc}
 8005d4e:	2221      	movs	r2, #33	; 0x21
 8005d50:	2104      	movs	r1, #4
 8005d52:	f002 fb75 	bl	8008440 <_calloc_r>
 8005d56:	4603      	mov	r3, r0
 8005d58:	64e0      	str	r0, [r4, #76]	; 0x4c
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d1ed      	bne.n	8005d3a <__i2b+0xa>
 8005d5e:	4b09      	ldr	r3, [pc, #36]	; (8005d84 <__i2b+0x54>)
 8005d60:	4809      	ldr	r0, [pc, #36]	; (8005d88 <__i2b+0x58>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005d68:	f002 fb44 	bl	80083f4 <__assert_func>
 8005d6c:	221c      	movs	r2, #28
 8005d6e:	2101      	movs	r1, #1
 8005d70:	4620      	mov	r0, r4
 8005d72:	f002 fb65 	bl	8008440 <_calloc_r>
 8005d76:	2800      	cmp	r0, #0
 8005d78:	d0f1      	beq.n	8005d5e <__i2b+0x2e>
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	e9c0 2301 	strd	r2, r3, [r0, #4]
 8005d82:	e7de      	b.n	8005d42 <__i2b+0x12>
 8005d84:	0801e2e4 	.word	0x0801e2e4
 8005d88:	0801e32c 	.word	0x0801e32c

08005d8c <__multiply>:
 8005d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d90:	690e      	ldr	r6, [r1, #16]
 8005d92:	6915      	ldr	r5, [r2, #16]
 8005d94:	42ae      	cmp	r6, r5
 8005d96:	b085      	sub	sp, #20
 8005d98:	4688      	mov	r8, r1
 8005d9a:	4614      	mov	r4, r2
 8005d9c:	db05      	blt.n	8005daa <__multiply+0x1e>
 8005d9e:	462a      	mov	r2, r5
 8005da0:	4623      	mov	r3, r4
 8005da2:	4635      	mov	r5, r6
 8005da4:	460c      	mov	r4, r1
 8005da6:	4616      	mov	r6, r2
 8005da8:	4698      	mov	r8, r3
 8005daa:	68a3      	ldr	r3, [r4, #8]
 8005dac:	6861      	ldr	r1, [r4, #4]
 8005dae:	19af      	adds	r7, r5, r6
 8005db0:	42bb      	cmp	r3, r7
 8005db2:	bfb8      	it	lt
 8005db4:	3101      	addlt	r1, #1
 8005db6:	f7ff fe8d 	bl	8005ad4 <_Balloc>
 8005dba:	9001      	str	r0, [sp, #4]
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	f000 8087 	beq.w	8005ed0 <__multiply+0x144>
 8005dc2:	9b01      	ldr	r3, [sp, #4]
 8005dc4:	f103 0914 	add.w	r9, r3, #20
 8005dc8:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
 8005dcc:	45d1      	cmp	r9, sl
 8005dce:	d205      	bcs.n	8005ddc <__multiply+0x50>
 8005dd0:	464b      	mov	r3, r9
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f843 2b04 	str.w	r2, [r3], #4
 8005dd8:	459a      	cmp	sl, r3
 8005dda:	d8fb      	bhi.n	8005dd4 <__multiply+0x48>
 8005ddc:	f108 0814 	add.w	r8, r8, #20
 8005de0:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
 8005de4:	f104 0314 	add.w	r3, r4, #20
 8005de8:	45d8      	cmp	r8, fp
 8005dea:	461a      	mov	r2, r3
 8005dec:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005df0:	d25f      	bcs.n	8005eb2 <__multiply+0x126>
 8005df2:	1b2b      	subs	r3, r5, r4
 8005df4:	3b15      	subs	r3, #21
 8005df6:	f023 0303 	bic.w	r3, r3, #3
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	3415      	adds	r4, #21
 8005dfe:	42a5      	cmp	r5, r4
 8005e00:	bf38      	it	cc
 8005e02:	2304      	movcc	r3, #4
 8005e04:	e9cd a702 	strd	sl, r7, [sp, #8]
 8005e08:	46ac      	mov	ip, r5
 8005e0a:	461f      	mov	r7, r3
 8005e0c:	4692      	mov	sl, r2
 8005e0e:	e005      	b.n	8005e1c <__multiply+0x90>
 8005e10:	0c00      	lsrs	r0, r0, #16
 8005e12:	d129      	bne.n	8005e68 <__multiply+0xdc>
 8005e14:	45c3      	cmp	fp, r8
 8005e16:	f109 0904 	add.w	r9, r9, #4
 8005e1a:	d948      	bls.n	8005eae <__multiply+0x122>
 8005e1c:	f858 0b04 	ldr.w	r0, [r8], #4
 8005e20:	b285      	uxth	r5, r0
 8005e22:	2d00      	cmp	r5, #0
 8005e24:	d0f4      	beq.n	8005e10 <__multiply+0x84>
 8005e26:	4656      	mov	r6, sl
 8005e28:	464c      	mov	r4, r9
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f856 0b04 	ldr.w	r0, [r6], #4
 8005e30:	6821      	ldr	r1, [r4, #0]
 8005e32:	b282      	uxth	r2, r0
 8005e34:	fa1f fe81 	uxth.w	lr, r1
 8005e38:	fb05 ee02 	mla	lr, r5, r2, lr
 8005e3c:	0c00      	lsrs	r0, r0, #16
 8005e3e:	0c0a      	lsrs	r2, r1, #16
 8005e40:	4473      	add	r3, lr
 8005e42:	fb05 2200 	mla	r2, r5, r0, r2
 8005e46:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e50:	45b4      	cmp	ip, r6
 8005e52:	f844 3b04 	str.w	r3, [r4], #4
 8005e56:	ea4f 4312 	mov.w	r3, r2, lsr #16
 8005e5a:	d8e7      	bhi.n	8005e2c <__multiply+0xa0>
 8005e5c:	f849 3007 	str.w	r3, [r9, r7]
 8005e60:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8005e64:	0c00      	lsrs	r0, r0, #16
 8005e66:	d0d5      	beq.n	8005e14 <__multiply+0x88>
 8005e68:	f8d9 3000 	ldr.w	r3, [r9]
 8005e6c:	4654      	mov	r4, sl
 8005e6e:	4619      	mov	r1, r3
 8005e70:	464d      	mov	r5, r9
 8005e72:	2200      	movs	r2, #0
 8005e74:	8826      	ldrh	r6, [r4, #0]
 8005e76:	0c09      	lsrs	r1, r1, #16
 8005e78:	fb00 1106 	mla	r1, r0, r6, r1
 8005e7c:	440a      	add	r2, r1
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e84:	f845 3b04 	str.w	r3, [r5], #4
 8005e88:	f854 6b04 	ldr.w	r6, [r4], #4
 8005e8c:	6829      	ldr	r1, [r5, #0]
 8005e8e:	0c36      	lsrs	r6, r6, #16
 8005e90:	b28b      	uxth	r3, r1
 8005e92:	fb00 3306 	mla	r3, r0, r6, r3
 8005e96:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005e9a:	45a4      	cmp	ip, r4
 8005e9c:	ea4f 4213 	mov.w	r2, r3, lsr #16
 8005ea0:	d8e8      	bhi.n	8005e74 <__multiply+0xe8>
 8005ea2:	45c3      	cmp	fp, r8
 8005ea4:	f849 3007 	str.w	r3, [r9, r7]
 8005ea8:	f109 0904 	add.w	r9, r9, #4
 8005eac:	d8b6      	bhi.n	8005e1c <__multiply+0x90>
 8005eae:	e9dd a702 	ldrd	sl, r7, [sp, #8]
 8005eb2:	2f00      	cmp	r7, #0
 8005eb4:	dc02      	bgt.n	8005ebc <__multiply+0x130>
 8005eb6:	e005      	b.n	8005ec4 <__multiply+0x138>
 8005eb8:	3f01      	subs	r7, #1
 8005eba:	d003      	beq.n	8005ec4 <__multiply+0x138>
 8005ebc:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0f9      	beq.n	8005eb8 <__multiply+0x12c>
 8005ec4:	9b01      	ldr	r3, [sp, #4]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	611f      	str	r7, [r3, #16]
 8005eca:	b005      	add	sp, #20
 8005ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed0:	4b03      	ldr	r3, [pc, #12]	; (8005ee0 <__multiply+0x154>)
 8005ed2:	4804      	ldr	r0, [pc, #16]	; (8005ee4 <__multiply+0x158>)
 8005ed4:	9a01      	ldr	r2, [sp, #4]
 8005ed6:	f240 115d 	movw	r1, #349	; 0x15d
 8005eda:	f002 fa8b 	bl	80083f4 <__assert_func>
 8005ede:	bf00      	nop
 8005ee0:	0801e2e4 	.word	0x0801e2e4
 8005ee4:	0801e32c 	.word	0x0801e32c

08005ee8 <__pow5mult>:
 8005ee8:	f012 0303 	ands.w	r3, r2, #3
 8005eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef0:	4614      	mov	r4, r2
 8005ef2:	4606      	mov	r6, r0
 8005ef4:	d132      	bne.n	8005f5c <__pow5mult+0x74>
 8005ef6:	460d      	mov	r5, r1
 8005ef8:	10a4      	asrs	r4, r4, #2
 8005efa:	d020      	beq.n	8005f3e <__pow5mult+0x56>
 8005efc:	f8d6 8048 	ldr.w	r8, [r6, #72]	; 0x48
 8005f00:	f1b8 0f00 	cmp.w	r8, #0
 8005f04:	d033      	beq.n	8005f6e <__pow5mult+0x86>
 8005f06:	07e3      	lsls	r3, r4, #31
 8005f08:	f04f 0700 	mov.w	r7, #0
 8005f0c:	d407      	bmi.n	8005f1e <__pow5mult+0x36>
 8005f0e:	1064      	asrs	r4, r4, #1
 8005f10:	d015      	beq.n	8005f3e <__pow5mult+0x56>
 8005f12:	f8d8 0000 	ldr.w	r0, [r8]
 8005f16:	b1a8      	cbz	r0, 8005f44 <__pow5mult+0x5c>
 8005f18:	4680      	mov	r8, r0
 8005f1a:	07e3      	lsls	r3, r4, #31
 8005f1c:	d5f7      	bpl.n	8005f0e <__pow5mult+0x26>
 8005f1e:	4642      	mov	r2, r8
 8005f20:	4629      	mov	r1, r5
 8005f22:	4630      	mov	r0, r6
 8005f24:	f7ff ff32 	bl	8005d8c <__multiply>
 8005f28:	b1b5      	cbz	r5, 8005f58 <__pow5mult+0x70>
 8005f2a:	6869      	ldr	r1, [r5, #4]
 8005f2c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8005f2e:	1064      	asrs	r4, r4, #1
 8005f30:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8005f34:	602a      	str	r2, [r5, #0]
 8005f36:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
 8005f3a:	4605      	mov	r5, r0
 8005f3c:	d1e9      	bne.n	8005f12 <__pow5mult+0x2a>
 8005f3e:	4628      	mov	r0, r5
 8005f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f44:	4642      	mov	r2, r8
 8005f46:	4641      	mov	r1, r8
 8005f48:	4630      	mov	r0, r6
 8005f4a:	f7ff ff1f 	bl	8005d8c <__multiply>
 8005f4e:	f8c8 0000 	str.w	r0, [r8]
 8005f52:	6007      	str	r7, [r0, #0]
 8005f54:	4680      	mov	r8, r0
 8005f56:	e7e0      	b.n	8005f1a <__pow5mult+0x32>
 8005f58:	4605      	mov	r5, r0
 8005f5a:	e7d8      	b.n	8005f0e <__pow5mult+0x26>
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	4a0f      	ldr	r2, [pc, #60]	; (8005f9c <__pow5mult+0xb4>)
 8005f60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005f64:	2300      	movs	r3, #0
 8005f66:	f7ff fde5 	bl	8005b34 <__multadd>
 8005f6a:	4605      	mov	r5, r0
 8005f6c:	e7c4      	b.n	8005ef8 <__pow5mult+0x10>
 8005f6e:	2101      	movs	r1, #1
 8005f70:	4630      	mov	r0, r6
 8005f72:	f7ff fdaf 	bl	8005ad4 <_Balloc>
 8005f76:	4680      	mov	r8, r0
 8005f78:	b140      	cbz	r0, 8005f8c <__pow5mult+0xa4>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	f240 2271 	movw	r2, #625	; 0x271
 8005f80:	e9c0 3204 	strd	r3, r2, [r0, #16]
 8005f84:	2300      	movs	r3, #0
 8005f86:	64b0      	str	r0, [r6, #72]	; 0x48
 8005f88:	6003      	str	r3, [r0, #0]
 8005f8a:	e7bc      	b.n	8005f06 <__pow5mult+0x1e>
 8005f8c:	4b04      	ldr	r3, [pc, #16]	; (8005fa0 <__pow5mult+0xb8>)
 8005f8e:	4805      	ldr	r0, [pc, #20]	; (8005fa4 <__pow5mult+0xbc>)
 8005f90:	4642      	mov	r2, r8
 8005f92:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005f96:	f002 fa2d 	bl	80083f4 <__assert_func>
 8005f9a:	bf00      	nop
 8005f9c:	0800ee98 	.word	0x0800ee98
 8005fa0:	0801e2e4 	.word	0x0801e2e4
 8005fa4:	0801e32c 	.word	0x0801e32c

08005fa8 <__lshift>:
 8005fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fac:	460c      	mov	r4, r1
 8005fae:	4690      	mov	r8, r2
 8005fb0:	6926      	ldr	r6, [r4, #16]
 8005fb2:	68a3      	ldr	r3, [r4, #8]
 8005fb4:	6849      	ldr	r1, [r1, #4]
 8005fb6:	eb06 1662 	add.w	r6, r6, r2, asr #5
 8005fba:	1c75      	adds	r5, r6, #1
 8005fbc:	429d      	cmp	r5, r3
 8005fbe:	4607      	mov	r7, r0
 8005fc0:	ea4f 1962 	mov.w	r9, r2, asr #5
 8005fc4:	dd04      	ble.n	8005fd0 <__lshift+0x28>
 8005fc6:	005b      	lsls	r3, r3, #1
 8005fc8:	429d      	cmp	r5, r3
 8005fca:	f101 0101 	add.w	r1, r1, #1
 8005fce:	dcfa      	bgt.n	8005fc6 <__lshift+0x1e>
 8005fd0:	4638      	mov	r0, r7
 8005fd2:	f7ff fd7f 	bl	8005ad4 <_Balloc>
 8005fd6:	4684      	mov	ip, r0
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	d051      	beq.n	8006080 <__lshift+0xd8>
 8005fdc:	f1b9 0f00 	cmp.w	r9, #0
 8005fe0:	f100 0014 	add.w	r0, r0, #20
 8005fe4:	dd0e      	ble.n	8006004 <__lshift+0x5c>
 8005fe6:	f109 0205 	add.w	r2, r9, #5
 8005fea:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8005fee:	4603      	mov	r3, r0
 8005ff0:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	f843 1b04 	str.w	r1, [r3], #4
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d1fb      	bne.n	8005ff6 <__lshift+0x4e>
 8005ffe:	f1ae 0314 	sub.w	r3, lr, #20
 8006002:	4418      	add	r0, r3
 8006004:	6921      	ldr	r1, [r4, #16]
 8006006:	f104 0314 	add.w	r3, r4, #20
 800600a:	f018 081f 	ands.w	r8, r8, #31
 800600e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006012:	d02d      	beq.n	8006070 <__lshift+0xc8>
 8006014:	f1c8 0920 	rsb	r9, r8, #32
 8006018:	4686      	mov	lr, r0
 800601a:	f04f 0a00 	mov.w	sl, #0
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	fa02 f208 	lsl.w	r2, r2, r8
 8006024:	ea42 020a 	orr.w	r2, r2, sl
 8006028:	f84e 2b04 	str.w	r2, [lr], #4
 800602c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006030:	4299      	cmp	r1, r3
 8006032:	fa22 fa09 	lsr.w	sl, r2, r9
 8006036:	d8f2      	bhi.n	800601e <__lshift+0x76>
 8006038:	1b0b      	subs	r3, r1, r4
 800603a:	3b15      	subs	r3, #21
 800603c:	f023 0303 	bic.w	r3, r3, #3
 8006040:	3304      	adds	r3, #4
 8006042:	f104 0215 	add.w	r2, r4, #21
 8006046:	4291      	cmp	r1, r2
 8006048:	bf38      	it	cc
 800604a:	2304      	movcc	r3, #4
 800604c:	f1ba 0f00 	cmp.w	sl, #0
 8006050:	bf18      	it	ne
 8006052:	462e      	movne	r6, r5
 8006054:	f840 a003 	str.w	sl, [r0, r3]
 8006058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800605a:	6862      	ldr	r2, [r4, #4]
 800605c:	f8cc 6010 	str.w	r6, [ip, #16]
 8006060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006064:	6021      	str	r1, [r4, #0]
 8006066:	4660      	mov	r0, ip
 8006068:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800606c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006070:	3804      	subs	r0, #4
 8006072:	f853 2b04 	ldr.w	r2, [r3], #4
 8006076:	f840 2f04 	str.w	r2, [r0, #4]!
 800607a:	4299      	cmp	r1, r3
 800607c:	d8f9      	bhi.n	8006072 <__lshift+0xca>
 800607e:	e7eb      	b.n	8006058 <__lshift+0xb0>
 8006080:	4b03      	ldr	r3, [pc, #12]	; (8006090 <__lshift+0xe8>)
 8006082:	4804      	ldr	r0, [pc, #16]	; (8006094 <__lshift+0xec>)
 8006084:	4662      	mov	r2, ip
 8006086:	f240 11d9 	movw	r1, #473	; 0x1d9
 800608a:	f002 f9b3 	bl	80083f4 <__assert_func>
 800608e:	bf00      	nop
 8006090:	0801e2e4 	.word	0x0801e2e4
 8006094:	0801e32c 	.word	0x0801e32c

08006098 <__mcmp>:
 8006098:	690b      	ldr	r3, [r1, #16]
 800609a:	4684      	mov	ip, r0
 800609c:	6900      	ldr	r0, [r0, #16]
 800609e:	1ac0      	subs	r0, r0, r3
 80060a0:	d116      	bne.n	80060d0 <__mcmp+0x38>
 80060a2:	f10c 0c14 	add.w	ip, ip, #20
 80060a6:	3114      	adds	r1, #20
 80060a8:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 80060ac:	b410      	push	{r4}
 80060ae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80060b2:	e001      	b.n	80060b8 <__mcmp+0x20>
 80060b4:	4594      	cmp	ip, r2
 80060b6:	d208      	bcs.n	80060ca <__mcmp+0x32>
 80060b8:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 80060bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80060c0:	428c      	cmp	r4, r1
 80060c2:	d0f7      	beq.n	80060b4 <__mcmp+0x1c>
 80060c4:	d205      	bcs.n	80060d2 <__mcmp+0x3a>
 80060c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	4770      	bx	lr
 80060d2:	2001      	movs	r0, #1
 80060d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop

080060dc <__mdiff>:
 80060dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e0:	690f      	ldr	r7, [r1, #16]
 80060e2:	6913      	ldr	r3, [r2, #16]
 80060e4:	1aff      	subs	r7, r7, r3
 80060e6:	2f00      	cmp	r7, #0
 80060e8:	460e      	mov	r6, r1
 80060ea:	4690      	mov	r8, r2
 80060ec:	d17a      	bne.n	80061e4 <__mdiff+0x108>
 80060ee:	f101 0514 	add.w	r5, r1, #20
 80060f2:	3214      	adds	r2, #20
 80060f4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80060f8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80060fc:	e001      	b.n	8006102 <__mdiff+0x26>
 80060fe:	429d      	cmp	r5, r3
 8006100:	d273      	bcs.n	80061ea <__mdiff+0x10e>
 8006102:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006106:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 800610a:	42a1      	cmp	r1, r4
 800610c:	d0f7      	beq.n	80060fe <__mdiff+0x22>
 800610e:	d364      	bcc.n	80061da <__mdiff+0xfe>
 8006110:	6871      	ldr	r1, [r6, #4]
 8006112:	f7ff fcdf 	bl	8005ad4 <_Balloc>
 8006116:	4681      	mov	r9, r0
 8006118:	2800      	cmp	r0, #0
 800611a:	d072      	beq.n	8006202 <__mdiff+0x126>
 800611c:	6935      	ldr	r5, [r6, #16]
 800611e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006122:	60c7      	str	r7, [r0, #12]
 8006124:	f108 0e14 	add.w	lr, r8, #20
 8006128:	f106 0014 	add.w	r0, r6, #20
 800612c:	f109 0a14 	add.w	sl, r9, #20
 8006130:	f106 0c10 	add.w	ip, r6, #16
 8006134:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 8006138:	eb00 0785 	add.w	r7, r0, r5, lsl #2
 800613c:	4656      	mov	r6, sl
 800613e:	2100      	movs	r1, #0
 8006140:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006144:	f85c bf04 	ldr.w	fp, [ip, #4]!
 8006148:	b2a3      	uxth	r3, r4
 800614a:	fa11 f18b 	uxtah	r1, r1, fp
 800614e:	1acb      	subs	r3, r1, r3
 8006150:	0c21      	lsrs	r1, r4, #16
 8006152:	ebc1 411b 	rsb	r1, r1, fp, lsr #16
 8006156:	eb01 4123 	add.w	r1, r1, r3, asr #16
 800615a:	b29b      	uxth	r3, r3
 800615c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006160:	4572      	cmp	r2, lr
 8006162:	f846 3b04 	str.w	r3, [r6], #4
 8006166:	ea4f 4121 	mov.w	r1, r1, asr #16
 800616a:	d8e9      	bhi.n	8006140 <__mdiff+0x64>
 800616c:	eba2 0408 	sub.w	r4, r2, r8
 8006170:	3c15      	subs	r4, #21
 8006172:	f108 0815 	add.w	r8, r8, #21
 8006176:	4542      	cmp	r2, r8
 8006178:	f024 0603 	bic.w	r6, r4, #3
 800617c:	f106 0604 	add.w	r6, r6, #4
 8006180:	bf38      	it	cc
 8006182:	2604      	movcc	r6, #4
 8006184:	4430      	add	r0, r6
 8006186:	f024 0203 	bic.w	r2, r4, #3
 800618a:	bf38      	it	cc
 800618c:	2200      	movcc	r2, #0
 800618e:	4287      	cmp	r7, r0
 8006190:	4452      	add	r2, sl
 8006192:	44b2      	add	sl, r6
 8006194:	d916      	bls.n	80061c4 <__mdiff+0xe8>
 8006196:	4656      	mov	r6, sl
 8006198:	4604      	mov	r4, r0
 800619a:	f854 3b04 	ldr.w	r3, [r4], #4
 800619e:	fa11 f183 	uxtah	r1, r1, r3
 80061a2:	140a      	asrs	r2, r1, #16
 80061a4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80061a8:	b289      	uxth	r1, r1
 80061aa:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
 80061ae:	42a7      	cmp	r7, r4
 80061b0:	f846 3b04 	str.w	r3, [r6], #4
 80061b4:	ea4f 4122 	mov.w	r1, r2, asr #16
 80061b8:	d8ef      	bhi.n	800619a <__mdiff+0xbe>
 80061ba:	1e7a      	subs	r2, r7, #1
 80061bc:	1a10      	subs	r0, r2, r0
 80061be:	f020 0203 	bic.w	r2, r0, #3
 80061c2:	4452      	add	r2, sl
 80061c4:	b923      	cbnz	r3, 80061d0 <__mdiff+0xf4>
 80061c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80061ca:	3d01      	subs	r5, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d0fa      	beq.n	80061c6 <__mdiff+0xea>
 80061d0:	f8c9 5010 	str.w	r5, [r9, #16]
 80061d4:	4648      	mov	r0, r9
 80061d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061da:	4633      	mov	r3, r6
 80061dc:	2701      	movs	r7, #1
 80061de:	4646      	mov	r6, r8
 80061e0:	4698      	mov	r8, r3
 80061e2:	e795      	b.n	8006110 <__mdiff+0x34>
 80061e4:	dbf9      	blt.n	80061da <__mdiff+0xfe>
 80061e6:	2700      	movs	r7, #0
 80061e8:	e792      	b.n	8006110 <__mdiff+0x34>
 80061ea:	2100      	movs	r1, #0
 80061ec:	f7ff fc72 	bl	8005ad4 <_Balloc>
 80061f0:	4681      	mov	r9, r0
 80061f2:	b168      	cbz	r0, 8006210 <__mdiff+0x134>
 80061f4:	2201      	movs	r2, #1
 80061f6:	2300      	movs	r3, #0
 80061f8:	e9c9 2304 	strd	r2, r3, [r9, #16]
 80061fc:	4648      	mov	r0, r9
 80061fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006202:	4b07      	ldr	r3, [pc, #28]	; (8006220 <__mdiff+0x144>)
 8006204:	4807      	ldr	r0, [pc, #28]	; (8006224 <__mdiff+0x148>)
 8006206:	464a      	mov	r2, r9
 8006208:	f44f 7110 	mov.w	r1, #576	; 0x240
 800620c:	f002 f8f2 	bl	80083f4 <__assert_func>
 8006210:	4b03      	ldr	r3, [pc, #12]	; (8006220 <__mdiff+0x144>)
 8006212:	4804      	ldr	r0, [pc, #16]	; (8006224 <__mdiff+0x148>)
 8006214:	464a      	mov	r2, r9
 8006216:	f240 2132 	movw	r1, #562	; 0x232
 800621a:	f002 f8eb 	bl	80083f4 <__assert_func>
 800621e:	bf00      	nop
 8006220:	0801e2e4 	.word	0x0801e2e4
 8006224:	0801e32c 	.word	0x0801e32c

08006228 <__ulp>:
 8006228:	b082      	sub	sp, #8
 800622a:	ed8d 0b00 	vstr	d0, [sp]
 800622e:	4b15      	ldr	r3, [pc, #84]	; (8006284 <__ulp+0x5c>)
 8006230:	9a01      	ldr	r2, [sp, #4]
 8006232:	4013      	ands	r3, r2
 8006234:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006238:	2b00      	cmp	r3, #0
 800623a:	dd05      	ble.n	8006248 <__ulp+0x20>
 800623c:	2000      	movs	r0, #0
 800623e:	4619      	mov	r1, r3
 8006240:	ec41 0b10 	vmov	d0, r0, r1
 8006244:	b002      	add	sp, #8
 8006246:	4770      	bx	lr
 8006248:	425b      	negs	r3, r3
 800624a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800624e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006252:	da08      	bge.n	8006266 <__ulp+0x3e>
 8006254:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006258:	2000      	movs	r0, #0
 800625a:	fa43 f102 	asr.w	r1, r3, r2
 800625e:	ec41 0b10 	vmov	d0, r0, r1
 8006262:	b002      	add	sp, #8
 8006264:	4770      	bx	lr
 8006266:	3a14      	subs	r2, #20
 8006268:	2a1e      	cmp	r2, #30
 800626a:	bfda      	itte	le
 800626c:	f04f 4300 	movle.w	r3, #2147483648	; 0x80000000
 8006270:	fa23 f202 	lsrle.w	r2, r3, r2
 8006274:	2201      	movgt	r2, #1
 8006276:	2100      	movs	r1, #0
 8006278:	4610      	mov	r0, r2
 800627a:	ec41 0b10 	vmov	d0, r0, r1
 800627e:	b002      	add	sp, #8
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	7ff00000 	.word	0x7ff00000

08006288 <__b2d>:
 8006288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628a:	6904      	ldr	r4, [r0, #16]
 800628c:	f100 0614 	add.w	r6, r0, #20
 8006290:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8006294:	1f27      	subs	r7, r4, #4
 8006296:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800629a:	4628      	mov	r0, r5
 800629c:	f7ff fcf8 	bl	8005c90 <__hi0bits>
 80062a0:	f1c0 0320 	rsb	r3, r0, #32
 80062a4:	280a      	cmp	r0, #10
 80062a6:	600b      	str	r3, [r1, #0]
 80062a8:	dd31      	ble.n	800630e <__b2d+0x86>
 80062aa:	42be      	cmp	r6, r7
 80062ac:	d21b      	bcs.n	80062e6 <__b2d+0x5e>
 80062ae:	380b      	subs	r0, #11
 80062b0:	f854 1c08 	ldr.w	r1, [r4, #-8]
 80062b4:	d023      	beq.n	80062fe <__b2d+0x76>
 80062b6:	f1c0 0c20 	rsb	ip, r0, #32
 80062ba:	4085      	lsls	r5, r0
 80062bc:	fa21 f70c 	lsr.w	r7, r1, ip
 80062c0:	432f      	orrs	r7, r5
 80062c2:	f1a4 0508 	sub.w	r5, r4, #8
 80062c6:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
 80062ca:	42ae      	cmp	r6, r5
 80062cc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80062d0:	d236      	bcs.n	8006340 <__b2d+0xb8>
 80062d2:	4081      	lsls	r1, r0
 80062d4:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 80062d8:	fa20 f00c 	lsr.w	r0, r0, ip
 80062dc:	4308      	orrs	r0, r1
 80062de:	4602      	mov	r2, r0
 80062e0:	ec43 2b10 	vmov	d0, r2, r3
 80062e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062e6:	380b      	subs	r0, #11
 80062e8:	d008      	beq.n	80062fc <__b2d+0x74>
 80062ea:	fa05 f000 	lsl.w	r0, r5, r0
 80062ee:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 80062f2:	2000      	movs	r0, #0
 80062f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80062f8:	4602      	mov	r2, r0
 80062fa:	e7f1      	b.n	80062e0 <__b2d+0x58>
 80062fc:	4601      	mov	r1, r0
 80062fe:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8006302:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006306:	460a      	mov	r2, r1
 8006308:	ec43 2b10 	vmov	d0, r2, r3
 800630c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800630e:	f1c0 0c0b 	rsb	ip, r0, #11
 8006312:	fa25 f10c 	lsr.w	r1, r5, ip
 8006316:	42be      	cmp	r6, r7
 8006318:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 800631c:	bf38      	it	cc
 800631e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
 8006322:	f100 0015 	add.w	r0, r0, #21
 8006326:	bf34      	ite	cc
 8006328:	fa21 f10c 	lsrcc.w	r1, r1, ip
 800632c:	2100      	movcs	r1, #0
 800632e:	fa05 f000 	lsl.w	r0, r5, r0
 8006332:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006336:	ea40 0201 	orr.w	r2, r0, r1
 800633a:	ec43 2b10 	vmov	d0, r2, r3
 800633e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006340:	fa01 f000 	lsl.w	r0, r1, r0
 8006344:	4602      	mov	r2, r0
 8006346:	e7cb      	b.n	80062e0 <__b2d+0x58>

08006348 <__d2b>:
 8006348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800634c:	4688      	mov	r8, r1
 800634e:	b083      	sub	sp, #12
 8006350:	2101      	movs	r1, #1
 8006352:	ec57 6b10 	vmov	r6, r7, d0
 8006356:	4615      	mov	r5, r2
 8006358:	f7ff fbbc 	bl	8005ad4 <_Balloc>
 800635c:	4604      	mov	r4, r0
 800635e:	2800      	cmp	r0, #0
 8006360:	d04f      	beq.n	8006402 <__d2b+0xba>
 8006362:	f3c7 590a 	ubfx	r9, r7, #20, #11
 8006366:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800636a:	f1b9 0f00 	cmp.w	r9, #0
 800636e:	d001      	beq.n	8006374 <__d2b+0x2c>
 8006370:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006374:	2e00      	cmp	r6, #0
 8006376:	9301      	str	r3, [sp, #4]
 8006378:	d024      	beq.n	80063c4 <__d2b+0x7c>
 800637a:	4668      	mov	r0, sp
 800637c:	9600      	str	r6, [sp, #0]
 800637e:	f7ff fca7 	bl	8005cd0 <__lo0bits>
 8006382:	2800      	cmp	r0, #0
 8006384:	d039      	beq.n	80063fa <__d2b+0xb2>
 8006386:	e9dd 1300 	ldrd	r1, r3, [sp]
 800638a:	f1c0 0220 	rsb	r2, r0, #32
 800638e:	fa03 f202 	lsl.w	r2, r3, r2
 8006392:	430a      	orrs	r2, r1
 8006394:	40c3      	lsrs	r3, r0
 8006396:	6162      	str	r2, [r4, #20]
 8006398:	9301      	str	r3, [sp, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	bf14      	ite	ne
 800639e:	2202      	movne	r2, #2
 80063a0:	2201      	moveq	r2, #1
 80063a2:	61a3      	str	r3, [r4, #24]
 80063a4:	6122      	str	r2, [r4, #16]
 80063a6:	f1b9 0f00 	cmp.w	r9, #0
 80063aa:	d016      	beq.n	80063da <__d2b+0x92>
 80063ac:	f2a9 4333 	subw	r3, r9, #1075	; 0x433
 80063b0:	4403      	add	r3, r0
 80063b2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80063b6:	f8c8 3000 	str.w	r3, [r8]
 80063ba:	6028      	str	r0, [r5, #0]
 80063bc:	4620      	mov	r0, r4
 80063be:	b003      	add	sp, #12
 80063c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063c4:	a801      	add	r0, sp, #4
 80063c6:	f7ff fc83 	bl	8005cd0 <__lo0bits>
 80063ca:	9b01      	ldr	r3, [sp, #4]
 80063cc:	6163      	str	r3, [r4, #20]
 80063ce:	2201      	movs	r2, #1
 80063d0:	3020      	adds	r0, #32
 80063d2:	6122      	str	r2, [r4, #16]
 80063d4:	f1b9 0f00 	cmp.w	r9, #0
 80063d8:	d1e8      	bne.n	80063ac <__d2b+0x64>
 80063da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80063de:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80063e2:	f8c8 0000 	str.w	r0, [r8]
 80063e6:	6918      	ldr	r0, [r3, #16]
 80063e8:	f7ff fc52 	bl	8005c90 <__hi0bits>
 80063ec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80063f0:	6028      	str	r0, [r5, #0]
 80063f2:	4620      	mov	r0, r4
 80063f4:	b003      	add	sp, #12
 80063f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063fa:	9b00      	ldr	r3, [sp, #0]
 80063fc:	6163      	str	r3, [r4, #20]
 80063fe:	9b01      	ldr	r3, [sp, #4]
 8006400:	e7cb      	b.n	800639a <__d2b+0x52>
 8006402:	4b03      	ldr	r3, [pc, #12]	; (8006410 <__d2b+0xc8>)
 8006404:	4803      	ldr	r0, [pc, #12]	; (8006414 <__d2b+0xcc>)
 8006406:	4622      	mov	r2, r4
 8006408:	f240 310a 	movw	r1, #778	; 0x30a
 800640c:	f001 fff2 	bl	80083f4 <__assert_func>
 8006410:	0801e2e4 	.word	0x0801e2e4
 8006414:	0801e32c 	.word	0x0801e32c

08006418 <__ratio>:
 8006418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800641c:	b083      	sub	sp, #12
 800641e:	460e      	mov	r6, r1
 8006420:	4669      	mov	r1, sp
 8006422:	4607      	mov	r7, r0
 8006424:	f7ff ff30 	bl	8006288 <__b2d>
 8006428:	a901      	add	r1, sp, #4
 800642a:	4630      	mov	r0, r6
 800642c:	ec55 4b10 	vmov	r4, r5, d0
 8006430:	f7ff ff2a 	bl	8006288 <__b2d>
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	6931      	ldr	r1, [r6, #16]
 8006438:	1a59      	subs	r1, r3, r1
 800643a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006444:	2b00      	cmp	r3, #0
 8006446:	ec51 0b10 	vmov	r0, r1, d0
 800644a:	dd0d      	ble.n	8006468 <__ratio+0x50>
 800644c:	eb05 5903 	add.w	r9, r5, r3, lsl #20
 8006450:	464d      	mov	r5, r9
 8006452:	4602      	mov	r2, r0
 8006454:	460b      	mov	r3, r1
 8006456:	4620      	mov	r0, r4
 8006458:	4629      	mov	r1, r5
 800645a:	f002 ffb5 	bl	80093c8 <__aeabi_ddiv>
 800645e:	ec41 0b10 	vmov	d0, r0, r1
 8006462:	b003      	add	sp, #12
 8006464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006468:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 800646c:	eb01 5703 	add.w	r7, r1, r3, lsl #20
 8006470:	4639      	mov	r1, r7
 8006472:	e7ee      	b.n	8006452 <__ratio+0x3a>

08006474 <_mprec_log10>:
 8006474:	2817      	cmp	r0, #23
 8006476:	b570      	push	{r4, r5, r6, lr}
 8006478:	4606      	mov	r6, r0
 800647a:	dd0c      	ble.n	8006496 <_mprec_log10+0x22>
 800647c:	490a      	ldr	r1, [pc, #40]	; (80064a8 <_mprec_log10+0x34>)
 800647e:	4d0b      	ldr	r5, [pc, #44]	; (80064ac <_mprec_log10+0x38>)
 8006480:	2000      	movs	r0, #0
 8006482:	2400      	movs	r4, #0
 8006484:	4622      	mov	r2, r4
 8006486:	462b      	mov	r3, r5
 8006488:	f002 fe74 	bl	8009174 <__aeabi_dmul>
 800648c:	3e01      	subs	r6, #1
 800648e:	d1f9      	bne.n	8006484 <_mprec_log10+0x10>
 8006490:	ec41 0b10 	vmov	d0, r0, r1
 8006494:	bd70      	pop	{r4, r5, r6, pc}
 8006496:	4b06      	ldr	r3, [pc, #24]	; (80064b0 <_mprec_log10+0x3c>)
 8006498:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
 800649c:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 80064a0:	ec41 0b10 	vmov	d0, r0, r1
 80064a4:	bd70      	pop	{r4, r5, r6, pc}
 80064a6:	bf00      	nop
 80064a8:	3ff00000 	.word	0x3ff00000
 80064ac:	40240000 	.word	0x40240000
 80064b0:	0800ee98 	.word	0x0800ee98

080064b4 <__copybits>:
 80064b4:	3901      	subs	r1, #1
 80064b6:	1149      	asrs	r1, r1, #5
 80064b8:	f101 0c01 	add.w	ip, r1, #1
 80064bc:	6911      	ldr	r1, [r2, #16]
 80064be:	f102 0314 	add.w	r3, r2, #20
 80064c2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80064c6:	428b      	cmp	r3, r1
 80064c8:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80064cc:	d216      	bcs.n	80064fc <__copybits+0x48>
 80064ce:	b510      	push	{r4, lr}
 80064d0:	f1a0 0e04 	sub.w	lr, r0, #4
 80064d4:	f853 4b04 	ldr.w	r4, [r3], #4
 80064d8:	f84e 4f04 	str.w	r4, [lr, #4]!
 80064dc:	4299      	cmp	r1, r3
 80064de:	d8f9      	bhi.n	80064d4 <__copybits+0x20>
 80064e0:	1a8b      	subs	r3, r1, r2
 80064e2:	3b15      	subs	r3, #21
 80064e4:	f023 0303 	bic.w	r3, r3, #3
 80064e8:	3304      	adds	r3, #4
 80064ea:	4418      	add	r0, r3
 80064ec:	4584      	cmp	ip, r0
 80064ee:	d904      	bls.n	80064fa <__copybits+0x46>
 80064f0:	2300      	movs	r3, #0
 80064f2:	f840 3b04 	str.w	r3, [r0], #4
 80064f6:	4584      	cmp	ip, r0
 80064f8:	d8fb      	bhi.n	80064f2 <__copybits+0x3e>
 80064fa:	bd10      	pop	{r4, pc}
 80064fc:	4584      	cmp	ip, r0
 80064fe:	d905      	bls.n	800650c <__copybits+0x58>
 8006500:	2300      	movs	r3, #0
 8006502:	f840 3b04 	str.w	r3, [r0], #4
 8006506:	4584      	cmp	ip, r0
 8006508:	d8fb      	bhi.n	8006502 <__copybits+0x4e>
 800650a:	4770      	bx	lr
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop

08006510 <__any_on>:
 8006510:	6903      	ldr	r3, [r0, #16]
 8006512:	114a      	asrs	r2, r1, #5
 8006514:	4293      	cmp	r3, r2
 8006516:	f100 0014 	add.w	r0, r0, #20
 800651a:	da09      	bge.n	8006530 <__any_on+0x20>
 800651c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006520:	e002      	b.n	8006528 <__any_on+0x18>
 8006522:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006526:	b9ca      	cbnz	r2, 800655c <__any_on+0x4c>
 8006528:	4283      	cmp	r3, r0
 800652a:	d8fa      	bhi.n	8006522 <__any_on+0x12>
 800652c:	2000      	movs	r0, #0
 800652e:	4770      	bx	lr
 8006530:	dd11      	ble.n	8006556 <__any_on+0x46>
 8006532:	f011 011f 	ands.w	r1, r1, #31
 8006536:	d00e      	beq.n	8006556 <__any_on+0x46>
 8006538:	b410      	push	{r4}
 800653a:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 800653e:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8006542:	fa24 f201 	lsr.w	r2, r4, r1
 8006546:	fa02 f101 	lsl.w	r1, r2, r1
 800654a:	428c      	cmp	r4, r1
 800654c:	d00c      	beq.n	8006568 <__any_on+0x58>
 800654e:	2001      	movs	r0, #1
 8006550:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 800655a:	e7e5      	b.n	8006528 <__any_on+0x18>
 800655c:	2001      	movs	r0, #1
 800655e:	4770      	bx	lr
 8006560:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006564:	2a00      	cmp	r2, #0
 8006566:	d1f2      	bne.n	800654e <__any_on+0x3e>
 8006568:	4283      	cmp	r3, r0
 800656a:	d8f9      	bhi.n	8006560 <__any_on+0x50>
 800656c:	2000      	movs	r0, #0
 800656e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006572:	4770      	bx	lr

08006574 <_putc_r>:
 8006574:	b570      	push	{r4, r5, r6, lr}
 8006576:	460d      	mov	r5, r1
 8006578:	4616      	mov	r6, r2
 800657a:	4604      	mov	r4, r0
 800657c:	b108      	cbz	r0, 8006582 <_putc_r+0xe>
 800657e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006580:	b17b      	cbz	r3, 80065a2 <_putc_r+0x2e>
 8006582:	68b3      	ldr	r3, [r6, #8]
 8006584:	3b01      	subs	r3, #1
 8006586:	2b00      	cmp	r3, #0
 8006588:	60b3      	str	r3, [r6, #8]
 800658a:	da11      	bge.n	80065b0 <_putc_r+0x3c>
 800658c:	69b0      	ldr	r0, [r6, #24]
 800658e:	4283      	cmp	r3, r0
 8006590:	db14      	blt.n	80065bc <_putc_r+0x48>
 8006592:	b2e8      	uxtb	r0, r5
 8006594:	280a      	cmp	r0, #10
 8006596:	d011      	beq.n	80065bc <_putc_r+0x48>
 8006598:	6833      	ldr	r3, [r6, #0]
 800659a:	1c5c      	adds	r4, r3, #1
 800659c:	6034      	str	r4, [r6, #0]
 800659e:	701d      	strb	r5, [r3, #0]
 80065a0:	bd70      	pop	{r4, r5, r6, pc}
 80065a2:	f7fe fa91 	bl	8004ac8 <__sinit>
 80065a6:	68b3      	ldr	r3, [r6, #8]
 80065a8:	3b01      	subs	r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	60b3      	str	r3, [r6, #8]
 80065ae:	dbed      	blt.n	800658c <_putc_r+0x18>
 80065b0:	6833      	ldr	r3, [r6, #0]
 80065b2:	1c5c      	adds	r4, r3, #1
 80065b4:	6034      	str	r4, [r6, #0]
 80065b6:	701d      	strb	r5, [r3, #0]
 80065b8:	b2e8      	uxtb	r0, r5
 80065ba:	bd70      	pop	{r4, r5, r6, pc}
 80065bc:	4632      	mov	r2, r6
 80065be:	4629      	mov	r1, r5
 80065c0:	4620      	mov	r0, r4
 80065c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80065c6:	f001 beb1 	b.w	800832c <__swbuf_r>
 80065ca:	bf00      	nop

080065cc <putc>:
 80065cc:	4b16      	ldr	r3, [pc, #88]	; (8006628 <putc+0x5c>)
 80065ce:	b570      	push	{r4, r5, r6, lr}
 80065d0:	681e      	ldr	r6, [r3, #0]
 80065d2:	4605      	mov	r5, r0
 80065d4:	460c      	mov	r4, r1
 80065d6:	b10e      	cbz	r6, 80065dc <putc+0x10>
 80065d8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80065da:	b17b      	cbz	r3, 80065fc <putc+0x30>
 80065dc:	68a3      	ldr	r3, [r4, #8]
 80065de:	3b01      	subs	r3, #1
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	60a3      	str	r3, [r4, #8]
 80065e4:	da12      	bge.n	800660c <putc+0x40>
 80065e6:	69a2      	ldr	r2, [r4, #24]
 80065e8:	4293      	cmp	r3, r2
 80065ea:	db15      	blt.n	8006618 <putc+0x4c>
 80065ec:	b2e8      	uxtb	r0, r5
 80065ee:	280a      	cmp	r0, #10
 80065f0:	d012      	beq.n	8006618 <putc+0x4c>
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	1c5a      	adds	r2, r3, #1
 80065f6:	6022      	str	r2, [r4, #0]
 80065f8:	701d      	strb	r5, [r3, #0]
 80065fa:	bd70      	pop	{r4, r5, r6, pc}
 80065fc:	4630      	mov	r0, r6
 80065fe:	f7fe fa63 	bl	8004ac8 <__sinit>
 8006602:	68a3      	ldr	r3, [r4, #8]
 8006604:	3b01      	subs	r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	60a3      	str	r3, [r4, #8]
 800660a:	dbec      	blt.n	80065e6 <putc+0x1a>
 800660c:	6823      	ldr	r3, [r4, #0]
 800660e:	1c5a      	adds	r2, r3, #1
 8006610:	6022      	str	r2, [r4, #0]
 8006612:	701d      	strb	r5, [r3, #0]
 8006614:	b2e8      	uxtb	r0, r5
 8006616:	bd70      	pop	{r4, r5, r6, pc}
 8006618:	4622      	mov	r2, r4
 800661a:	4629      	mov	r1, r5
 800661c:	4630      	mov	r0, r6
 800661e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006622:	f001 be83 	b.w	800832c <__swbuf_r>
 8006626:	bf00      	nop
 8006628:	20000008 	.word	0x20000008

0800662c <_realloc_r>:
 800662c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006630:	4617      	mov	r7, r2
 8006632:	2900      	cmp	r1, #0
 8006634:	f000 8098 	beq.w	8006768 <_realloc_r+0x13c>
 8006638:	f107 050b 	add.w	r5, r7, #11
 800663c:	4680      	mov	r8, r0
 800663e:	460c      	mov	r4, r1
 8006640:	f7ff fa44 	bl	8005acc <__malloc_lock>
 8006644:	2d16      	cmp	r5, #22
 8006646:	d85d      	bhi.n	8006704 <_realloc_r+0xd8>
 8006648:	2510      	movs	r5, #16
 800664a:	462a      	mov	r2, r5
 800664c:	42af      	cmp	r7, r5
 800664e:	d85e      	bhi.n	800670e <_realloc_r+0xe2>
 8006650:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8006654:	f021 0603 	bic.w	r6, r1, #3
 8006658:	4296      	cmp	r6, r2
 800665a:	f1a4 0908 	sub.w	r9, r4, #8
 800665e:	da62      	bge.n	8006726 <_realloc_r+0xfa>
 8006660:	4bbc      	ldr	r3, [pc, #752]	; (8006954 <_realloc_r+0x328>)
 8006662:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8006666:	eb09 0006 	add.w	r0, r9, r6
 800666a:	4584      	cmp	ip, r0
 800666c:	f000 8097 	beq.w	800679e <_realloc_r+0x172>
 8006670:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8006674:	f02c 0301 	bic.w	r3, ip, #1
 8006678:	4403      	add	r3, r0
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	07db      	lsls	r3, r3, #31
 800667e:	d468      	bmi.n	8006752 <_realloc_r+0x126>
 8006680:	f02c 0c03 	bic.w	ip, ip, #3
 8006684:	eb06 030c 	add.w	r3, r6, ip
 8006688:	4293      	cmp	r3, r2
 800668a:	da47      	bge.n	800671c <_realloc_r+0xf0>
 800668c:	07cb      	lsls	r3, r1, #31
 800668e:	d410      	bmi.n	80066b2 <_realloc_r+0x86>
 8006690:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8006694:	eba9 0a03 	sub.w	sl, r9, r3
 8006698:	f8da 3004 	ldr.w	r3, [sl, #4]
 800669c:	f023 0103 	bic.w	r1, r3, #3
 80066a0:	448c      	add	ip, r1
 80066a2:	44b4      	add	ip, r6
 80066a4:	4594      	cmp	ip, r2
 80066a6:	f280 8111 	bge.w	80068cc <_realloc_r+0x2a0>
 80066aa:	1873      	adds	r3, r6, r1
 80066ac:	4293      	cmp	r3, r2
 80066ae:	f280 80e8 	bge.w	8006882 <_realloc_r+0x256>
 80066b2:	4639      	mov	r1, r7
 80066b4:	4640      	mov	r0, r8
 80066b6:	f7fe fdf3 	bl	80052a0 <_malloc_r>
 80066ba:	4607      	mov	r7, r0
 80066bc:	b1e0      	cbz	r0, 80066f8 <_realloc_r+0xcc>
 80066be:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80066c2:	f023 0301 	bic.w	r3, r3, #1
 80066c6:	444b      	add	r3, r9
 80066c8:	f1a0 0208 	sub.w	r2, r0, #8
 80066cc:	4293      	cmp	r3, r2
 80066ce:	f000 80d2 	beq.w	8006876 <_realloc_r+0x24a>
 80066d2:	1f32      	subs	r2, r6, #4
 80066d4:	2a24      	cmp	r2, #36	; 0x24
 80066d6:	f200 80f5 	bhi.w	80068c4 <_realloc_r+0x298>
 80066da:	2a13      	cmp	r2, #19
 80066dc:	f200 80ac 	bhi.w	8006838 <_realloc_r+0x20c>
 80066e0:	4603      	mov	r3, r0
 80066e2:	4622      	mov	r2, r4
 80066e4:	6811      	ldr	r1, [r2, #0]
 80066e6:	6019      	str	r1, [r3, #0]
 80066e8:	6851      	ldr	r1, [r2, #4]
 80066ea:	6059      	str	r1, [r3, #4]
 80066ec:	6892      	ldr	r2, [r2, #8]
 80066ee:	609a      	str	r2, [r3, #8]
 80066f0:	4621      	mov	r1, r4
 80066f2:	4640      	mov	r0, r8
 80066f4:	f7fe fa58 	bl	8004ba8 <_free_r>
 80066f8:	4640      	mov	r0, r8
 80066fa:	f7ff f9e9 	bl	8005ad0 <__malloc_unlock>
 80066fe:	4638      	mov	r0, r7
 8006700:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006704:	f025 0507 	bic.w	r5, r5, #7
 8006708:	2d00      	cmp	r5, #0
 800670a:	462a      	mov	r2, r5
 800670c:	da9e      	bge.n	800664c <_realloc_r+0x20>
 800670e:	230c      	movs	r3, #12
 8006710:	f8c8 3000 	str.w	r3, [r8]
 8006714:	2700      	movs	r7, #0
 8006716:	4638      	mov	r0, r7
 8006718:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671c:	461e      	mov	r6, r3
 800671e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 8006722:	60d3      	str	r3, [r2, #12]
 8006724:	609a      	str	r2, [r3, #8]
 8006726:	1b73      	subs	r3, r6, r5
 8006728:	2b0f      	cmp	r3, #15
 800672a:	d822      	bhi.n	8006772 <_realloc_r+0x146>
 800672c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	4333      	orrs	r3, r6
 8006736:	444e      	add	r6, r9
 8006738:	f8c9 3004 	str.w	r3, [r9, #4]
 800673c:	6873      	ldr	r3, [r6, #4]
 800673e:	f043 0301 	orr.w	r3, r3, #1
 8006742:	6073      	str	r3, [r6, #4]
 8006744:	4640      	mov	r0, r8
 8006746:	4627      	mov	r7, r4
 8006748:	f7ff f9c2 	bl	8005ad0 <__malloc_unlock>
 800674c:	4638      	mov	r0, r7
 800674e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006752:	07c9      	lsls	r1, r1, #31
 8006754:	d4ad      	bmi.n	80066b2 <_realloc_r+0x86>
 8006756:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800675a:	eba9 0a03 	sub.w	sl, r9, r3
 800675e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006762:	f021 0103 	bic.w	r1, r1, #3
 8006766:	e7a0      	b.n	80066aa <_realloc_r+0x7e>
 8006768:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800676c:	4611      	mov	r1, r2
 800676e:	f7fe bd97 	b.w	80052a0 <_malloc_r>
 8006772:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006776:	f001 0101 	and.w	r1, r1, #1
 800677a:	4329      	orrs	r1, r5
 800677c:	f8c9 1004 	str.w	r1, [r9, #4]
 8006780:	eb09 0105 	add.w	r1, r9, r5
 8006784:	444e      	add	r6, r9
 8006786:	f043 0301 	orr.w	r3, r3, #1
 800678a:	604b      	str	r3, [r1, #4]
 800678c:	6873      	ldr	r3, [r6, #4]
 800678e:	f043 0301 	orr.w	r3, r3, #1
 8006792:	3108      	adds	r1, #8
 8006794:	6073      	str	r3, [r6, #4]
 8006796:	4640      	mov	r0, r8
 8006798:	f7fe fa06 	bl	8004ba8 <_free_r>
 800679c:	e7d2      	b.n	8006744 <_realloc_r+0x118>
 800679e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80067a2:	f020 0b03 	bic.w	fp, r0, #3
 80067a6:	eb06 0c0b 	add.w	ip, r6, fp
 80067aa:	f105 0010 	add.w	r0, r5, #16
 80067ae:	4584      	cmp	ip, r0
 80067b0:	da4d      	bge.n	800684e <_realloc_r+0x222>
 80067b2:	07c9      	lsls	r1, r1, #31
 80067b4:	f53f af7d 	bmi.w	80066b2 <_realloc_r+0x86>
 80067b8:	f854 1c08 	ldr.w	r1, [r4, #-8]
 80067bc:	eba9 0a01 	sub.w	sl, r9, r1
 80067c0:	f8da 1004 	ldr.w	r1, [sl, #4]
 80067c4:	f021 0103 	bic.w	r1, r1, #3
 80067c8:	448b      	add	fp, r1
 80067ca:	44b3      	add	fp, r6
 80067cc:	4558      	cmp	r0, fp
 80067ce:	f73f af6c 	bgt.w	80066aa <_realloc_r+0x7e>
 80067d2:	4657      	mov	r7, sl
 80067d4:	f8da 100c 	ldr.w	r1, [sl, #12]
 80067d8:	f857 0f08 	ldr.w	r0, [r7, #8]!
 80067dc:	1f32      	subs	r2, r6, #4
 80067de:	2a24      	cmp	r2, #36	; 0x24
 80067e0:	60c1      	str	r1, [r0, #12]
 80067e2:	6088      	str	r0, [r1, #8]
 80067e4:	f200 80db 	bhi.w	800699e <_realloc_r+0x372>
 80067e8:	2a13      	cmp	r2, #19
 80067ea:	f240 80d6 	bls.w	800699a <_realloc_r+0x36e>
 80067ee:	6821      	ldr	r1, [r4, #0]
 80067f0:	f8ca 1008 	str.w	r1, [sl, #8]
 80067f4:	6861      	ldr	r1, [r4, #4]
 80067f6:	f8ca 100c 	str.w	r1, [sl, #12]
 80067fa:	2a1b      	cmp	r2, #27
 80067fc:	f200 80df 	bhi.w	80069be <_realloc_r+0x392>
 8006800:	3408      	adds	r4, #8
 8006802:	f10a 0210 	add.w	r2, sl, #16
 8006806:	6821      	ldr	r1, [r4, #0]
 8006808:	6011      	str	r1, [r2, #0]
 800680a:	6861      	ldr	r1, [r4, #4]
 800680c:	6051      	str	r1, [r2, #4]
 800680e:	68a1      	ldr	r1, [r4, #8]
 8006810:	6091      	str	r1, [r2, #8]
 8006812:	eb0a 0105 	add.w	r1, sl, r5
 8006816:	ebab 0205 	sub.w	r2, fp, r5
 800681a:	f042 0201 	orr.w	r2, r2, #1
 800681e:	6099      	str	r1, [r3, #8]
 8006820:	604a      	str	r2, [r1, #4]
 8006822:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	431d      	orrs	r5, r3
 800682c:	4640      	mov	r0, r8
 800682e:	f8ca 5004 	str.w	r5, [sl, #4]
 8006832:	f7ff f94d 	bl	8005ad0 <__malloc_unlock>
 8006836:	e76e      	b.n	8006716 <_realloc_r+0xea>
 8006838:	6823      	ldr	r3, [r4, #0]
 800683a:	6003      	str	r3, [r0, #0]
 800683c:	6863      	ldr	r3, [r4, #4]
 800683e:	6043      	str	r3, [r0, #4]
 8006840:	2a1b      	cmp	r2, #27
 8006842:	d868      	bhi.n	8006916 <_realloc_r+0x2ea>
 8006844:	f104 0208 	add.w	r2, r4, #8
 8006848:	f100 0308 	add.w	r3, r0, #8
 800684c:	e74a      	b.n	80066e4 <_realloc_r+0xb8>
 800684e:	eb09 0205 	add.w	r2, r9, r5
 8006852:	609a      	str	r2, [r3, #8]
 8006854:	ebac 0305 	sub.w	r3, ip, r5
 8006858:	f043 0301 	orr.w	r3, r3, #1
 800685c:	6053      	str	r3, [r2, #4]
 800685e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	431d      	orrs	r5, r3
 8006868:	4640      	mov	r0, r8
 800686a:	f844 5c04 	str.w	r5, [r4, #-4]
 800686e:	f7ff f92f 	bl	8005ad0 <__malloc_unlock>
 8006872:	4627      	mov	r7, r4
 8006874:	e74f      	b.n	8006716 <_realloc_r+0xea>
 8006876:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800687a:	f023 0303 	bic.w	r3, r3, #3
 800687e:	441e      	add	r6, r3
 8006880:	e751      	b.n	8006726 <_realloc_r+0xfa>
 8006882:	4657      	mov	r7, sl
 8006884:	f8da 100c 	ldr.w	r1, [sl, #12]
 8006888:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800688c:	1f32      	subs	r2, r6, #4
 800688e:	2a24      	cmp	r2, #36	; 0x24
 8006890:	60c1      	str	r1, [r0, #12]
 8006892:	6088      	str	r0, [r1, #8]
 8006894:	d84c      	bhi.n	8006930 <_realloc_r+0x304>
 8006896:	2a13      	cmp	r2, #19
 8006898:	d948      	bls.n	800692c <_realloc_r+0x300>
 800689a:	6821      	ldr	r1, [r4, #0]
 800689c:	f8ca 1008 	str.w	r1, [sl, #8]
 80068a0:	6861      	ldr	r1, [r4, #4]
 80068a2:	f8ca 100c 	str.w	r1, [sl, #12]
 80068a6:	2a1b      	cmp	r2, #27
 80068a8:	d856      	bhi.n	8006958 <_realloc_r+0x32c>
 80068aa:	3408      	adds	r4, #8
 80068ac:	f10a 0210 	add.w	r2, sl, #16
 80068b0:	461e      	mov	r6, r3
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	6013      	str	r3, [r2, #0]
 80068b6:	6863      	ldr	r3, [r4, #4]
 80068b8:	6053      	str	r3, [r2, #4]
 80068ba:	68a3      	ldr	r3, [r4, #8]
 80068bc:	6093      	str	r3, [r2, #8]
 80068be:	46d1      	mov	r9, sl
 80068c0:	463c      	mov	r4, r7
 80068c2:	e730      	b.n	8006726 <_realloc_r+0xfa>
 80068c4:	4621      	mov	r1, r4
 80068c6:	f7ff f885 	bl	80059d4 <memmove>
 80068ca:	e711      	b.n	80066f0 <_realloc_r+0xc4>
 80068cc:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
 80068d0:	4657      	mov	r7, sl
 80068d2:	60cb      	str	r3, [r1, #12]
 80068d4:	6099      	str	r1, [r3, #8]
 80068d6:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80068da:	f8da 300c 	ldr.w	r3, [sl, #12]
 80068de:	60cb      	str	r3, [r1, #12]
 80068e0:	1f32      	subs	r2, r6, #4
 80068e2:	2a24      	cmp	r2, #36	; 0x24
 80068e4:	6099      	str	r1, [r3, #8]
 80068e6:	d82d      	bhi.n	8006944 <_realloc_r+0x318>
 80068e8:	2a13      	cmp	r2, #19
 80068ea:	d929      	bls.n	8006940 <_realloc_r+0x314>
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	f8ca 3008 	str.w	r3, [sl, #8]
 80068f2:	6863      	ldr	r3, [r4, #4]
 80068f4:	f8ca 300c 	str.w	r3, [sl, #12]
 80068f8:	2a1b      	cmp	r2, #27
 80068fa:	d842      	bhi.n	8006982 <_realloc_r+0x356>
 80068fc:	3408      	adds	r4, #8
 80068fe:	f10a 0310 	add.w	r3, sl, #16
 8006902:	6822      	ldr	r2, [r4, #0]
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	6862      	ldr	r2, [r4, #4]
 8006908:	605a      	str	r2, [r3, #4]
 800690a:	68a2      	ldr	r2, [r4, #8]
 800690c:	609a      	str	r2, [r3, #8]
 800690e:	4666      	mov	r6, ip
 8006910:	46d1      	mov	r9, sl
 8006912:	463c      	mov	r4, r7
 8006914:	e707      	b.n	8006726 <_realloc_r+0xfa>
 8006916:	68a3      	ldr	r3, [r4, #8]
 8006918:	6083      	str	r3, [r0, #8]
 800691a:	68e3      	ldr	r3, [r4, #12]
 800691c:	60c3      	str	r3, [r0, #12]
 800691e:	2a24      	cmp	r2, #36	; 0x24
 8006920:	d026      	beq.n	8006970 <_realloc_r+0x344>
 8006922:	f104 0210 	add.w	r2, r4, #16
 8006926:	f100 0310 	add.w	r3, r0, #16
 800692a:	e6db      	b.n	80066e4 <_realloc_r+0xb8>
 800692c:	463a      	mov	r2, r7
 800692e:	e7bf      	b.n	80068b0 <_realloc_r+0x284>
 8006930:	4621      	mov	r1, r4
 8006932:	4638      	mov	r0, r7
 8006934:	461e      	mov	r6, r3
 8006936:	46d1      	mov	r9, sl
 8006938:	f7ff f84c 	bl	80059d4 <memmove>
 800693c:	463c      	mov	r4, r7
 800693e:	e6f2      	b.n	8006726 <_realloc_r+0xfa>
 8006940:	463b      	mov	r3, r7
 8006942:	e7de      	b.n	8006902 <_realloc_r+0x2d6>
 8006944:	4621      	mov	r1, r4
 8006946:	4638      	mov	r0, r7
 8006948:	4666      	mov	r6, ip
 800694a:	46d1      	mov	r9, sl
 800694c:	f7ff f842 	bl	80059d4 <memmove>
 8006950:	463c      	mov	r4, r7
 8006952:	e6e8      	b.n	8006726 <_realloc_r+0xfa>
 8006954:	20000438 	.word	0x20000438
 8006958:	68a1      	ldr	r1, [r4, #8]
 800695a:	f8ca 1010 	str.w	r1, [sl, #16]
 800695e:	68e1      	ldr	r1, [r4, #12]
 8006960:	f8ca 1014 	str.w	r1, [sl, #20]
 8006964:	2a24      	cmp	r2, #36	; 0x24
 8006966:	d020      	beq.n	80069aa <_realloc_r+0x37e>
 8006968:	3410      	adds	r4, #16
 800696a:	f10a 0218 	add.w	r2, sl, #24
 800696e:	e79f      	b.n	80068b0 <_realloc_r+0x284>
 8006970:	6923      	ldr	r3, [r4, #16]
 8006972:	6103      	str	r3, [r0, #16]
 8006974:	6961      	ldr	r1, [r4, #20]
 8006976:	6141      	str	r1, [r0, #20]
 8006978:	f104 0218 	add.w	r2, r4, #24
 800697c:	f100 0318 	add.w	r3, r0, #24
 8006980:	e6b0      	b.n	80066e4 <_realloc_r+0xb8>
 8006982:	68a3      	ldr	r3, [r4, #8]
 8006984:	f8ca 3010 	str.w	r3, [sl, #16]
 8006988:	68e3      	ldr	r3, [r4, #12]
 800698a:	f8ca 3014 	str.w	r3, [sl, #20]
 800698e:	2a24      	cmp	r2, #36	; 0x24
 8006990:	d021      	beq.n	80069d6 <_realloc_r+0x3aa>
 8006992:	3410      	adds	r4, #16
 8006994:	f10a 0318 	add.w	r3, sl, #24
 8006998:	e7b3      	b.n	8006902 <_realloc_r+0x2d6>
 800699a:	463a      	mov	r2, r7
 800699c:	e733      	b.n	8006806 <_realloc_r+0x1da>
 800699e:	4621      	mov	r1, r4
 80069a0:	4638      	mov	r0, r7
 80069a2:	f7ff f817 	bl	80059d4 <memmove>
 80069a6:	4b16      	ldr	r3, [pc, #88]	; (8006a00 <_realloc_r+0x3d4>)
 80069a8:	e733      	b.n	8006812 <_realloc_r+0x1e6>
 80069aa:	6922      	ldr	r2, [r4, #16]
 80069ac:	f8ca 2018 	str.w	r2, [sl, #24]
 80069b0:	6962      	ldr	r2, [r4, #20]
 80069b2:	f8ca 201c 	str.w	r2, [sl, #28]
 80069b6:	3418      	adds	r4, #24
 80069b8:	f10a 0220 	add.w	r2, sl, #32
 80069bc:	e778      	b.n	80068b0 <_realloc_r+0x284>
 80069be:	68a1      	ldr	r1, [r4, #8]
 80069c0:	f8ca 1010 	str.w	r1, [sl, #16]
 80069c4:	68e1      	ldr	r1, [r4, #12]
 80069c6:	f8ca 1014 	str.w	r1, [sl, #20]
 80069ca:	2a24      	cmp	r2, #36	; 0x24
 80069cc:	d00d      	beq.n	80069ea <_realloc_r+0x3be>
 80069ce:	3410      	adds	r4, #16
 80069d0:	f10a 0218 	add.w	r2, sl, #24
 80069d4:	e717      	b.n	8006806 <_realloc_r+0x1da>
 80069d6:	6923      	ldr	r3, [r4, #16]
 80069d8:	f8ca 3018 	str.w	r3, [sl, #24]
 80069dc:	6963      	ldr	r3, [r4, #20]
 80069de:	f8ca 301c 	str.w	r3, [sl, #28]
 80069e2:	3418      	adds	r4, #24
 80069e4:	f10a 0320 	add.w	r3, sl, #32
 80069e8:	e78b      	b.n	8006902 <_realloc_r+0x2d6>
 80069ea:	6922      	ldr	r2, [r4, #16]
 80069ec:	f8ca 2018 	str.w	r2, [sl, #24]
 80069f0:	6962      	ldr	r2, [r4, #20]
 80069f2:	f8ca 201c 	str.w	r2, [sl, #28]
 80069f6:	3418      	adds	r4, #24
 80069f8:	f10a 0220 	add.w	r2, sl, #32
 80069fc:	e703      	b.n	8006806 <_realloc_r+0x1da>
 80069fe:	bf00      	nop
 8006a00:	20000438 	.word	0x20000438

08006a04 <__sread>:
 8006a04:	b510      	push	{r4, lr}
 8006a06:	460c      	mov	r4, r1
 8006a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a0c:	f003 fc5c 	bl	800a2c8 <_read_r>
 8006a10:	2800      	cmp	r0, #0
 8006a12:	db03      	blt.n	8006a1c <__sread+0x18>
 8006a14:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006a16:	4403      	add	r3, r0
 8006a18:	6523      	str	r3, [r4, #80]	; 0x50
 8006a1a:	bd10      	pop	{r4, pc}
 8006a1c:	89a3      	ldrh	r3, [r4, #12]
 8006a1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a22:	81a3      	strh	r3, [r4, #12]
 8006a24:	bd10      	pop	{r4, pc}
 8006a26:	bf00      	nop

08006a28 <__seofread>:
 8006a28:	2000      	movs	r0, #0
 8006a2a:	4770      	bx	lr

08006a2c <__swrite>:
 8006a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a30:	460c      	mov	r4, r1
 8006a32:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 8006a36:	461f      	mov	r7, r3
 8006a38:	05cb      	lsls	r3, r1, #23
 8006a3a:	4605      	mov	r5, r0
 8006a3c:	4616      	mov	r6, r2
 8006a3e:	d40b      	bmi.n	8006a58 <__swrite+0x2c>
 8006a40:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8006a44:	81a1      	strh	r1, [r4, #12]
 8006a46:	463b      	mov	r3, r7
 8006a48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a4c:	4632      	mov	r2, r6
 8006a4e:	4628      	mov	r0, r5
 8006a50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a54:	f003 bcc2 	b.w	800a3dc <_write_r>
 8006a58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f003 fb68 	bl	800a134 <_lseek_r>
 8006a64:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8006a68:	e7ea      	b.n	8006a40 <__swrite+0x14>
 8006a6a:	bf00      	nop

08006a6c <__sseek>:
 8006a6c:	b510      	push	{r4, lr}
 8006a6e:	460c      	mov	r4, r1
 8006a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a74:	f003 fb5e 	bl	800a134 <_lseek_r>
 8006a78:	89a3      	ldrh	r3, [r4, #12]
 8006a7a:	1c42      	adds	r2, r0, #1
 8006a7c:	bf0e      	itee	eq
 8006a7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a86:	6520      	strne	r0, [r4, #80]	; 0x50
 8006a88:	81a3      	strh	r3, [r4, #12]
 8006a8a:	bd10      	pop	{r4, pc}

08006a8c <__sclose>:
 8006a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a90:	f003 bb46 	b.w	800a120 <_close_r>

08006a94 <__ssprint_r>:
 8006a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a98:	6893      	ldr	r3, [r2, #8]
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	4691      	mov	r9, r2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d06e      	beq.n	8006b80 <__ssprint_r+0xec>
 8006aa2:	6817      	ldr	r7, [r2, #0]
 8006aa4:	688d      	ldr	r5, [r1, #8]
 8006aa6:	4680      	mov	r8, r0
 8006aa8:	460c      	mov	r4, r1
 8006aaa:	6808      	ldr	r0, [r1, #0]
 8006aac:	3708      	adds	r7, #8
 8006aae:	e044      	b.n	8006b3a <__ssprint_r+0xa6>
 8006ab0:	89a3      	ldrh	r3, [r4, #12]
 8006ab2:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8006ab6:	d02e      	beq.n	8006b16 <__ssprint_r+0x82>
 8006ab8:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
 8006abc:	eba0 0a01 	sub.w	sl, r0, r1
 8006ac0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ac4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ac8:	eb0a 0006 	add.w	r0, sl, r6
 8006acc:	106d      	asrs	r5, r5, #1
 8006ace:	3001      	adds	r0, #1
 8006ad0:	42a8      	cmp	r0, r5
 8006ad2:	462a      	mov	r2, r5
 8006ad4:	bf84      	itt	hi
 8006ad6:	4605      	movhi	r5, r0
 8006ad8:	462a      	movhi	r2, r5
 8006ada:	055b      	lsls	r3, r3, #21
 8006adc:	d537      	bpl.n	8006b4e <__ssprint_r+0xba>
 8006ade:	4611      	mov	r1, r2
 8006ae0:	4640      	mov	r0, r8
 8006ae2:	f7fe fbdd 	bl	80052a0 <_malloc_r>
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	d03b      	beq.n	8006b62 <__ssprint_r+0xce>
 8006aea:	4652      	mov	r2, sl
 8006aec:	6921      	ldr	r1, [r4, #16]
 8006aee:	9001      	str	r0, [sp, #4]
 8006af0:	f7fe fed6 	bl	80058a0 <memcpy>
 8006af4:	89a2      	ldrh	r2, [r4, #12]
 8006af6:	9b01      	ldr	r3, [sp, #4]
 8006af8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8006afc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b00:	81a2      	strh	r2, [r4, #12]
 8006b02:	eba5 020a 	sub.w	r2, r5, sl
 8006b06:	eb03 000a 	add.w	r0, r3, sl
 8006b0a:	6165      	str	r5, [r4, #20]
 8006b0c:	60a2      	str	r2, [r4, #8]
 8006b0e:	6123      	str	r3, [r4, #16]
 8006b10:	6020      	str	r0, [r4, #0]
 8006b12:	4635      	mov	r5, r6
 8006b14:	46b2      	mov	sl, r6
 8006b16:	4659      	mov	r1, fp
 8006b18:	4652      	mov	r2, sl
 8006b1a:	f7fe ff5b 	bl	80059d4 <memmove>
 8006b1e:	68a0      	ldr	r0, [r4, #8]
 8006b20:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8006b24:	6823      	ldr	r3, [r4, #0]
 8006b26:	1b45      	subs	r5, r0, r5
 8006b28:	1b8e      	subs	r6, r1, r6
 8006b2a:	eb03 000a 	add.w	r0, r3, sl
 8006b2e:	60a5      	str	r5, [r4, #8]
 8006b30:	6020      	str	r0, [r4, #0]
 8006b32:	f8c9 6008 	str.w	r6, [r9, #8]
 8006b36:	b31e      	cbz	r6, 8006b80 <__ssprint_r+0xec>
 8006b38:	3708      	adds	r7, #8
 8006b3a:	e957 b602 	ldrd	fp, r6, [r7, #-8]
 8006b3e:	2e00      	cmp	r6, #0
 8006b40:	d0fa      	beq.n	8006b38 <__ssprint_r+0xa4>
 8006b42:	42b5      	cmp	r5, r6
 8006b44:	46aa      	mov	sl, r5
 8006b46:	d9b3      	bls.n	8006ab0 <__ssprint_r+0x1c>
 8006b48:	4635      	mov	r5, r6
 8006b4a:	46b2      	mov	sl, r6
 8006b4c:	e7e3      	b.n	8006b16 <__ssprint_r+0x82>
 8006b4e:	4640      	mov	r0, r8
 8006b50:	f7ff fd6c 	bl	800662c <_realloc_r>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2800      	cmp	r0, #0
 8006b58:	d1d3      	bne.n	8006b02 <__ssprint_r+0x6e>
 8006b5a:	6921      	ldr	r1, [r4, #16]
 8006b5c:	4640      	mov	r0, r8
 8006b5e:	f7fe f823 	bl	8004ba8 <_free_r>
 8006b62:	230c      	movs	r3, #12
 8006b64:	f8c8 3000 	str.w	r3, [r8]
 8006b68:	89a3      	ldrh	r3, [r4, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b74:	81a3      	strh	r3, [r4, #12]
 8006b76:	e9c9 2201 	strd	r2, r2, [r9, #4]
 8006b7a:	b003      	add	sp, #12
 8006b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b80:	2000      	movs	r0, #0
 8006b82:	f8c9 0004 	str.w	r0, [r9, #4]
 8006b86:	b003      	add	sp, #12
 8006b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006b8c <_svfiprintf_r>:
 8006b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b90:	b0ab      	sub	sp, #172	; 0xac
 8006b92:	4617      	mov	r7, r2
 8006b94:	9306      	str	r3, [sp, #24]
 8006b96:	898b      	ldrh	r3, [r1, #12]
 8006b98:	061a      	lsls	r2, r3, #24
 8006b9a:	4688      	mov	r8, r1
 8006b9c:	4683      	mov	fp, r0
 8006b9e:	d503      	bpl.n	8006ba8 <_svfiprintf_r+0x1c>
 8006ba0:	690b      	ldr	r3, [r1, #16]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 84a4 	beq.w	80074f0 <_svfiprintf_r+0x964>
 8006ba8:	ab1a      	add	r3, sp, #104	; 0x68
 8006baa:	930d      	str	r3, [sp, #52]	; 0x34
 8006bac:	2300      	movs	r3, #0
 8006bae:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8006bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8006bb4:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8006bb8:	9303      	str	r3, [sp, #12]
 8006bba:	465e      	mov	r6, fp
 8006bbc:	783b      	ldrb	r3, [r7, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 8135 	beq.w	8006e2e <_svfiprintf_r+0x2a2>
 8006bc4:	463c      	mov	r4, r7
 8006bc6:	e004      	b.n	8006bd2 <_svfiprintf_r+0x46>
 8006bc8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 8156 	beq.w	8006e7e <_svfiprintf_r+0x2f2>
 8006bd2:	2b25      	cmp	r3, #37	; 0x25
 8006bd4:	d1f8      	bne.n	8006bc8 <_svfiprintf_r+0x3c>
 8006bd6:	1be5      	subs	r5, r4, r7
 8006bd8:	f040 8153 	bne.w	8006e82 <_svfiprintf_r+0x2f6>
 8006bdc:	7823      	ldrb	r3, [r4, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f000 8125 	beq.w	8006e2e <_svfiprintf_r+0x2a2>
 8006be4:	2100      	movs	r1, #0
 8006be6:	f04f 0200 	mov.w	r2, #0
 8006bea:	7863      	ldrb	r3, [r4, #1]
 8006bec:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 8006bf0:	1c67      	adds	r7, r4, #1
 8006bf2:	4608      	mov	r0, r1
 8006bf4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8006bf8:	9105      	str	r1, [sp, #20]
 8006bfa:	468a      	mov	sl, r1
 8006bfc:	3701      	adds	r7, #1
 8006bfe:	f1a3 0220 	sub.w	r2, r3, #32
 8006c02:	2a58      	cmp	r2, #88	; 0x58
 8006c04:	f200 8157 	bhi.w	8006eb6 <_svfiprintf_r+0x32a>
 8006c08:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006c0c:	015502aa 	.word	0x015502aa
 8006c10:	02a60155 	.word	0x02a60155
 8006c14:	01550155 	.word	0x01550155
 8006c18:	01550155 	.word	0x01550155
 8006c1c:	01550155 	.word	0x01550155
 8006c20:	0298029c 	.word	0x0298029c
 8006c24:	01350155 	.word	0x01350155
 8006c28:	0155027f 	.word	0x0155027f
 8006c2c:	0059027b 	.word	0x0059027b
 8006c30:	00590059 	.word	0x00590059
 8006c34:	00590059 	.word	0x00590059
 8006c38:	00590059 	.word	0x00590059
 8006c3c:	00590059 	.word	0x00590059
 8006c40:	01550155 	.word	0x01550155
 8006c44:	01550155 	.word	0x01550155
 8006c48:	01550155 	.word	0x01550155
 8006c4c:	01550155 	.word	0x01550155
 8006c50:	01550155 	.word	0x01550155
 8006c54:	01550261 	.word	0x01550261
 8006c58:	01550155 	.word	0x01550155
 8006c5c:	01550155 	.word	0x01550155
 8006c60:	01550155 	.word	0x01550155
 8006c64:	01550155 	.word	0x01550155
 8006c68:	01220155 	.word	0x01220155
 8006c6c:	01550155 	.word	0x01550155
 8006c70:	01550155 	.word	0x01550155
 8006c74:	00680155 	.word	0x00680155
 8006c78:	01550155 	.word	0x01550155
 8006c7c:	01550215 	.word	0x01550215
 8006c80:	01550155 	.word	0x01550155
 8006c84:	01550155 	.word	0x01550155
 8006c88:	01550155 	.word	0x01550155
 8006c8c:	01550155 	.word	0x01550155
 8006c90:	02060155 	.word	0x02060155
 8006c94:	01550184 	.word	0x01550184
 8006c98:	01550155 	.word	0x01550155
 8006c9c:	0184025d 	.word	0x0184025d
 8006ca0:	01550155 	.word	0x01550155
 8006ca4:	01550253 	.word	0x01550253
 8006ca8:	0124023d 	.word	0x0124023d
 8006cac:	01e1022c 	.word	0x01e1022c
 8006cb0:	01c00155 	.word	0x01c00155
 8006cb4:	006a0155 	.word	0x006a0155
 8006cb8:	01550155 	.word	0x01550155
 8006cbc:	01e5      	.short	0x01e5
 8006cbe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006cc2:	2400      	movs	r4, #0
 8006cc4:	f817 3b01 	ldrb.w	r3, [r7], #1
 8006cc8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8006ccc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8006cd0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006cd4:	2a09      	cmp	r2, #9
 8006cd6:	d9f5      	bls.n	8006cc4 <_svfiprintf_r+0x138>
 8006cd8:	9405      	str	r4, [sp, #20]
 8006cda:	e790      	b.n	8006bfe <_svfiprintf_r+0x72>
 8006cdc:	f04a 0a10 	orr.w	sl, sl, #16
 8006ce0:	f01a 0120 	ands.w	r1, sl, #32
 8006ce4:	f000 8108 	beq.w	8006ef8 <_svfiprintf_r+0x36c>
 8006ce8:	9b06      	ldr	r3, [sp, #24]
 8006cea:	3307      	adds	r3, #7
 8006cec:	f023 0307 	bic.w	r3, r3, #7
 8006cf0:	6859      	ldr	r1, [r3, #4]
 8006cf2:	f853 0b08 	ldr.w	r0, [r3], #8
 8006cf6:	9306      	str	r3, [sp, #24]
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	f04f 0200 	mov.w	r2, #0
 8006cfe:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 8006d02:	2200      	movs	r2, #0
 8006d04:	9207      	str	r2, [sp, #28]
 8006d06:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8006d0a:	f000 8232 	beq.w	8007172 <_svfiprintf_r+0x5e6>
 8006d0e:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8006d12:	9202      	str	r2, [sp, #8]
 8006d14:	ea50 0201 	orrs.w	r2, r0, r1
 8006d18:	f040 8229 	bne.w	800716e <_svfiprintf_r+0x5e2>
 8006d1c:	f1bb 0f00 	cmp.w	fp, #0
 8006d20:	f040 840d 	bne.w	800753e <_svfiprintf_r+0x9b2>
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f040 838a 	bne.w	800743e <_svfiprintf_r+0x8b2>
 8006d2a:	f01a 0301 	ands.w	r3, sl, #1
 8006d2e:	9304      	str	r3, [sp, #16]
 8006d30:	f000 8387 	beq.w	8007442 <_svfiprintf_r+0x8b6>
 8006d34:	2330      	movs	r3, #48	; 0x30
 8006d36:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8006d3a:	f10d 0467 	add.w	r4, sp, #103	; 0x67
 8006d3e:	9b04      	ldr	r3, [sp, #16]
 8006d40:	9a07      	ldr	r2, [sp, #28]
 8006d42:	455b      	cmp	r3, fp
 8006d44:	bfb8      	it	lt
 8006d46:	465b      	movlt	r3, fp
 8006d48:	9301      	str	r3, [sp, #4]
 8006d4a:	b10a      	cbz	r2, 8006d50 <_svfiprintf_r+0x1c4>
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	9301      	str	r3, [sp, #4]
 8006d50:	9b02      	ldr	r3, [sp, #8]
 8006d52:	f013 0302 	ands.w	r3, r3, #2
 8006d56:	9307      	str	r3, [sp, #28]
 8006d58:	d002      	beq.n	8006d60 <_svfiprintf_r+0x1d4>
 8006d5a:	9b01      	ldr	r3, [sp, #4]
 8006d5c:	3302      	adds	r3, #2
 8006d5e:	9301      	str	r3, [sp, #4]
 8006d60:	9b02      	ldr	r3, [sp, #8]
 8006d62:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8006d66:	9308      	str	r3, [sp, #32]
 8006d68:	d105      	bne.n	8006d76 <_svfiprintf_r+0x1ea>
 8006d6a:	9b05      	ldr	r3, [sp, #20]
 8006d6c:	9a01      	ldr	r2, [sp, #4]
 8006d6e:	1a9d      	subs	r5, r3, r2
 8006d70:	2d00      	cmp	r5, #0
 8006d72:	f300 82cc 	bgt.w	800730e <_svfiprintf_r+0x782>
 8006d76:	e9dd 210e 	ldrd	r2, r1, [sp, #56]	; 0x38
 8006d7a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 8006d7e:	b180      	cbz	r0, 8006da2 <_svfiprintf_r+0x216>
 8006d80:	3201      	adds	r2, #1
 8006d82:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
 8006d86:	3101      	adds	r1, #1
 8006d88:	f8c9 0000 	str.w	r0, [r9]
 8006d8c:	2a07      	cmp	r2, #7
 8006d8e:	f04f 0001 	mov.w	r0, #1
 8006d92:	e9cd 210e 	strd	r2, r1, [sp, #56]	; 0x38
 8006d96:	f8c9 0004 	str.w	r0, [r9, #4]
 8006d9a:	f300 82f2 	bgt.w	8007382 <_svfiprintf_r+0x7f6>
 8006d9e:	f109 0908 	add.w	r9, r9, #8
 8006da2:	9b07      	ldr	r3, [sp, #28]
 8006da4:	b17b      	cbz	r3, 8006dc6 <_svfiprintf_r+0x23a>
 8006da6:	3201      	adds	r2, #1
 8006da8:	ab0c      	add	r3, sp, #48	; 0x30
 8006daa:	3102      	adds	r1, #2
 8006dac:	f8c9 3000 	str.w	r3, [r9]
 8006db0:	2a07      	cmp	r2, #7
 8006db2:	f04f 0302 	mov.w	r3, #2
 8006db6:	e9cd 210e 	strd	r2, r1, [sp, #56]	; 0x38
 8006dba:	f8c9 3004 	str.w	r3, [r9, #4]
 8006dbe:	f300 82ed 	bgt.w	800739c <_svfiprintf_r+0x810>
 8006dc2:	f109 0908 	add.w	r9, r9, #8
 8006dc6:	9b08      	ldr	r3, [sp, #32]
 8006dc8:	2b80      	cmp	r3, #128	; 0x80
 8006dca:	f000 8208 	beq.w	80071de <_svfiprintf_r+0x652>
 8006dce:	9b04      	ldr	r3, [sp, #16]
 8006dd0:	ebab 0503 	sub.w	r5, fp, r3
 8006dd4:	2d00      	cmp	r5, #0
 8006dd6:	f300 8245 	bgt.w	8007264 <_svfiprintf_r+0x6d8>
 8006dda:	9b04      	ldr	r3, [sp, #16]
 8006ddc:	f8c9 4000 	str.w	r4, [r9]
 8006de0:	3201      	adds	r2, #1
 8006de2:	4419      	add	r1, r3
 8006de4:	2a07      	cmp	r2, #7
 8006de6:	e9cd 210e 	strd	r2, r1, [sp, #56]	; 0x38
 8006dea:	f8c9 3004 	str.w	r3, [r9, #4]
 8006dee:	f300 8279 	bgt.w	80072e4 <_svfiprintf_r+0x758>
 8006df2:	f109 0908 	add.w	r9, r9, #8
 8006df6:	9b02      	ldr	r3, [sp, #8]
 8006df8:	075b      	lsls	r3, r3, #29
 8006dfa:	d505      	bpl.n	8006e08 <_svfiprintf_r+0x27c>
 8006dfc:	9b05      	ldr	r3, [sp, #20]
 8006dfe:	9a01      	ldr	r2, [sp, #4]
 8006e00:	1a9c      	subs	r4, r3, r2
 8006e02:	2c00      	cmp	r4, #0
 8006e04:	f300 82d7 	bgt.w	80073b6 <_svfiprintf_r+0x82a>
 8006e08:	9b03      	ldr	r3, [sp, #12]
 8006e0a:	9a05      	ldr	r2, [sp, #20]
 8006e0c:	9801      	ldr	r0, [sp, #4]
 8006e0e:	4282      	cmp	r2, r0
 8006e10:	bfac      	ite	ge
 8006e12:	189b      	addge	r3, r3, r2
 8006e14:	181b      	addlt	r3, r3, r0
 8006e16:	9303      	str	r3, [sp, #12]
 8006e18:	2900      	cmp	r1, #0
 8006e1a:	f040 826f 	bne.w	80072fc <_svfiprintf_r+0x770>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	930e      	str	r3, [sp, #56]	; 0x38
 8006e22:	783b      	ldrb	r3, [r7, #0]
 8006e24:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f47f aecb 	bne.w	8006bc4 <_svfiprintf_r+0x38>
 8006e2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f040 83a0 	bne.w	8007576 <_svfiprintf_r+0x9ea>
 8006e36:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006e3a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006e3e:	9b03      	ldr	r3, [sp, #12]
 8006e40:	bf18      	it	ne
 8006e42:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8006e46:	9303      	str	r3, [sp, #12]
 8006e48:	9803      	ldr	r0, [sp, #12]
 8006e4a:	b02b      	add	sp, #172	; 0xac
 8006e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e50:	f04a 0a10 	orr.w	sl, sl, #16
 8006e54:	f01a 0120 	ands.w	r1, sl, #32
 8006e58:	d041      	beq.n	8006ede <_svfiprintf_r+0x352>
 8006e5a:	9b06      	ldr	r3, [sp, #24]
 8006e5c:	3307      	adds	r3, #7
 8006e5e:	f023 0307 	bic.w	r3, r3, #7
 8006e62:	6859      	ldr	r1, [r3, #4]
 8006e64:	f853 0b08 	ldr.w	r0, [r3], #8
 8006e68:	9306      	str	r3, [sp, #24]
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	e745      	b.n	8006cfa <_svfiprintf_r+0x16e>
 8006e6e:	9a05      	ldr	r2, [sp, #20]
 8006e70:	4252      	negs	r2, r2
 8006e72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e76:	783b      	ldrb	r3, [r7, #0]
 8006e78:	f04a 0a04 	orr.w	sl, sl, #4
 8006e7c:	e6be      	b.n	8006bfc <_svfiprintf_r+0x70>
 8006e7e:	1be5      	subs	r5, r4, r7
 8006e80:	d0d5      	beq.n	8006e2e <_svfiprintf_r+0x2a2>
 8006e82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e84:	442b      	add	r3, r5
 8006e86:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	2b07      	cmp	r3, #7
 8006e8e:	e9c9 7500 	strd	r7, r5, [r9]
 8006e92:	930e      	str	r3, [sp, #56]	; 0x38
 8006e94:	dc05      	bgt.n	8006ea2 <_svfiprintf_r+0x316>
 8006e96:	f109 0908 	add.w	r9, r9, #8
 8006e9a:	9b03      	ldr	r3, [sp, #12]
 8006e9c:	442b      	add	r3, r5
 8006e9e:	9303      	str	r3, [sp, #12]
 8006ea0:	e69c      	b.n	8006bdc <_svfiprintf_r+0x50>
 8006ea2:	aa0d      	add	r2, sp, #52	; 0x34
 8006ea4:	4641      	mov	r1, r8
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	f7ff fdf4 	bl	8006a94 <__ssprint_r>
 8006eac:	2800      	cmp	r0, #0
 8006eae:	d1c2      	bne.n	8006e36 <_svfiprintf_r+0x2aa>
 8006eb0:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8006eb4:	e7f1      	b.n	8006e9a <_svfiprintf_r+0x30e>
 8006eb6:	2900      	cmp	r1, #0
 8006eb8:	f040 8363 	bne.w	8007582 <_svfiprintf_r+0x9f6>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d0b6      	beq.n	8006e2e <_svfiprintf_r+0x2a2>
 8006ec0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8006ec4:	f04f 0300 	mov.w	r3, #0
 8006ec8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8006ecc:	2301      	movs	r3, #1
 8006ece:	9301      	str	r3, [sp, #4]
 8006ed0:	9304      	str	r3, [sp, #16]
 8006ed2:	ac10      	add	r4, sp, #64	; 0x40
 8006ed4:	f8cd a008 	str.w	sl, [sp, #8]
 8006ed8:	f04f 0b00 	mov.w	fp, #0
 8006edc:	e738      	b.n	8006d50 <_svfiprintf_r+0x1c4>
 8006ede:	f01a 0310 	ands.w	r3, sl, #16
 8006ee2:	d147      	bne.n	8006f74 <_svfiprintf_r+0x3e8>
 8006ee4:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
 8006ee8:	d044      	beq.n	8006f74 <_svfiprintf_r+0x3e8>
 8006eea:	9a06      	ldr	r2, [sp, #24]
 8006eec:	f852 0b04 	ldr.w	r0, [r2], #4
 8006ef0:	9206      	str	r2, [sp, #24]
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	b280      	uxth	r0, r0
 8006ef6:	e700      	b.n	8006cfa <_svfiprintf_r+0x16e>
 8006ef8:	f01a 0310 	ands.w	r3, sl, #16
 8006efc:	d140      	bne.n	8006f80 <_svfiprintf_r+0x3f4>
 8006efe:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
 8006f02:	d03d      	beq.n	8006f80 <_svfiprintf_r+0x3f4>
 8006f04:	9a06      	ldr	r2, [sp, #24]
 8006f06:	f852 0b04 	ldr.w	r0, [r2], #4
 8006f0a:	9206      	str	r2, [sp, #24]
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	b280      	uxth	r0, r0
 8006f10:	2301      	movs	r3, #1
 8006f12:	e6f2      	b.n	8006cfa <_svfiprintf_r+0x16e>
 8006f14:	2900      	cmp	r1, #0
 8006f16:	f040 834b 	bne.w	80075b0 <_svfiprintf_r+0xa24>
 8006f1a:	f01a 0f20 	tst.w	sl, #32
 8006f1e:	9b06      	ldr	r3, [sp, #24]
 8006f20:	f000 80df 	beq.w	80070e2 <_svfiprintf_r+0x556>
 8006f24:	3307      	adds	r3, #7
 8006f26:	f023 0307 	bic.w	r3, r3, #7
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f852 0b08 	ldr.w	r0, [r2], #8
 8006f32:	9206      	str	r2, [sp, #24]
 8006f34:	4619      	mov	r1, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f2c0 828f 	blt.w	800745a <_svfiprintf_r+0x8ce>
 8006f3c:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8006f40:	f000 82f9 	beq.w	8007536 <_svfiprintf_r+0x9aa>
 8006f44:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8006f48:	9307      	str	r3, [sp, #28]
 8006f4a:	ea50 0301 	orrs.w	r3, r0, r1
 8006f4e:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8006f52:	f000 826e 	beq.w	8007432 <_svfiprintf_r+0x8a6>
 8006f56:	280a      	cmp	r0, #10
 8006f58:	f171 0300 	sbcs.w	r3, r1, #0
 8006f5c:	f080 8293 	bcs.w	8007486 <_svfiprintf_r+0x8fa>
 8006f60:	3030      	adds	r0, #48	; 0x30
 8006f62:	2301      	movs	r3, #1
 8006f64:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
 8006f68:	f8cd a008 	str.w	sl, [sp, #8]
 8006f6c:	9304      	str	r3, [sp, #16]
 8006f6e:	f10d 0467 	add.w	r4, sp, #103	; 0x67
 8006f72:	e6e4      	b.n	8006d3e <_svfiprintf_r+0x1b2>
 8006f74:	9b06      	ldr	r3, [sp, #24]
 8006f76:	f853 0b04 	ldr.w	r0, [r3], #4
 8006f7a:	9306      	str	r3, [sp, #24]
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	e6bc      	b.n	8006cfa <_svfiprintf_r+0x16e>
 8006f80:	9b06      	ldr	r3, [sp, #24]
 8006f82:	f853 0b04 	ldr.w	r0, [r3], #4
 8006f86:	9306      	str	r3, [sp, #24]
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e6b6      	b.n	8006cfa <_svfiprintf_r+0x16e>
 8006f8c:	9d06      	ldr	r5, [sp, #24]
 8006f8e:	f855 4b04 	ldr.w	r4, [r5], #4
 8006f92:	f04f 0300 	mov.w	r3, #0
 8006f96:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8006f9a:	2c00      	cmp	r4, #0
 8006f9c:	f000 82e2 	beq.w	8007564 <_svfiprintf_r+0x9d8>
 8006fa0:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8006fa4:	f000 8297 	beq.w	80074d6 <_svfiprintf_r+0x94a>
 8006fa8:	465a      	mov	r2, fp
 8006faa:	2100      	movs	r1, #0
 8006fac:	4620      	mov	r0, r4
 8006fae:	f7fe fc27 	bl	8005800 <memchr>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	f000 82e8 	beq.w	8007588 <_svfiprintf_r+0x9fc>
 8006fb8:	1b03      	subs	r3, r0, r4
 8006fba:	9304      	str	r3, [sp, #16]
 8006fbc:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8006fc0:	9506      	str	r5, [sp, #24]
 8006fc2:	f8cd a008 	str.w	sl, [sp, #8]
 8006fc6:	9307      	str	r3, [sp, #28]
 8006fc8:	f04f 0b00 	mov.w	fp, #0
 8006fcc:	e6b7      	b.n	8006d3e <_svfiprintf_r+0x1b2>
 8006fce:	783b      	ldrb	r3, [r7, #0]
 8006fd0:	f04a 0a20 	orr.w	sl, sl, #32
 8006fd4:	e612      	b.n	8006bfc <_svfiprintf_r+0x70>
 8006fd6:	2900      	cmp	r1, #0
 8006fd8:	f040 82ed 	bne.w	80075b6 <_svfiprintf_r+0xa2a>
 8006fdc:	4aa7      	ldr	r2, [pc, #668]	; (800727c <_svfiprintf_r+0x6f0>)
 8006fde:	9209      	str	r2, [sp, #36]	; 0x24
 8006fe0:	f01a 0120 	ands.w	r1, sl, #32
 8006fe4:	d02f      	beq.n	8007046 <_svfiprintf_r+0x4ba>
 8006fe6:	9a06      	ldr	r2, [sp, #24]
 8006fe8:	3207      	adds	r2, #7
 8006fea:	f022 0207 	bic.w	r2, r2, #7
 8006fee:	6851      	ldr	r1, [r2, #4]
 8006ff0:	f852 0b08 	ldr.w	r0, [r2], #8
 8006ff4:	9206      	str	r2, [sp, #24]
 8006ff6:	f01a 0f01 	tst.w	sl, #1
 8006ffa:	d00b      	beq.n	8007014 <_svfiprintf_r+0x488>
 8006ffc:	ea50 0201 	orrs.w	r2, r0, r1
 8007000:	d008      	beq.n	8007014 <_svfiprintf_r+0x488>
 8007002:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8007006:	2330      	movs	r3, #48	; 0x30
 8007008:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 800700c:	f04a 0a02 	orr.w	sl, sl, #2
 8007010:	2302      	movs	r3, #2
 8007012:	e672      	b.n	8006cfa <_svfiprintf_r+0x16e>
 8007014:	2302      	movs	r3, #2
 8007016:	e670      	b.n	8006cfa <_svfiprintf_r+0x16e>
 8007018:	9b06      	ldr	r3, [sp, #24]
 800701a:	f04f 0200 	mov.w	r2, #0
 800701e:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 8007022:	f853 2b04 	ldr.w	r2, [r3], #4
 8007026:	9306      	str	r3, [sp, #24]
 8007028:	2301      	movs	r3, #1
 800702a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
 800702e:	9301      	str	r3, [sp, #4]
 8007030:	9304      	str	r3, [sp, #16]
 8007032:	ac10      	add	r4, sp, #64	; 0x40
 8007034:	e74e      	b.n	8006ed4 <_svfiprintf_r+0x348>
 8007036:	2900      	cmp	r1, #0
 8007038:	f040 82b1 	bne.w	800759e <_svfiprintf_r+0xa12>
 800703c:	4a90      	ldr	r2, [pc, #576]	; (8007280 <_svfiprintf_r+0x6f4>)
 800703e:	9209      	str	r2, [sp, #36]	; 0x24
 8007040:	f01a 0120 	ands.w	r1, sl, #32
 8007044:	d1cf      	bne.n	8006fe6 <_svfiprintf_r+0x45a>
 8007046:	f01a 0210 	ands.w	r2, sl, #16
 800704a:	f040 81fc 	bne.w	8007446 <_svfiprintf_r+0x8ba>
 800704e:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
 8007052:	f000 81f8 	beq.w	8007446 <_svfiprintf_r+0x8ba>
 8007056:	9c06      	ldr	r4, [sp, #24]
 8007058:	f854 0b04 	ldr.w	r0, [r4], #4
 800705c:	9406      	str	r4, [sp, #24]
 800705e:	4611      	mov	r1, r2
 8007060:	b280      	uxth	r0, r0
 8007062:	e7c8      	b.n	8006ff6 <_svfiprintf_r+0x46a>
 8007064:	9b06      	ldr	r3, [sp, #24]
 8007066:	f853 0b04 	ldr.w	r0, [r3], #4
 800706a:	9306      	str	r3, [sp, #24]
 800706c:	2330      	movs	r3, #48	; 0x30
 800706e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8007072:	2378      	movs	r3, #120	; 0x78
 8007074:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8007078:	4b80      	ldr	r3, [pc, #512]	; (800727c <_svfiprintf_r+0x6f0>)
 800707a:	9309      	str	r3, [sp, #36]	; 0x24
 800707c:	f04a 0a02 	orr.w	sl, sl, #2
 8007080:	2100      	movs	r1, #0
 8007082:	2302      	movs	r3, #2
 8007084:	e639      	b.n	8006cfa <_svfiprintf_r+0x16e>
 8007086:	2900      	cmp	r1, #0
 8007088:	f040 828c 	bne.w	80075a4 <_svfiprintf_r+0xa18>
 800708c:	f01a 0f20 	tst.w	sl, #32
 8007090:	f040 8217 	bne.w	80074c2 <_svfiprintf_r+0x936>
 8007094:	f01a 0f10 	tst.w	sl, #16
 8007098:	f040 8238 	bne.w	800750c <_svfiprintf_r+0x980>
 800709c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80070a0:	f000 8234 	beq.w	800750c <_svfiprintf_r+0x980>
 80070a4:	9b06      	ldr	r3, [sp, #24]
 80070a6:	9903      	ldr	r1, [sp, #12]
 80070a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80070ac:	9306      	str	r3, [sp, #24]
 80070ae:	8011      	strh	r1, [r2, #0]
 80070b0:	e584      	b.n	8006bbc <_svfiprintf_r+0x30>
 80070b2:	783b      	ldrb	r3, [r7, #0]
 80070b4:	2b6c      	cmp	r3, #108	; 0x6c
 80070b6:	bf03      	ittte	eq
 80070b8:	787b      	ldrbeq	r3, [r7, #1]
 80070ba:	f04a 0a20 	orreq.w	sl, sl, #32
 80070be:	3701      	addeq	r7, #1
 80070c0:	f04a 0a10 	orrne.w	sl, sl, #16
 80070c4:	e59a      	b.n	8006bfc <_svfiprintf_r+0x70>
 80070c6:	783b      	ldrb	r3, [r7, #0]
 80070c8:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
 80070cc:	e596      	b.n	8006bfc <_svfiprintf_r+0x70>
 80070ce:	2900      	cmp	r1, #0
 80070d0:	f040 826b 	bne.w	80075aa <_svfiprintf_r+0xa1e>
 80070d4:	f04a 0a10 	orr.w	sl, sl, #16
 80070d8:	f01a 0f20 	tst.w	sl, #32
 80070dc:	9b06      	ldr	r3, [sp, #24]
 80070de:	f47f af21 	bne.w	8006f24 <_svfiprintf_r+0x398>
 80070e2:	f853 0b04 	ldr.w	r0, [r3], #4
 80070e6:	9306      	str	r3, [sp, #24]
 80070e8:	f01a 0f10 	tst.w	sl, #16
 80070ec:	f040 81b0 	bne.w	8007450 <_svfiprintf_r+0x8c4>
 80070f0:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80070f4:	f000 81ac 	beq.w	8007450 <_svfiprintf_r+0x8c4>
 80070f8:	f340 31c0 	sbfx	r1, r0, #15, #1
 80070fc:	460b      	mov	r3, r1
 80070fe:	b200      	sxth	r0, r0
 8007100:	e719      	b.n	8006f36 <_svfiprintf_r+0x3aa>
 8007102:	783b      	ldrb	r3, [r7, #0]
 8007104:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8007108:	e578      	b.n	8006bfc <_svfiprintf_r+0x70>
 800710a:	463c      	mov	r4, r7
 800710c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007110:	2b2a      	cmp	r3, #42	; 0x2a
 8007112:	f000 8253 	beq.w	80075bc <_svfiprintf_r+0xa30>
 8007116:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800711a:	2a09      	cmp	r2, #9
 800711c:	4627      	mov	r7, r4
 800711e:	f04f 0b00 	mov.w	fp, #0
 8007122:	f63f ad6c 	bhi.w	8006bfe <_svfiprintf_r+0x72>
 8007126:	f817 3b01 	ldrb.w	r3, [r7], #1
 800712a:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 800712e:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
 8007132:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007136:	2a09      	cmp	r2, #9
 8007138:	d9f5      	bls.n	8007126 <_svfiprintf_r+0x59a>
 800713a:	e560      	b.n	8006bfe <_svfiprintf_r+0x72>
 800713c:	783b      	ldrb	r3, [r7, #0]
 800713e:	2101      	movs	r1, #1
 8007140:	202b      	movs	r0, #43	; 0x2b
 8007142:	e55b      	b.n	8006bfc <_svfiprintf_r+0x70>
 8007144:	9b06      	ldr	r3, [sp, #24]
 8007146:	f853 2b04 	ldr.w	r2, [r3], #4
 800714a:	9205      	str	r2, [sp, #20]
 800714c:	2a00      	cmp	r2, #0
 800714e:	f6ff ae8e 	blt.w	8006e6e <_svfiprintf_r+0x2e2>
 8007152:	9306      	str	r3, [sp, #24]
 8007154:	783b      	ldrb	r3, [r7, #0]
 8007156:	e551      	b.n	8006bfc <_svfiprintf_r+0x70>
 8007158:	783b      	ldrb	r3, [r7, #0]
 800715a:	f04a 0a01 	orr.w	sl, sl, #1
 800715e:	e54d      	b.n	8006bfc <_svfiprintf_r+0x70>
 8007160:	783b      	ldrb	r3, [r7, #0]
 8007162:	2800      	cmp	r0, #0
 8007164:	f47f ad4a 	bne.w	8006bfc <_svfiprintf_r+0x70>
 8007168:	2101      	movs	r1, #1
 800716a:	2020      	movs	r0, #32
 800716c:	e546      	b.n	8006bfc <_svfiprintf_r+0x70>
 800716e:	f8dd a008 	ldr.w	sl, [sp, #8]
 8007172:	2b01      	cmp	r3, #1
 8007174:	f43f aeef 	beq.w	8006f56 <_svfiprintf_r+0x3ca>
 8007178:	2b02      	cmp	r3, #2
 800717a:	ac1a      	add	r4, sp, #104	; 0x68
 800717c:	d112      	bne.n	80071a4 <_svfiprintf_r+0x618>
 800717e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007180:	f000 030f 	and.w	r3, r0, #15
 8007184:	0900      	lsrs	r0, r0, #4
 8007186:	5cd3      	ldrb	r3, [r2, r3]
 8007188:	f804 3d01 	strb.w	r3, [r4, #-1]!
 800718c:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8007190:	0909      	lsrs	r1, r1, #4
 8007192:	ea50 0301 	orrs.w	r3, r0, r1
 8007196:	d1f3      	bne.n	8007180 <_svfiprintf_r+0x5f4>
 8007198:	ab1a      	add	r3, sp, #104	; 0x68
 800719a:	1b1b      	subs	r3, r3, r4
 800719c:	f8cd a008 	str.w	sl, [sp, #8]
 80071a0:	9304      	str	r3, [sp, #16]
 80071a2:	e5cc      	b.n	8006d3e <_svfiprintf_r+0x1b2>
 80071a4:	f000 0307 	and.w	r3, r0, #7
 80071a8:	08c0      	lsrs	r0, r0, #3
 80071aa:	ea40 7041 	orr.w	r0, r0, r1, lsl #29
 80071ae:	08c9      	lsrs	r1, r1, #3
 80071b0:	3330      	adds	r3, #48	; 0x30
 80071b2:	ea50 0501 	orrs.w	r5, r0, r1
 80071b6:	4622      	mov	r2, r4
 80071b8:	f804 3d01 	strb.w	r3, [r4, #-1]!
 80071bc:	d1f2      	bne.n	80071a4 <_svfiprintf_r+0x618>
 80071be:	f01a 0f01 	tst.w	sl, #1
 80071c2:	d0e9      	beq.n	8007198 <_svfiprintf_r+0x60c>
 80071c4:	2b30      	cmp	r3, #48	; 0x30
 80071c6:	d0e7      	beq.n	8007198 <_svfiprintf_r+0x60c>
 80071c8:	2330      	movs	r3, #48	; 0x30
 80071ca:	3a02      	subs	r2, #2
 80071cc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80071d0:	ab1a      	add	r3, sp, #104	; 0x68
 80071d2:	1a9b      	subs	r3, r3, r2
 80071d4:	f8cd a008 	str.w	sl, [sp, #8]
 80071d8:	9304      	str	r3, [sp, #16]
 80071da:	4614      	mov	r4, r2
 80071dc:	e5af      	b.n	8006d3e <_svfiprintf_r+0x1b2>
 80071de:	9b05      	ldr	r3, [sp, #20]
 80071e0:	9801      	ldr	r0, [sp, #4]
 80071e2:	1a1d      	subs	r5, r3, r0
 80071e4:	2d00      	cmp	r5, #0
 80071e6:	f77f adf2 	ble.w	8006dce <_svfiprintf_r+0x242>
 80071ea:	2d10      	cmp	r5, #16
 80071ec:	f8df a094 	ldr.w	sl, [pc, #148]	; 8007284 <_svfiprintf_r+0x6f8>
 80071f0:	dd25      	ble.n	800723e <_svfiprintf_r+0x6b2>
 80071f2:	4650      	mov	r0, sl
 80071f4:	2310      	movs	r3, #16
 80071f6:	46a2      	mov	sl, r4
 80071f8:	4604      	mov	r4, r0
 80071fa:	e004      	b.n	8007206 <_svfiprintf_r+0x67a>
 80071fc:	3d10      	subs	r5, #16
 80071fe:	2d10      	cmp	r5, #16
 8007200:	f109 0908 	add.w	r9, r9, #8
 8007204:	dd18      	ble.n	8007238 <_svfiprintf_r+0x6ac>
 8007206:	3201      	adds	r2, #1
 8007208:	3110      	adds	r1, #16
 800720a:	2a07      	cmp	r2, #7
 800720c:	e9c9 4300 	strd	r4, r3, [r9]
 8007210:	e9cd 210e 	strd	r2, r1, [sp, #56]	; 0x38
 8007214:	ddf2      	ble.n	80071fc <_svfiprintf_r+0x670>
 8007216:	aa0d      	add	r2, sp, #52	; 0x34
 8007218:	4641      	mov	r1, r8
 800721a:	4630      	mov	r0, r6
 800721c:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8007220:	f7ff fc38 	bl	8006a94 <__ssprint_r>
 8007224:	2800      	cmp	r0, #0
 8007226:	f47f ae06 	bne.w	8006e36 <_svfiprintf_r+0x2aa>
 800722a:	3d10      	subs	r5, #16
 800722c:	2d10      	cmp	r5, #16
 800722e:	e9dd 210e 	ldrd	r2, r1, [sp, #56]	; 0x38
 8007232:	f04f 0310 	mov.w	r3, #16
 8007236:	dce6      	bgt.n	8007206 <_svfiprintf_r+0x67a>
 8007238:	4623      	mov	r3, r4
 800723a:	4654      	mov	r4, sl
 800723c:	469a      	mov	sl, r3
 800723e:	3201      	adds	r2, #1
 8007240:	4429      	add	r1, r5
 8007242:	2a07      	cmp	r2, #7
 8007244:	e9cd 210e 	strd	r2, r1, [sp, #56]	; 0x38
 8007248:	f8c9 a000 	str.w	sl, [r9]
 800724c:	f8c9 5004 	str.w	r5, [r9, #4]
 8007250:	f300 817b 	bgt.w	800754a <_svfiprintf_r+0x9be>
 8007254:	9b04      	ldr	r3, [sp, #16]
 8007256:	ebab 0503 	sub.w	r5, fp, r3
 800725a:	2d00      	cmp	r5, #0
 800725c:	f109 0908 	add.w	r9, r9, #8
 8007260:	f77f adbb 	ble.w	8006dda <_svfiprintf_r+0x24e>
 8007264:	2d10      	cmp	r5, #16
 8007266:	f8df a01c 	ldr.w	sl, [pc, #28]	; 8007284 <_svfiprintf_r+0x6f8>
 800726a:	dd2d      	ble.n	80072c8 <_svfiprintf_r+0x73c>
 800726c:	460b      	mov	r3, r1
 800726e:	4651      	mov	r1, sl
 8007270:	f04f 0b10 	mov.w	fp, #16
 8007274:	46a2      	mov	sl, r4
 8007276:	460c      	mov	r4, r1
 8007278:	e00b      	b.n	8007292 <_svfiprintf_r+0x706>
 800727a:	bf00      	nop
 800727c:	0801e2a0 	.word	0x0801e2a0
 8007280:	0801e2b4 	.word	0x0801e2b4
 8007284:	0800efd0 	.word	0x0800efd0
 8007288:	3d10      	subs	r5, #16
 800728a:	2d10      	cmp	r5, #16
 800728c:	f109 0908 	add.w	r9, r9, #8
 8007290:	dd16      	ble.n	80072c0 <_svfiprintf_r+0x734>
 8007292:	3201      	adds	r2, #1
 8007294:	3310      	adds	r3, #16
 8007296:	2a07      	cmp	r2, #7
 8007298:	e9c9 4b00 	strd	r4, fp, [r9]
 800729c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80072a0:	ddf2      	ble.n	8007288 <_svfiprintf_r+0x6fc>
 80072a2:	aa0d      	add	r2, sp, #52	; 0x34
 80072a4:	4641      	mov	r1, r8
 80072a6:	4630      	mov	r0, r6
 80072a8:	f7ff fbf4 	bl	8006a94 <__ssprint_r>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	f47f adc2 	bne.w	8006e36 <_svfiprintf_r+0x2aa>
 80072b2:	3d10      	subs	r5, #16
 80072b4:	2d10      	cmp	r5, #16
 80072b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80072ba:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80072be:	dce8      	bgt.n	8007292 <_svfiprintf_r+0x706>
 80072c0:	4619      	mov	r1, r3
 80072c2:	4623      	mov	r3, r4
 80072c4:	4654      	mov	r4, sl
 80072c6:	469a      	mov	sl, r3
 80072c8:	3201      	adds	r2, #1
 80072ca:	4429      	add	r1, r5
 80072cc:	2a07      	cmp	r2, #7
 80072ce:	e9cd 210e 	strd	r2, r1, [sp, #56]	; 0x38
 80072d2:	f8c9 a000 	str.w	sl, [r9]
 80072d6:	f8c9 5004 	str.w	r5, [r9, #4]
 80072da:	f300 80c7 	bgt.w	800746c <_svfiprintf_r+0x8e0>
 80072de:	f109 0908 	add.w	r9, r9, #8
 80072e2:	e57a      	b.n	8006dda <_svfiprintf_r+0x24e>
 80072e4:	aa0d      	add	r2, sp, #52	; 0x34
 80072e6:	4641      	mov	r1, r8
 80072e8:	4630      	mov	r0, r6
 80072ea:	f7ff fbd3 	bl	8006a94 <__ssprint_r>
 80072ee:	2800      	cmp	r0, #0
 80072f0:	f47f ada1 	bne.w	8006e36 <_svfiprintf_r+0x2aa>
 80072f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80072f6:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80072fa:	e57c      	b.n	8006df6 <_svfiprintf_r+0x26a>
 80072fc:	aa0d      	add	r2, sp, #52	; 0x34
 80072fe:	4641      	mov	r1, r8
 8007300:	4630      	mov	r0, r6
 8007302:	f7ff fbc7 	bl	8006a94 <__ssprint_r>
 8007306:	2800      	cmp	r0, #0
 8007308:	f43f ad89 	beq.w	8006e1e <_svfiprintf_r+0x292>
 800730c:	e593      	b.n	8006e36 <_svfiprintf_r+0x2aa>
 800730e:	2d10      	cmp	r5, #16
 8007310:	e9dd 210e 	ldrd	r2, r1, [sp, #56]	; 0x38
 8007314:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 80075e4 <_svfiprintf_r+0xa58>
 8007318:	dd25      	ble.n	8007366 <_svfiprintf_r+0x7da>
 800731a:	4650      	mov	r0, sl
 800731c:	2310      	movs	r3, #16
 800731e:	46a2      	mov	sl, r4
 8007320:	4604      	mov	r4, r0
 8007322:	e004      	b.n	800732e <_svfiprintf_r+0x7a2>
 8007324:	3d10      	subs	r5, #16
 8007326:	2d10      	cmp	r5, #16
 8007328:	f109 0908 	add.w	r9, r9, #8
 800732c:	dd18      	ble.n	8007360 <_svfiprintf_r+0x7d4>
 800732e:	3201      	adds	r2, #1
 8007330:	3110      	adds	r1, #16
 8007332:	2a07      	cmp	r2, #7
 8007334:	e9c9 4300 	strd	r4, r3, [r9]
 8007338:	e9cd 210e 	strd	r2, r1, [sp, #56]	; 0x38
 800733c:	ddf2      	ble.n	8007324 <_svfiprintf_r+0x798>
 800733e:	aa0d      	add	r2, sp, #52	; 0x34
 8007340:	4641      	mov	r1, r8
 8007342:	4630      	mov	r0, r6
 8007344:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8007348:	f7ff fba4 	bl	8006a94 <__ssprint_r>
 800734c:	2800      	cmp	r0, #0
 800734e:	f47f ad72 	bne.w	8006e36 <_svfiprintf_r+0x2aa>
 8007352:	3d10      	subs	r5, #16
 8007354:	2d10      	cmp	r5, #16
 8007356:	e9dd 210e 	ldrd	r2, r1, [sp, #56]	; 0x38
 800735a:	f04f 0310 	mov.w	r3, #16
 800735e:	dce6      	bgt.n	800732e <_svfiprintf_r+0x7a2>
 8007360:	4623      	mov	r3, r4
 8007362:	4654      	mov	r4, sl
 8007364:	469a      	mov	sl, r3
 8007366:	3201      	adds	r2, #1
 8007368:	4429      	add	r1, r5
 800736a:	2a07      	cmp	r2, #7
 800736c:	e9cd 210e 	strd	r2, r1, [sp, #56]	; 0x38
 8007370:	f8c9 a000 	str.w	sl, [r9]
 8007374:	f8c9 5004 	str.w	r5, [r9, #4]
 8007378:	f300 80d0 	bgt.w	800751c <_svfiprintf_r+0x990>
 800737c:	f109 0908 	add.w	r9, r9, #8
 8007380:	e4fb      	b.n	8006d7a <_svfiprintf_r+0x1ee>
 8007382:	aa0d      	add	r2, sp, #52	; 0x34
 8007384:	4641      	mov	r1, r8
 8007386:	4630      	mov	r0, r6
 8007388:	f7ff fb84 	bl	8006a94 <__ssprint_r>
 800738c:	2800      	cmp	r0, #0
 800738e:	f47f ad52 	bne.w	8006e36 <_svfiprintf_r+0x2aa>
 8007392:	e9dd 210e 	ldrd	r2, r1, [sp, #56]	; 0x38
 8007396:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 800739a:	e502      	b.n	8006da2 <_svfiprintf_r+0x216>
 800739c:	aa0d      	add	r2, sp, #52	; 0x34
 800739e:	4641      	mov	r1, r8
 80073a0:	4630      	mov	r0, r6
 80073a2:	f7ff fb77 	bl	8006a94 <__ssprint_r>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	f47f ad45 	bne.w	8006e36 <_svfiprintf_r+0x2aa>
 80073ac:	e9dd 210e 	ldrd	r2, r1, [sp, #56]	; 0x38
 80073b0:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80073b4:	e507      	b.n	8006dc6 <_svfiprintf_r+0x23a>
 80073b6:	2c10      	cmp	r4, #16
 80073b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073ba:	f8df a228 	ldr.w	sl, [pc, #552]	; 80075e4 <_svfiprintf_r+0xa58>
 80073be:	dd25      	ble.n	800740c <_svfiprintf_r+0x880>
 80073c0:	460a      	mov	r2, r1
 80073c2:	4651      	mov	r1, sl
 80073c4:	2510      	movs	r5, #16
 80073c6:	46ba      	mov	sl, r7
 80073c8:	460f      	mov	r7, r1
 80073ca:	e004      	b.n	80073d6 <_svfiprintf_r+0x84a>
 80073cc:	3c10      	subs	r4, #16
 80073ce:	2c10      	cmp	r4, #16
 80073d0:	f109 0908 	add.w	r9, r9, #8
 80073d4:	dd16      	ble.n	8007404 <_svfiprintf_r+0x878>
 80073d6:	3301      	adds	r3, #1
 80073d8:	3210      	adds	r2, #16
 80073da:	2b07      	cmp	r3, #7
 80073dc:	e9c9 7500 	strd	r7, r5, [r9]
 80073e0:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 80073e4:	ddf2      	ble.n	80073cc <_svfiprintf_r+0x840>
 80073e6:	aa0d      	add	r2, sp, #52	; 0x34
 80073e8:	4641      	mov	r1, r8
 80073ea:	4630      	mov	r0, r6
 80073ec:	f7ff fb52 	bl	8006a94 <__ssprint_r>
 80073f0:	2800      	cmp	r0, #0
 80073f2:	f47f ad20 	bne.w	8006e36 <_svfiprintf_r+0x2aa>
 80073f6:	3c10      	subs	r4, #16
 80073f8:	2c10      	cmp	r4, #16
 80073fa:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 80073fe:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8007402:	dce8      	bgt.n	80073d6 <_svfiprintf_r+0x84a>
 8007404:	4611      	mov	r1, r2
 8007406:	463a      	mov	r2, r7
 8007408:	4657      	mov	r7, sl
 800740a:	4692      	mov	sl, r2
 800740c:	3301      	adds	r3, #1
 800740e:	4421      	add	r1, r4
 8007410:	2b07      	cmp	r3, #7
 8007412:	e9c9 a400 	strd	sl, r4, [r9]
 8007416:	e9cd 310e 	strd	r3, r1, [sp, #56]	; 0x38
 800741a:	f77f acf5 	ble.w	8006e08 <_svfiprintf_r+0x27c>
 800741e:	aa0d      	add	r2, sp, #52	; 0x34
 8007420:	4641      	mov	r1, r8
 8007422:	4630      	mov	r0, r6
 8007424:	f7ff fb36 	bl	8006a94 <__ssprint_r>
 8007428:	2800      	cmp	r0, #0
 800742a:	f47f ad04 	bne.w	8006e36 <_svfiprintf_r+0x2aa>
 800742e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007430:	e4ea      	b.n	8006e08 <_svfiprintf_r+0x27c>
 8007432:	f1bb 0f00 	cmp.w	fp, #0
 8007436:	f47f ad93 	bne.w	8006f60 <_svfiprintf_r+0x3d4>
 800743a:	f8cd a008 	str.w	sl, [sp, #8]
 800743e:	f8cd b010 	str.w	fp, [sp, #16]
 8007442:	ac1a      	add	r4, sp, #104	; 0x68
 8007444:	e47b      	b.n	8006d3e <_svfiprintf_r+0x1b2>
 8007446:	9a06      	ldr	r2, [sp, #24]
 8007448:	f852 0b04 	ldr.w	r0, [r2], #4
 800744c:	9206      	str	r2, [sp, #24]
 800744e:	e5d2      	b.n	8006ff6 <_svfiprintf_r+0x46a>
 8007450:	17c1      	asrs	r1, r0, #31
 8007452:	460b      	mov	r3, r1
 8007454:	2b00      	cmp	r3, #0
 8007456:	f6bf ad71 	bge.w	8006f3c <_svfiprintf_r+0x3b0>
 800745a:	232d      	movs	r3, #45	; 0x2d
 800745c:	4240      	negs	r0, r0
 800745e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8007462:	9307      	str	r3, [sp, #28]
 8007464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007468:	2301      	movs	r3, #1
 800746a:	e44c      	b.n	8006d06 <_svfiprintf_r+0x17a>
 800746c:	aa0d      	add	r2, sp, #52	; 0x34
 800746e:	4641      	mov	r1, r8
 8007470:	4630      	mov	r0, r6
 8007472:	f7ff fb0f 	bl	8006a94 <__ssprint_r>
 8007476:	2800      	cmp	r0, #0
 8007478:	f47f acdd 	bne.w	8006e36 <_svfiprintf_r+0x2aa>
 800747c:	e9dd 210e 	ldrd	r2, r1, [sp, #56]	; 0x38
 8007480:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8007484:	e4a9      	b.n	8006dda <_svfiprintf_r+0x24e>
 8007486:	ac1a      	add	r4, sp, #104	; 0x68
 8007488:	9701      	str	r7, [sp, #4]
 800748a:	4627      	mov	r7, r4
 800748c:	220a      	movs	r2, #10
 800748e:	2300      	movs	r3, #0
 8007490:	4604      	mov	r4, r0
 8007492:	460d      	mov	r5, r1
 8007494:	f002 f946 	bl	8009724 <__aeabi_uldivmod>
 8007498:	3230      	adds	r2, #48	; 0x30
 800749a:	f807 2d01 	strb.w	r2, [r7, #-1]!
 800749e:	2300      	movs	r3, #0
 80074a0:	4620      	mov	r0, r4
 80074a2:	4629      	mov	r1, r5
 80074a4:	220a      	movs	r2, #10
 80074a6:	f002 f93d 	bl	8009724 <__aeabi_uldivmod>
 80074aa:	2c0a      	cmp	r4, #10
 80074ac:	f175 0300 	sbcs.w	r3, r5, #0
 80074b0:	d2ec      	bcs.n	800748c <_svfiprintf_r+0x900>
 80074b2:	463c      	mov	r4, r7
 80074b4:	ab1a      	add	r3, sp, #104	; 0x68
 80074b6:	1b1b      	subs	r3, r3, r4
 80074b8:	9f01      	ldr	r7, [sp, #4]
 80074ba:	f8cd a008 	str.w	sl, [sp, #8]
 80074be:	9304      	str	r3, [sp, #16]
 80074c0:	e43d      	b.n	8006d3e <_svfiprintf_r+0x1b2>
 80074c2:	9b06      	ldr	r3, [sp, #24]
 80074c4:	9803      	ldr	r0, [sp, #12]
 80074c6:	f853 1b04 	ldr.w	r1, [r3], #4
 80074ca:	9306      	str	r3, [sp, #24]
 80074cc:	17c2      	asrs	r2, r0, #31
 80074ce:	e9c1 0200 	strd	r0, r2, [r1]
 80074d2:	f7ff bb73 	b.w	8006bbc <_svfiprintf_r+0x30>
 80074d6:	4620      	mov	r0, r4
 80074d8:	9506      	str	r5, [sp, #24]
 80074da:	f8cd a008 	str.w	sl, [sp, #8]
 80074de:	f7f9 f9cf 	bl	8000880 <strlen>
 80074e2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 80074e6:	9004      	str	r0, [sp, #16]
 80074e8:	9307      	str	r3, [sp, #28]
 80074ea:	f04f 0b00 	mov.w	fp, #0
 80074ee:	e426      	b.n	8006d3e <_svfiprintf_r+0x1b2>
 80074f0:	2140      	movs	r1, #64	; 0x40
 80074f2:	f7fd fed5 	bl	80052a0 <_malloc_r>
 80074f6:	f8c8 0000 	str.w	r0, [r8]
 80074fa:	f8c8 0010 	str.w	r0, [r8, #16]
 80074fe:	2800      	cmp	r0, #0
 8007500:	d066      	beq.n	80075d0 <_svfiprintf_r+0xa44>
 8007502:	2340      	movs	r3, #64	; 0x40
 8007504:	f8c8 3014 	str.w	r3, [r8, #20]
 8007508:	f7ff bb4e 	b.w	8006ba8 <_svfiprintf_r+0x1c>
 800750c:	9b06      	ldr	r3, [sp, #24]
 800750e:	9903      	ldr	r1, [sp, #12]
 8007510:	f853 2b04 	ldr.w	r2, [r3], #4
 8007514:	6011      	str	r1, [r2, #0]
 8007516:	9306      	str	r3, [sp, #24]
 8007518:	f7ff bb50 	b.w	8006bbc <_svfiprintf_r+0x30>
 800751c:	aa0d      	add	r2, sp, #52	; 0x34
 800751e:	4641      	mov	r1, r8
 8007520:	4630      	mov	r0, r6
 8007522:	f7ff fab7 	bl	8006a94 <__ssprint_r>
 8007526:	2800      	cmp	r0, #0
 8007528:	f47f ac85 	bne.w	8006e36 <_svfiprintf_r+0x2aa>
 800752c:	e9dd 210e 	ldrd	r2, r1, [sp, #56]	; 0x38
 8007530:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8007534:	e421      	b.n	8006d7a <_svfiprintf_r+0x1ee>
 8007536:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800753a:	9307      	str	r3, [sp, #28]
 800753c:	e50b      	b.n	8006f56 <_svfiprintf_r+0x3ca>
 800753e:	2b01      	cmp	r3, #1
 8007540:	f8dd a008 	ldr.w	sl, [sp, #8]
 8007544:	f47f ae18 	bne.w	8007178 <_svfiprintf_r+0x5ec>
 8007548:	e50a      	b.n	8006f60 <_svfiprintf_r+0x3d4>
 800754a:	aa0d      	add	r2, sp, #52	; 0x34
 800754c:	4641      	mov	r1, r8
 800754e:	4630      	mov	r0, r6
 8007550:	f7ff faa0 	bl	8006a94 <__ssprint_r>
 8007554:	2800      	cmp	r0, #0
 8007556:	f47f ac6e 	bne.w	8006e36 <_svfiprintf_r+0x2aa>
 800755a:	e9dd 210e 	ldrd	r2, r1, [sp, #56]	; 0x38
 800755e:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8007562:	e434      	b.n	8006dce <_svfiprintf_r+0x242>
 8007564:	465b      	mov	r3, fp
 8007566:	2b06      	cmp	r3, #6
 8007568:	bf28      	it	cs
 800756a:	2306      	movcs	r3, #6
 800756c:	4c1c      	ldr	r4, [pc, #112]	; (80075e0 <_svfiprintf_r+0xa54>)
 800756e:	9304      	str	r3, [sp, #16]
 8007570:	9506      	str	r5, [sp, #24]
 8007572:	9301      	str	r3, [sp, #4]
 8007574:	e4ae      	b.n	8006ed4 <_svfiprintf_r+0x348>
 8007576:	aa0d      	add	r2, sp, #52	; 0x34
 8007578:	4641      	mov	r1, r8
 800757a:	4630      	mov	r0, r6
 800757c:	f7ff fa8a 	bl	8006a94 <__ssprint_r>
 8007580:	e459      	b.n	8006e36 <_svfiprintf_r+0x2aa>
 8007582:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8007586:	e499      	b.n	8006ebc <_svfiprintf_r+0x330>
 8007588:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800758c:	f8cd b010 	str.w	fp, [sp, #16]
 8007590:	9506      	str	r5, [sp, #24]
 8007592:	f8cd a008 	str.w	sl, [sp, #8]
 8007596:	4683      	mov	fp, r0
 8007598:	9307      	str	r3, [sp, #28]
 800759a:	f7ff bbd0 	b.w	8006d3e <_svfiprintf_r+0x1b2>
 800759e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80075a2:	e54b      	b.n	800703c <_svfiprintf_r+0x4b0>
 80075a4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80075a8:	e570      	b.n	800708c <_svfiprintf_r+0x500>
 80075aa:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80075ae:	e591      	b.n	80070d4 <_svfiprintf_r+0x548>
 80075b0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80075b4:	e4b1      	b.n	8006f1a <_svfiprintf_r+0x38e>
 80075b6:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80075ba:	e50f      	b.n	8006fdc <_svfiprintf_r+0x450>
 80075bc:	9a06      	ldr	r2, [sp, #24]
 80075be:	787b      	ldrb	r3, [r7, #1]
 80075c0:	4627      	mov	r7, r4
 80075c2:	f852 4b04 	ldr.w	r4, [r2], #4
 80075c6:	9206      	str	r2, [sp, #24]
 80075c8:	ea44 7be4 	orr.w	fp, r4, r4, asr #31
 80075cc:	f7ff bb16 	b.w	8006bfc <_svfiprintf_r+0x70>
 80075d0:	230c      	movs	r3, #12
 80075d2:	f8cb 3000 	str.w	r3, [fp]
 80075d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075da:	9303      	str	r3, [sp, #12]
 80075dc:	e434      	b.n	8006e48 <_svfiprintf_r+0x2bc>
 80075de:	bf00      	nop
 80075e0:	0801e2c8 	.word	0x0801e2c8
 80075e4:	0800efc0 	.word	0x0800efc0

080075e8 <__sprint_r.part.0>:
 80075e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ec:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80075ee:	049c      	lsls	r4, r3, #18
 80075f0:	4690      	mov	r8, r2
 80075f2:	d52d      	bpl.n	8007650 <__sprint_r.part.0+0x68>
 80075f4:	6893      	ldr	r3, [r2, #8]
 80075f6:	6812      	ldr	r2, [r2, #0]
 80075f8:	b343      	cbz	r3, 800764c <__sprint_r.part.0+0x64>
 80075fa:	468b      	mov	fp, r1
 80075fc:	4606      	mov	r6, r0
 80075fe:	f102 0908 	add.w	r9, r2, #8
 8007602:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
 8007606:	ea5f 079a 	movs.w	r7, sl, lsr #2
 800760a:	d015      	beq.n	8007638 <__sprint_r.part.0+0x50>
 800760c:	3d04      	subs	r5, #4
 800760e:	2400      	movs	r4, #0
 8007610:	e001      	b.n	8007616 <__sprint_r.part.0+0x2e>
 8007612:	42a7      	cmp	r7, r4
 8007614:	d00e      	beq.n	8007634 <__sprint_r.part.0+0x4c>
 8007616:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800761a:	465a      	mov	r2, fp
 800761c:	4630      	mov	r0, r6
 800761e:	f001 f81f 	bl	8008660 <_fputwc_r>
 8007622:	1c43      	adds	r3, r0, #1
 8007624:	f104 0401 	add.w	r4, r4, #1
 8007628:	d1f3      	bne.n	8007612 <__sprint_r.part.0+0x2a>
 800762a:	2300      	movs	r3, #0
 800762c:	e9c8 3301 	strd	r3, r3, [r8, #4]
 8007630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007634:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007638:	f02a 0a03 	bic.w	sl, sl, #3
 800763c:	eba3 030a 	sub.w	r3, r3, sl
 8007640:	f8c8 3008 	str.w	r3, [r8, #8]
 8007644:	f109 0908 	add.w	r9, r9, #8
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1da      	bne.n	8007602 <__sprint_r.part.0+0x1a>
 800764c:	2000      	movs	r0, #0
 800764e:	e7ec      	b.n	800762a <__sprint_r.part.0+0x42>
 8007650:	f7fd fbb0 	bl	8004db4 <__sfvwrite_r>
 8007654:	2300      	movs	r3, #0
 8007656:	e9c8 3301 	strd	r3, r3, [r8, #4]
 800765a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800765e:	bf00      	nop

08007660 <__sprint_r>:
 8007660:	b410      	push	{r4}
 8007662:	6894      	ldr	r4, [r2, #8]
 8007664:	b114      	cbz	r4, 800766c <__sprint_r+0xc>
 8007666:	f85d 4b04 	ldr.w	r4, [sp], #4
 800766a:	e7bd      	b.n	80075e8 <__sprint_r.part.0>
 800766c:	4620      	mov	r0, r4
 800766e:	6054      	str	r4, [r2, #4]
 8007670:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop

08007678 <_vfiprintf_r>:
 8007678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767c:	b0ab      	sub	sp, #172	; 0xac
 800767e:	461c      	mov	r4, r3
 8007680:	4688      	mov	r8, r1
 8007682:	4617      	mov	r7, r2
 8007684:	9306      	str	r3, [sp, #24]
 8007686:	4683      	mov	fp, r0
 8007688:	b118      	cbz	r0, 8007692 <_vfiprintf_r+0x1a>
 800768a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 8225 	beq.w	8007adc <_vfiprintf_r+0x464>
 8007692:	f9b8 100c 	ldrsh.w	r1, [r8, #12]
 8007696:	0488      	lsls	r0, r1, #18
 8007698:	b28a      	uxth	r2, r1
 800769a:	d40a      	bmi.n	80076b2 <_vfiprintf_r+0x3a>
 800769c:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 80076a0:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 80076a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076a8:	f8a8 200c 	strh.w	r2, [r8, #12]
 80076ac:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
 80076b0:	b292      	uxth	r2, r2
 80076b2:	0713      	lsls	r3, r2, #28
 80076b4:	f140 80a4 	bpl.w	8007800 <_vfiprintf_r+0x188>
 80076b8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f000 809f 	beq.w	8007800 <_vfiprintf_r+0x188>
 80076c2:	f002 021a 	and.w	r2, r2, #26
 80076c6:	2a0a      	cmp	r2, #10
 80076c8:	f000 80a8 	beq.w	800781c <_vfiprintf_r+0x1a4>
 80076cc:	ab1a      	add	r3, sp, #104	; 0x68
 80076ce:	930d      	str	r3, [sp, #52]	; 0x34
 80076d0:	2300      	movs	r3, #0
 80076d2:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 80076d6:	9309      	str	r3, [sp, #36]	; 0x24
 80076d8:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80076dc:	9305      	str	r3, [sp, #20]
 80076de:	783b      	ldrb	r3, [r7, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 810d 	beq.w	8007900 <_vfiprintf_r+0x288>
 80076e6:	463c      	mov	r4, r7
 80076e8:	e004      	b.n	80076f4 <_vfiprintf_r+0x7c>
 80076ea:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f000 80e8 	beq.w	80078c4 <_vfiprintf_r+0x24c>
 80076f4:	2b25      	cmp	r3, #37	; 0x25
 80076f6:	d1f8      	bne.n	80076ea <_vfiprintf_r+0x72>
 80076f8:	1be5      	subs	r5, r4, r7
 80076fa:	f040 80e5 	bne.w	80078c8 <_vfiprintf_r+0x250>
 80076fe:	7823      	ldrb	r3, [r4, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 80fd 	beq.w	8007900 <_vfiprintf_r+0x288>
 8007706:	f04f 0200 	mov.w	r2, #0
 800770a:	2100      	movs	r1, #0
 800770c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 8007710:	7863      	ldrb	r3, [r4, #1]
 8007712:	9104      	str	r1, [sp, #16]
 8007714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007718:	1c67      	adds	r7, r4, #1
 800771a:	4608      	mov	r0, r1
 800771c:	9202      	str	r2, [sp, #8]
 800771e:	468a      	mov	sl, r1
 8007720:	3701      	adds	r7, #1
 8007722:	f1a3 0220 	sub.w	r2, r3, #32
 8007726:	2a58      	cmp	r2, #88	; 0x58
 8007728:	f200 80f7 	bhi.w	800791a <_vfiprintf_r+0x2a2>
 800772c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007730:	00f50233 	.word	0x00f50233
 8007734:	022f00f5 	.word	0x022f00f5
 8007738:	00f500f5 	.word	0x00f500f5
 800773c:	00f500f5 	.word	0x00f500f5
 8007740:	00f500f5 	.word	0x00f500f5
 8007744:	022b01e5 	.word	0x022b01e5
 8007748:	01f000f5 	.word	0x01f000f5
 800774c:	00f501f4 	.word	0x00f501f4
 8007750:	00590227 	.word	0x00590227
 8007754:	00590059 	.word	0x00590059
 8007758:	00590059 	.word	0x00590059
 800775c:	00590059 	.word	0x00590059
 8007760:	00590059 	.word	0x00590059
 8007764:	00f500f5 	.word	0x00f500f5
 8007768:	00f500f5 	.word	0x00f500f5
 800776c:	00f500f5 	.word	0x00f500f5
 8007770:	00f500f5 	.word	0x00f500f5
 8007774:	00f500f5 	.word	0x00f500f5
 8007778:	00f5020e 	.word	0x00f5020e
 800777c:	00f500f5 	.word	0x00f500f5
 8007780:	00f500f5 	.word	0x00f500f5
 8007784:	00f500f5 	.word	0x00f500f5
 8007788:	00f500f5 	.word	0x00f500f5
 800778c:	009400f5 	.word	0x009400f5
 8007790:	00f500f5 	.word	0x00f500f5
 8007794:	00f500f5 	.word	0x00f500f5
 8007798:	008400f5 	.word	0x008400f5
 800779c:	00f500f5 	.word	0x00f500f5
 80077a0:	00f50248 	.word	0x00f50248
 80077a4:	00f500f5 	.word	0x00f500f5
 80077a8:	00f500f5 	.word	0x00f500f5
 80077ac:	00f500f5 	.word	0x00f500f5
 80077b0:	00f500f5 	.word	0x00f500f5
 80077b4:	023a00f5 	.word	0x023a00f5
 80077b8:	00f501a7 	.word	0x00f501a7
 80077bc:	00f500f5 	.word	0x00f500f5
 80077c0:	01a70289 	.word	0x01a70289
 80077c4:	00f500f5 	.word	0x00f500f5
 80077c8:	00f5027f 	.word	0x00f5027f
 80077cc:	00960269 	.word	0x00960269
 80077d0:	02c502c9 	.word	0x02c502c9
 80077d4:	02a400f5 	.word	0x02a400f5
 80077d8:	008600f5 	.word	0x008600f5
 80077dc:	00f500f5 	.word	0x00f500f5
 80077e0:	028d      	.short	0x028d
 80077e2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80077e6:	2400      	movs	r4, #0
 80077e8:	f817 3b01 	ldrb.w	r3, [r7], #1
 80077ec:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80077f0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80077f4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80077f8:	2a09      	cmp	r2, #9
 80077fa:	d9f5      	bls.n	80077e8 <_vfiprintf_r+0x170>
 80077fc:	9404      	str	r4, [sp, #16]
 80077fe:	e790      	b.n	8007722 <_vfiprintf_r+0xaa>
 8007800:	4641      	mov	r1, r8
 8007802:	4658      	mov	r0, fp
 8007804:	f7fb fece 	bl	80035a4 <__swsetup_r>
 8007808:	2800      	cmp	r0, #0
 800780a:	f040 8535 	bne.w	8008278 <_vfiprintf_r+0xc00>
 800780e:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 8007812:	f002 021a 	and.w	r2, r2, #26
 8007816:	2a0a      	cmp	r2, #10
 8007818:	f47f af58 	bne.w	80076cc <_vfiprintf_r+0x54>
 800781c:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
 8007820:	2b00      	cmp	r3, #0
 8007822:	f6ff af53 	blt.w	80076cc <_vfiprintf_r+0x54>
 8007826:	4623      	mov	r3, r4
 8007828:	463a      	mov	r2, r7
 800782a:	4641      	mov	r1, r8
 800782c:	4658      	mov	r0, fp
 800782e:	b02b      	add	sp, #172	; 0xac
 8007830:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007834:	f000 bd44 	b.w	80082c0 <__sbprintf>
 8007838:	f04a 0a10 	orr.w	sl, sl, #16
 800783c:	f01a 0120 	ands.w	r1, sl, #32
 8007840:	f000 810f 	beq.w	8007a62 <_vfiprintf_r+0x3ea>
 8007844:	9b06      	ldr	r3, [sp, #24]
 8007846:	3307      	adds	r3, #7
 8007848:	f023 0307 	bic.w	r3, r3, #7
 800784c:	6859      	ldr	r1, [r3, #4]
 800784e:	f853 0b08 	ldr.w	r0, [r3], #8
 8007852:	9306      	str	r3, [sp, #24]
 8007854:	2301      	movs	r3, #1
 8007856:	e00e      	b.n	8007876 <_vfiprintf_r+0x1fe>
 8007858:	f04a 0a10 	orr.w	sl, sl, #16
 800785c:	f01a 0120 	ands.w	r1, sl, #32
 8007860:	f000 80f2 	beq.w	8007a48 <_vfiprintf_r+0x3d0>
 8007864:	9b06      	ldr	r3, [sp, #24]
 8007866:	3307      	adds	r3, #7
 8007868:	f023 0307 	bic.w	r3, r3, #7
 800786c:	6859      	ldr	r1, [r3, #4]
 800786e:	f853 0b08 	ldr.w	r0, [r3], #8
 8007872:	9306      	str	r3, [sp, #24]
 8007874:	2300      	movs	r3, #0
 8007876:	f04f 0200 	mov.w	r2, #0
 800787a:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 800787e:	2200      	movs	r2, #0
 8007880:	9207      	str	r2, [sp, #28]
 8007882:	9a02      	ldr	r2, [sp, #8]
 8007884:	1c54      	adds	r4, r2, #1
 8007886:	f000 822f 	beq.w	8007ce8 <_vfiprintf_r+0x670>
 800788a:	f02a 0480 	bic.w	r4, sl, #128	; 0x80
 800788e:	9401      	str	r4, [sp, #4]
 8007890:	ea50 0401 	orrs.w	r4, r0, r1
 8007894:	f040 8226 	bne.w	8007ce4 <_vfiprintf_r+0x66c>
 8007898:	2a00      	cmp	r2, #0
 800789a:	f040 8495 	bne.w	80081c8 <_vfiprintf_r+0xb50>
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f040 840e 	bne.w	80080c0 <_vfiprintf_r+0xa48>
 80078a4:	f01a 0301 	ands.w	r3, sl, #1
 80078a8:	9303      	str	r3, [sp, #12]
 80078aa:	f040 843e 	bne.w	800812a <_vfiprintf_r+0xab2>
 80078ae:	ac1a      	add	r4, sp, #104	; 0x68
 80078b0:	e9dd 6302 	ldrd	r6, r3, [sp, #8]
 80078b4:	429e      	cmp	r6, r3
 80078b6:	bfb8      	it	lt
 80078b8:	461e      	movlt	r6, r3
 80078ba:	9b07      	ldr	r3, [sp, #28]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d03e      	beq.n	800793e <_vfiprintf_r+0x2c6>
 80078c0:	3601      	adds	r6, #1
 80078c2:	e03c      	b.n	800793e <_vfiprintf_r+0x2c6>
 80078c4:	1be5      	subs	r5, r4, r7
 80078c6:	d01b      	beq.n	8007900 <_vfiprintf_r+0x288>
 80078c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078cc:	3301      	adds	r3, #1
 80078ce:	442a      	add	r2, r5
 80078d0:	2b07      	cmp	r3, #7
 80078d2:	e9c9 7500 	strd	r7, r5, [r9]
 80078d6:	920f      	str	r2, [sp, #60]	; 0x3c
 80078d8:	930e      	str	r3, [sp, #56]	; 0x38
 80078da:	dc05      	bgt.n	80078e8 <_vfiprintf_r+0x270>
 80078dc:	f109 0908 	add.w	r9, r9, #8
 80078e0:	9b05      	ldr	r3, [sp, #20]
 80078e2:	442b      	add	r3, r5
 80078e4:	9305      	str	r3, [sp, #20]
 80078e6:	e70a      	b.n	80076fe <_vfiprintf_r+0x86>
 80078e8:	2a00      	cmp	r2, #0
 80078ea:	f000 83d1 	beq.w	8008090 <_vfiprintf_r+0xa18>
 80078ee:	aa0d      	add	r2, sp, #52	; 0x34
 80078f0:	4641      	mov	r1, r8
 80078f2:	4658      	mov	r0, fp
 80078f4:	f7ff fe78 	bl	80075e8 <__sprint_r.part.0>
 80078f8:	b930      	cbnz	r0, 8007908 <_vfiprintf_r+0x290>
 80078fa:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80078fe:	e7ef      	b.n	80078e0 <_vfiprintf_r+0x268>
 8007900:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007902:	2b00      	cmp	r3, #0
 8007904:	f040 8485 	bne.w	8008212 <_vfiprintf_r+0xb9a>
 8007908:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800790c:	065b      	lsls	r3, r3, #25
 800790e:	f100 84b3 	bmi.w	8008278 <_vfiprintf_r+0xc00>
 8007912:	9805      	ldr	r0, [sp, #20]
 8007914:	b02b      	add	sp, #172	; 0xac
 8007916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800791a:	2900      	cmp	r1, #0
 800791c:	f040 8475 	bne.w	800820a <_vfiprintf_r+0xb92>
 8007920:	2b00      	cmp	r3, #0
 8007922:	d0ed      	beq.n	8007900 <_vfiprintf_r+0x288>
 8007924:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8007928:	2601      	movs	r6, #1
 800792a:	f04f 0300 	mov.w	r3, #0
 800792e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8007932:	9603      	str	r6, [sp, #12]
 8007934:	ac10      	add	r4, sp, #64	; 0x40
 8007936:	2300      	movs	r3, #0
 8007938:	f8cd a004 	str.w	sl, [sp, #4]
 800793c:	9302      	str	r3, [sp, #8]
 800793e:	9b01      	ldr	r3, [sp, #4]
 8007940:	f013 0302 	ands.w	r3, r3, #2
 8007944:	9307      	str	r3, [sp, #28]
 8007946:	9b01      	ldr	r3, [sp, #4]
 8007948:	bf18      	it	ne
 800794a:	3602      	addne	r6, #2
 800794c:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8007950:	9308      	str	r3, [sp, #32]
 8007952:	d104      	bne.n	800795e <_vfiprintf_r+0x2e6>
 8007954:	9b04      	ldr	r3, [sp, #16]
 8007956:	1b9d      	subs	r5, r3, r6
 8007958:	2d00      	cmp	r5, #0
 800795a:	f300 82db 	bgt.w	8007f14 <_vfiprintf_r+0x89c>
 800795e:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 8007962:	f101 0c01 	add.w	ip, r1, #1
 8007966:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800796a:	b193      	cbz	r3, 8007992 <_vfiprintf_r+0x31a>
 800796c:	3001      	adds	r0, #1
 800796e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8007972:	2101      	movs	r1, #1
 8007974:	f1bc 0f07 	cmp.w	ip, #7
 8007978:	e9cd c00e 	strd	ip, r0, [sp, #56]	; 0x38
 800797c:	f8c9 3000 	str.w	r3, [r9]
 8007980:	f8c9 1004 	str.w	r1, [r9, #4]
 8007984:	f300 82a6 	bgt.w	8007ed4 <_vfiprintf_r+0x85c>
 8007988:	4661      	mov	r1, ip
 800798a:	f109 0908 	add.w	r9, r9, #8
 800798e:	f10c 0c01 	add.w	ip, ip, #1
 8007992:	9b07      	ldr	r3, [sp, #28]
 8007994:	b1eb      	cbz	r3, 80079d2 <_vfiprintf_r+0x35a>
 8007996:	ab0c      	add	r3, sp, #48	; 0x30
 8007998:	3002      	adds	r0, #2
 800799a:	f8c9 3000 	str.w	r3, [r9]
 800799e:	f1bc 0f07 	cmp.w	ip, #7
 80079a2:	f04f 0302 	mov.w	r3, #2
 80079a6:	e9cd c00e 	strd	ip, r0, [sp, #56]	; 0x38
 80079aa:	f8c9 3004 	str.w	r3, [r9, #4]
 80079ae:	f340 82ab 	ble.w	8007f08 <_vfiprintf_r+0x890>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	f000 8366 	beq.w	8008084 <_vfiprintf_r+0xa0c>
 80079b8:	aa0d      	add	r2, sp, #52	; 0x34
 80079ba:	4641      	mov	r1, r8
 80079bc:	4658      	mov	r0, fp
 80079be:	f7ff fe13 	bl	80075e8 <__sprint_r.part.0>
 80079c2:	2800      	cmp	r0, #0
 80079c4:	d1a0      	bne.n	8007908 <_vfiprintf_r+0x290>
 80079c6:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 80079ca:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80079ce:	f101 0c01 	add.w	ip, r1, #1
 80079d2:	9b08      	ldr	r3, [sp, #32]
 80079d4:	2b80      	cmp	r3, #128	; 0x80
 80079d6:	f000 81c8 	beq.w	8007d6a <_vfiprintf_r+0x6f2>
 80079da:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80079de:	1a9d      	subs	r5, r3, r2
 80079e0:	2d00      	cmp	r5, #0
 80079e2:	f300 821c 	bgt.w	8007e1e <_vfiprintf_r+0x7a6>
 80079e6:	9b03      	ldr	r3, [sp, #12]
 80079e8:	f8c9 4000 	str.w	r4, [r9]
 80079ec:	4418      	add	r0, r3
 80079ee:	f1bc 0f07 	cmp.w	ip, #7
 80079f2:	e9cd c00e 	strd	ip, r0, [sp, #56]	; 0x38
 80079f6:	f8c9 3004 	str.w	r3, [r9, #4]
 80079fa:	f340 81b3 	ble.w	8007d64 <_vfiprintf_r+0x6ec>
 80079fe:	2800      	cmp	r0, #0
 8007a00:	f000 82d2 	beq.w	8007fa8 <_vfiprintf_r+0x930>
 8007a04:	aa0d      	add	r2, sp, #52	; 0x34
 8007a06:	4641      	mov	r1, r8
 8007a08:	4658      	mov	r0, fp
 8007a0a:	f7ff fded 	bl	80075e8 <__sprint_r.part.0>
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	f47f af7a 	bne.w	8007908 <_vfiprintf_r+0x290>
 8007a14:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007a16:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8007a1a:	9b01      	ldr	r3, [sp, #4]
 8007a1c:	075a      	lsls	r2, r3, #29
 8007a1e:	d504      	bpl.n	8007a2a <_vfiprintf_r+0x3b2>
 8007a20:	9b04      	ldr	r3, [sp, #16]
 8007a22:	1b9c      	subs	r4, r3, r6
 8007a24:	2c00      	cmp	r4, #0
 8007a26:	f300 82c9 	bgt.w	8007fbc <_vfiprintf_r+0x944>
 8007a2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a2e:	42b2      	cmp	r2, r6
 8007a30:	bfac      	ite	ge
 8007a32:	189b      	addge	r3, r3, r2
 8007a34:	199b      	addlt	r3, r3, r6
 8007a36:	9305      	str	r3, [sp, #20]
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	f040 8236 	bne.w	8007eaa <_vfiprintf_r+0x832>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	930e      	str	r3, [sp, #56]	; 0x38
 8007a42:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8007a46:	e64a      	b.n	80076de <_vfiprintf_r+0x66>
 8007a48:	f01a 0310 	ands.w	r3, sl, #16
 8007a4c:	d149      	bne.n	8007ae2 <_vfiprintf_r+0x46a>
 8007a4e:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
 8007a52:	d046      	beq.n	8007ae2 <_vfiprintf_r+0x46a>
 8007a54:	9a06      	ldr	r2, [sp, #24]
 8007a56:	f852 0b04 	ldr.w	r0, [r2], #4
 8007a5a:	9206      	str	r2, [sp, #24]
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	b280      	uxth	r0, r0
 8007a60:	e709      	b.n	8007876 <_vfiprintf_r+0x1fe>
 8007a62:	f01a 0310 	ands.w	r3, sl, #16
 8007a66:	d142      	bne.n	8007aee <_vfiprintf_r+0x476>
 8007a68:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
 8007a6c:	d03f      	beq.n	8007aee <_vfiprintf_r+0x476>
 8007a6e:	9a06      	ldr	r2, [sp, #24]
 8007a70:	f852 0b04 	ldr.w	r0, [r2], #4
 8007a74:	9206      	str	r2, [sp, #24]
 8007a76:	4619      	mov	r1, r3
 8007a78:	b280      	uxth	r0, r0
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e6fb      	b.n	8007876 <_vfiprintf_r+0x1fe>
 8007a7e:	2900      	cmp	r1, #0
 8007a80:	f040 83e1 	bne.w	8008246 <_vfiprintf_r+0xbce>
 8007a84:	f01a 0f20 	tst.w	sl, #32
 8007a88:	9b06      	ldr	r3, [sp, #24]
 8007a8a:	d068      	beq.n	8007b5e <_vfiprintf_r+0x4e6>
 8007a8c:	3307      	adds	r3, #7
 8007a8e:	f023 0307 	bic.w	r3, r3, #7
 8007a92:	461a      	mov	r2, r3
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	f852 0b08 	ldr.w	r0, [r2], #8
 8007a9a:	9206      	str	r2, [sp, #24]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f2c0 8304 	blt.w	80080ac <_vfiprintf_r+0xa34>
 8007aa4:	9b02      	ldr	r3, [sp, #8]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	f000 838a 	beq.w	80081c0 <_vfiprintf_r+0xb48>
 8007aac:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8007ab0:	9307      	str	r3, [sp, #28]
 8007ab2:	ea50 0301 	orrs.w	r3, r0, r1
 8007ab6:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8007aba:	f000 8354 	beq.w	8008166 <_vfiprintf_r+0xaee>
 8007abe:	280a      	cmp	r0, #10
 8007ac0:	f171 0300 	sbcs.w	r3, r1, #0
 8007ac4:	f080 8312 	bcs.w	80080ec <_vfiprintf_r+0xa74>
 8007ac8:	3030      	adds	r0, #48	; 0x30
 8007aca:	2301      	movs	r3, #1
 8007acc:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
 8007ad0:	f8cd a004 	str.w	sl, [sp, #4]
 8007ad4:	9303      	str	r3, [sp, #12]
 8007ad6:	f10d 0467 	add.w	r4, sp, #103	; 0x67
 8007ada:	e6e9      	b.n	80078b0 <_vfiprintf_r+0x238>
 8007adc:	f7fc fff4 	bl	8004ac8 <__sinit>
 8007ae0:	e5d7      	b.n	8007692 <_vfiprintf_r+0x1a>
 8007ae2:	9b06      	ldr	r3, [sp, #24]
 8007ae4:	f853 0b04 	ldr.w	r0, [r3], #4
 8007ae8:	9306      	str	r3, [sp, #24]
 8007aea:	460b      	mov	r3, r1
 8007aec:	e6c3      	b.n	8007876 <_vfiprintf_r+0x1fe>
 8007aee:	9b06      	ldr	r3, [sp, #24]
 8007af0:	f853 0b04 	ldr.w	r0, [r3], #4
 8007af4:	9306      	str	r3, [sp, #24]
 8007af6:	2301      	movs	r3, #1
 8007af8:	e6bd      	b.n	8007876 <_vfiprintf_r+0x1fe>
 8007afa:	9b06      	ldr	r3, [sp, #24]
 8007afc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b00:	9204      	str	r2, [sp, #16]
 8007b02:	2a00      	cmp	r2, #0
 8007b04:	f280 830d 	bge.w	8008122 <_vfiprintf_r+0xaaa>
 8007b08:	9a04      	ldr	r2, [sp, #16]
 8007b0a:	9306      	str	r3, [sp, #24]
 8007b0c:	4252      	negs	r2, r2
 8007b0e:	9204      	str	r2, [sp, #16]
 8007b10:	783b      	ldrb	r3, [r7, #0]
 8007b12:	f04a 0a04 	orr.w	sl, sl, #4
 8007b16:	e603      	b.n	8007720 <_vfiprintf_r+0xa8>
 8007b18:	463c      	mov	r4, r7
 8007b1a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8007b20:	f000 83af 	beq.w	8008282 <_vfiprintf_r+0xc0a>
 8007b24:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007b28:	2a09      	cmp	r2, #9
 8007b2a:	4627      	mov	r7, r4
 8007b2c:	bf98      	it	ls
 8007b2e:	2400      	movls	r4, #0
 8007b30:	f200 838f 	bhi.w	8008252 <_vfiprintf_r+0xbda>
 8007b34:	f817 3b01 	ldrb.w	r3, [r7], #1
 8007b38:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8007b3c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8007b40:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007b44:	2a09      	cmp	r2, #9
 8007b46:	d9f5      	bls.n	8007b34 <_vfiprintf_r+0x4bc>
 8007b48:	9402      	str	r4, [sp, #8]
 8007b4a:	e5ea      	b.n	8007722 <_vfiprintf_r+0xaa>
 8007b4c:	2900      	cmp	r1, #0
 8007b4e:	f040 8384 	bne.w	800825a <_vfiprintf_r+0xbe2>
 8007b52:	f04a 0a10 	orr.w	sl, sl, #16
 8007b56:	f01a 0f20 	tst.w	sl, #32
 8007b5a:	9b06      	ldr	r3, [sp, #24]
 8007b5c:	d196      	bne.n	8007a8c <_vfiprintf_r+0x414>
 8007b5e:	f853 0b04 	ldr.w	r0, [r3], #4
 8007b62:	9306      	str	r3, [sp, #24]
 8007b64:	f01a 0f10 	tst.w	sl, #16
 8007b68:	f040 829b 	bne.w	80080a2 <_vfiprintf_r+0xa2a>
 8007b6c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007b70:	f000 8297 	beq.w	80080a2 <_vfiprintf_r+0xa2a>
 8007b74:	f340 31c0 	sbfx	r1, r0, #15, #1
 8007b78:	460b      	mov	r3, r1
 8007b7a:	b200      	sxth	r0, r0
 8007b7c:	e78f      	b.n	8007a9e <_vfiprintf_r+0x426>
 8007b7e:	783b      	ldrb	r3, [r7, #0]
 8007b80:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8007b84:	e5cc      	b.n	8007720 <_vfiprintf_r+0xa8>
 8007b86:	783b      	ldrb	r3, [r7, #0]
 8007b88:	2101      	movs	r1, #1
 8007b8a:	202b      	movs	r0, #43	; 0x2b
 8007b8c:	e5c8      	b.n	8007720 <_vfiprintf_r+0xa8>
 8007b8e:	783b      	ldrb	r3, [r7, #0]
 8007b90:	f04a 0a01 	orr.w	sl, sl, #1
 8007b94:	e5c4      	b.n	8007720 <_vfiprintf_r+0xa8>
 8007b96:	783b      	ldrb	r3, [r7, #0]
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	f47f adc1 	bne.w	8007720 <_vfiprintf_r+0xa8>
 8007b9e:	2101      	movs	r1, #1
 8007ba0:	2020      	movs	r0, #32
 8007ba2:	e5bd      	b.n	8007720 <_vfiprintf_r+0xa8>
 8007ba4:	9b06      	ldr	r3, [sp, #24]
 8007ba6:	f04f 0200 	mov.w	r2, #0
 8007baa:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 8007bae:	2601      	movs	r6, #1
 8007bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bb4:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
 8007bb8:	9306      	str	r3, [sp, #24]
 8007bba:	9603      	str	r6, [sp, #12]
 8007bbc:	ac10      	add	r4, sp, #64	; 0x40
 8007bbe:	e6ba      	b.n	8007936 <_vfiprintf_r+0x2be>
 8007bc0:	2900      	cmp	r1, #0
 8007bc2:	f040 834d 	bne.w	8008260 <_vfiprintf_r+0xbe8>
 8007bc6:	4abd      	ldr	r2, [pc, #756]	; (8007ebc <_vfiprintf_r+0x844>)
 8007bc8:	9209      	str	r2, [sp, #36]	; 0x24
 8007bca:	f01a 0120 	ands.w	r1, sl, #32
 8007bce:	d044      	beq.n	8007c5a <_vfiprintf_r+0x5e2>
 8007bd0:	9a06      	ldr	r2, [sp, #24]
 8007bd2:	3207      	adds	r2, #7
 8007bd4:	f022 0207 	bic.w	r2, r2, #7
 8007bd8:	6851      	ldr	r1, [r2, #4]
 8007bda:	f852 0b08 	ldr.w	r0, [r2], #8
 8007bde:	9206      	str	r2, [sp, #24]
 8007be0:	f01a 0f01 	tst.w	sl, #1
 8007be4:	d00b      	beq.n	8007bfe <_vfiprintf_r+0x586>
 8007be6:	ea50 0201 	orrs.w	r2, r0, r1
 8007bea:	d008      	beq.n	8007bfe <_vfiprintf_r+0x586>
 8007bec:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8007bf0:	2330      	movs	r3, #48	; 0x30
 8007bf2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8007bf6:	f04a 0a02 	orr.w	sl, sl, #2
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	e63b      	b.n	8007876 <_vfiprintf_r+0x1fe>
 8007bfe:	2302      	movs	r3, #2
 8007c00:	e639      	b.n	8007876 <_vfiprintf_r+0x1fe>
 8007c02:	2900      	cmp	r1, #0
 8007c04:	f040 8322 	bne.w	800824c <_vfiprintf_r+0xbd4>
 8007c08:	f01a 0f20 	tst.w	sl, #32
 8007c0c:	f040 829a 	bne.w	8008144 <_vfiprintf_r+0xacc>
 8007c10:	f01a 0f10 	tst.w	sl, #16
 8007c14:	f040 82cc 	bne.w	80081b0 <_vfiprintf_r+0xb38>
 8007c18:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007c1c:	f000 82c8 	beq.w	80081b0 <_vfiprintf_r+0xb38>
 8007c20:	9b06      	ldr	r3, [sp, #24]
 8007c22:	9905      	ldr	r1, [sp, #20]
 8007c24:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c28:	9306      	str	r3, [sp, #24]
 8007c2a:	8011      	strh	r1, [r2, #0]
 8007c2c:	e557      	b.n	80076de <_vfiprintf_r+0x66>
 8007c2e:	783b      	ldrb	r3, [r7, #0]
 8007c30:	2b6c      	cmp	r3, #108	; 0x6c
 8007c32:	bf03      	ittte	eq
 8007c34:	787b      	ldrbeq	r3, [r7, #1]
 8007c36:	f04a 0a20 	orreq.w	sl, sl, #32
 8007c3a:	3701      	addeq	r7, #1
 8007c3c:	f04a 0a10 	orrne.w	sl, sl, #16
 8007c40:	e56e      	b.n	8007720 <_vfiprintf_r+0xa8>
 8007c42:	783b      	ldrb	r3, [r7, #0]
 8007c44:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
 8007c48:	e56a      	b.n	8007720 <_vfiprintf_r+0xa8>
 8007c4a:	2900      	cmp	r1, #0
 8007c4c:	f040 82f8 	bne.w	8008240 <_vfiprintf_r+0xbc8>
 8007c50:	4a9b      	ldr	r2, [pc, #620]	; (8007ec0 <_vfiprintf_r+0x848>)
 8007c52:	9209      	str	r2, [sp, #36]	; 0x24
 8007c54:	f01a 0120 	ands.w	r1, sl, #32
 8007c58:	d1ba      	bne.n	8007bd0 <_vfiprintf_r+0x558>
 8007c5a:	f01a 0210 	ands.w	r2, sl, #16
 8007c5e:	f040 821b 	bne.w	8008098 <_vfiprintf_r+0xa20>
 8007c62:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
 8007c66:	f000 8217 	beq.w	8008098 <_vfiprintf_r+0xa20>
 8007c6a:	9c06      	ldr	r4, [sp, #24]
 8007c6c:	f854 0b04 	ldr.w	r0, [r4], #4
 8007c70:	9406      	str	r4, [sp, #24]
 8007c72:	4611      	mov	r1, r2
 8007c74:	b280      	uxth	r0, r0
 8007c76:	e7b3      	b.n	8007be0 <_vfiprintf_r+0x568>
 8007c78:	9d06      	ldr	r5, [sp, #24]
 8007c7a:	f855 4b04 	ldr.w	r4, [r5], #4
 8007c7e:	f04f 0300 	mov.w	r3, #0
 8007c82:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8007c86:	2c00      	cmp	r4, #0
 8007c88:	f000 82a4 	beq.w	80081d4 <_vfiprintf_r+0xb5c>
 8007c8c:	9b02      	ldr	r3, [sp, #8]
 8007c8e:	1c5e      	adds	r6, r3, #1
 8007c90:	f000 8272 	beq.w	8008178 <_vfiprintf_r+0xb00>
 8007c94:	461a      	mov	r2, r3
 8007c96:	2100      	movs	r1, #0
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f7fd fdb1 	bl	8005800 <memchr>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	f000 82be 	beq.w	8008220 <_vfiprintf_r+0xba8>
 8007ca4:	1b03      	subs	r3, r0, r4
 8007ca6:	9303      	str	r3, [sp, #12]
 8007ca8:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8007cac:	9307      	str	r3, [sp, #28]
 8007cae:	2300      	movs	r3, #0
 8007cb0:	9506      	str	r5, [sp, #24]
 8007cb2:	f8cd a004 	str.w	sl, [sp, #4]
 8007cb6:	9302      	str	r3, [sp, #8]
 8007cb8:	e5fa      	b.n	80078b0 <_vfiprintf_r+0x238>
 8007cba:	783b      	ldrb	r3, [r7, #0]
 8007cbc:	f04a 0a20 	orr.w	sl, sl, #32
 8007cc0:	e52e      	b.n	8007720 <_vfiprintf_r+0xa8>
 8007cc2:	9b06      	ldr	r3, [sp, #24]
 8007cc4:	f853 0b04 	ldr.w	r0, [r3], #4
 8007cc8:	9306      	str	r3, [sp, #24]
 8007cca:	2330      	movs	r3, #48	; 0x30
 8007ccc:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8007cd0:	2378      	movs	r3, #120	; 0x78
 8007cd2:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8007cd6:	4b7a      	ldr	r3, [pc, #488]	; (8007ec0 <_vfiprintf_r+0x848>)
 8007cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8007cda:	f04a 0a02 	orr.w	sl, sl, #2
 8007cde:	2100      	movs	r1, #0
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	e5c8      	b.n	8007876 <_vfiprintf_r+0x1fe>
 8007ce4:	f8dd a004 	ldr.w	sl, [sp, #4]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	f43f aee8 	beq.w	8007abe <_vfiprintf_r+0x446>
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	ac1a      	add	r4, sp, #104	; 0x68
 8007cf2:	d112      	bne.n	8007d1a <_vfiprintf_r+0x6a2>
 8007cf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cf6:	f000 030f 	and.w	r3, r0, #15
 8007cfa:	0900      	lsrs	r0, r0, #4
 8007cfc:	5cd3      	ldrb	r3, [r2, r3]
 8007cfe:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8007d02:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8007d06:	0909      	lsrs	r1, r1, #4
 8007d08:	ea50 0301 	orrs.w	r3, r0, r1
 8007d0c:	d1f3      	bne.n	8007cf6 <_vfiprintf_r+0x67e>
 8007d0e:	ab1a      	add	r3, sp, #104	; 0x68
 8007d10:	1b1b      	subs	r3, r3, r4
 8007d12:	f8cd a004 	str.w	sl, [sp, #4]
 8007d16:	9303      	str	r3, [sp, #12]
 8007d18:	e5ca      	b.n	80078b0 <_vfiprintf_r+0x238>
 8007d1a:	f000 0307 	and.w	r3, r0, #7
 8007d1e:	08c0      	lsrs	r0, r0, #3
 8007d20:	ea40 7041 	orr.w	r0, r0, r1, lsl #29
 8007d24:	08c9      	lsrs	r1, r1, #3
 8007d26:	3330      	adds	r3, #48	; 0x30
 8007d28:	ea50 0501 	orrs.w	r5, r0, r1
 8007d2c:	4622      	mov	r2, r4
 8007d2e:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8007d32:	d1f2      	bne.n	8007d1a <_vfiprintf_r+0x6a2>
 8007d34:	f01a 0f01 	tst.w	sl, #1
 8007d38:	d0e9      	beq.n	8007d0e <_vfiprintf_r+0x696>
 8007d3a:	2b30      	cmp	r3, #48	; 0x30
 8007d3c:	d0e7      	beq.n	8007d0e <_vfiprintf_r+0x696>
 8007d3e:	2330      	movs	r3, #48	; 0x30
 8007d40:	3a02      	subs	r2, #2
 8007d42:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007d46:	ab1a      	add	r3, sp, #104	; 0x68
 8007d48:	1a9b      	subs	r3, r3, r2
 8007d4a:	f8cd a004 	str.w	sl, [sp, #4]
 8007d4e:	9303      	str	r3, [sp, #12]
 8007d50:	4614      	mov	r4, r2
 8007d52:	e5ad      	b.n	80078b0 <_vfiprintf_r+0x238>
 8007d54:	9803      	ldr	r0, [sp, #12]
 8007d56:	941a      	str	r4, [sp, #104]	; 0x68
 8007d58:	2301      	movs	r3, #1
 8007d5a:	901b      	str	r0, [sp, #108]	; 0x6c
 8007d5c:	900f      	str	r0, [sp, #60]	; 0x3c
 8007d5e:	930e      	str	r3, [sp, #56]	; 0x38
 8007d60:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8007d64:	f109 0908 	add.w	r9, r9, #8
 8007d68:	e657      	b.n	8007a1a <_vfiprintf_r+0x3a2>
 8007d6a:	9b04      	ldr	r3, [sp, #16]
 8007d6c:	1b9d      	subs	r5, r3, r6
 8007d6e:	2d00      	cmp	r5, #0
 8007d70:	f77f ae33 	ble.w	80079da <_vfiprintf_r+0x362>
 8007d74:	2d10      	cmp	r5, #16
 8007d76:	f340 827b 	ble.w	8008270 <_vfiprintf_r+0xbf8>
 8007d7a:	f8df a148 	ldr.w	sl, [pc, #328]	; 8007ec4 <_vfiprintf_r+0x84c>
 8007d7e:	4652      	mov	r2, sl
 8007d80:	2310      	movs	r3, #16
 8007d82:	46a2      	mov	sl, r4
 8007d84:	4614      	mov	r4, r2
 8007d86:	e007      	b.n	8007d98 <_vfiprintf_r+0x720>
 8007d88:	f101 0e02 	add.w	lr, r1, #2
 8007d8c:	f109 0908 	add.w	r9, r9, #8
 8007d90:	4611      	mov	r1, r2
 8007d92:	3d10      	subs	r5, #16
 8007d94:	2d10      	cmp	r5, #16
 8007d96:	dd1d      	ble.n	8007dd4 <_vfiprintf_r+0x75c>
 8007d98:	1c4a      	adds	r2, r1, #1
 8007d9a:	3010      	adds	r0, #16
 8007d9c:	2a07      	cmp	r2, #7
 8007d9e:	e9c9 4300 	strd	r4, r3, [r9]
 8007da2:	e9cd 200e 	strd	r2, r0, [sp, #56]	; 0x38
 8007da6:	ddef      	ble.n	8007d88 <_vfiprintf_r+0x710>
 8007da8:	aa0d      	add	r2, sp, #52	; 0x34
 8007daa:	2800      	cmp	r0, #0
 8007dac:	f000 808c 	beq.w	8007ec8 <_vfiprintf_r+0x850>
 8007db0:	4641      	mov	r1, r8
 8007db2:	4658      	mov	r0, fp
 8007db4:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8007db8:	f7ff fc16 	bl	80075e8 <__sprint_r.part.0>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	f47f ada3 	bne.w	8007908 <_vfiprintf_r+0x290>
 8007dc2:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 8007dc6:	3d10      	subs	r5, #16
 8007dc8:	2d10      	cmp	r5, #16
 8007dca:	f101 0e01 	add.w	lr, r1, #1
 8007dce:	f04f 0310 	mov.w	r3, #16
 8007dd2:	dce1      	bgt.n	8007d98 <_vfiprintf_r+0x720>
 8007dd4:	4623      	mov	r3, r4
 8007dd6:	4654      	mov	r4, sl
 8007dd8:	469a      	mov	sl, r3
 8007dda:	4428      	add	r0, r5
 8007ddc:	f1be 0f07 	cmp.w	lr, #7
 8007de0:	e9cd e00e 	strd	lr, r0, [sp, #56]	; 0x38
 8007de4:	f8c9 a000 	str.w	sl, [r9]
 8007de8:	f8c9 5004 	str.w	r5, [r9, #4]
 8007dec:	f340 81a4 	ble.w	8008138 <_vfiprintf_r+0xac0>
 8007df0:	2800      	cmp	r0, #0
 8007df2:	f000 81f8 	beq.w	80081e6 <_vfiprintf_r+0xb6e>
 8007df6:	aa0d      	add	r2, sp, #52	; 0x34
 8007df8:	4641      	mov	r1, r8
 8007dfa:	4658      	mov	r0, fp
 8007dfc:	f7ff fbf4 	bl	80075e8 <__sprint_r.part.0>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	f47f ad81 	bne.w	8007908 <_vfiprintf_r+0x290>
 8007e06:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007e0a:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 8007e0e:	1a9d      	subs	r5, r3, r2
 8007e10:	2d00      	cmp	r5, #0
 8007e12:	f101 0c01 	add.w	ip, r1, #1
 8007e16:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8007e1a:	f77f ade4 	ble.w	80079e6 <_vfiprintf_r+0x36e>
 8007e1e:	2d10      	cmp	r5, #16
 8007e20:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8007ec4 <_vfiprintf_r+0x84c>
 8007e24:	dd2b      	ble.n	8007e7e <_vfiprintf_r+0x806>
 8007e26:	4652      	mov	r2, sl
 8007e28:	2310      	movs	r3, #16
 8007e2a:	46a2      	mov	sl, r4
 8007e2c:	4614      	mov	r4, r2
 8007e2e:	e007      	b.n	8007e40 <_vfiprintf_r+0x7c8>
 8007e30:	f101 0c02 	add.w	ip, r1, #2
 8007e34:	f109 0908 	add.w	r9, r9, #8
 8007e38:	4611      	mov	r1, r2
 8007e3a:	3d10      	subs	r5, #16
 8007e3c:	2d10      	cmp	r5, #16
 8007e3e:	dd1b      	ble.n	8007e78 <_vfiprintf_r+0x800>
 8007e40:	1c4a      	adds	r2, r1, #1
 8007e42:	3010      	adds	r0, #16
 8007e44:	2a07      	cmp	r2, #7
 8007e46:	e9c9 4300 	strd	r4, r3, [r9]
 8007e4a:	e9cd 200e 	strd	r2, r0, [sp, #56]	; 0x38
 8007e4e:	ddef      	ble.n	8007e30 <_vfiprintf_r+0x7b8>
 8007e50:	aa0d      	add	r2, sp, #52	; 0x34
 8007e52:	4641      	mov	r1, r8
 8007e54:	b318      	cbz	r0, 8007e9e <_vfiprintf_r+0x826>
 8007e56:	4658      	mov	r0, fp
 8007e58:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8007e5c:	f7ff fbc4 	bl	80075e8 <__sprint_r.part.0>
 8007e60:	2800      	cmp	r0, #0
 8007e62:	f47f ad51 	bne.w	8007908 <_vfiprintf_r+0x290>
 8007e66:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 8007e6a:	3d10      	subs	r5, #16
 8007e6c:	2d10      	cmp	r5, #16
 8007e6e:	f101 0c01 	add.w	ip, r1, #1
 8007e72:	f04f 0310 	mov.w	r3, #16
 8007e76:	dce3      	bgt.n	8007e40 <_vfiprintf_r+0x7c8>
 8007e78:	4623      	mov	r3, r4
 8007e7a:	4654      	mov	r4, sl
 8007e7c:	469a      	mov	sl, r3
 8007e7e:	4428      	add	r0, r5
 8007e80:	f1bc 0f07 	cmp.w	ip, #7
 8007e84:	e9cd c00e 	strd	ip, r0, [sp, #56]	; 0x38
 8007e88:	f8c9 a000 	str.w	sl, [r9]
 8007e8c:	f8c9 5004 	str.w	r5, [r9, #4]
 8007e90:	f300 80e3 	bgt.w	800805a <_vfiprintf_r+0x9e2>
 8007e94:	f109 0908 	add.w	r9, r9, #8
 8007e98:	f10c 0c01 	add.w	ip, ip, #1
 8007e9c:	e5a3      	b.n	80079e6 <_vfiprintf_r+0x36e>
 8007e9e:	f04f 0c01 	mov.w	ip, #1
 8007ea2:	4601      	mov	r1, r0
 8007ea4:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8007ea8:	e7c7      	b.n	8007e3a <_vfiprintf_r+0x7c2>
 8007eaa:	aa0d      	add	r2, sp, #52	; 0x34
 8007eac:	4641      	mov	r1, r8
 8007eae:	4658      	mov	r0, fp
 8007eb0:	f7ff fb9a 	bl	80075e8 <__sprint_r.part.0>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	f43f adc2 	beq.w	8007a3e <_vfiprintf_r+0x3c6>
 8007eba:	e525      	b.n	8007908 <_vfiprintf_r+0x290>
 8007ebc:	0801e2b4 	.word	0x0801e2b4
 8007ec0:	0801e2a0 	.word	0x0801e2a0
 8007ec4:	0800eff0 	.word	0x0800eff0
 8007ec8:	f04f 0e01 	mov.w	lr, #1
 8007ecc:	4601      	mov	r1, r0
 8007ece:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8007ed2:	e75e      	b.n	8007d92 <_vfiprintf_r+0x71a>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	f000 80d2 	beq.w	800807e <_vfiprintf_r+0xa06>
 8007eda:	aa0d      	add	r2, sp, #52	; 0x34
 8007edc:	4641      	mov	r1, r8
 8007ede:	4658      	mov	r0, fp
 8007ee0:	f7ff fb82 	bl	80075e8 <__sprint_r.part.0>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	f47f ad0f 	bne.w	8007908 <_vfiprintf_r+0x290>
 8007eea:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 8007eee:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8007ef2:	f101 0c01 	add.w	ip, r1, #1
 8007ef6:	e54c      	b.n	8007992 <_vfiprintf_r+0x31a>
 8007ef8:	2002      	movs	r0, #2
 8007efa:	ab0c      	add	r3, sp, #48	; 0x30
 8007efc:	901b      	str	r0, [sp, #108]	; 0x6c
 8007efe:	931a      	str	r3, [sp, #104]	; 0x68
 8007f00:	f04f 0c01 	mov.w	ip, #1
 8007f04:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8007f08:	4661      	mov	r1, ip
 8007f0a:	f109 0908 	add.w	r9, r9, #8
 8007f0e:	f101 0c01 	add.w	ip, r1, #1
 8007f12:	e55e      	b.n	80079d2 <_vfiprintf_r+0x35a>
 8007f14:	2d10      	cmp	r5, #16
 8007f16:	f340 818d 	ble.w	8008234 <_vfiprintf_r+0xbbc>
 8007f1a:	f8df a380 	ldr.w	sl, [pc, #896]	; 800829c <_vfiprintf_r+0xc24>
 8007f1e:	e9dd c00e 	ldrd	ip, r0, [sp, #56]	; 0x38
 8007f22:	4652      	mov	r2, sl
 8007f24:	2310      	movs	r3, #16
 8007f26:	46a2      	mov	sl, r4
 8007f28:	4661      	mov	r1, ip
 8007f2a:	4614      	mov	r4, r2
 8007f2c:	e007      	b.n	8007f3e <_vfiprintf_r+0x8c6>
 8007f2e:	f101 0c02 	add.w	ip, r1, #2
 8007f32:	f109 0908 	add.w	r9, r9, #8
 8007f36:	4611      	mov	r1, r2
 8007f38:	3d10      	subs	r5, #16
 8007f3a:	2d10      	cmp	r5, #16
 8007f3c:	dd1b      	ble.n	8007f76 <_vfiprintf_r+0x8fe>
 8007f3e:	1c4a      	adds	r2, r1, #1
 8007f40:	3010      	adds	r0, #16
 8007f42:	2a07      	cmp	r2, #7
 8007f44:	e9c9 4300 	strd	r4, r3, [r9]
 8007f48:	e9cd 200e 	strd	r2, r0, [sp, #56]	; 0x38
 8007f4c:	ddef      	ble.n	8007f2e <_vfiprintf_r+0x8b6>
 8007f4e:	aa0d      	add	r2, sp, #52	; 0x34
 8007f50:	b320      	cbz	r0, 8007f9c <_vfiprintf_r+0x924>
 8007f52:	4641      	mov	r1, r8
 8007f54:	4658      	mov	r0, fp
 8007f56:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8007f5a:	f7ff fb45 	bl	80075e8 <__sprint_r.part.0>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	f47f acd2 	bne.w	8007908 <_vfiprintf_r+0x290>
 8007f64:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 8007f68:	3d10      	subs	r5, #16
 8007f6a:	2d10      	cmp	r5, #16
 8007f6c:	f101 0c01 	add.w	ip, r1, #1
 8007f70:	f04f 0310 	mov.w	r3, #16
 8007f74:	dce3      	bgt.n	8007f3e <_vfiprintf_r+0x8c6>
 8007f76:	4623      	mov	r3, r4
 8007f78:	4661      	mov	r1, ip
 8007f7a:	4654      	mov	r4, sl
 8007f7c:	469a      	mov	sl, r3
 8007f7e:	4428      	add	r0, r5
 8007f80:	2907      	cmp	r1, #7
 8007f82:	e9cd 100e 	strd	r1, r0, [sp, #56]	; 0x38
 8007f86:	f8c9 a000 	str.w	sl, [r9]
 8007f8a:	f8c9 5004 	str.w	r5, [r9, #4]
 8007f8e:	f300 809c 	bgt.w	80080ca <_vfiprintf_r+0xa52>
 8007f92:	f109 0908 	add.w	r9, r9, #8
 8007f96:	f101 0c01 	add.w	ip, r1, #1
 8007f9a:	e4e4      	b.n	8007966 <_vfiprintf_r+0x2ee>
 8007f9c:	4601      	mov	r1, r0
 8007f9e:	f04f 0c01 	mov.w	ip, #1
 8007fa2:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8007fa6:	e7c7      	b.n	8007f38 <_vfiprintf_r+0x8c0>
 8007fa8:	9b01      	ldr	r3, [sp, #4]
 8007faa:	900e      	str	r0, [sp, #56]	; 0x38
 8007fac:	0759      	lsls	r1, r3, #29
 8007fae:	d54c      	bpl.n	800804a <_vfiprintf_r+0x9d2>
 8007fb0:	9b04      	ldr	r3, [sp, #16]
 8007fb2:	1b9c      	subs	r4, r3, r6
 8007fb4:	2c00      	cmp	r4, #0
 8007fb6:	dd48      	ble.n	800804a <_vfiprintf_r+0x9d2>
 8007fb8:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8007fbc:	2c10      	cmp	r4, #16
 8007fbe:	f340 8152 	ble.w	8008266 <_vfiprintf_r+0xbee>
 8007fc2:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 800829c <_vfiprintf_r+0xc24>
 8007fc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fc8:	4653      	mov	r3, sl
 8007fca:	2510      	movs	r5, #16
 8007fcc:	46b2      	mov	sl, r6
 8007fce:	461e      	mov	r6, r3
 8007fd0:	e006      	b.n	8007fe0 <_vfiprintf_r+0x968>
 8007fd2:	1c91      	adds	r1, r2, #2
 8007fd4:	f109 0908 	add.w	r9, r9, #8
 8007fd8:	461a      	mov	r2, r3
 8007fda:	3c10      	subs	r4, #16
 8007fdc:	2c10      	cmp	r4, #16
 8007fde:	dd19      	ble.n	8008014 <_vfiprintf_r+0x99c>
 8007fe0:	1c53      	adds	r3, r2, #1
 8007fe2:	3010      	adds	r0, #16
 8007fe4:	2b07      	cmp	r3, #7
 8007fe6:	e9c9 6500 	strd	r6, r5, [r9]
 8007fea:	e9cd 300e 	strd	r3, r0, [sp, #56]	; 0x38
 8007fee:	ddf0      	ble.n	8007fd2 <_vfiprintf_r+0x95a>
 8007ff0:	aa0d      	add	r2, sp, #52	; 0x34
 8007ff2:	b328      	cbz	r0, 8008040 <_vfiprintf_r+0x9c8>
 8007ff4:	4641      	mov	r1, r8
 8007ff6:	4658      	mov	r0, fp
 8007ff8:	f7ff faf6 	bl	80075e8 <__sprint_r.part.0>
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	f47f ac83 	bne.w	8007908 <_vfiprintf_r+0x290>
 8008002:	e9dd 200e 	ldrd	r2, r0, [sp, #56]	; 0x38
 8008006:	3c10      	subs	r4, #16
 8008008:	2c10      	cmp	r4, #16
 800800a:	f102 0101 	add.w	r1, r2, #1
 800800e:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8008012:	dce5      	bgt.n	8007fe0 <_vfiprintf_r+0x968>
 8008014:	4633      	mov	r3, r6
 8008016:	4656      	mov	r6, sl
 8008018:	469a      	mov	sl, r3
 800801a:	4420      	add	r0, r4
 800801c:	2907      	cmp	r1, #7
 800801e:	e9c9 a400 	strd	sl, r4, [r9]
 8008022:	e9cd 100e 	strd	r1, r0, [sp, #56]	; 0x38
 8008026:	f77f ad00 	ble.w	8007a2a <_vfiprintf_r+0x3b2>
 800802a:	b170      	cbz	r0, 800804a <_vfiprintf_r+0x9d2>
 800802c:	aa0d      	add	r2, sp, #52	; 0x34
 800802e:	4641      	mov	r1, r8
 8008030:	4658      	mov	r0, fp
 8008032:	f7ff fad9 	bl	80075e8 <__sprint_r.part.0>
 8008036:	2800      	cmp	r0, #0
 8008038:	f47f ac66 	bne.w	8007908 <_vfiprintf_r+0x290>
 800803c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800803e:	e4f4      	b.n	8007a2a <_vfiprintf_r+0x3b2>
 8008040:	2101      	movs	r1, #1
 8008042:	4602      	mov	r2, r0
 8008044:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8008048:	e7c7      	b.n	8007fda <_vfiprintf_r+0x962>
 800804a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800804e:	42b2      	cmp	r2, r6
 8008050:	bfac      	ite	ge
 8008052:	189b      	addge	r3, r3, r2
 8008054:	199b      	addlt	r3, r3, r6
 8008056:	9305      	str	r3, [sp, #20]
 8008058:	e4f1      	b.n	8007a3e <_vfiprintf_r+0x3c6>
 800805a:	2800      	cmp	r0, #0
 800805c:	f43f ae7a 	beq.w	8007d54 <_vfiprintf_r+0x6dc>
 8008060:	aa0d      	add	r2, sp, #52	; 0x34
 8008062:	4641      	mov	r1, r8
 8008064:	4658      	mov	r0, fp
 8008066:	f7ff fabf 	bl	80075e8 <__sprint_r.part.0>
 800806a:	2800      	cmp	r0, #0
 800806c:	f47f ac4c 	bne.w	8007908 <_vfiprintf_r+0x290>
 8008070:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008072:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008074:	f103 0c01 	add.w	ip, r3, #1
 8008078:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 800807c:	e4b3      	b.n	80079e6 <_vfiprintf_r+0x36e>
 800807e:	9b07      	ldr	r3, [sp, #28]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d169      	bne.n	8008158 <_vfiprintf_r+0xae0>
 8008084:	f04f 0c01 	mov.w	ip, #1
 8008088:	4601      	mov	r1, r0
 800808a:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 800808e:	e4a0      	b.n	80079d2 <_vfiprintf_r+0x35a>
 8008090:	920e      	str	r2, [sp, #56]	; 0x38
 8008092:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8008096:	e423      	b.n	80078e0 <_vfiprintf_r+0x268>
 8008098:	9a06      	ldr	r2, [sp, #24]
 800809a:	f852 0b04 	ldr.w	r0, [r2], #4
 800809e:	9206      	str	r2, [sp, #24]
 80080a0:	e59e      	b.n	8007be0 <_vfiprintf_r+0x568>
 80080a2:	17c1      	asrs	r1, r0, #31
 80080a4:	460b      	mov	r3, r1
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f6bf acfc 	bge.w	8007aa4 <_vfiprintf_r+0x42c>
 80080ac:	232d      	movs	r3, #45	; 0x2d
 80080ae:	4240      	negs	r0, r0
 80080b0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 80080b4:	9307      	str	r3, [sp, #28]
 80080b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80080ba:	2301      	movs	r3, #1
 80080bc:	f7ff bbe1 	b.w	8007882 <_vfiprintf_r+0x20a>
 80080c0:	9b02      	ldr	r3, [sp, #8]
 80080c2:	9303      	str	r3, [sp, #12]
 80080c4:	ac1a      	add	r4, sp, #104	; 0x68
 80080c6:	f7ff bbf3 	b.w	80078b0 <_vfiprintf_r+0x238>
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d062      	beq.n	8008194 <_vfiprintf_r+0xb1c>
 80080ce:	aa0d      	add	r2, sp, #52	; 0x34
 80080d0:	4641      	mov	r1, r8
 80080d2:	4658      	mov	r0, fp
 80080d4:	f7ff fa88 	bl	80075e8 <__sprint_r.part.0>
 80080d8:	2800      	cmp	r0, #0
 80080da:	f47f ac15 	bne.w	8007908 <_vfiprintf_r+0x290>
 80080de:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 80080e2:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80080e6:	f101 0c01 	add.w	ip, r1, #1
 80080ea:	e43c      	b.n	8007966 <_vfiprintf_r+0x2ee>
 80080ec:	ac1a      	add	r4, sp, #104	; 0x68
 80080ee:	220a      	movs	r2, #10
 80080f0:	2300      	movs	r3, #0
 80080f2:	4606      	mov	r6, r0
 80080f4:	460d      	mov	r5, r1
 80080f6:	f001 fb15 	bl	8009724 <__aeabi_uldivmod>
 80080fa:	3230      	adds	r2, #48	; 0x30
 80080fc:	f804 2d01 	strb.w	r2, [r4, #-1]!
 8008100:	2300      	movs	r3, #0
 8008102:	4630      	mov	r0, r6
 8008104:	4629      	mov	r1, r5
 8008106:	220a      	movs	r2, #10
 8008108:	f001 fb0c 	bl	8009724 <__aeabi_uldivmod>
 800810c:	2e0a      	cmp	r6, #10
 800810e:	f175 0300 	sbcs.w	r3, r5, #0
 8008112:	d2ec      	bcs.n	80080ee <_vfiprintf_r+0xa76>
 8008114:	ab1a      	add	r3, sp, #104	; 0x68
 8008116:	1b1b      	subs	r3, r3, r4
 8008118:	f8cd a004 	str.w	sl, [sp, #4]
 800811c:	9303      	str	r3, [sp, #12]
 800811e:	f7ff bbc7 	b.w	80078b0 <_vfiprintf_r+0x238>
 8008122:	9306      	str	r3, [sp, #24]
 8008124:	783b      	ldrb	r3, [r7, #0]
 8008126:	f7ff bafb 	b.w	8007720 <_vfiprintf_r+0xa8>
 800812a:	2330      	movs	r3, #48	; 0x30
 800812c:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8008130:	f10d 0467 	add.w	r4, sp, #103	; 0x67
 8008134:	f7ff bbbc 	b.w	80078b0 <_vfiprintf_r+0x238>
 8008138:	f109 0908 	add.w	r9, r9, #8
 800813c:	f10e 0c01 	add.w	ip, lr, #1
 8008140:	4671      	mov	r1, lr
 8008142:	e44a      	b.n	80079da <_vfiprintf_r+0x362>
 8008144:	e9dd 0305 	ldrd	r0, r3, [sp, #20]
 8008148:	f853 1b04 	ldr.w	r1, [r3], #4
 800814c:	9306      	str	r3, [sp, #24]
 800814e:	17c2      	asrs	r2, r0, #31
 8008150:	e9c1 0200 	strd	r0, r2, [r1]
 8008154:	f7ff bac3 	b.w	80076de <_vfiprintf_r+0x66>
 8008158:	2002      	movs	r0, #2
 800815a:	ab0c      	add	r3, sp, #48	; 0x30
 800815c:	901b      	str	r0, [sp, #108]	; 0x6c
 800815e:	931a      	str	r3, [sp, #104]	; 0x68
 8008160:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8008164:	e6d1      	b.n	8007f0a <_vfiprintf_r+0x892>
 8008166:	9b02      	ldr	r3, [sp, #8]
 8008168:	2b00      	cmp	r3, #0
 800816a:	f47f acad 	bne.w	8007ac8 <_vfiprintf_r+0x450>
 800816e:	f8cd a004 	str.w	sl, [sp, #4]
 8008172:	9303      	str	r3, [sp, #12]
 8008174:	f7ff bb9b 	b.w	80078ae <_vfiprintf_r+0x236>
 8008178:	4620      	mov	r0, r4
 800817a:	9506      	str	r5, [sp, #24]
 800817c:	f8cd a004 	str.w	sl, [sp, #4]
 8008180:	f7f8 fb7e 	bl	8000880 <strlen>
 8008184:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8008188:	9307      	str	r3, [sp, #28]
 800818a:	2300      	movs	r3, #0
 800818c:	9003      	str	r0, [sp, #12]
 800818e:	9302      	str	r3, [sp, #8]
 8008190:	f7ff bb8e 	b.w	80078b0 <_vfiprintf_r+0x238>
 8008194:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8008198:	b363      	cbz	r3, 80081f4 <_vfiprintf_r+0xb7c>
 800819a:	2301      	movs	r3, #1
 800819c:	469c      	mov	ip, r3
 800819e:	931b      	str	r3, [sp, #108]	; 0x6c
 80081a0:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80081a4:	931a      	str	r3, [sp, #104]	; 0x68
 80081a6:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80081aa:	4660      	mov	r0, ip
 80081ac:	f7ff bbec 	b.w	8007988 <_vfiprintf_r+0x310>
 80081b0:	9b06      	ldr	r3, [sp, #24]
 80081b2:	9905      	ldr	r1, [sp, #20]
 80081b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80081b8:	6011      	str	r1, [r2, #0]
 80081ba:	9306      	str	r3, [sp, #24]
 80081bc:	f7ff ba8f 	b.w	80076de <_vfiprintf_r+0x66>
 80081c0:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 80081c4:	9307      	str	r3, [sp, #28]
 80081c6:	e47a      	b.n	8007abe <_vfiprintf_r+0x446>
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	f8dd a004 	ldr.w	sl, [sp, #4]
 80081ce:	f47f ad8e 	bne.w	8007cee <_vfiprintf_r+0x676>
 80081d2:	e479      	b.n	8007ac8 <_vfiprintf_r+0x450>
 80081d4:	9e02      	ldr	r6, [sp, #8]
 80081d6:	4c30      	ldr	r4, [pc, #192]	; (8008298 <_vfiprintf_r+0xc20>)
 80081d8:	9506      	str	r5, [sp, #24]
 80081da:	2e06      	cmp	r6, #6
 80081dc:	bf28      	it	cs
 80081de:	2606      	movcs	r6, #6
 80081e0:	9603      	str	r6, [sp, #12]
 80081e2:	f7ff bba8 	b.w	8007936 <_vfiprintf_r+0x2be>
 80081e6:	f04f 0c01 	mov.w	ip, #1
 80081ea:	4601      	mov	r1, r0
 80081ec:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80081f0:	f7ff bbf3 	b.w	80079da <_vfiprintf_r+0x362>
 80081f4:	9b07      	ldr	r3, [sp, #28]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f47f ae7e 	bne.w	8007ef8 <_vfiprintf_r+0x880>
 80081fc:	4601      	mov	r1, r0
 80081fe:	f04f 0c01 	mov.w	ip, #1
 8008202:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8008206:	f7ff bbe8 	b.w	80079da <_vfiprintf_r+0x362>
 800820a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 800820e:	f7ff bb87 	b.w	8007920 <_vfiprintf_r+0x2a8>
 8008212:	aa0d      	add	r2, sp, #52	; 0x34
 8008214:	4641      	mov	r1, r8
 8008216:	4658      	mov	r0, fp
 8008218:	f7ff f9e6 	bl	80075e8 <__sprint_r.part.0>
 800821c:	f7ff bb74 	b.w	8007908 <_vfiprintf_r+0x290>
 8008220:	9b02      	ldr	r3, [sp, #8]
 8008222:	9303      	str	r3, [sp, #12]
 8008224:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8008228:	9506      	str	r5, [sp, #24]
 800822a:	e9cd a001 	strd	sl, r0, [sp, #4]
 800822e:	9307      	str	r3, [sp, #28]
 8008230:	f7ff bb3e 	b.w	80078b0 <_vfiprintf_r+0x238>
 8008234:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008236:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008238:	f8df a060 	ldr.w	sl, [pc, #96]	; 800829c <_vfiprintf_r+0xc24>
 800823c:	3101      	adds	r1, #1
 800823e:	e69e      	b.n	8007f7e <_vfiprintf_r+0x906>
 8008240:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8008244:	e504      	b.n	8007c50 <_vfiprintf_r+0x5d8>
 8008246:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 800824a:	e41b      	b.n	8007a84 <_vfiprintf_r+0x40c>
 800824c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8008250:	e4da      	b.n	8007c08 <_vfiprintf_r+0x590>
 8008252:	2200      	movs	r2, #0
 8008254:	9202      	str	r2, [sp, #8]
 8008256:	f7ff ba64 	b.w	8007722 <_vfiprintf_r+0xaa>
 800825a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 800825e:	e478      	b.n	8007b52 <_vfiprintf_r+0x4da>
 8008260:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8008264:	e4af      	b.n	8007bc6 <_vfiprintf_r+0x54e>
 8008266:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008268:	f8df a030 	ldr.w	sl, [pc, #48]	; 800829c <_vfiprintf_r+0xc24>
 800826c:	3101      	adds	r1, #1
 800826e:	e6d4      	b.n	800801a <_vfiprintf_r+0x9a2>
 8008270:	f8df a02c 	ldr.w	sl, [pc, #44]	; 80082a0 <_vfiprintf_r+0xc28>
 8008274:	46e6      	mov	lr, ip
 8008276:	e5b0      	b.n	8007dda <_vfiprintf_r+0x762>
 8008278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800827c:	9305      	str	r3, [sp, #20]
 800827e:	f7ff bb48 	b.w	8007912 <_vfiprintf_r+0x29a>
 8008282:	9a06      	ldr	r2, [sp, #24]
 8008284:	787b      	ldrb	r3, [r7, #1]
 8008286:	4627      	mov	r7, r4
 8008288:	f852 4b04 	ldr.w	r4, [r2], #4
 800828c:	9206      	str	r2, [sp, #24]
 800828e:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8008292:	9402      	str	r4, [sp, #8]
 8008294:	f7ff ba44 	b.w	8007720 <_vfiprintf_r+0xa8>
 8008298:	0801e2c8 	.word	0x0801e2c8
 800829c:	0800efe0 	.word	0x0800efe0
 80082a0:	0800eff0 	.word	0x0800eff0

080082a4 <vfiprintf>:
 80082a4:	b410      	push	{r4}
 80082a6:	4c05      	ldr	r4, [pc, #20]	; (80082bc <vfiprintf+0x18>)
 80082a8:	4684      	mov	ip, r0
 80082aa:	4613      	mov	r3, r2
 80082ac:	6820      	ldr	r0, [r4, #0]
 80082ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082b2:	460a      	mov	r2, r1
 80082b4:	4661      	mov	r1, ip
 80082b6:	f7ff b9df 	b.w	8007678 <_vfiprintf_r>
 80082ba:	bf00      	nop
 80082bc:	20000008 	.word	0x20000008

080082c0 <__sbprintf>:
 80082c0:	b570      	push	{r4, r5, r6, lr}
 80082c2:	460c      	mov	r4, r1
 80082c4:	8989      	ldrh	r1, [r1, #12]
 80082c6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 80082ca:	f021 0102 	bic.w	r1, r1, #2
 80082ce:	f8ad 100c 	strh.w	r1, [sp, #12]
 80082d2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80082d4:	9119      	str	r1, [sp, #100]	; 0x64
 80082d6:	89e1      	ldrh	r1, [r4, #14]
 80082d8:	f8ad 100e 	strh.w	r1, [sp, #14]
 80082dc:	69e1      	ldr	r1, [r4, #28]
 80082de:	9107      	str	r1, [sp, #28]
 80082e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80082e2:	9109      	str	r1, [sp, #36]	; 0x24
 80082e4:	a91a      	add	r1, sp, #104	; 0x68
 80082e6:	9100      	str	r1, [sp, #0]
 80082e8:	9104      	str	r1, [sp, #16]
 80082ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80082ee:	9102      	str	r1, [sp, #8]
 80082f0:	9105      	str	r1, [sp, #20]
 80082f2:	2100      	movs	r1, #0
 80082f4:	9106      	str	r1, [sp, #24]
 80082f6:	4669      	mov	r1, sp
 80082f8:	4606      	mov	r6, r0
 80082fa:	f7ff f9bd 	bl	8007678 <_vfiprintf_r>
 80082fe:	1e05      	subs	r5, r0, #0
 8008300:	db07      	blt.n	8008312 <__sbprintf+0x52>
 8008302:	4669      	mov	r1, sp
 8008304:	4630      	mov	r0, r6
 8008306:	f7fc fab5 	bl	8004874 <_fflush_r>
 800830a:	2800      	cmp	r0, #0
 800830c:	bf18      	it	ne
 800830e:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8008312:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8008316:	065b      	lsls	r3, r3, #25
 8008318:	d503      	bpl.n	8008322 <__sbprintf+0x62>
 800831a:	89a3      	ldrh	r3, [r4, #12]
 800831c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008320:	81a3      	strh	r3, [r4, #12]
 8008322:	4628      	mov	r0, r5
 8008324:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8008328:	bd70      	pop	{r4, r5, r6, pc}
 800832a:	bf00      	nop

0800832c <__swbuf_r>:
 800832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832e:	460d      	mov	r5, r1
 8008330:	4614      	mov	r4, r2
 8008332:	4606      	mov	r6, r0
 8008334:	b110      	cbz	r0, 800833c <__swbuf_r+0x10>
 8008336:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008338:	2b00      	cmp	r3, #0
 800833a:	d043      	beq.n	80083c4 <__swbuf_r+0x98>
 800833c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008340:	69a3      	ldr	r3, [r4, #24]
 8008342:	60a3      	str	r3, [r4, #8]
 8008344:	0717      	lsls	r7, r2, #28
 8008346:	b290      	uxth	r0, r2
 8008348:	d51b      	bpl.n	8008382 <__swbuf_r+0x56>
 800834a:	6923      	ldr	r3, [r4, #16]
 800834c:	b1cb      	cbz	r3, 8008382 <__swbuf_r+0x56>
 800834e:	b2ed      	uxtb	r5, r5
 8008350:	0481      	lsls	r1, r0, #18
 8008352:	462f      	mov	r7, r5
 8008354:	d522      	bpl.n	800839c <__swbuf_r+0x70>
 8008356:	6822      	ldr	r2, [r4, #0]
 8008358:	6961      	ldr	r1, [r4, #20]
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	4299      	cmp	r1, r3
 800835e:	dd29      	ble.n	80083b4 <__swbuf_r+0x88>
 8008360:	3301      	adds	r3, #1
 8008362:	68a1      	ldr	r1, [r4, #8]
 8008364:	3901      	subs	r1, #1
 8008366:	60a1      	str	r1, [r4, #8]
 8008368:	1c51      	adds	r1, r2, #1
 800836a:	6021      	str	r1, [r4, #0]
 800836c:	7015      	strb	r5, [r2, #0]
 800836e:	6962      	ldr	r2, [r4, #20]
 8008370:	429a      	cmp	r2, r3
 8008372:	d02a      	beq.n	80083ca <__swbuf_r+0x9e>
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	07db      	lsls	r3, r3, #31
 8008378:	d501      	bpl.n	800837e <__swbuf_r+0x52>
 800837a:	2d0a      	cmp	r5, #10
 800837c:	d025      	beq.n	80083ca <__swbuf_r+0x9e>
 800837e:	4638      	mov	r0, r7
 8008380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008382:	4621      	mov	r1, r4
 8008384:	4630      	mov	r0, r6
 8008386:	f7fb f90d 	bl	80035a4 <__swsetup_r>
 800838a:	bb20      	cbnz	r0, 80083d6 <__swbuf_r+0xaa>
 800838c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008390:	6923      	ldr	r3, [r4, #16]
 8008392:	b290      	uxth	r0, r2
 8008394:	b2ed      	uxtb	r5, r5
 8008396:	0481      	lsls	r1, r0, #18
 8008398:	462f      	mov	r7, r5
 800839a:	d4dc      	bmi.n	8008356 <__swbuf_r+0x2a>
 800839c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083a0:	81a2      	strh	r2, [r4, #12]
 80083a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083a4:	6961      	ldr	r1, [r4, #20]
 80083a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083aa:	6662      	str	r2, [r4, #100]	; 0x64
 80083ac:	6822      	ldr	r2, [r4, #0]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	4299      	cmp	r1, r3
 80083b2:	dcd5      	bgt.n	8008360 <__swbuf_r+0x34>
 80083b4:	4621      	mov	r1, r4
 80083b6:	4630      	mov	r0, r6
 80083b8:	f7fc fa5c 	bl	8004874 <_fflush_r>
 80083bc:	b958      	cbnz	r0, 80083d6 <__swbuf_r+0xaa>
 80083be:	6822      	ldr	r2, [r4, #0]
 80083c0:	2301      	movs	r3, #1
 80083c2:	e7ce      	b.n	8008362 <__swbuf_r+0x36>
 80083c4:	f7fc fb80 	bl	8004ac8 <__sinit>
 80083c8:	e7b8      	b.n	800833c <__swbuf_r+0x10>
 80083ca:	4621      	mov	r1, r4
 80083cc:	4630      	mov	r0, r6
 80083ce:	f7fc fa51 	bl	8004874 <_fflush_r>
 80083d2:	2800      	cmp	r0, #0
 80083d4:	d0d3      	beq.n	800837e <__swbuf_r+0x52>
 80083d6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80083da:	e7d0      	b.n	800837e <__swbuf_r+0x52>

080083dc <__swbuf>:
 80083dc:	b410      	push	{r4}
 80083de:	4c04      	ldr	r4, [pc, #16]	; (80083f0 <__swbuf+0x14>)
 80083e0:	4603      	mov	r3, r0
 80083e2:	460a      	mov	r2, r1
 80083e4:	6820      	ldr	r0, [r4, #0]
 80083e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083ea:	4619      	mov	r1, r3
 80083ec:	f7ff bf9e 	b.w	800832c <__swbuf_r>
 80083f0:	20000008 	.word	0x20000008

080083f4 <__assert_func>:
 80083f4:	b500      	push	{lr}
 80083f6:	4c0b      	ldr	r4, [pc, #44]	; (8008424 <__assert_func+0x30>)
 80083f8:	6825      	ldr	r5, [r4, #0]
 80083fa:	4614      	mov	r4, r2
 80083fc:	68ee      	ldr	r6, [r5, #12]
 80083fe:	461a      	mov	r2, r3
 8008400:	b085      	sub	sp, #20
 8008402:	4603      	mov	r3, r0
 8008404:	460d      	mov	r5, r1
 8008406:	b14c      	cbz	r4, 800841c <__assert_func+0x28>
 8008408:	4907      	ldr	r1, [pc, #28]	; (8008428 <__assert_func+0x34>)
 800840a:	9500      	str	r5, [sp, #0]
 800840c:	e9cd 1401 	strd	r1, r4, [sp, #4]
 8008410:	4630      	mov	r0, r6
 8008412:	4906      	ldr	r1, [pc, #24]	; (800842c <__assert_func+0x38>)
 8008414:	f000 f8bc 	bl	8008590 <fiprintf>
 8008418:	f000 fb8c 	bl	8008b34 <abort>
 800841c:	4904      	ldr	r1, [pc, #16]	; (8008430 <__assert_func+0x3c>)
 800841e:	460c      	mov	r4, r1
 8008420:	e7f3      	b.n	800840a <__assert_func+0x16>
 8008422:	bf00      	nop
 8008424:	20000008 	.word	0x20000008
 8008428:	0801e360 	.word	0x0801e360
 800842c:	0801e370 	.word	0x0801e370
 8008430:	0801e36c 	.word	0x0801e36c

08008434 <__assert>:
 8008434:	b508      	push	{r3, lr}
 8008436:	4613      	mov	r3, r2
 8008438:	2200      	movs	r2, #0
 800843a:	f7ff ffdb 	bl	80083f4 <__assert_func>
 800843e:	bf00      	nop

08008440 <_calloc_r>:
 8008440:	b510      	push	{r4, lr}
 8008442:	fb02 f101 	mul.w	r1, r2, r1
 8008446:	f7fc ff2b 	bl	80052a0 <_malloc_r>
 800844a:	4604      	mov	r4, r0
 800844c:	b168      	cbz	r0, 800846a <_calloc_r+0x2a>
 800844e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008452:	f022 0203 	bic.w	r2, r2, #3
 8008456:	3a04      	subs	r2, #4
 8008458:	2a24      	cmp	r2, #36	; 0x24
 800845a:	d818      	bhi.n	800848e <_calloc_r+0x4e>
 800845c:	2a13      	cmp	r2, #19
 800845e:	d806      	bhi.n	800846e <_calloc_r+0x2e>
 8008460:	4602      	mov	r2, r0
 8008462:	2300      	movs	r3, #0
 8008464:	e9c2 3300 	strd	r3, r3, [r2]
 8008468:	6093      	str	r3, [r2, #8]
 800846a:	4620      	mov	r0, r4
 800846c:	bd10      	pop	{r4, pc}
 800846e:	2300      	movs	r3, #0
 8008470:	2a1b      	cmp	r2, #27
 8008472:	e9c0 3300 	strd	r3, r3, [r0]
 8008476:	d90f      	bls.n	8008498 <_calloc_r+0x58>
 8008478:	2a24      	cmp	r2, #36	; 0x24
 800847a:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800847e:	bf11      	iteee	ne
 8008480:	f100 0210 	addne.w	r2, r0, #16
 8008484:	6103      	streq	r3, [r0, #16]
 8008486:	f100 0218 	addeq.w	r2, r0, #24
 800848a:	6143      	streq	r3, [r0, #20]
 800848c:	e7e9      	b.n	8008462 <_calloc_r+0x22>
 800848e:	2100      	movs	r1, #0
 8008490:	f7f7 ffae 	bl	80003f0 <memset>
 8008494:	4620      	mov	r0, r4
 8008496:	bd10      	pop	{r4, pc}
 8008498:	f100 0208 	add.w	r2, r0, #8
 800849c:	e7e1      	b.n	8008462 <_calloc_r+0x22>
 800849e:	bf00      	nop

080084a0 <_fclose_r.part.0>:
 80084a0:	b570      	push	{r4, r5, r6, lr}
 80084a2:	460c      	mov	r4, r1
 80084a4:	4606      	mov	r6, r0
 80084a6:	f7fc f94d 	bl	8004744 <__sflush_r>
 80084aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80084ac:	4605      	mov	r5, r0
 80084ae:	b133      	cbz	r3, 80084be <_fclose_r.part.0+0x1e>
 80084b0:	69e1      	ldr	r1, [r4, #28]
 80084b2:	4630      	mov	r0, r6
 80084b4:	4798      	blx	r3
 80084b6:	2800      	cmp	r0, #0
 80084b8:	bfb8      	it	lt
 80084ba:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 80084be:	89a3      	ldrh	r3, [r4, #12]
 80084c0:	061b      	lsls	r3, r3, #24
 80084c2:	d419      	bmi.n	80084f8 <_fclose_r.part.0+0x58>
 80084c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80084c6:	b141      	cbz	r1, 80084da <_fclose_r.part.0+0x3a>
 80084c8:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80084cc:	4299      	cmp	r1, r3
 80084ce:	d002      	beq.n	80084d6 <_fclose_r.part.0+0x36>
 80084d0:	4630      	mov	r0, r6
 80084d2:	f7fc fb69 	bl	8004ba8 <_free_r>
 80084d6:	2300      	movs	r3, #0
 80084d8:	6323      	str	r3, [r4, #48]	; 0x30
 80084da:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80084dc:	b121      	cbz	r1, 80084e8 <_fclose_r.part.0+0x48>
 80084de:	4630      	mov	r0, r6
 80084e0:	f7fc fb62 	bl	8004ba8 <_free_r>
 80084e4:	2300      	movs	r3, #0
 80084e6:	6463      	str	r3, [r4, #68]	; 0x44
 80084e8:	f7fc faf2 	bl	8004ad0 <__sfp_lock_acquire>
 80084ec:	2300      	movs	r3, #0
 80084ee:	81a3      	strh	r3, [r4, #12]
 80084f0:	f7fc faf0 	bl	8004ad4 <__sfp_lock_release>
 80084f4:	4628      	mov	r0, r5
 80084f6:	bd70      	pop	{r4, r5, r6, pc}
 80084f8:	6921      	ldr	r1, [r4, #16]
 80084fa:	4630      	mov	r0, r6
 80084fc:	f7fc fb54 	bl	8004ba8 <_free_r>
 8008500:	e7e0      	b.n	80084c4 <_fclose_r.part.0+0x24>
 8008502:	bf00      	nop

08008504 <_fclose_r>:
 8008504:	b1b1      	cbz	r1, 8008534 <_fclose_r+0x30>
 8008506:	b538      	push	{r3, r4, r5, lr}
 8008508:	4604      	mov	r4, r0
 800850a:	460d      	mov	r5, r1
 800850c:	b108      	cbz	r0, 8008512 <_fclose_r+0xe>
 800850e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008510:	b14b      	cbz	r3, 8008526 <_fclose_r+0x22>
 8008512:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8008516:	b90b      	cbnz	r3, 800851c <_fclose_r+0x18>
 8008518:	2000      	movs	r0, #0
 800851a:	bd38      	pop	{r3, r4, r5, pc}
 800851c:	4629      	mov	r1, r5
 800851e:	4620      	mov	r0, r4
 8008520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008524:	e7bc      	b.n	80084a0 <_fclose_r.part.0>
 8008526:	f7fc facf 	bl	8004ac8 <__sinit>
 800852a:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d0f2      	beq.n	8008518 <_fclose_r+0x14>
 8008532:	e7f3      	b.n	800851c <_fclose_r+0x18>
 8008534:	2000      	movs	r0, #0
 8008536:	4770      	bx	lr

08008538 <fclose>:
 8008538:	b1c0      	cbz	r0, 800856c <fclose+0x34>
 800853a:	b538      	push	{r3, r4, r5, lr}
 800853c:	4b0c      	ldr	r3, [pc, #48]	; (8008570 <fclose+0x38>)
 800853e:	681d      	ldr	r5, [r3, #0]
 8008540:	4604      	mov	r4, r0
 8008542:	b10d      	cbz	r5, 8008548 <fclose+0x10>
 8008544:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008546:	b14b      	cbz	r3, 800855c <fclose+0x24>
 8008548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800854c:	b90b      	cbnz	r3, 8008552 <fclose+0x1a>
 800854e:	2000      	movs	r0, #0
 8008550:	bd38      	pop	{r3, r4, r5, pc}
 8008552:	4621      	mov	r1, r4
 8008554:	4628      	mov	r0, r5
 8008556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800855a:	e7a1      	b.n	80084a0 <_fclose_r.part.0>
 800855c:	4628      	mov	r0, r5
 800855e:	f7fc fab3 	bl	8004ac8 <__sinit>
 8008562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d0f1      	beq.n	800854e <fclose+0x16>
 800856a:	e7f2      	b.n	8008552 <fclose+0x1a>
 800856c:	2000      	movs	r0, #0
 800856e:	4770      	bx	lr
 8008570:	20000008 	.word	0x20000008

08008574 <_fiprintf_r>:
 8008574:	b40c      	push	{r2, r3}
 8008576:	b500      	push	{lr}
 8008578:	b083      	sub	sp, #12
 800857a:	ab04      	add	r3, sp, #16
 800857c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008580:	9301      	str	r3, [sp, #4]
 8008582:	f7ff f879 	bl	8007678 <_vfiprintf_r>
 8008586:	b003      	add	sp, #12
 8008588:	f85d eb04 	ldr.w	lr, [sp], #4
 800858c:	b002      	add	sp, #8
 800858e:	4770      	bx	lr

08008590 <fiprintf>:
 8008590:	b40e      	push	{r1, r2, r3}
 8008592:	b510      	push	{r4, lr}
 8008594:	b083      	sub	sp, #12
 8008596:	ab05      	add	r3, sp, #20
 8008598:	4c06      	ldr	r4, [pc, #24]	; (80085b4 <fiprintf+0x24>)
 800859a:	f853 2b04 	ldr.w	r2, [r3], #4
 800859e:	9301      	str	r3, [sp, #4]
 80085a0:	4601      	mov	r1, r0
 80085a2:	6820      	ldr	r0, [r4, #0]
 80085a4:	f7ff f868 	bl	8007678 <_vfiprintf_r>
 80085a8:	b003      	add	sp, #12
 80085aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085ae:	b003      	add	sp, #12
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	20000008 	.word	0x20000008

080085b8 <__fputwc>:
 80085b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085bc:	b082      	sub	sp, #8
 80085be:	4682      	mov	sl, r0
 80085c0:	4688      	mov	r8, r1
 80085c2:	4614      	mov	r4, r2
 80085c4:	f000 f8a4 	bl	8008710 <__locale_mb_cur_max>
 80085c8:	2801      	cmp	r0, #1
 80085ca:	d103      	bne.n	80085d4 <__fputwc+0x1c>
 80085cc:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80085d0:	2bfe      	cmp	r3, #254	; 0xfe
 80085d2:	d936      	bls.n	8008642 <__fputwc+0x8a>
 80085d4:	4642      	mov	r2, r8
 80085d6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 80085da:	a901      	add	r1, sp, #4
 80085dc:	4650      	mov	r0, sl
 80085de:	f000 fa4d 	bl	8008a7c <_wcrtomb_r>
 80085e2:	1c42      	adds	r2, r0, #1
 80085e4:	4606      	mov	r6, r0
 80085e6:	d032      	beq.n	800864e <__fputwc+0x96>
 80085e8:	b330      	cbz	r0, 8008638 <__fputwc+0x80>
 80085ea:	f89d c004 	ldrb.w	ip, [sp, #4]
 80085ee:	f10d 0905 	add.w	r9, sp, #5
 80085f2:	2500      	movs	r5, #0
 80085f4:	e009      	b.n	800860a <__fputwc+0x52>
 80085f6:	6823      	ldr	r3, [r4, #0]
 80085f8:	1c5a      	adds	r2, r3, #1
 80085fa:	6022      	str	r2, [r4, #0]
 80085fc:	f883 c000 	strb.w	ip, [r3]
 8008600:	3501      	adds	r5, #1
 8008602:	42b5      	cmp	r5, r6
 8008604:	d218      	bcs.n	8008638 <__fputwc+0x80>
 8008606:	f819 cb01 	ldrb.w	ip, [r9], #1
 800860a:	68a3      	ldr	r3, [r4, #8]
 800860c:	3b01      	subs	r3, #1
 800860e:	2b00      	cmp	r3, #0
 8008610:	60a3      	str	r3, [r4, #8]
 8008612:	daf0      	bge.n	80085f6 <__fputwc+0x3e>
 8008614:	69a7      	ldr	r7, [r4, #24]
 8008616:	42bb      	cmp	r3, r7
 8008618:	4661      	mov	r1, ip
 800861a:	4622      	mov	r2, r4
 800861c:	4650      	mov	r0, sl
 800861e:	db02      	blt.n	8008626 <__fputwc+0x6e>
 8008620:	f1bc 0f0a 	cmp.w	ip, #10
 8008624:	d1e7      	bne.n	80085f6 <__fputwc+0x3e>
 8008626:	f7ff fe81 	bl	800832c <__swbuf_r>
 800862a:	1c43      	adds	r3, r0, #1
 800862c:	d1e8      	bne.n	8008600 <__fputwc+0x48>
 800862e:	4606      	mov	r6, r0
 8008630:	4630      	mov	r0, r6
 8008632:	b002      	add	sp, #8
 8008634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008638:	4646      	mov	r6, r8
 800863a:	4630      	mov	r0, r6
 800863c:	b002      	add	sp, #8
 800863e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008642:	fa5f fc88 	uxtb.w	ip, r8
 8008646:	f88d c004 	strb.w	ip, [sp, #4]
 800864a:	4606      	mov	r6, r0
 800864c:	e7cf      	b.n	80085ee <__fputwc+0x36>
 800864e:	89a3      	ldrh	r3, [r4, #12]
 8008650:	4630      	mov	r0, r6
 8008652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008656:	81a3      	strh	r3, [r4, #12]
 8008658:	b002      	add	sp, #8
 800865a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800865e:	bf00      	nop

08008660 <_fputwc_r>:
 8008660:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8008664:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8008668:	d10b      	bne.n	8008682 <_fputwc_r+0x22>
 800866a:	b410      	push	{r4}
 800866c:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800866e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008672:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8008676:	6654      	str	r4, [r2, #100]	; 0x64
 8008678:	8193      	strh	r3, [r2, #12]
 800867a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800867e:	f7ff bf9b 	b.w	80085b8 <__fputwc>
 8008682:	f7ff bf99 	b.w	80085b8 <__fputwc>
 8008686:	bf00      	nop

08008688 <fputwc>:
 8008688:	b530      	push	{r4, r5, lr}
 800868a:	4b10      	ldr	r3, [pc, #64]	; (80086cc <fputwc+0x44>)
 800868c:	681d      	ldr	r5, [r3, #0]
 800868e:	460c      	mov	r4, r1
 8008690:	b083      	sub	sp, #12
 8008692:	4601      	mov	r1, r0
 8008694:	b10d      	cbz	r5, 800869a <fputwc+0x12>
 8008696:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008698:	b18b      	cbz	r3, 80086be <fputwc+0x36>
 800869a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800869e:	049a      	lsls	r2, r3, #18
 80086a0:	d406      	bmi.n	80086b0 <fputwc+0x28>
 80086a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80086a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80086a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086ac:	81a3      	strh	r3, [r4, #12]
 80086ae:	6662      	str	r2, [r4, #100]	; 0x64
 80086b0:	4622      	mov	r2, r4
 80086b2:	4628      	mov	r0, r5
 80086b4:	b003      	add	sp, #12
 80086b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086ba:	f7ff bf7d 	b.w	80085b8 <__fputwc>
 80086be:	9001      	str	r0, [sp, #4]
 80086c0:	4628      	mov	r0, r5
 80086c2:	f7fc fa01 	bl	8004ac8 <__sinit>
 80086c6:	9901      	ldr	r1, [sp, #4]
 80086c8:	e7e7      	b.n	800869a <fputwc+0x12>
 80086ca:	bf00      	nop
 80086cc:	20000008 	.word	0x20000008

080086d0 <_setlocale_r>:
 80086d0:	b142      	cbz	r2, 80086e4 <_setlocale_r+0x14>
 80086d2:	b510      	push	{r4, lr}
 80086d4:	490b      	ldr	r1, [pc, #44]	; (8008704 <_setlocale_r+0x34>)
 80086d6:	4610      	mov	r0, r2
 80086d8:	4614      	mov	r4, r2
 80086da:	f000 f865 	bl	80087a8 <strcmp>
 80086de:	b918      	cbnz	r0, 80086e8 <_setlocale_r+0x18>
 80086e0:	4809      	ldr	r0, [pc, #36]	; (8008708 <_setlocale_r+0x38>)
 80086e2:	bd10      	pop	{r4, pc}
 80086e4:	4808      	ldr	r0, [pc, #32]	; (8008708 <_setlocale_r+0x38>)
 80086e6:	4770      	bx	lr
 80086e8:	4907      	ldr	r1, [pc, #28]	; (8008708 <_setlocale_r+0x38>)
 80086ea:	4620      	mov	r0, r4
 80086ec:	f000 f85c 	bl	80087a8 <strcmp>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d0f5      	beq.n	80086e0 <_setlocale_r+0x10>
 80086f4:	4905      	ldr	r1, [pc, #20]	; (800870c <_setlocale_r+0x3c>)
 80086f6:	4620      	mov	r0, r4
 80086f8:	f000 f856 	bl	80087a8 <strcmp>
 80086fc:	2800      	cmp	r0, #0
 80086fe:	d0ef      	beq.n	80086e0 <_setlocale_r+0x10>
 8008700:	2000      	movs	r0, #0
 8008702:	bd10      	pop	{r4, pc}
 8008704:	0801e3a4 	.word	0x0801e3a4
 8008708:	0801e3a0 	.word	0x0801e3a0
 800870c:	0801e36c 	.word	0x0801e36c

08008710 <__locale_mb_cur_max>:
 8008710:	4b01      	ldr	r3, [pc, #4]	; (8008718 <__locale_mb_cur_max+0x8>)
 8008712:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8008716:	4770      	bx	lr
 8008718:	20000848 	.word	0x20000848

0800871c <setlocale>:
 800871c:	b141      	cbz	r1, 8008730 <setlocale+0x14>
 800871e:	b510      	push	{r4, lr}
 8008720:	460c      	mov	r4, r1
 8008722:	4620      	mov	r0, r4
 8008724:	490a      	ldr	r1, [pc, #40]	; (8008750 <setlocale+0x34>)
 8008726:	f000 f83f 	bl	80087a8 <strcmp>
 800872a:	b918      	cbnz	r0, 8008734 <setlocale+0x18>
 800872c:	4809      	ldr	r0, [pc, #36]	; (8008754 <setlocale+0x38>)
 800872e:	bd10      	pop	{r4, pc}
 8008730:	4808      	ldr	r0, [pc, #32]	; (8008754 <setlocale+0x38>)
 8008732:	4770      	bx	lr
 8008734:	4907      	ldr	r1, [pc, #28]	; (8008754 <setlocale+0x38>)
 8008736:	4620      	mov	r0, r4
 8008738:	f000 f836 	bl	80087a8 <strcmp>
 800873c:	2800      	cmp	r0, #0
 800873e:	d0f5      	beq.n	800872c <setlocale+0x10>
 8008740:	4905      	ldr	r1, [pc, #20]	; (8008758 <setlocale+0x3c>)
 8008742:	4620      	mov	r0, r4
 8008744:	f000 f830 	bl	80087a8 <strcmp>
 8008748:	2800      	cmp	r0, #0
 800874a:	d0ef      	beq.n	800872c <setlocale+0x10>
 800874c:	2000      	movs	r0, #0
 800874e:	bd10      	pop	{r4, pc}
 8008750:	0801e3a4 	.word	0x0801e3a4
 8008754:	0801e3a0 	.word	0x0801e3a0
 8008758:	0801e36c 	.word	0x0801e36c

0800875c <_mbtowc_r>:
 800875c:	b410      	push	{r4}
 800875e:	4c03      	ldr	r4, [pc, #12]	; (800876c <_mbtowc_r+0x10>)
 8008760:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 8008764:	46a4      	mov	ip, r4
 8008766:	f85d 4b04 	ldr.w	r4, [sp], #4
 800876a:	4760      	bx	ip
 800876c:	20000848 	.word	0x20000848

08008770 <__ascii_mbtowc>:
 8008770:	b082      	sub	sp, #8
 8008772:	b149      	cbz	r1, 8008788 <__ascii_mbtowc+0x18>
 8008774:	b15a      	cbz	r2, 800878e <__ascii_mbtowc+0x1e>
 8008776:	b16b      	cbz	r3, 8008794 <__ascii_mbtowc+0x24>
 8008778:	7813      	ldrb	r3, [r2, #0]
 800877a:	600b      	str	r3, [r1, #0]
 800877c:	7812      	ldrb	r2, [r2, #0]
 800877e:	1e10      	subs	r0, r2, #0
 8008780:	bf18      	it	ne
 8008782:	2001      	movne	r0, #1
 8008784:	b002      	add	sp, #8
 8008786:	4770      	bx	lr
 8008788:	a901      	add	r1, sp, #4
 800878a:	2a00      	cmp	r2, #0
 800878c:	d1f3      	bne.n	8008776 <__ascii_mbtowc+0x6>
 800878e:	4610      	mov	r0, r2
 8008790:	b002      	add	sp, #8
 8008792:	4770      	bx	lr
 8008794:	f06f 0001 	mvn.w	r0, #1
 8008798:	e7f4      	b.n	8008784 <__ascii_mbtowc+0x14>
 800879a:	bf00      	nop
 800879c:	0000      	movs	r0, r0
 800879e:	0000      	movs	r0, r0
 80087a0:	eba2 0003 	sub.w	r0, r2, r3
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop

080087a8 <strcmp>:
 80087a8:	7802      	ldrb	r2, [r0, #0]
 80087aa:	780b      	ldrb	r3, [r1, #0]
 80087ac:	2a01      	cmp	r2, #1
 80087ae:	bf28      	it	cs
 80087b0:	429a      	cmpcs	r2, r3
 80087b2:	d1f5      	bne.n	80087a0 <__ascii_mbtowc+0x30>
 80087b4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 80087b8:	ea40 0401 	orr.w	r4, r0, r1
 80087bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80087c0:	f06f 0c00 	mvn.w	ip, #0
 80087c4:	ea4f 7244 	mov.w	r2, r4, lsl #29
 80087c8:	b312      	cbz	r2, 8008810 <strcmp+0x68>
 80087ca:	ea80 0401 	eor.w	r4, r0, r1
 80087ce:	f014 0f07 	tst.w	r4, #7
 80087d2:	d16a      	bne.n	80088aa <strcmp+0x102>
 80087d4:	f000 0407 	and.w	r4, r0, #7
 80087d8:	f020 0007 	bic.w	r0, r0, #7
 80087dc:	f004 0503 	and.w	r5, r4, #3
 80087e0:	f021 0107 	bic.w	r1, r1, #7
 80087e4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80087e8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 80087ec:	f014 0f04 	tst.w	r4, #4
 80087f0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 80087f4:	fa0c f405 	lsl.w	r4, ip, r5
 80087f8:	ea62 0204 	orn	r2, r2, r4
 80087fc:	ea66 0604 	orn	r6, r6, r4
 8008800:	d00a      	beq.n	8008818 <strcmp+0x70>
 8008802:	ea63 0304 	orn	r3, r3, r4
 8008806:	4662      	mov	r2, ip
 8008808:	ea67 0704 	orn	r7, r7, r4
 800880c:	4666      	mov	r6, ip
 800880e:	e003      	b.n	8008818 <strcmp+0x70>
 8008810:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8008814:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8008818:	fa82 f54c 	uadd8	r5, r2, ip
 800881c:	ea82 0406 	eor.w	r4, r2, r6
 8008820:	faa4 f48c 	sel	r4, r4, ip
 8008824:	bb6c      	cbnz	r4, 8008882 <strcmp+0xda>
 8008826:	fa83 f54c 	uadd8	r5, r3, ip
 800882a:	ea83 0507 	eor.w	r5, r3, r7
 800882e:	faa5 f58c 	sel	r5, r5, ip
 8008832:	b995      	cbnz	r5, 800885a <strcmp+0xb2>
 8008834:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8008838:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 800883c:	fa82 f54c 	uadd8	r5, r2, ip
 8008840:	ea82 0406 	eor.w	r4, r2, r6
 8008844:	faa4 f48c 	sel	r4, r4, ip
 8008848:	fa83 f54c 	uadd8	r5, r3, ip
 800884c:	ea83 0507 	eor.w	r5, r3, r7
 8008850:	faa5 f58c 	sel	r5, r5, ip
 8008854:	4325      	orrs	r5, r4
 8008856:	d0db      	beq.n	8008810 <strcmp+0x68>
 8008858:	b99c      	cbnz	r4, 8008882 <strcmp+0xda>
 800885a:	ba2d      	rev	r5, r5
 800885c:	fab5 f485 	clz	r4, r5
 8008860:	f024 0407 	bic.w	r4, r4, #7
 8008864:	fa27 f104 	lsr.w	r1, r7, r4
 8008868:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800886c:	fa23 f304 	lsr.w	r3, r3, r4
 8008870:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8008874:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008878:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800887c:	eba0 0001 	sub.w	r0, r0, r1
 8008880:	4770      	bx	lr
 8008882:	ba24      	rev	r4, r4
 8008884:	fab4 f484 	clz	r4, r4
 8008888:	f024 0407 	bic.w	r4, r4, #7
 800888c:	fa26 f104 	lsr.w	r1, r6, r4
 8008890:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008894:	fa22 f204 	lsr.w	r2, r2, r4
 8008898:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800889c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80088a0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80088a4:	eba0 0001 	sub.w	r0, r0, r1
 80088a8:	4770      	bx	lr
 80088aa:	f014 0f03 	tst.w	r4, #3
 80088ae:	d13c      	bne.n	800892a <strcmp+0x182>
 80088b0:	f010 0403 	ands.w	r4, r0, #3
 80088b4:	d128      	bne.n	8008908 <strcmp+0x160>
 80088b6:	f850 2b08 	ldr.w	r2, [r0], #8
 80088ba:	f851 3b08 	ldr.w	r3, [r1], #8
 80088be:	fa82 f54c 	uadd8	r5, r2, ip
 80088c2:	ea82 0503 	eor.w	r5, r2, r3
 80088c6:	faa5 f58c 	sel	r5, r5, ip
 80088ca:	b95d      	cbnz	r5, 80088e4 <strcmp+0x13c>
 80088cc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80088d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088d4:	fa82 f54c 	uadd8	r5, r2, ip
 80088d8:	ea82 0503 	eor.w	r5, r2, r3
 80088dc:	faa5 f58c 	sel	r5, r5, ip
 80088e0:	2d00      	cmp	r5, #0
 80088e2:	d0e8      	beq.n	80088b6 <strcmp+0x10e>
 80088e4:	ba2d      	rev	r5, r5
 80088e6:	fab5 f485 	clz	r4, r5
 80088ea:	f024 0407 	bic.w	r4, r4, #7
 80088ee:	fa23 f104 	lsr.w	r1, r3, r4
 80088f2:	fa22 f204 	lsr.w	r2, r2, r4
 80088f6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 80088fa:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80088fe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8008902:	eba0 0001 	sub.w	r0, r0, r1
 8008906:	4770      	bx	lr
 8008908:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800890c:	f020 0003 	bic.w	r0, r0, #3
 8008910:	f850 2b08 	ldr.w	r2, [r0], #8
 8008914:	f021 0103 	bic.w	r1, r1, #3
 8008918:	f851 3b08 	ldr.w	r3, [r1], #8
 800891c:	fa0c f404 	lsl.w	r4, ip, r4
 8008920:	ea62 0204 	orn	r2, r2, r4
 8008924:	ea63 0304 	orn	r3, r3, r4
 8008928:	e7c9      	b.n	80088be <strcmp+0x116>
 800892a:	f010 0403 	ands.w	r4, r0, #3
 800892e:	d01a      	beq.n	8008966 <strcmp+0x1be>
 8008930:	eba1 0104 	sub.w	r1, r1, r4
 8008934:	f020 0003 	bic.w	r0, r0, #3
 8008938:	07e4      	lsls	r4, r4, #31
 800893a:	f850 2b04 	ldr.w	r2, [r0], #4
 800893e:	d006      	beq.n	800894e <strcmp+0x1a6>
 8008940:	d20f      	bcs.n	8008962 <strcmp+0x1ba>
 8008942:	788b      	ldrb	r3, [r1, #2]
 8008944:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8008948:	1ae4      	subs	r4, r4, r3
 800894a:	d106      	bne.n	800895a <strcmp+0x1b2>
 800894c:	b12b      	cbz	r3, 800895a <strcmp+0x1b2>
 800894e:	78cb      	ldrb	r3, [r1, #3]
 8008950:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8008954:	1ae4      	subs	r4, r4, r3
 8008956:	d100      	bne.n	800895a <strcmp+0x1b2>
 8008958:	b91b      	cbnz	r3, 8008962 <strcmp+0x1ba>
 800895a:	4620      	mov	r0, r4
 800895c:	f85d 4b10 	ldr.w	r4, [sp], #16
 8008960:	4770      	bx	lr
 8008962:	f101 0104 	add.w	r1, r1, #4
 8008966:	f850 2b04 	ldr.w	r2, [r0], #4
 800896a:	07cc      	lsls	r4, r1, #31
 800896c:	f021 0103 	bic.w	r1, r1, #3
 8008970:	f851 3b04 	ldr.w	r3, [r1], #4
 8008974:	d848      	bhi.n	8008a08 <strcmp+0x260>
 8008976:	d224      	bcs.n	80089c2 <strcmp+0x21a>
 8008978:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800897c:	fa82 f54c 	uadd8	r5, r2, ip
 8008980:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8008984:	faa5 f58c 	sel	r5, r5, ip
 8008988:	d10a      	bne.n	80089a0 <strcmp+0x1f8>
 800898a:	b965      	cbnz	r5, 80089a6 <strcmp+0x1fe>
 800898c:	f851 3b04 	ldr.w	r3, [r1], #4
 8008990:	ea84 0402 	eor.w	r4, r4, r2
 8008994:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8008998:	d10e      	bne.n	80089b8 <strcmp+0x210>
 800899a:	f850 2b04 	ldr.w	r2, [r0], #4
 800899e:	e7eb      	b.n	8008978 <strcmp+0x1d0>
 80089a0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80089a4:	e055      	b.n	8008a52 <strcmp+0x2aa>
 80089a6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 80089aa:	d14d      	bne.n	8008a48 <strcmp+0x2a0>
 80089ac:	7808      	ldrb	r0, [r1, #0]
 80089ae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80089b2:	f1c0 0000 	rsb	r0, r0, #0
 80089b6:	4770      	bx	lr
 80089b8:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80089bc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80089c0:	e047      	b.n	8008a52 <strcmp+0x2aa>
 80089c2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 80089c6:	fa82 f54c 	uadd8	r5, r2, ip
 80089ca:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 80089ce:	faa5 f58c 	sel	r5, r5, ip
 80089d2:	d10a      	bne.n	80089ea <strcmp+0x242>
 80089d4:	b965      	cbnz	r5, 80089f0 <strcmp+0x248>
 80089d6:	f851 3b04 	ldr.w	r3, [r1], #4
 80089da:	ea84 0402 	eor.w	r4, r4, r2
 80089de:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 80089e2:	d10c      	bne.n	80089fe <strcmp+0x256>
 80089e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80089e8:	e7eb      	b.n	80089c2 <strcmp+0x21a>
 80089ea:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80089ee:	e030      	b.n	8008a52 <strcmp+0x2aa>
 80089f0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 80089f4:	d128      	bne.n	8008a48 <strcmp+0x2a0>
 80089f6:	880b      	ldrh	r3, [r1, #0]
 80089f8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80089fc:	e029      	b.n	8008a52 <strcmp+0x2aa>
 80089fe:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8008a02:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8008a06:	e024      	b.n	8008a52 <strcmp+0x2aa>
 8008a08:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8008a0c:	fa82 f54c 	uadd8	r5, r2, ip
 8008a10:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8008a14:	faa5 f58c 	sel	r5, r5, ip
 8008a18:	d10a      	bne.n	8008a30 <strcmp+0x288>
 8008a1a:	b965      	cbnz	r5, 8008a36 <strcmp+0x28e>
 8008a1c:	f851 3b04 	ldr.w	r3, [r1], #4
 8008a20:	ea84 0402 	eor.w	r4, r4, r2
 8008a24:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8008a28:	d109      	bne.n	8008a3e <strcmp+0x296>
 8008a2a:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a2e:	e7eb      	b.n	8008a08 <strcmp+0x260>
 8008a30:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8008a34:	e00d      	b.n	8008a52 <strcmp+0x2aa>
 8008a36:	f015 0fff 	tst.w	r5, #255	; 0xff
 8008a3a:	d105      	bne.n	8008a48 <strcmp+0x2a0>
 8008a3c:	680b      	ldr	r3, [r1, #0]
 8008a3e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8008a42:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008a46:	e004      	b.n	8008a52 <strcmp+0x2aa>
 8008a48:	f04f 0000 	mov.w	r0, #0
 8008a4c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8008a50:	4770      	bx	lr
 8008a52:	ba12      	rev	r2, r2
 8008a54:	ba1b      	rev	r3, r3
 8008a56:	fa82 f44c 	uadd8	r4, r2, ip
 8008a5a:	ea82 0403 	eor.w	r4, r2, r3
 8008a5e:	faa4 f58c 	sel	r5, r4, ip
 8008a62:	fab5 f485 	clz	r4, r5
 8008a66:	fa02 f204 	lsl.w	r2, r2, r4
 8008a6a:	fa03 f304 	lsl.w	r3, r3, r4
 8008a6e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8008a72:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8008a76:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 8008a7a:	4770      	bx	lr

08008a7c <_wcrtomb_r>:
 8008a7c:	b570      	push	{r4, r5, r6, lr}
 8008a7e:	4605      	mov	r5, r0
 8008a80:	b084      	sub	sp, #16
 8008a82:	461c      	mov	r4, r3
 8008a84:	b139      	cbz	r1, 8008a96 <_wcrtomb_r+0x1a>
 8008a86:	4e0b      	ldr	r6, [pc, #44]	; (8008ab4 <_wcrtomb_r+0x38>)
 8008a88:	f8d6 60e0 	ldr.w	r6, [r6, #224]	; 0xe0
 8008a8c:	47b0      	blx	r6
 8008a8e:	1c43      	adds	r3, r0, #1
 8008a90:	d009      	beq.n	8008aa6 <_wcrtomb_r+0x2a>
 8008a92:	b004      	add	sp, #16
 8008a94:	bd70      	pop	{r4, r5, r6, pc}
 8008a96:	460a      	mov	r2, r1
 8008a98:	4906      	ldr	r1, [pc, #24]	; (8008ab4 <_wcrtomb_r+0x38>)
 8008a9a:	f8d1 60e0 	ldr.w	r6, [r1, #224]	; 0xe0
 8008a9e:	a901      	add	r1, sp, #4
 8008aa0:	47b0      	blx	r6
 8008aa2:	1c43      	adds	r3, r0, #1
 8008aa4:	d1f5      	bne.n	8008a92 <_wcrtomb_r+0x16>
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	238a      	movs	r3, #138	; 0x8a
 8008aaa:	6022      	str	r2, [r4, #0]
 8008aac:	602b      	str	r3, [r5, #0]
 8008aae:	b004      	add	sp, #16
 8008ab0:	bd70      	pop	{r4, r5, r6, pc}
 8008ab2:	bf00      	nop
 8008ab4:	20000848 	.word	0x20000848

08008ab8 <wcrtomb>:
 8008ab8:	b570      	push	{r4, r5, r6, lr}
 8008aba:	4b10      	ldr	r3, [pc, #64]	; (8008afc <wcrtomb+0x44>)
 8008abc:	b084      	sub	sp, #16
 8008abe:	681d      	ldr	r5, [r3, #0]
 8008ac0:	4614      	mov	r4, r2
 8008ac2:	b158      	cbz	r0, 8008adc <wcrtomb+0x24>
 8008ac4:	4b0e      	ldr	r3, [pc, #56]	; (8008b00 <wcrtomb+0x48>)
 8008ac6:	460a      	mov	r2, r1
 8008ac8:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
 8008acc:	4601      	mov	r1, r0
 8008ace:	4623      	mov	r3, r4
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	47b0      	blx	r6
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	d00b      	beq.n	8008af0 <wcrtomb+0x38>
 8008ad8:	b004      	add	sp, #16
 8008ada:	bd70      	pop	{r4, r5, r6, pc}
 8008adc:	4a08      	ldr	r2, [pc, #32]	; (8008b00 <wcrtomb+0x48>)
 8008ade:	4623      	mov	r3, r4
 8008ae0:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
 8008ae4:	a901      	add	r1, sp, #4
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	4628      	mov	r0, r5
 8008aea:	47b0      	blx	r6
 8008aec:	1c43      	adds	r3, r0, #1
 8008aee:	d1f3      	bne.n	8008ad8 <wcrtomb+0x20>
 8008af0:	2200      	movs	r2, #0
 8008af2:	238a      	movs	r3, #138	; 0x8a
 8008af4:	6022      	str	r2, [r4, #0]
 8008af6:	602b      	str	r3, [r5, #0]
 8008af8:	b004      	add	sp, #16
 8008afa:	bd70      	pop	{r4, r5, r6, pc}
 8008afc:	20000008 	.word	0x20000008
 8008b00:	20000848 	.word	0x20000848

08008b04 <_wctomb_r>:
 8008b04:	b410      	push	{r4}
 8008b06:	4c03      	ldr	r4, [pc, #12]	; (8008b14 <_wctomb_r+0x10>)
 8008b08:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8008b0c:	46a4      	mov	ip, r4
 8008b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b12:	4760      	bx	ip
 8008b14:	20000848 	.word	0x20000848

08008b18 <__ascii_wctomb>:
 8008b18:	b149      	cbz	r1, 8008b2e <__ascii_wctomb+0x16>
 8008b1a:	2aff      	cmp	r2, #255	; 0xff
 8008b1c:	d802      	bhi.n	8008b24 <__ascii_wctomb+0xc>
 8008b1e:	700a      	strb	r2, [r1, #0]
 8008b20:	2001      	movs	r0, #1
 8008b22:	4770      	bx	lr
 8008b24:	238a      	movs	r3, #138	; 0x8a
 8008b26:	6003      	str	r3, [r0, #0]
 8008b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b2c:	4770      	bx	lr
 8008b2e:	4608      	mov	r0, r1
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop

08008b34 <abort>:
 8008b34:	b508      	push	{r3, lr}
 8008b36:	2006      	movs	r0, #6
 8008b38:	f000 f8a0 	bl	8008c7c <raise>
 8008b3c:	2001      	movs	r0, #1
 8008b3e:	f000 ff83 	bl	8009a48 <_exit>
 8008b42:	bf00      	nop

08008b44 <_init_signal_r>:
 8008b44:	b538      	push	{r3, r4, r5, lr}
 8008b46:	f8d0 42dc 	ldr.w	r4, [r0, #732]	; 0x2dc
 8008b4a:	b10c      	cbz	r4, 8008b50 <_init_signal_r+0xc>
 8008b4c:	2000      	movs	r0, #0
 8008b4e:	bd38      	pop	{r3, r4, r5, pc}
 8008b50:	2180      	movs	r1, #128	; 0x80
 8008b52:	4605      	mov	r5, r0
 8008b54:	f7fc fba4 	bl	80052a0 <_malloc_r>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	f8c5 02dc 	str.w	r0, [r5, #732]	; 0x2dc
 8008b5e:	b130      	cbz	r0, 8008b6e <_init_signal_r+0x2a>
 8008b60:	1f03      	subs	r3, r0, #4
 8008b62:	327c      	adds	r2, #124	; 0x7c
 8008b64:	f843 4f04 	str.w	r4, [r3, #4]!
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d1fb      	bne.n	8008b64 <_init_signal_r+0x20>
 8008b6c:	e7ee      	b.n	8008b4c <_init_signal_r+0x8>
 8008b6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b72:	bd38      	pop	{r3, r4, r5, pc}

08008b74 <_signal_r>:
 8008b74:	291f      	cmp	r1, #31
 8008b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b78:	4605      	mov	r5, r0
 8008b7a:	d809      	bhi.n	8008b90 <_signal_r+0x1c>
 8008b7c:	f8d0 62dc 	ldr.w	r6, [r0, #732]	; 0x2dc
 8008b80:	460c      	mov	r4, r1
 8008b82:	4617      	mov	r7, r2
 8008b84:	b14e      	cbz	r6, 8008b9a <_signal_r+0x26>
 8008b86:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008b8a:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 8008b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b90:	2316      	movs	r3, #22
 8008b92:	6003      	str	r3, [r0, #0]
 8008b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b9a:	2180      	movs	r1, #128	; 0x80
 8008b9c:	f7fc fb80 	bl	80052a0 <_malloc_r>
 8008ba0:	4606      	mov	r6, r0
 8008ba2:	f8c5 02dc 	str.w	r0, [r5, #732]	; 0x2dc
 8008ba6:	b140      	cbz	r0, 8008bba <_signal_r+0x46>
 8008ba8:	1f03      	subs	r3, r0, #4
 8008baa:	f100 057c 	add.w	r5, r0, #124	; 0x7c
 8008bae:	2100      	movs	r1, #0
 8008bb0:	f843 1f04 	str.w	r1, [r3, #4]!
 8008bb4:	429d      	cmp	r5, r3
 8008bb6:	d1fb      	bne.n	8008bb0 <_signal_r+0x3c>
 8008bb8:	e7e5      	b.n	8008b86 <_signal_r+0x12>
 8008bba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008bc0 <_raise_r>:
 8008bc0:	291f      	cmp	r1, #31
 8008bc2:	b538      	push	{r3, r4, r5, lr}
 8008bc4:	4605      	mov	r5, r0
 8008bc6:	d821      	bhi.n	8008c0c <_raise_r+0x4c>
 8008bc8:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8008bcc:	460c      	mov	r4, r1
 8008bce:	b16a      	cbz	r2, 8008bec <_raise_r+0x2c>
 8008bd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008bd4:	b153      	cbz	r3, 8008bec <_raise_r+0x2c>
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d016      	beq.n	8008c08 <_raise_r+0x48>
 8008bda:	1c59      	adds	r1, r3, #1
 8008bdc:	d010      	beq.n	8008c00 <_raise_r+0x40>
 8008bde:	2500      	movs	r5, #0
 8008be0:	4620      	mov	r0, r4
 8008be2:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8008be6:	4798      	blx	r3
 8008be8:	4628      	mov	r0, r5
 8008bea:	bd38      	pop	{r3, r4, r5, pc}
 8008bec:	4628      	mov	r0, r5
 8008bee:	f000 f903 	bl	8008df8 <_getpid_r>
 8008bf2:	4622      	mov	r2, r4
 8008bf4:	4601      	mov	r1, r0
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bfc:	f000 b8e6 	b.w	8008dcc <_kill_r>
 8008c00:	2316      	movs	r3, #22
 8008c02:	6003      	str	r3, [r0, #0]
 8008c04:	2001      	movs	r0, #1
 8008c06:	bd38      	pop	{r3, r4, r5, pc}
 8008c08:	2000      	movs	r0, #0
 8008c0a:	bd38      	pop	{r3, r4, r5, pc}
 8008c0c:	2316      	movs	r3, #22
 8008c0e:	6003      	str	r3, [r0, #0]
 8008c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c14:	bd38      	pop	{r3, r4, r5, pc}
 8008c16:	bf00      	nop

08008c18 <__sigtramp_r>:
 8008c18:	291f      	cmp	r1, #31
 8008c1a:	d82c      	bhi.n	8008c76 <__sigtramp_r+0x5e>
 8008c1c:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8008c20:	b538      	push	{r3, r4, r5, lr}
 8008c22:	460c      	mov	r4, r1
 8008c24:	4605      	mov	r5, r0
 8008c26:	b182      	cbz	r2, 8008c4a <__sigtramp_r+0x32>
 8008c28:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8008c2c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8008c30:	b14b      	cbz	r3, 8008c46 <__sigtramp_r+0x2e>
 8008c32:	1c59      	adds	r1, r3, #1
 8008c34:	d01a      	beq.n	8008c6c <__sigtramp_r+0x54>
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d016      	beq.n	8008c68 <__sigtramp_r+0x50>
 8008c3a:	2500      	movs	r5, #0
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	6015      	str	r5, [r2, #0]
 8008c40:	4798      	blx	r3
 8008c42:	4628      	mov	r0, r5
 8008c44:	bd38      	pop	{r3, r4, r5, pc}
 8008c46:	2001      	movs	r0, #1
 8008c48:	bd38      	pop	{r3, r4, r5, pc}
 8008c4a:	2180      	movs	r1, #128	; 0x80
 8008c4c:	f7fc fb28 	bl	80052a0 <_malloc_r>
 8008c50:	4602      	mov	r2, r0
 8008c52:	f8c5 02dc 	str.w	r0, [r5, #732]	; 0x2dc
 8008c56:	b158      	cbz	r0, 8008c70 <__sigtramp_r+0x58>
 8008c58:	1f03      	subs	r3, r0, #4
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	307c      	adds	r0, #124	; 0x7c
 8008c5e:	f843 1f04 	str.w	r1, [r3, #4]!
 8008c62:	4298      	cmp	r0, r3
 8008c64:	d1fb      	bne.n	8008c5e <__sigtramp_r+0x46>
 8008c66:	e7df      	b.n	8008c28 <__sigtramp_r+0x10>
 8008c68:	2003      	movs	r0, #3
 8008c6a:	bd38      	pop	{r3, r4, r5, pc}
 8008c6c:	2002      	movs	r0, #2
 8008c6e:	bd38      	pop	{r3, r4, r5, pc}
 8008c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c74:	bd38      	pop	{r3, r4, r5, pc}
 8008c76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c7a:	4770      	bx	lr

08008c7c <raise>:
 8008c7c:	b538      	push	{r3, r4, r5, lr}
 8008c7e:	4b15      	ldr	r3, [pc, #84]	; (8008cd4 <raise+0x58>)
 8008c80:	281f      	cmp	r0, #31
 8008c82:	681d      	ldr	r5, [r3, #0]
 8008c84:	d820      	bhi.n	8008cc8 <raise+0x4c>
 8008c86:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	b162      	cbz	r2, 8008ca8 <raise+0x2c>
 8008c8e:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8008c92:	b14b      	cbz	r3, 8008ca8 <raise+0x2c>
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d015      	beq.n	8008cc4 <raise+0x48>
 8008c98:	1c59      	adds	r1, r3, #1
 8008c9a:	d00f      	beq.n	8008cbc <raise+0x40>
 8008c9c:	2500      	movs	r5, #0
 8008c9e:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8008ca2:	4798      	blx	r3
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	bd38      	pop	{r3, r4, r5, pc}
 8008ca8:	4628      	mov	r0, r5
 8008caa:	f000 f8a5 	bl	8008df8 <_getpid_r>
 8008cae:	4622      	mov	r2, r4
 8008cb0:	4601      	mov	r1, r0
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cb8:	f000 b888 	b.w	8008dcc <_kill_r>
 8008cbc:	2316      	movs	r3, #22
 8008cbe:	602b      	str	r3, [r5, #0]
 8008cc0:	2001      	movs	r0, #1
 8008cc2:	bd38      	pop	{r3, r4, r5, pc}
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	bd38      	pop	{r3, r4, r5, pc}
 8008cc8:	2316      	movs	r3, #22
 8008cca:	602b      	str	r3, [r5, #0]
 8008ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cd0:	bd38      	pop	{r3, r4, r5, pc}
 8008cd2:	bf00      	nop
 8008cd4:	20000008 	.word	0x20000008

08008cd8 <signal>:
 8008cd8:	4b13      	ldr	r3, [pc, #76]	; (8008d28 <signal+0x50>)
 8008cda:	281f      	cmp	r0, #31
 8008cdc:	b570      	push	{r4, r5, r6, lr}
 8008cde:	681e      	ldr	r6, [r3, #0]
 8008ce0:	d809      	bhi.n	8008cf6 <signal+0x1e>
 8008ce2:	460d      	mov	r5, r1
 8008ce4:	f8d6 12dc 	ldr.w	r1, [r6, #732]	; 0x2dc
 8008ce8:	4604      	mov	r4, r0
 8008cea:	b149      	cbz	r1, 8008d00 <signal+0x28>
 8008cec:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8008cf0:	f841 5024 	str.w	r5, [r1, r4, lsl #2]
 8008cf4:	bd70      	pop	{r4, r5, r6, pc}
 8008cf6:	2316      	movs	r3, #22
 8008cf8:	6033      	str	r3, [r6, #0]
 8008cfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cfe:	bd70      	pop	{r4, r5, r6, pc}
 8008d00:	2180      	movs	r1, #128	; 0x80
 8008d02:	4630      	mov	r0, r6
 8008d04:	f7fc facc 	bl	80052a0 <_malloc_r>
 8008d08:	4601      	mov	r1, r0
 8008d0a:	f8c6 02dc 	str.w	r0, [r6, #732]	; 0x2dc
 8008d0e:	b140      	cbz	r0, 8008d22 <signal+0x4a>
 8008d10:	1f03      	subs	r3, r0, #4
 8008d12:	f100 0c7c 	add.w	ip, r0, #124	; 0x7c
 8008d16:	2200      	movs	r2, #0
 8008d18:	f843 2f04 	str.w	r2, [r3, #4]!
 8008d1c:	4563      	cmp	r3, ip
 8008d1e:	d1fb      	bne.n	8008d18 <signal+0x40>
 8008d20:	e7e4      	b.n	8008cec <signal+0x14>
 8008d22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d26:	bd70      	pop	{r4, r5, r6, pc}
 8008d28:	20000008 	.word	0x20000008

08008d2c <_init_signal>:
 8008d2c:	b538      	push	{r3, r4, r5, lr}
 8008d2e:	4b0c      	ldr	r3, [pc, #48]	; (8008d60 <_init_signal+0x34>)
 8008d30:	681d      	ldr	r5, [r3, #0]
 8008d32:	f8d5 42dc 	ldr.w	r4, [r5, #732]	; 0x2dc
 8008d36:	b10c      	cbz	r4, 8008d3c <_init_signal+0x10>
 8008d38:	2000      	movs	r0, #0
 8008d3a:	bd38      	pop	{r3, r4, r5, pc}
 8008d3c:	2180      	movs	r1, #128	; 0x80
 8008d3e:	4628      	mov	r0, r5
 8008d40:	f7fc faae 	bl	80052a0 <_malloc_r>
 8008d44:	f8c5 02dc 	str.w	r0, [r5, #732]	; 0x2dc
 8008d48:	b138      	cbz	r0, 8008d5a <_init_signal+0x2e>
 8008d4a:	1f03      	subs	r3, r0, #4
 8008d4c:	f100 027c 	add.w	r2, r0, #124	; 0x7c
 8008d50:	f843 4f04 	str.w	r4, [r3, #4]!
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d1fb      	bne.n	8008d50 <_init_signal+0x24>
 8008d58:	e7ee      	b.n	8008d38 <_init_signal+0xc>
 8008d5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d5e:	bd38      	pop	{r3, r4, r5, pc}
 8008d60:	20000008 	.word	0x20000008

08008d64 <__sigtramp>:
 8008d64:	b538      	push	{r3, r4, r5, lr}
 8008d66:	4b18      	ldr	r3, [pc, #96]	; (8008dc8 <__sigtramp+0x64>)
 8008d68:	281f      	cmp	r0, #31
 8008d6a:	681d      	ldr	r5, [r3, #0]
 8008d6c:	d828      	bhi.n	8008dc0 <__sigtramp+0x5c>
 8008d6e:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
 8008d72:	4604      	mov	r4, r0
 8008d74:	b182      	cbz	r2, 8008d98 <__sigtramp+0x34>
 8008d76:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8008d7a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8008d7e:	b14b      	cbz	r3, 8008d94 <__sigtramp+0x30>
 8008d80:	1c59      	adds	r1, r3, #1
 8008d82:	d01b      	beq.n	8008dbc <__sigtramp+0x58>
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d017      	beq.n	8008db8 <__sigtramp+0x54>
 8008d88:	2500      	movs	r5, #0
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	6015      	str	r5, [r2, #0]
 8008d8e:	4798      	blx	r3
 8008d90:	4628      	mov	r0, r5
 8008d92:	bd38      	pop	{r3, r4, r5, pc}
 8008d94:	2001      	movs	r0, #1
 8008d96:	bd38      	pop	{r3, r4, r5, pc}
 8008d98:	2180      	movs	r1, #128	; 0x80
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	f7fc fa80 	bl	80052a0 <_malloc_r>
 8008da0:	4602      	mov	r2, r0
 8008da2:	f8c5 02dc 	str.w	r0, [r5, #732]	; 0x2dc
 8008da6:	b158      	cbz	r0, 8008dc0 <__sigtramp+0x5c>
 8008da8:	1f03      	subs	r3, r0, #4
 8008daa:	2100      	movs	r1, #0
 8008dac:	307c      	adds	r0, #124	; 0x7c
 8008dae:	f843 1f04 	str.w	r1, [r3, #4]!
 8008db2:	4283      	cmp	r3, r0
 8008db4:	d1fb      	bne.n	8008dae <__sigtramp+0x4a>
 8008db6:	e7de      	b.n	8008d76 <__sigtramp+0x12>
 8008db8:	2003      	movs	r0, #3
 8008dba:	bd38      	pop	{r3, r4, r5, pc}
 8008dbc:	2002      	movs	r0, #2
 8008dbe:	bd38      	pop	{r3, r4, r5, pc}
 8008dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dc4:	bd38      	pop	{r3, r4, r5, pc}
 8008dc6:	bf00      	nop
 8008dc8:	20000008 	.word	0x20000008

08008dcc <_kill_r>:
 8008dcc:	b570      	push	{r4, r5, r6, lr}
 8008dce:	460c      	mov	r4, r1
 8008dd0:	4d08      	ldr	r5, [pc, #32]	; (8008df4 <_kill_r+0x28>)
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2600      	movs	r6, #0
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	4611      	mov	r1, r2
 8008dda:	461c      	mov	r4, r3
 8008ddc:	602e      	str	r6, [r5, #0]
 8008dde:	f000 fe2b 	bl	8009a38 <_kill>
 8008de2:	1c43      	adds	r3, r0, #1
 8008de4:	d000      	beq.n	8008de8 <_kill_r+0x1c>
 8008de6:	bd70      	pop	{r4, r5, r6, pc}
 8008de8:	682b      	ldr	r3, [r5, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d0fb      	beq.n	8008de6 <_kill_r+0x1a>
 8008dee:	6023      	str	r3, [r4, #0]
 8008df0:	bd70      	pop	{r4, r5, r6, pc}
 8008df2:	bf00      	nop
 8008df4:	20000c74 	.word	0x20000c74

08008df8 <_getpid_r>:
 8008df8:	f000 be16 	b.w	8009a28 <_getpid>

08008dfc <__aeabi_drsub>:
 8008dfc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008e00:	e002      	b.n	8008e08 <__adddf3>
 8008e02:	bf00      	nop

08008e04 <__aeabi_dsub>:
 8008e04:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08008e08 <__adddf3>:
 8008e08:	b530      	push	{r4, r5, lr}
 8008e0a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008e0e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008e12:	ea94 0f05 	teq	r4, r5
 8008e16:	bf08      	it	eq
 8008e18:	ea90 0f02 	teqeq	r0, r2
 8008e1c:	bf1f      	itttt	ne
 8008e1e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008e22:	ea55 0c02 	orrsne.w	ip, r5, r2
 8008e26:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8008e2a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008e2e:	f000 80e2 	beq.w	8008ff6 <__adddf3+0x1ee>
 8008e32:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8008e36:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8008e3a:	bfb8      	it	lt
 8008e3c:	426d      	neglt	r5, r5
 8008e3e:	dd0c      	ble.n	8008e5a <__adddf3+0x52>
 8008e40:	442c      	add	r4, r5
 8008e42:	ea80 0202 	eor.w	r2, r0, r2
 8008e46:	ea81 0303 	eor.w	r3, r1, r3
 8008e4a:	ea82 0000 	eor.w	r0, r2, r0
 8008e4e:	ea83 0101 	eor.w	r1, r3, r1
 8008e52:	ea80 0202 	eor.w	r2, r0, r2
 8008e56:	ea81 0303 	eor.w	r3, r1, r3
 8008e5a:	2d36      	cmp	r5, #54	; 0x36
 8008e5c:	bf88      	it	hi
 8008e5e:	bd30      	pophi	{r4, r5, pc}
 8008e60:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008e64:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008e68:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008e6c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008e70:	d002      	beq.n	8008e78 <__adddf3+0x70>
 8008e72:	4240      	negs	r0, r0
 8008e74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008e78:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008e7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008e80:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008e84:	d002      	beq.n	8008e8c <__adddf3+0x84>
 8008e86:	4252      	negs	r2, r2
 8008e88:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008e8c:	ea94 0f05 	teq	r4, r5
 8008e90:	f000 80a7 	beq.w	8008fe2 <__adddf3+0x1da>
 8008e94:	f1a4 0401 	sub.w	r4, r4, #1
 8008e98:	f1d5 0e20 	rsbs	lr, r5, #32
 8008e9c:	db0d      	blt.n	8008eba <__adddf3+0xb2>
 8008e9e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008ea2:	fa22 f205 	lsr.w	r2, r2, r5
 8008ea6:	1880      	adds	r0, r0, r2
 8008ea8:	f141 0100 	adc.w	r1, r1, #0
 8008eac:	fa03 f20e 	lsl.w	r2, r3, lr
 8008eb0:	1880      	adds	r0, r0, r2
 8008eb2:	fa43 f305 	asr.w	r3, r3, r5
 8008eb6:	4159      	adcs	r1, r3
 8008eb8:	e00e      	b.n	8008ed8 <__adddf3+0xd0>
 8008eba:	f1a5 0520 	sub.w	r5, r5, #32
 8008ebe:	f10e 0e20 	add.w	lr, lr, #32
 8008ec2:	2a01      	cmp	r2, #1
 8008ec4:	fa03 fc0e 	lsl.w	ip, r3, lr
 8008ec8:	bf28      	it	cs
 8008eca:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008ece:	fa43 f305 	asr.w	r3, r3, r5
 8008ed2:	18c0      	adds	r0, r0, r3
 8008ed4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8008ed8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008edc:	d507      	bpl.n	8008eee <__adddf3+0xe6>
 8008ede:	f04f 0e00 	mov.w	lr, #0
 8008ee2:	f1dc 0c00 	rsbs	ip, ip, #0
 8008ee6:	eb7e 0000 	sbcs.w	r0, lr, r0
 8008eea:	eb6e 0101 	sbc.w	r1, lr, r1
 8008eee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008ef2:	d31b      	bcc.n	8008f2c <__adddf3+0x124>
 8008ef4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008ef8:	d30c      	bcc.n	8008f14 <__adddf3+0x10c>
 8008efa:	0849      	lsrs	r1, r1, #1
 8008efc:	ea5f 0030 	movs.w	r0, r0, rrx
 8008f00:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008f04:	f104 0401 	add.w	r4, r4, #1
 8008f08:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008f0c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008f10:	f080 809a 	bcs.w	8009048 <__adddf3+0x240>
 8008f14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008f18:	bf08      	it	eq
 8008f1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008f1e:	f150 0000 	adcs.w	r0, r0, #0
 8008f22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008f26:	ea41 0105 	orr.w	r1, r1, r5
 8008f2a:	bd30      	pop	{r4, r5, pc}
 8008f2c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008f30:	4140      	adcs	r0, r0
 8008f32:	eb41 0101 	adc.w	r1, r1, r1
 8008f36:	3c01      	subs	r4, #1
 8008f38:	bf28      	it	cs
 8008f3a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8008f3e:	d2e9      	bcs.n	8008f14 <__adddf3+0x10c>
 8008f40:	f091 0f00 	teq	r1, #0
 8008f44:	bf04      	itt	eq
 8008f46:	4601      	moveq	r1, r0
 8008f48:	2000      	moveq	r0, #0
 8008f4a:	fab1 f381 	clz	r3, r1
 8008f4e:	bf08      	it	eq
 8008f50:	3320      	addeq	r3, #32
 8008f52:	f1a3 030b 	sub.w	r3, r3, #11
 8008f56:	f1b3 0220 	subs.w	r2, r3, #32
 8008f5a:	da0c      	bge.n	8008f76 <__adddf3+0x16e>
 8008f5c:	320c      	adds	r2, #12
 8008f5e:	dd08      	ble.n	8008f72 <__adddf3+0x16a>
 8008f60:	f102 0c14 	add.w	ip, r2, #20
 8008f64:	f1c2 020c 	rsb	r2, r2, #12
 8008f68:	fa01 f00c 	lsl.w	r0, r1, ip
 8008f6c:	fa21 f102 	lsr.w	r1, r1, r2
 8008f70:	e00c      	b.n	8008f8c <__adddf3+0x184>
 8008f72:	f102 0214 	add.w	r2, r2, #20
 8008f76:	bfd8      	it	le
 8008f78:	f1c2 0c20 	rsble	ip, r2, #32
 8008f7c:	fa01 f102 	lsl.w	r1, r1, r2
 8008f80:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008f84:	bfdc      	itt	le
 8008f86:	ea41 010c 	orrle.w	r1, r1, ip
 8008f8a:	4090      	lslle	r0, r2
 8008f8c:	1ae4      	subs	r4, r4, r3
 8008f8e:	bfa2      	ittt	ge
 8008f90:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008f94:	4329      	orrge	r1, r5
 8008f96:	bd30      	popge	{r4, r5, pc}
 8008f98:	ea6f 0404 	mvn.w	r4, r4
 8008f9c:	3c1f      	subs	r4, #31
 8008f9e:	da1c      	bge.n	8008fda <__adddf3+0x1d2>
 8008fa0:	340c      	adds	r4, #12
 8008fa2:	dc0e      	bgt.n	8008fc2 <__adddf3+0x1ba>
 8008fa4:	f104 0414 	add.w	r4, r4, #20
 8008fa8:	f1c4 0220 	rsb	r2, r4, #32
 8008fac:	fa20 f004 	lsr.w	r0, r0, r4
 8008fb0:	fa01 f302 	lsl.w	r3, r1, r2
 8008fb4:	ea40 0003 	orr.w	r0, r0, r3
 8008fb8:	fa21 f304 	lsr.w	r3, r1, r4
 8008fbc:	ea45 0103 	orr.w	r1, r5, r3
 8008fc0:	bd30      	pop	{r4, r5, pc}
 8008fc2:	f1c4 040c 	rsb	r4, r4, #12
 8008fc6:	f1c4 0220 	rsb	r2, r4, #32
 8008fca:	fa20 f002 	lsr.w	r0, r0, r2
 8008fce:	fa01 f304 	lsl.w	r3, r1, r4
 8008fd2:	ea40 0003 	orr.w	r0, r0, r3
 8008fd6:	4629      	mov	r1, r5
 8008fd8:	bd30      	pop	{r4, r5, pc}
 8008fda:	fa21 f004 	lsr.w	r0, r1, r4
 8008fde:	4629      	mov	r1, r5
 8008fe0:	bd30      	pop	{r4, r5, pc}
 8008fe2:	f094 0f00 	teq	r4, #0
 8008fe6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8008fea:	bf06      	itte	eq
 8008fec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008ff0:	3401      	addeq	r4, #1
 8008ff2:	3d01      	subne	r5, #1
 8008ff4:	e74e      	b.n	8008e94 <__adddf3+0x8c>
 8008ff6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008ffa:	bf18      	it	ne
 8008ffc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8009000:	d029      	beq.n	8009056 <__adddf3+0x24e>
 8009002:	ea94 0f05 	teq	r4, r5
 8009006:	bf08      	it	eq
 8009008:	ea90 0f02 	teqeq	r0, r2
 800900c:	d005      	beq.n	800901a <__adddf3+0x212>
 800900e:	ea54 0c00 	orrs.w	ip, r4, r0
 8009012:	bf04      	itt	eq
 8009014:	4619      	moveq	r1, r3
 8009016:	4610      	moveq	r0, r2
 8009018:	bd30      	pop	{r4, r5, pc}
 800901a:	ea91 0f03 	teq	r1, r3
 800901e:	bf1e      	ittt	ne
 8009020:	2100      	movne	r1, #0
 8009022:	2000      	movne	r0, #0
 8009024:	bd30      	popne	{r4, r5, pc}
 8009026:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800902a:	d105      	bne.n	8009038 <__adddf3+0x230>
 800902c:	0040      	lsls	r0, r0, #1
 800902e:	4149      	adcs	r1, r1
 8009030:	bf28      	it	cs
 8009032:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8009036:	bd30      	pop	{r4, r5, pc}
 8009038:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800903c:	bf3c      	itt	cc
 800903e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8009042:	bd30      	popcc	{r4, r5, pc}
 8009044:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8009048:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800904c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009050:	f04f 0000 	mov.w	r0, #0
 8009054:	bd30      	pop	{r4, r5, pc}
 8009056:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800905a:	bf1a      	itte	ne
 800905c:	4619      	movne	r1, r3
 800905e:	4610      	movne	r0, r2
 8009060:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8009064:	bf1c      	itt	ne
 8009066:	460b      	movne	r3, r1
 8009068:	4602      	movne	r2, r0
 800906a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800906e:	bf06      	itte	eq
 8009070:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8009074:	ea91 0f03 	teqeq	r1, r3
 8009078:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800907c:	bd30      	pop	{r4, r5, pc}
 800907e:	bf00      	nop

08009080 <__aeabi_ui2d>:
 8009080:	f090 0f00 	teq	r0, #0
 8009084:	bf04      	itt	eq
 8009086:	2100      	moveq	r1, #0
 8009088:	4770      	bxeq	lr
 800908a:	b530      	push	{r4, r5, lr}
 800908c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8009090:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8009094:	f04f 0500 	mov.w	r5, #0
 8009098:	f04f 0100 	mov.w	r1, #0
 800909c:	e750      	b.n	8008f40 <__adddf3+0x138>
 800909e:	bf00      	nop

080090a0 <__aeabi_i2d>:
 80090a0:	f090 0f00 	teq	r0, #0
 80090a4:	bf04      	itt	eq
 80090a6:	2100      	moveq	r1, #0
 80090a8:	4770      	bxeq	lr
 80090aa:	b530      	push	{r4, r5, lr}
 80090ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80090b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80090b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80090b8:	bf48      	it	mi
 80090ba:	4240      	negmi	r0, r0
 80090bc:	f04f 0100 	mov.w	r1, #0
 80090c0:	e73e      	b.n	8008f40 <__adddf3+0x138>
 80090c2:	bf00      	nop

080090c4 <__aeabi_f2d>:
 80090c4:	0042      	lsls	r2, r0, #1
 80090c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80090ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80090ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80090d2:	bf1f      	itttt	ne
 80090d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80090d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80090dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80090e0:	4770      	bxne	lr
 80090e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80090e6:	bf08      	it	eq
 80090e8:	4770      	bxeq	lr
 80090ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80090ee:	bf04      	itt	eq
 80090f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80090f4:	4770      	bxeq	lr
 80090f6:	b530      	push	{r4, r5, lr}
 80090f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80090fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8009100:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009104:	e71c      	b.n	8008f40 <__adddf3+0x138>
 8009106:	bf00      	nop

08009108 <__aeabi_ul2d>:
 8009108:	ea50 0201 	orrs.w	r2, r0, r1
 800910c:	bf08      	it	eq
 800910e:	4770      	bxeq	lr
 8009110:	b530      	push	{r4, r5, lr}
 8009112:	f04f 0500 	mov.w	r5, #0
 8009116:	e00a      	b.n	800912e <__aeabi_l2d+0x16>

08009118 <__aeabi_l2d>:
 8009118:	ea50 0201 	orrs.w	r2, r0, r1
 800911c:	bf08      	it	eq
 800911e:	4770      	bxeq	lr
 8009120:	b530      	push	{r4, r5, lr}
 8009122:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8009126:	d502      	bpl.n	800912e <__aeabi_l2d+0x16>
 8009128:	4240      	negs	r0, r0
 800912a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800912e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8009132:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8009136:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800913a:	f43f aed8 	beq.w	8008eee <__adddf3+0xe6>
 800913e:	f04f 0203 	mov.w	r2, #3
 8009142:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8009146:	bf18      	it	ne
 8009148:	3203      	addne	r2, #3
 800914a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800914e:	bf18      	it	ne
 8009150:	3203      	addne	r2, #3
 8009152:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8009156:	f1c2 0320 	rsb	r3, r2, #32
 800915a:	fa00 fc03 	lsl.w	ip, r0, r3
 800915e:	fa20 f002 	lsr.w	r0, r0, r2
 8009162:	fa01 fe03 	lsl.w	lr, r1, r3
 8009166:	ea40 000e 	orr.w	r0, r0, lr
 800916a:	fa21 f102 	lsr.w	r1, r1, r2
 800916e:	4414      	add	r4, r2
 8009170:	e6bd      	b.n	8008eee <__adddf3+0xe6>
 8009172:	bf00      	nop

08009174 <__aeabi_dmul>:
 8009174:	b570      	push	{r4, r5, r6, lr}
 8009176:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800917a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800917e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8009182:	bf1d      	ittte	ne
 8009184:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8009188:	ea94 0f0c 	teqne	r4, ip
 800918c:	ea95 0f0c 	teqne	r5, ip
 8009190:	f000 f8de 	bleq	8009350 <__aeabi_dmul+0x1dc>
 8009194:	442c      	add	r4, r5
 8009196:	ea81 0603 	eor.w	r6, r1, r3
 800919a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800919e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80091a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80091a6:	bf18      	it	ne
 80091a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80091ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80091b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091b4:	d038      	beq.n	8009228 <__aeabi_dmul+0xb4>
 80091b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80091ba:	f04f 0500 	mov.w	r5, #0
 80091be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80091c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80091c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80091ca:	f04f 0600 	mov.w	r6, #0
 80091ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80091d2:	f09c 0f00 	teq	ip, #0
 80091d6:	bf18      	it	ne
 80091d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80091dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80091e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80091e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80091e8:	d204      	bcs.n	80091f4 <__aeabi_dmul+0x80>
 80091ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80091ee:	416d      	adcs	r5, r5
 80091f0:	eb46 0606 	adc.w	r6, r6, r6
 80091f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80091f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80091fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8009200:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8009204:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8009208:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800920c:	bf88      	it	hi
 800920e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8009212:	d81e      	bhi.n	8009252 <__aeabi_dmul+0xde>
 8009214:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8009218:	bf08      	it	eq
 800921a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800921e:	f150 0000 	adcs.w	r0, r0, #0
 8009222:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8009226:	bd70      	pop	{r4, r5, r6, pc}
 8009228:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800922c:	ea46 0101 	orr.w	r1, r6, r1
 8009230:	ea40 0002 	orr.w	r0, r0, r2
 8009234:	ea81 0103 	eor.w	r1, r1, r3
 8009238:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800923c:	bfc2      	ittt	gt
 800923e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8009242:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8009246:	bd70      	popgt	{r4, r5, r6, pc}
 8009248:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800924c:	f04f 0e00 	mov.w	lr, #0
 8009250:	3c01      	subs	r4, #1
 8009252:	f300 80ab 	bgt.w	80093ac <__aeabi_dmul+0x238>
 8009256:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800925a:	bfde      	ittt	le
 800925c:	2000      	movle	r0, #0
 800925e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8009262:	bd70      	pople	{r4, r5, r6, pc}
 8009264:	f1c4 0400 	rsb	r4, r4, #0
 8009268:	3c20      	subs	r4, #32
 800926a:	da35      	bge.n	80092d8 <__aeabi_dmul+0x164>
 800926c:	340c      	adds	r4, #12
 800926e:	dc1b      	bgt.n	80092a8 <__aeabi_dmul+0x134>
 8009270:	f104 0414 	add.w	r4, r4, #20
 8009274:	f1c4 0520 	rsb	r5, r4, #32
 8009278:	fa00 f305 	lsl.w	r3, r0, r5
 800927c:	fa20 f004 	lsr.w	r0, r0, r4
 8009280:	fa01 f205 	lsl.w	r2, r1, r5
 8009284:	ea40 0002 	orr.w	r0, r0, r2
 8009288:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800928c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009290:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8009294:	fa21 f604 	lsr.w	r6, r1, r4
 8009298:	eb42 0106 	adc.w	r1, r2, r6
 800929c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80092a0:	bf08      	it	eq
 80092a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80092a6:	bd70      	pop	{r4, r5, r6, pc}
 80092a8:	f1c4 040c 	rsb	r4, r4, #12
 80092ac:	f1c4 0520 	rsb	r5, r4, #32
 80092b0:	fa00 f304 	lsl.w	r3, r0, r4
 80092b4:	fa20 f005 	lsr.w	r0, r0, r5
 80092b8:	fa01 f204 	lsl.w	r2, r1, r4
 80092bc:	ea40 0002 	orr.w	r0, r0, r2
 80092c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80092c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80092c8:	f141 0100 	adc.w	r1, r1, #0
 80092cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80092d0:	bf08      	it	eq
 80092d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80092d6:	bd70      	pop	{r4, r5, r6, pc}
 80092d8:	f1c4 0520 	rsb	r5, r4, #32
 80092dc:	fa00 f205 	lsl.w	r2, r0, r5
 80092e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80092e4:	fa20 f304 	lsr.w	r3, r0, r4
 80092e8:	fa01 f205 	lsl.w	r2, r1, r5
 80092ec:	ea43 0302 	orr.w	r3, r3, r2
 80092f0:	fa21 f004 	lsr.w	r0, r1, r4
 80092f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80092f8:	fa21 f204 	lsr.w	r2, r1, r4
 80092fc:	ea20 0002 	bic.w	r0, r0, r2
 8009300:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8009304:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8009308:	bf08      	it	eq
 800930a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800930e:	bd70      	pop	{r4, r5, r6, pc}
 8009310:	f094 0f00 	teq	r4, #0
 8009314:	d10f      	bne.n	8009336 <__aeabi_dmul+0x1c2>
 8009316:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800931a:	0040      	lsls	r0, r0, #1
 800931c:	eb41 0101 	adc.w	r1, r1, r1
 8009320:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8009324:	bf08      	it	eq
 8009326:	3c01      	subeq	r4, #1
 8009328:	d0f7      	beq.n	800931a <__aeabi_dmul+0x1a6>
 800932a:	ea41 0106 	orr.w	r1, r1, r6
 800932e:	f095 0f00 	teq	r5, #0
 8009332:	bf18      	it	ne
 8009334:	4770      	bxne	lr
 8009336:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800933a:	0052      	lsls	r2, r2, #1
 800933c:	eb43 0303 	adc.w	r3, r3, r3
 8009340:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8009344:	bf08      	it	eq
 8009346:	3d01      	subeq	r5, #1
 8009348:	d0f7      	beq.n	800933a <__aeabi_dmul+0x1c6>
 800934a:	ea43 0306 	orr.w	r3, r3, r6
 800934e:	4770      	bx	lr
 8009350:	ea94 0f0c 	teq	r4, ip
 8009354:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8009358:	bf18      	it	ne
 800935a:	ea95 0f0c 	teqne	r5, ip
 800935e:	d00c      	beq.n	800937a <__aeabi_dmul+0x206>
 8009360:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8009364:	bf18      	it	ne
 8009366:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800936a:	d1d1      	bne.n	8009310 <__aeabi_dmul+0x19c>
 800936c:	ea81 0103 	eor.w	r1, r1, r3
 8009370:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009374:	f04f 0000 	mov.w	r0, #0
 8009378:	bd70      	pop	{r4, r5, r6, pc}
 800937a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800937e:	bf06      	itte	eq
 8009380:	4610      	moveq	r0, r2
 8009382:	4619      	moveq	r1, r3
 8009384:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8009388:	d019      	beq.n	80093be <__aeabi_dmul+0x24a>
 800938a:	ea94 0f0c 	teq	r4, ip
 800938e:	d102      	bne.n	8009396 <__aeabi_dmul+0x222>
 8009390:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8009394:	d113      	bne.n	80093be <__aeabi_dmul+0x24a>
 8009396:	ea95 0f0c 	teq	r5, ip
 800939a:	d105      	bne.n	80093a8 <__aeabi_dmul+0x234>
 800939c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80093a0:	bf1c      	itt	ne
 80093a2:	4610      	movne	r0, r2
 80093a4:	4619      	movne	r1, r3
 80093a6:	d10a      	bne.n	80093be <__aeabi_dmul+0x24a>
 80093a8:	ea81 0103 	eor.w	r1, r1, r3
 80093ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80093b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80093b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80093b8:	f04f 0000 	mov.w	r0, #0
 80093bc:	bd70      	pop	{r4, r5, r6, pc}
 80093be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80093c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80093c6:	bd70      	pop	{r4, r5, r6, pc}

080093c8 <__aeabi_ddiv>:
 80093c8:	b570      	push	{r4, r5, r6, lr}
 80093ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80093ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80093d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80093d6:	bf1d      	ittte	ne
 80093d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80093dc:	ea94 0f0c 	teqne	r4, ip
 80093e0:	ea95 0f0c 	teqne	r5, ip
 80093e4:	f000 f8a7 	bleq	8009536 <__aeabi_ddiv+0x16e>
 80093e8:	eba4 0405 	sub.w	r4, r4, r5
 80093ec:	ea81 0e03 	eor.w	lr, r1, r3
 80093f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80093f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80093f8:	f000 8088 	beq.w	800950c <__aeabi_ddiv+0x144>
 80093fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8009400:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8009404:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8009408:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800940c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8009410:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8009414:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8009418:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800941c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8009420:	429d      	cmp	r5, r3
 8009422:	bf08      	it	eq
 8009424:	4296      	cmpeq	r6, r2
 8009426:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800942a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800942e:	d202      	bcs.n	8009436 <__aeabi_ddiv+0x6e>
 8009430:	085b      	lsrs	r3, r3, #1
 8009432:	ea4f 0232 	mov.w	r2, r2, rrx
 8009436:	1ab6      	subs	r6, r6, r2
 8009438:	eb65 0503 	sbc.w	r5, r5, r3
 800943c:	085b      	lsrs	r3, r3, #1
 800943e:	ea4f 0232 	mov.w	r2, r2, rrx
 8009442:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009446:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800944a:	ebb6 0e02 	subs.w	lr, r6, r2
 800944e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8009452:	bf22      	ittt	cs
 8009454:	1ab6      	subcs	r6, r6, r2
 8009456:	4675      	movcs	r5, lr
 8009458:	ea40 000c 	orrcs.w	r0, r0, ip
 800945c:	085b      	lsrs	r3, r3, #1
 800945e:	ea4f 0232 	mov.w	r2, r2, rrx
 8009462:	ebb6 0e02 	subs.w	lr, r6, r2
 8009466:	eb75 0e03 	sbcs.w	lr, r5, r3
 800946a:	bf22      	ittt	cs
 800946c:	1ab6      	subcs	r6, r6, r2
 800946e:	4675      	movcs	r5, lr
 8009470:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8009474:	085b      	lsrs	r3, r3, #1
 8009476:	ea4f 0232 	mov.w	r2, r2, rrx
 800947a:	ebb6 0e02 	subs.w	lr, r6, r2
 800947e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8009482:	bf22      	ittt	cs
 8009484:	1ab6      	subcs	r6, r6, r2
 8009486:	4675      	movcs	r5, lr
 8009488:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800948c:	085b      	lsrs	r3, r3, #1
 800948e:	ea4f 0232 	mov.w	r2, r2, rrx
 8009492:	ebb6 0e02 	subs.w	lr, r6, r2
 8009496:	eb75 0e03 	sbcs.w	lr, r5, r3
 800949a:	bf22      	ittt	cs
 800949c:	1ab6      	subcs	r6, r6, r2
 800949e:	4675      	movcs	r5, lr
 80094a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80094a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80094a8:	d018      	beq.n	80094dc <__aeabi_ddiv+0x114>
 80094aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80094ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80094b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80094b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80094ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80094be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80094c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80094c6:	d1c0      	bne.n	800944a <__aeabi_ddiv+0x82>
 80094c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80094cc:	d10b      	bne.n	80094e6 <__aeabi_ddiv+0x11e>
 80094ce:	ea41 0100 	orr.w	r1, r1, r0
 80094d2:	f04f 0000 	mov.w	r0, #0
 80094d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80094da:	e7b6      	b.n	800944a <__aeabi_ddiv+0x82>
 80094dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80094e0:	bf04      	itt	eq
 80094e2:	4301      	orreq	r1, r0
 80094e4:	2000      	moveq	r0, #0
 80094e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80094ea:	bf88      	it	hi
 80094ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80094f0:	f63f aeaf 	bhi.w	8009252 <__aeabi_dmul+0xde>
 80094f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80094f8:	bf04      	itt	eq
 80094fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80094fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8009502:	f150 0000 	adcs.w	r0, r0, #0
 8009506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800950a:	bd70      	pop	{r4, r5, r6, pc}
 800950c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8009510:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8009514:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8009518:	bfc2      	ittt	gt
 800951a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800951e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8009522:	bd70      	popgt	{r4, r5, r6, pc}
 8009524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009528:	f04f 0e00 	mov.w	lr, #0
 800952c:	3c01      	subs	r4, #1
 800952e:	e690      	b.n	8009252 <__aeabi_dmul+0xde>
 8009530:	ea45 0e06 	orr.w	lr, r5, r6
 8009534:	e68d      	b.n	8009252 <__aeabi_dmul+0xde>
 8009536:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800953a:	ea94 0f0c 	teq	r4, ip
 800953e:	bf08      	it	eq
 8009540:	ea95 0f0c 	teqeq	r5, ip
 8009544:	f43f af3b 	beq.w	80093be <__aeabi_dmul+0x24a>
 8009548:	ea94 0f0c 	teq	r4, ip
 800954c:	d10a      	bne.n	8009564 <__aeabi_ddiv+0x19c>
 800954e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8009552:	f47f af34 	bne.w	80093be <__aeabi_dmul+0x24a>
 8009556:	ea95 0f0c 	teq	r5, ip
 800955a:	f47f af25 	bne.w	80093a8 <__aeabi_dmul+0x234>
 800955e:	4610      	mov	r0, r2
 8009560:	4619      	mov	r1, r3
 8009562:	e72c      	b.n	80093be <__aeabi_dmul+0x24a>
 8009564:	ea95 0f0c 	teq	r5, ip
 8009568:	d106      	bne.n	8009578 <__aeabi_ddiv+0x1b0>
 800956a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800956e:	f43f aefd 	beq.w	800936c <__aeabi_dmul+0x1f8>
 8009572:	4610      	mov	r0, r2
 8009574:	4619      	mov	r1, r3
 8009576:	e722      	b.n	80093be <__aeabi_dmul+0x24a>
 8009578:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800957c:	bf18      	it	ne
 800957e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8009582:	f47f aec5 	bne.w	8009310 <__aeabi_dmul+0x19c>
 8009586:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800958a:	f47f af0d 	bne.w	80093a8 <__aeabi_dmul+0x234>
 800958e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8009592:	f47f aeeb 	bne.w	800936c <__aeabi_dmul+0x1f8>
 8009596:	e712      	b.n	80093be <__aeabi_dmul+0x24a>

08009598 <__gedf2>:
 8009598:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800959c:	e006      	b.n	80095ac <__cmpdf2+0x4>
 800959e:	bf00      	nop

080095a0 <__ledf2>:
 80095a0:	f04f 0c01 	mov.w	ip, #1
 80095a4:	e002      	b.n	80095ac <__cmpdf2+0x4>
 80095a6:	bf00      	nop

080095a8 <__cmpdf2>:
 80095a8:	f04f 0c01 	mov.w	ip, #1
 80095ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80095b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80095b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80095b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80095bc:	bf18      	it	ne
 80095be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80095c2:	d01b      	beq.n	80095fc <__cmpdf2+0x54>
 80095c4:	b001      	add	sp, #4
 80095c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80095ca:	bf0c      	ite	eq
 80095cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80095d0:	ea91 0f03 	teqne	r1, r3
 80095d4:	bf02      	ittt	eq
 80095d6:	ea90 0f02 	teqeq	r0, r2
 80095da:	2000      	moveq	r0, #0
 80095dc:	4770      	bxeq	lr
 80095de:	f110 0f00 	cmn.w	r0, #0
 80095e2:	ea91 0f03 	teq	r1, r3
 80095e6:	bf58      	it	pl
 80095e8:	4299      	cmppl	r1, r3
 80095ea:	bf08      	it	eq
 80095ec:	4290      	cmpeq	r0, r2
 80095ee:	bf2c      	ite	cs
 80095f0:	17d8      	asrcs	r0, r3, #31
 80095f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80095f6:	f040 0001 	orr.w	r0, r0, #1
 80095fa:	4770      	bx	lr
 80095fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8009600:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8009604:	d102      	bne.n	800960c <__cmpdf2+0x64>
 8009606:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800960a:	d107      	bne.n	800961c <__cmpdf2+0x74>
 800960c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8009610:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8009614:	d1d6      	bne.n	80095c4 <__cmpdf2+0x1c>
 8009616:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800961a:	d0d3      	beq.n	80095c4 <__cmpdf2+0x1c>
 800961c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop

08009624 <__aeabi_cdrcmple>:
 8009624:	4684      	mov	ip, r0
 8009626:	4610      	mov	r0, r2
 8009628:	4662      	mov	r2, ip
 800962a:	468c      	mov	ip, r1
 800962c:	4619      	mov	r1, r3
 800962e:	4663      	mov	r3, ip
 8009630:	e000      	b.n	8009634 <__aeabi_cdcmpeq>
 8009632:	bf00      	nop

08009634 <__aeabi_cdcmpeq>:
 8009634:	b501      	push	{r0, lr}
 8009636:	f7ff ffb7 	bl	80095a8 <__cmpdf2>
 800963a:	2800      	cmp	r0, #0
 800963c:	bf48      	it	mi
 800963e:	f110 0f00 	cmnmi.w	r0, #0
 8009642:	bd01      	pop	{r0, pc}

08009644 <__aeabi_dcmpeq>:
 8009644:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009648:	f7ff fff4 	bl	8009634 <__aeabi_cdcmpeq>
 800964c:	bf0c      	ite	eq
 800964e:	2001      	moveq	r0, #1
 8009650:	2000      	movne	r0, #0
 8009652:	f85d fb08 	ldr.w	pc, [sp], #8
 8009656:	bf00      	nop

08009658 <__aeabi_dcmplt>:
 8009658:	f84d ed08 	str.w	lr, [sp, #-8]!
 800965c:	f7ff ffea 	bl	8009634 <__aeabi_cdcmpeq>
 8009660:	bf34      	ite	cc
 8009662:	2001      	movcc	r0, #1
 8009664:	2000      	movcs	r0, #0
 8009666:	f85d fb08 	ldr.w	pc, [sp], #8
 800966a:	bf00      	nop

0800966c <__aeabi_dcmple>:
 800966c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009670:	f7ff ffe0 	bl	8009634 <__aeabi_cdcmpeq>
 8009674:	bf94      	ite	ls
 8009676:	2001      	movls	r0, #1
 8009678:	2000      	movhi	r0, #0
 800967a:	f85d fb08 	ldr.w	pc, [sp], #8
 800967e:	bf00      	nop

08009680 <__aeabi_dcmpge>:
 8009680:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009684:	f7ff ffce 	bl	8009624 <__aeabi_cdrcmple>
 8009688:	bf94      	ite	ls
 800968a:	2001      	movls	r0, #1
 800968c:	2000      	movhi	r0, #0
 800968e:	f85d fb08 	ldr.w	pc, [sp], #8
 8009692:	bf00      	nop

08009694 <__aeabi_dcmpgt>:
 8009694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009698:	f7ff ffc4 	bl	8009624 <__aeabi_cdrcmple>
 800969c:	bf34      	ite	cc
 800969e:	2001      	movcc	r0, #1
 80096a0:	2000      	movcs	r0, #0
 80096a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80096a6:	bf00      	nop

080096a8 <__aeabi_dcmpun>:
 80096a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80096ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80096b0:	d102      	bne.n	80096b8 <__aeabi_dcmpun+0x10>
 80096b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80096b6:	d10a      	bne.n	80096ce <__aeabi_dcmpun+0x26>
 80096b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80096bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80096c0:	d102      	bne.n	80096c8 <__aeabi_dcmpun+0x20>
 80096c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80096c6:	d102      	bne.n	80096ce <__aeabi_dcmpun+0x26>
 80096c8:	f04f 0000 	mov.w	r0, #0
 80096cc:	4770      	bx	lr
 80096ce:	f04f 0001 	mov.w	r0, #1
 80096d2:	4770      	bx	lr

080096d4 <__aeabi_d2iz>:
 80096d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80096d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80096dc:	d215      	bcs.n	800970a <__aeabi_d2iz+0x36>
 80096de:	d511      	bpl.n	8009704 <__aeabi_d2iz+0x30>
 80096e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80096e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80096e8:	d912      	bls.n	8009710 <__aeabi_d2iz+0x3c>
 80096ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80096ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80096f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80096fa:	fa23 f002 	lsr.w	r0, r3, r2
 80096fe:	bf18      	it	ne
 8009700:	4240      	negne	r0, r0
 8009702:	4770      	bx	lr
 8009704:	f04f 0000 	mov.w	r0, #0
 8009708:	4770      	bx	lr
 800970a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800970e:	d105      	bne.n	800971c <__aeabi_d2iz+0x48>
 8009710:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8009714:	bf08      	it	eq
 8009716:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800971a:	4770      	bx	lr
 800971c:	f04f 0000 	mov.w	r0, #0
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop

08009724 <__aeabi_uldivmod>:
 8009724:	b953      	cbnz	r3, 800973c <__aeabi_uldivmod+0x18>
 8009726:	b94a      	cbnz	r2, 800973c <__aeabi_uldivmod+0x18>
 8009728:	2900      	cmp	r1, #0
 800972a:	bf08      	it	eq
 800972c:	2800      	cmpeq	r0, #0
 800972e:	bf1c      	itt	ne
 8009730:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8009734:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8009738:	f000 b974 	b.w	8009a24 <__aeabi_idiv0>
 800973c:	f1ad 0c08 	sub.w	ip, sp, #8
 8009740:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8009744:	f000 f806 	bl	8009754 <__udivmoddi4>
 8009748:	f8dd e004 	ldr.w	lr, [sp, #4]
 800974c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009750:	b004      	add	sp, #16
 8009752:	4770      	bx	lr

08009754 <__udivmoddi4>:
 8009754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009758:	9d08      	ldr	r5, [sp, #32]
 800975a:	4604      	mov	r4, r0
 800975c:	468e      	mov	lr, r1
 800975e:	2b00      	cmp	r3, #0
 8009760:	d14d      	bne.n	80097fe <__udivmoddi4+0xaa>
 8009762:	428a      	cmp	r2, r1
 8009764:	4694      	mov	ip, r2
 8009766:	d969      	bls.n	800983c <__udivmoddi4+0xe8>
 8009768:	fab2 f282 	clz	r2, r2
 800976c:	b152      	cbz	r2, 8009784 <__udivmoddi4+0x30>
 800976e:	fa01 f302 	lsl.w	r3, r1, r2
 8009772:	f1c2 0120 	rsb	r1, r2, #32
 8009776:	fa20 f101 	lsr.w	r1, r0, r1
 800977a:	fa0c fc02 	lsl.w	ip, ip, r2
 800977e:	ea41 0e03 	orr.w	lr, r1, r3
 8009782:	4094      	lsls	r4, r2
 8009784:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8009788:	0c21      	lsrs	r1, r4, #16
 800978a:	fbbe f6f8 	udiv	r6, lr, r8
 800978e:	fa1f f78c 	uxth.w	r7, ip
 8009792:	fb08 e316 	mls	r3, r8, r6, lr
 8009796:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800979a:	fb06 f107 	mul.w	r1, r6, r7
 800979e:	4299      	cmp	r1, r3
 80097a0:	d90a      	bls.n	80097b8 <__udivmoddi4+0x64>
 80097a2:	eb1c 0303 	adds.w	r3, ip, r3
 80097a6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80097aa:	f080 811f 	bcs.w	80099ec <__udivmoddi4+0x298>
 80097ae:	4299      	cmp	r1, r3
 80097b0:	f240 811c 	bls.w	80099ec <__udivmoddi4+0x298>
 80097b4:	3e02      	subs	r6, #2
 80097b6:	4463      	add	r3, ip
 80097b8:	1a5b      	subs	r3, r3, r1
 80097ba:	b2a4      	uxth	r4, r4
 80097bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80097c0:	fb08 3310 	mls	r3, r8, r0, r3
 80097c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80097c8:	fb00 f707 	mul.w	r7, r0, r7
 80097cc:	42a7      	cmp	r7, r4
 80097ce:	d90a      	bls.n	80097e6 <__udivmoddi4+0x92>
 80097d0:	eb1c 0404 	adds.w	r4, ip, r4
 80097d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80097d8:	f080 810a 	bcs.w	80099f0 <__udivmoddi4+0x29c>
 80097dc:	42a7      	cmp	r7, r4
 80097de:	f240 8107 	bls.w	80099f0 <__udivmoddi4+0x29c>
 80097e2:	4464      	add	r4, ip
 80097e4:	3802      	subs	r0, #2
 80097e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80097ea:	1be4      	subs	r4, r4, r7
 80097ec:	2600      	movs	r6, #0
 80097ee:	b11d      	cbz	r5, 80097f8 <__udivmoddi4+0xa4>
 80097f0:	40d4      	lsrs	r4, r2
 80097f2:	2300      	movs	r3, #0
 80097f4:	e9c5 4300 	strd	r4, r3, [r5]
 80097f8:	4631      	mov	r1, r6
 80097fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097fe:	428b      	cmp	r3, r1
 8009800:	d909      	bls.n	8009816 <__udivmoddi4+0xc2>
 8009802:	2d00      	cmp	r5, #0
 8009804:	f000 80ef 	beq.w	80099e6 <__udivmoddi4+0x292>
 8009808:	2600      	movs	r6, #0
 800980a:	e9c5 0100 	strd	r0, r1, [r5]
 800980e:	4630      	mov	r0, r6
 8009810:	4631      	mov	r1, r6
 8009812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009816:	fab3 f683 	clz	r6, r3
 800981a:	2e00      	cmp	r6, #0
 800981c:	d14a      	bne.n	80098b4 <__udivmoddi4+0x160>
 800981e:	428b      	cmp	r3, r1
 8009820:	d302      	bcc.n	8009828 <__udivmoddi4+0xd4>
 8009822:	4282      	cmp	r2, r0
 8009824:	f200 80f9 	bhi.w	8009a1a <__udivmoddi4+0x2c6>
 8009828:	1a84      	subs	r4, r0, r2
 800982a:	eb61 0303 	sbc.w	r3, r1, r3
 800982e:	2001      	movs	r0, #1
 8009830:	469e      	mov	lr, r3
 8009832:	2d00      	cmp	r5, #0
 8009834:	d0e0      	beq.n	80097f8 <__udivmoddi4+0xa4>
 8009836:	e9c5 4e00 	strd	r4, lr, [r5]
 800983a:	e7dd      	b.n	80097f8 <__udivmoddi4+0xa4>
 800983c:	b902      	cbnz	r2, 8009840 <__udivmoddi4+0xec>
 800983e:	deff      	udf	#255	; 0xff
 8009840:	fab2 f282 	clz	r2, r2
 8009844:	2a00      	cmp	r2, #0
 8009846:	f040 8092 	bne.w	800996e <__udivmoddi4+0x21a>
 800984a:	eba1 010c 	sub.w	r1, r1, ip
 800984e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8009852:	fa1f fe8c 	uxth.w	lr, ip
 8009856:	2601      	movs	r6, #1
 8009858:	0c20      	lsrs	r0, r4, #16
 800985a:	fbb1 f3f7 	udiv	r3, r1, r7
 800985e:	fb07 1113 	mls	r1, r7, r3, r1
 8009862:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8009866:	fb0e f003 	mul.w	r0, lr, r3
 800986a:	4288      	cmp	r0, r1
 800986c:	d908      	bls.n	8009880 <__udivmoddi4+0x12c>
 800986e:	eb1c 0101 	adds.w	r1, ip, r1
 8009872:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8009876:	d202      	bcs.n	800987e <__udivmoddi4+0x12a>
 8009878:	4288      	cmp	r0, r1
 800987a:	f200 80cb 	bhi.w	8009a14 <__udivmoddi4+0x2c0>
 800987e:	4643      	mov	r3, r8
 8009880:	1a09      	subs	r1, r1, r0
 8009882:	b2a4      	uxth	r4, r4
 8009884:	fbb1 f0f7 	udiv	r0, r1, r7
 8009888:	fb07 1110 	mls	r1, r7, r0, r1
 800988c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8009890:	fb0e fe00 	mul.w	lr, lr, r0
 8009894:	45a6      	cmp	lr, r4
 8009896:	d908      	bls.n	80098aa <__udivmoddi4+0x156>
 8009898:	eb1c 0404 	adds.w	r4, ip, r4
 800989c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80098a0:	d202      	bcs.n	80098a8 <__udivmoddi4+0x154>
 80098a2:	45a6      	cmp	lr, r4
 80098a4:	f200 80bb 	bhi.w	8009a1e <__udivmoddi4+0x2ca>
 80098a8:	4608      	mov	r0, r1
 80098aa:	eba4 040e 	sub.w	r4, r4, lr
 80098ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80098b2:	e79c      	b.n	80097ee <__udivmoddi4+0x9a>
 80098b4:	f1c6 0720 	rsb	r7, r6, #32
 80098b8:	40b3      	lsls	r3, r6
 80098ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80098be:	ea4c 0c03 	orr.w	ip, ip, r3
 80098c2:	fa20 f407 	lsr.w	r4, r0, r7
 80098c6:	fa01 f306 	lsl.w	r3, r1, r6
 80098ca:	431c      	orrs	r4, r3
 80098cc:	40f9      	lsrs	r1, r7
 80098ce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80098d2:	fa00 f306 	lsl.w	r3, r0, r6
 80098d6:	fbb1 f8f9 	udiv	r8, r1, r9
 80098da:	0c20      	lsrs	r0, r4, #16
 80098dc:	fa1f fe8c 	uxth.w	lr, ip
 80098e0:	fb09 1118 	mls	r1, r9, r8, r1
 80098e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80098e8:	fb08 f00e 	mul.w	r0, r8, lr
 80098ec:	4288      	cmp	r0, r1
 80098ee:	fa02 f206 	lsl.w	r2, r2, r6
 80098f2:	d90b      	bls.n	800990c <__udivmoddi4+0x1b8>
 80098f4:	eb1c 0101 	adds.w	r1, ip, r1
 80098f8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80098fc:	f080 8088 	bcs.w	8009a10 <__udivmoddi4+0x2bc>
 8009900:	4288      	cmp	r0, r1
 8009902:	f240 8085 	bls.w	8009a10 <__udivmoddi4+0x2bc>
 8009906:	f1a8 0802 	sub.w	r8, r8, #2
 800990a:	4461      	add	r1, ip
 800990c:	1a09      	subs	r1, r1, r0
 800990e:	b2a4      	uxth	r4, r4
 8009910:	fbb1 f0f9 	udiv	r0, r1, r9
 8009914:	fb09 1110 	mls	r1, r9, r0, r1
 8009918:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800991c:	fb00 fe0e 	mul.w	lr, r0, lr
 8009920:	458e      	cmp	lr, r1
 8009922:	d908      	bls.n	8009936 <__udivmoddi4+0x1e2>
 8009924:	eb1c 0101 	adds.w	r1, ip, r1
 8009928:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800992c:	d26c      	bcs.n	8009a08 <__udivmoddi4+0x2b4>
 800992e:	458e      	cmp	lr, r1
 8009930:	d96a      	bls.n	8009a08 <__udivmoddi4+0x2b4>
 8009932:	3802      	subs	r0, #2
 8009934:	4461      	add	r1, ip
 8009936:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800993a:	fba0 9402 	umull	r9, r4, r0, r2
 800993e:	eba1 010e 	sub.w	r1, r1, lr
 8009942:	42a1      	cmp	r1, r4
 8009944:	46c8      	mov	r8, r9
 8009946:	46a6      	mov	lr, r4
 8009948:	d356      	bcc.n	80099f8 <__udivmoddi4+0x2a4>
 800994a:	d053      	beq.n	80099f4 <__udivmoddi4+0x2a0>
 800994c:	b15d      	cbz	r5, 8009966 <__udivmoddi4+0x212>
 800994e:	ebb3 0208 	subs.w	r2, r3, r8
 8009952:	eb61 010e 	sbc.w	r1, r1, lr
 8009956:	fa01 f707 	lsl.w	r7, r1, r7
 800995a:	fa22 f306 	lsr.w	r3, r2, r6
 800995e:	40f1      	lsrs	r1, r6
 8009960:	431f      	orrs	r7, r3
 8009962:	e9c5 7100 	strd	r7, r1, [r5]
 8009966:	2600      	movs	r6, #0
 8009968:	4631      	mov	r1, r6
 800996a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800996e:	f1c2 0320 	rsb	r3, r2, #32
 8009972:	40d8      	lsrs	r0, r3
 8009974:	fa0c fc02 	lsl.w	ip, ip, r2
 8009978:	fa21 f303 	lsr.w	r3, r1, r3
 800997c:	4091      	lsls	r1, r2
 800997e:	4301      	orrs	r1, r0
 8009980:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8009984:	fa1f fe8c 	uxth.w	lr, ip
 8009988:	fbb3 f0f7 	udiv	r0, r3, r7
 800998c:	fb07 3610 	mls	r6, r7, r0, r3
 8009990:	0c0b      	lsrs	r3, r1, #16
 8009992:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8009996:	fb00 f60e 	mul.w	r6, r0, lr
 800999a:	429e      	cmp	r6, r3
 800999c:	fa04 f402 	lsl.w	r4, r4, r2
 80099a0:	d908      	bls.n	80099b4 <__udivmoddi4+0x260>
 80099a2:	eb1c 0303 	adds.w	r3, ip, r3
 80099a6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80099aa:	d22f      	bcs.n	8009a0c <__udivmoddi4+0x2b8>
 80099ac:	429e      	cmp	r6, r3
 80099ae:	d92d      	bls.n	8009a0c <__udivmoddi4+0x2b8>
 80099b0:	3802      	subs	r0, #2
 80099b2:	4463      	add	r3, ip
 80099b4:	1b9b      	subs	r3, r3, r6
 80099b6:	b289      	uxth	r1, r1
 80099b8:	fbb3 f6f7 	udiv	r6, r3, r7
 80099bc:	fb07 3316 	mls	r3, r7, r6, r3
 80099c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80099c4:	fb06 f30e 	mul.w	r3, r6, lr
 80099c8:	428b      	cmp	r3, r1
 80099ca:	d908      	bls.n	80099de <__udivmoddi4+0x28a>
 80099cc:	eb1c 0101 	adds.w	r1, ip, r1
 80099d0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80099d4:	d216      	bcs.n	8009a04 <__udivmoddi4+0x2b0>
 80099d6:	428b      	cmp	r3, r1
 80099d8:	d914      	bls.n	8009a04 <__udivmoddi4+0x2b0>
 80099da:	3e02      	subs	r6, #2
 80099dc:	4461      	add	r1, ip
 80099de:	1ac9      	subs	r1, r1, r3
 80099e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80099e4:	e738      	b.n	8009858 <__udivmoddi4+0x104>
 80099e6:	462e      	mov	r6, r5
 80099e8:	4628      	mov	r0, r5
 80099ea:	e705      	b.n	80097f8 <__udivmoddi4+0xa4>
 80099ec:	4606      	mov	r6, r0
 80099ee:	e6e3      	b.n	80097b8 <__udivmoddi4+0x64>
 80099f0:	4618      	mov	r0, r3
 80099f2:	e6f8      	b.n	80097e6 <__udivmoddi4+0x92>
 80099f4:	454b      	cmp	r3, r9
 80099f6:	d2a9      	bcs.n	800994c <__udivmoddi4+0x1f8>
 80099f8:	ebb9 0802 	subs.w	r8, r9, r2
 80099fc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8009a00:	3801      	subs	r0, #1
 8009a02:	e7a3      	b.n	800994c <__udivmoddi4+0x1f8>
 8009a04:	4646      	mov	r6, r8
 8009a06:	e7ea      	b.n	80099de <__udivmoddi4+0x28a>
 8009a08:	4620      	mov	r0, r4
 8009a0a:	e794      	b.n	8009936 <__udivmoddi4+0x1e2>
 8009a0c:	4640      	mov	r0, r8
 8009a0e:	e7d1      	b.n	80099b4 <__udivmoddi4+0x260>
 8009a10:	46d0      	mov	r8, sl
 8009a12:	e77b      	b.n	800990c <__udivmoddi4+0x1b8>
 8009a14:	3b02      	subs	r3, #2
 8009a16:	4461      	add	r1, ip
 8009a18:	e732      	b.n	8009880 <__udivmoddi4+0x12c>
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	e709      	b.n	8009832 <__udivmoddi4+0xde>
 8009a1e:	4464      	add	r4, ip
 8009a20:	3802      	subs	r0, #2
 8009a22:	e742      	b.n	80098aa <__udivmoddi4+0x156>

08009a24 <__aeabi_idiv0>:
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop

08009a28 <_getpid>:
 8009a28:	4b02      	ldr	r3, [pc, #8]	; (8009a34 <_getpid+0xc>)
 8009a2a:	2258      	movs	r2, #88	; 0x58
 8009a2c:	601a      	str	r2, [r3, #0]
 8009a2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a32:	4770      	bx	lr
 8009a34:	20000c74 	.word	0x20000c74

08009a38 <_kill>:
 8009a38:	4b02      	ldr	r3, [pc, #8]	; (8009a44 <_kill+0xc>)
 8009a3a:	2258      	movs	r2, #88	; 0x58
 8009a3c:	601a      	str	r2, [r3, #0]
 8009a3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a42:	4770      	bx	lr
 8009a44:	20000c74 	.word	0x20000c74

08009a48 <_exit>:
 8009a48:	e7fe      	b.n	8009a48 <_exit>
 8009a4a:	bf00      	nop

08009a4c <CmdLED>:
    HAL_IncTick();
    my_Tick();
}

void CmdLED(int mode)
{
 8009a4c:	b507      	push	{r0, r1, r2, lr}
  uint32_t led,val;
  int rc;
  if(mode != CMD_INTERACTIVE) {
 8009a4e:	b930      	cbnz	r0, 8009a5e <CmdLED+0x12>
    return;
  }

  rc = fetch_uint32_arg(&led);
 8009a50:	4668      	mov	r0, sp
 8009a52:	f000 faa7 	bl	8009fa4 <fetch_uint32_arg>
  if(rc) {
 8009a56:	b128      	cbz	r0, 8009a64 <CmdLED+0x18>
    printf("Missing LED index\n");
 8009a58:	480f      	ldr	r0, [pc, #60]	; (8009a98 <CmdLED+0x4c>)
    return;
  }
    
  rc = fetch_uint32_arg(&val);
  if(rc) {
    printf("Missing state value, 0 for Off, 1 for On\n");
 8009a5a:	f7f6 fd7f 	bl	800055c <puts>
    BSP_LED_On(LEDs[led]);
  } else {
    BSP_LED_Off(LEDs[led]);
  }

} 
 8009a5e:	b003      	add	sp, #12
 8009a60:	f85d fb04 	ldr.w	pc, [sp], #4
  rc = fetch_uint32_arg(&val);
 8009a64:	a801      	add	r0, sp, #4
 8009a66:	f000 fa9d 	bl	8009fa4 <fetch_uint32_arg>
  if(rc) {
 8009a6a:	b108      	cbz	r0, 8009a70 <CmdLED+0x24>
    printf("Missing state value, 0 for Off, 1 for On\n");
 8009a6c:	480b      	ldr	r0, [pc, #44]	; (8009a9c <CmdLED+0x50>)
 8009a6e:	e7f4      	b.n	8009a5a <CmdLED+0xe>
  if((led < 3) || (led > 10)) {
 8009a70:	9900      	ldr	r1, [sp, #0]
 8009a72:	1ecb      	subs	r3, r1, #3
 8009a74:	2b07      	cmp	r3, #7
 8009a76:	d903      	bls.n	8009a80 <CmdLED+0x34>
    printf("Led index of %u is out of the range (3..10)\n",
 8009a78:	4809      	ldr	r0, [pc, #36]	; (8009aa0 <CmdLED+0x54>)
 8009a7a:	f7f6 fd1b 	bl	80004b4 <printf>
    return;
 8009a7e:	e7ee      	b.n	8009a5e <CmdLED+0x12>
    BSP_LED_On(LEDs[led]);
 8009a80:	4a08      	ldr	r2, [pc, #32]	; (8009aa4 <CmdLED+0x58>)
  led -= 3;
 8009a82:	9300      	str	r3, [sp, #0]
    BSP_LED_On(LEDs[led]);
 8009a84:	5cd0      	ldrb	r0, [r2, r3]
  if(val) {
 8009a86:	9b01      	ldr	r3, [sp, #4]
 8009a88:	b113      	cbz	r3, 8009a90 <CmdLED+0x44>
    BSP_LED_On(LEDs[led]);
 8009a8a:	f004 f861 	bl	800db50 <BSP_LED_On>
 8009a8e:	e7e6      	b.n	8009a5e <CmdLED+0x12>
    BSP_LED_Off(LEDs[led]);
 8009a90:	f004 f86c 	bl	800db6c <BSP_LED_Off>
 8009a94:	e7e3      	b.n	8009a5e <CmdLED+0x12>
 8009a96:	bf00      	nop
 8009a98:	0800f000 	.word	0x0800f000
 8009a9c:	0800f012 	.word	0x0800f012
 8009aa0:	0800f03b 	.word	0x0800f03b
 8009aa4:	0800f1d2 	.word	0x0800f1d2

08009aa8 <CmdAccel>:

ADD_CMD("led",CmdLED,"<index> <state> Turn off/on LED")

void CmdAccel(int mode)
{
 8009aa8:	b507      	push	{r0, r1, r2, lr}
  int16_t xyz[3];

  if(mode != CMD_INTERACTIVE) {
 8009aaa:	b958      	cbnz	r0, 8009ac4 <CmdAccel+0x1c>
    return;
  }

  BSP_ACCELERO_GetXYZ(xyz);
 8009aac:	4668      	mov	r0, sp
 8009aae:	f004 f9e5 	bl	800de7c <BSP_ACCELERO_GetXYZ>

  printf("Accelerometer returns:\n"
 8009ab2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8009ab6:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8009aba:	f9bd 1000 	ldrsh.w	r1, [sp]
 8009abe:	4803      	ldr	r0, [pc, #12]	; (8009acc <CmdAccel+0x24>)
 8009ac0:	f7f6 fcf8 	bl	80004b4 <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 xyz[0],xyz[1],xyz[2]);


}
 8009ac4:	b003      	add	sp, #12
 8009ac6:	f85d fb04 	ldr.w	pc, [sp], #4
 8009aca:	bf00      	nop
 8009acc:	0800f068 	.word	0x0800f068

08009ad0 <CmdGyro>:

ADD_CMD("accel", CmdAccel,"                Read Accelerometer");

void CmdGyro(int mode)
{
 8009ad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  float xyz[3];

  if(mode != CMD_INTERACTIVE) {
 8009ad2:	b9e8      	cbnz	r0, 8009b10 <CmdGyro+0x40>
    return;
  }

  BSP_GYRO_GetXYZ(xyz);
 8009ad4:	a801      	add	r0, sp, #4
 8009ad6:	f004 fa0d 	bl	800def4 <BSP_GYRO_GetXYZ>

  printf("Gyroscope returns:\n"
 8009ada:	eddd 7a03 	vldr	s15, [sp, #12]
 8009ade:	480e      	ldr	r0, [pc, #56]	; (8009b18 <CmdGyro+0x48>)
 8009ae0:	eeb0 7a67 	vmov.f32	s14, s15
 8009ae4:	eebe 7acc 	vcvt.s32.f32	s14, s14, #8
 8009ae8:	eddd 7a02 	vldr	s15, [sp, #8]
 8009aec:	ee17 3a10 	vmov	r3, s14
 8009af0:	eeb0 7a67 	vmov.f32	s14, s15
 8009af4:	eebe 7acc 	vcvt.s32.f32	s14, s14, #8
 8009af8:	eddd 7a01 	vldr	s15, [sp, #4]
 8009afc:	ee17 2a10 	vmov	r2, s14
 8009b00:	eeb0 7a67 	vmov.f32	s14, s15
 8009b04:	eebe 7acc 	vcvt.s32.f32	s14, s14, #8
 8009b08:	ee17 1a10 	vmov	r1, s14
 8009b0c:	f7f6 fcd2 	bl	80004b4 <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
	 (int)(xyz[1]*256),
	 (int)(xyz[2]*256));
}
 8009b10:	b005      	add	sp, #20
 8009b12:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b16:	bf00      	nop
 8009b18:	0800f09b 	.word	0x0800f09b

08009b1c <CmdButton>:

ADD_CMD("gyro", CmdGyro,"                Read Gyroscope");

void CmdButton(int mode)
{
 8009b1c:	b508      	push	{r3, lr}
  uint32_t button;

  if(mode != CMD_INTERACTIVE) {
 8009b1e:	b958      	cbnz	r0, 8009b38 <CmdButton+0x1c>
    return;
  }

  button = BSP_PB_GetState(BUTTON_USER);
 8009b20:	f004 f878 	bl	800dc14 <BSP_PB_GetState>
  
  printf("Button is currently: %s\n",
 8009b24:	4a05      	ldr	r2, [pc, #20]	; (8009b3c <CmdButton+0x20>)
 8009b26:	4906      	ldr	r1, [pc, #24]	; (8009b40 <CmdButton+0x24>)
	 button ? "Pressed" : "Released");

  return;
}
 8009b28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  printf("Button is currently: %s\n",
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	bf18      	it	ne
 8009b30:	4611      	movne	r1, r2
 8009b32:	4804      	ldr	r0, [pc, #16]	; (8009b44 <CmdButton+0x28>)
 8009b34:	f7f6 bcbe 	b.w	80004b4 <printf>
}
 8009b38:	bd08      	pop	{r3, pc}
 8009b3a:	bf00      	nop
 8009b3c:	0800f0ca 	.word	0x0800f0ca
 8009b40:	0800f0d2 	.word	0x0800f0d2
 8009b44:	0800f0db 	.word	0x0800f0db

08009b48 <Error_Handler>:
{
 8009b48:	b508      	push	{r3, lr}
  BSP_LED_On(LED6);
 8009b4a:	2003      	movs	r0, #3
 8009b4c:	f004 f800 	bl	800db50 <BSP_LED_On>
  while(1)
 8009b50:	e7fe      	b.n	8009b50 <Error_Handler+0x8>
	...

08009b54 <main>:
{
 8009b54:	b530      	push	{r4, r5, lr}
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009b56:	2301      	movs	r3, #1
{
 8009b58:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009b5a:	e9cd 3306 	strd	r3, r3, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009b62:	2402      	movs	r4, #2
 8009b64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009b68:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8009b6c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8009b6e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8009b72:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8009b74:	f000 ff66 	bl	800aa44 <HAL_RCC_OscConfig>
 8009b78:	b108      	cbz	r0, 8009b7e <main+0x2a>
    Error_Handler();
 8009b7a:	f7ff ffe5 	bl	8009b48 <Error_Handler>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8009b7e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009b80:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8009b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009b88:	e9cd 3004 	strd	r3, r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009b8c:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 8009b8e:	4621      	mov	r1, r4
 8009b90:	a801      	add	r0, sp, #4
 8009b92:	f001 fa35 	bl	800b000 <HAL_RCC_ClockConfig>
 8009b96:	4604      	mov	r4, r0
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	d1ee      	bne.n	8009b7a <main+0x26>
  HAL_Init();
 8009b9c:	f001 fbf0 	bl	800b380 <HAL_Init>
  TerminalInit();  /* Initialize UART and USB */
 8009ba0:	f000 fb2e 	bl	800a200 <TerminalInit>
  for(i=0; i<numLEDs; i++) {
 8009ba4:	4d0f      	ldr	r5, [pc, #60]	; (8009be4 <main+0x90>)
    BSP_LED_Init(LEDs[i]);
 8009ba6:	f815 0b01 	ldrb.w	r0, [r5], #1
  for(i=0; i<numLEDs; i++) {
 8009baa:	3401      	adds	r4, #1
    BSP_LED_Init(LEDs[i]);
 8009bac:	f003 ff9a 	bl	800dae4 <BSP_LED_Init>
  for(i=0; i<numLEDs; i++) {
 8009bb0:	2c08      	cmp	r4, #8
 8009bb2:	d1f8      	bne.n	8009ba6 <main+0x52>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	4608      	mov	r0, r1
 8009bb8:	f003 fff2 	bl	800dba0 <BSP_PB_Init>
  accelRc = BSP_ACCELERO_Init();
 8009bbc:	f004 f93e 	bl	800de3c <BSP_ACCELERO_Init>
  if(accelRc != ACCELERO_OK) {
 8009bc0:	b118      	cbz	r0, 8009bca <main+0x76>
    printf("Failed to initialize acceleromter\n");
 8009bc2:	4809      	ldr	r0, [pc, #36]	; (8009be8 <main+0x94>)
 8009bc4:	f7f6 fcca 	bl	800055c <puts>
 8009bc8:	e7d7      	b.n	8009b7a <main+0x26>
  gyroRc = BSP_GYRO_Init();
 8009bca:	f004 f95f 	bl	800de8c <BSP_GYRO_Init>
  if(gyroRc != GYRO_OK) {
 8009bce:	b108      	cbz	r0, 8009bd4 <main+0x80>
    printf("Failed to initialize Gyroscope\n");
 8009bd0:	4806      	ldr	r0, [pc, #24]	; (8009bec <main+0x98>)
 8009bd2:	e7f7      	b.n	8009bc4 <main+0x70>
  my_Init();
 8009bd4:	f7f6 fbc2 	bl	800035c <my_Init>
    TaskInput();
 8009bd8:	f000 f946 	bl	8009e68 <TaskInput>
    my_Loop();
 8009bdc:	f7f6 fbbc 	bl	8000358 <my_Loop>
  while(1) {
 8009be0:	e7fa      	b.n	8009bd8 <main+0x84>
 8009be2:	bf00      	nop
 8009be4:	0800f1d2 	.word	0x0800f1d2
 8009be8:	0800f0f4 	.word	0x0800f0f4
 8009bec:	0800f116 	.word	0x0800f116

08009bf0 <SysTick_Handler>:
{
 8009bf0:	b508      	push	{r3, lr}
    HAL_IncTick();
 8009bf2:	f001 fbd7 	bl	800b3a4 <HAL_IncTick>
}
 8009bf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    my_Tick();
 8009bfa:	f7f6 bba3 	b.w	8000344 <my_Tick>
	...

08009c00 <_jp_A3>:
int jp_led_demo_a2(int count, int delay);       //function declaration for assignment 2 defined in asm file.

int jp_led_demo_a3(int delay, char* pattern, int target); //function declaration for assignment 3

void _jp_A3(int action)
{
 8009c00:	b510      	push	{r4, lr}
if(action==CMD_SHORT_HELP) return;
 8009c02:	2801      	cmp	r0, #1
{
 8009c04:	b086      	sub	sp, #24
if(action==CMD_SHORT_HELP) return;
 8009c06:	d028      	beq.n	8009c5a <_jp_A3+0x5a>
if(action==CMD_LONG_HELP) {
 8009c08:	2802      	cmp	r0, #2
 8009c0a:	d105      	bne.n	8009c18 <_jp_A3+0x18>
printf("Assignment 3\n\n" "This command is used for Assignment 3.\n");
 8009c0c:	4814      	ldr	r0, [pc, #80]	; (8009c60 <_jp_A3+0x60>)
 user_input_target = 2;
 } 
 

printf("A3 Returned: %d\n", jp_led_demo_a3(user_input_delay, destptr_pattern, user_input_target));  //Prints return value from this function defined in asm file.
}
 8009c0e:	b006      	add	sp, #24
 8009c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
printf("Assignment 3\n\n" "This command is used for Assignment 3.\n");
 8009c14:	f7f6 bca2 	b.w	800055c <puts>
 fetch_status_delay = fetch_uint32_arg(&user_input_delay);
 8009c18:	a801      	add	r0, sp, #4
 8009c1a:	f000 f9c3 	bl	8009fa4 <fetch_uint32_arg>
 if(fetch_status_delay) {
 8009c1e:	b110      	cbz	r0, 8009c26 <_jp_A3+0x26>
 user_input_delay = 0xFFFFFF;
 8009c20:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8009c24:	9301      	str	r3, [sp, #4]
fetch_status_pattern = fetch_string_arg(&destptr_pattern);
 8009c26:	a802      	add	r0, sp, #8
 8009c28:	f000 f9d0 	bl	8009fcc <fetch_string_arg>
if(fetch_status_pattern) {
 8009c2c:	ac03      	add	r4, sp, #12
 8009c2e:	b128      	cbz	r0, 8009c3c <_jp_A3+0x3c>
sprintf(pattern, "%d", 43567011);
 8009c30:	4a0c      	ldr	r2, [pc, #48]	; (8009c64 <_jp_A3+0x64>)
 8009c32:	490d      	ldr	r1, [pc, #52]	; (8009c68 <_jp_A3+0x68>)
 8009c34:	4620      	mov	r0, r4
 8009c36:	f7f6 fd6f 	bl	8000718 <sprintf>
destptr_pattern = pattern;
 8009c3a:	9402      	str	r4, [sp, #8]
 fetch_status_target = fetch_uint32_arg(&user_input_target);
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	f000 f9b1 	bl	8009fa4 <fetch_uint32_arg>
 if(fetch_status_target) {
 8009c42:	b108      	cbz	r0, 8009c48 <_jp_A3+0x48>
 user_input_target = 2;
 8009c44:	2302      	movs	r3, #2
 8009c46:	9303      	str	r3, [sp, #12]
printf("A3 Returned: %d\n", jp_led_demo_a3(user_input_delay, destptr_pattern, user_input_target));  //Prints return value from this function defined in asm file.
 8009c48:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009c4c:	9801      	ldr	r0, [sp, #4]
 8009c4e:	f7f6 fafb 	bl	8000248 <jp_led_demo_a3>
 8009c52:	4601      	mov	r1, r0
 8009c54:	4805      	ldr	r0, [pc, #20]	; (8009c6c <_jp_A3+0x6c>)
 8009c56:	f7f6 fc2d 	bl	80004b4 <printf>
}
 8009c5a:	b006      	add	sp, #24
 8009c5c:	bd10      	pop	{r4, pc}
 8009c5e:	bf00      	nop
 8009c60:	0800f1da 	.word	0x0800f1da
 8009c64:	0298c7a3 	.word	0x0298c7a3
 8009c68:	0800f20f 	.word	0x0800f20f
 8009c6c:	0800f212 	.word	0x0800f212

08009c70 <AddTest>:

////////////////////////////////////////// Past Assignments & Labs ////////////////////////////////////////

void AddTest(int action)
{
if(action==CMD_SHORT_HELP) return;
 8009c70:	2801      	cmp	r0, #1
{
 8009c72:	b507      	push	{r0, r1, r2, lr}
if(action==CMD_SHORT_HELP) return;
 8009c74:	d017      	beq.n	8009ca6 <AddTest+0x36>
if(action==CMD_LONG_HELP) {
 8009c76:	2802      	cmp	r0, #2
 8009c78:	d105      	bne.n	8009c86 <AddTest+0x16>
printf("Addition Test\n\n" "This command tests new addition function\n");
 8009c7a:	480c      	ldr	r0, [pc, #48]	; (8009cac <AddTest+0x3c>)
delay = 0xFFFFFF;
}
// When we call our function, pass the delay value.
// printf(“<<< here is where we call add_test – can you add a third parameter? >>>”);
printf("add_test returned: %d\n", add_test(99, 87, delay));
}
 8009c7c:	b003      	add	sp, #12
 8009c7e:	f85d eb04 	ldr.w	lr, [sp], #4
printf("Addition Test\n\n" "This command tests new addition function\n");
 8009c82:	f7f6 bc6b 	b.w	800055c <puts>
fetch_status = fetch_uint32_arg(&delay);
 8009c86:	a801      	add	r0, sp, #4
 8009c88:	f000 f98c 	bl	8009fa4 <fetch_uint32_arg>
if(fetch_status) {
 8009c8c:	b110      	cbz	r0, 8009c94 <AddTest+0x24>
delay = 0xFFFFFF;
 8009c8e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8009c92:	9301      	str	r3, [sp, #4]
printf("add_test returned: %d\n", add_test(99, 87, delay));
 8009c94:	2157      	movs	r1, #87	; 0x57
 8009c96:	9a01      	ldr	r2, [sp, #4]
 8009c98:	2063      	movs	r0, #99	; 0x63
 8009c9a:	f7f6 faf9 	bl	8000290 <add_test>
 8009c9e:	4601      	mov	r1, r0
 8009ca0:	4803      	ldr	r0, [pc, #12]	; (8009cb0 <AddTest+0x40>)
 8009ca2:	f7f6 fc07 	bl	80004b4 <printf>
}
 8009ca6:	b003      	add	sp, #12
 8009ca8:	f85d fb04 	ldr.w	pc, [sp], #4
 8009cac:	0800f223 	.word	0x0800f223
 8009cb0:	0800f25b 	.word	0x0800f25b

08009cb4 <_jp_A2>:
 // Fetch_uint32_arg gets two parameters : count and delay


void _jp_A2(int action)
{
if(action==CMD_SHORT_HELP) return;
 8009cb4:	2801      	cmp	r0, #1
{
 8009cb6:	b507      	push	{r0, r1, r2, lr}
if(action==CMD_SHORT_HELP) return;
 8009cb8:	d01c      	beq.n	8009cf4 <_jp_A2+0x40>
if(action==CMD_LONG_HELP) {
 8009cba:	2802      	cmp	r0, #2
 8009cbc:	d105      	bne.n	8009cca <_jp_A2+0x16>
printf("Addition Test\n\n" "This command tests new addition function\n");
 8009cbe:	480f      	ldr	r0, [pc, #60]	; (8009cfc <_jp_A2+0x48>)
 user_input2 = 0xFFFFFF;
 } 
 

printf("A2 Returned: %d\n", jp_led_demo_a2(user_input1, user_input2));  //Prints return value from this function defined in asm file.
}
 8009cc0:	b003      	add	sp, #12
 8009cc2:	f85d eb04 	ldr.w	lr, [sp], #4
printf("Addition Test\n\n" "This command tests new addition function\n");
 8009cc6:	f7f6 bc49 	b.w	800055c <puts>
 fetch_status1 = fetch_uint32_arg(&user_input1);
 8009cca:	4668      	mov	r0, sp
 8009ccc:	f000 f96a 	bl	8009fa4 <fetch_uint32_arg>
 if(fetch_status1) {
 8009cd0:	b108      	cbz	r0, 8009cd6 <_jp_A2+0x22>
 user_input1 = 2;
 8009cd2:	2302      	movs	r3, #2
 8009cd4:	9300      	str	r3, [sp, #0]
 fetch_status2 = fetch_uint32_arg(&user_input2);
 8009cd6:	a801      	add	r0, sp, #4
 8009cd8:	f000 f964 	bl	8009fa4 <fetch_uint32_arg>
 if(fetch_status2) {
 8009cdc:	b110      	cbz	r0, 8009ce4 <_jp_A2+0x30>
 user_input2 = 0xFFFFFF;
 8009cde:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8009ce2:	9301      	str	r3, [sp, #4]
printf("A2 Returned: %d\n", jp_led_demo_a2(user_input1, user_input2));  //Prints return value from this function defined in asm file.
 8009ce4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ce8:	f7f6 fab4 	bl	8000254 <jp_led_demo_a2>
 8009cec:	4601      	mov	r1, r0
 8009cee:	4804      	ldr	r0, [pc, #16]	; (8009d00 <_jp_A2+0x4c>)
 8009cf0:	f7f6 fbe0 	bl	80004b4 <printf>
}
 8009cf4:	b003      	add	sp, #12
 8009cf6:	f85d fb04 	ldr.w	pc, [sp], #4
 8009cfa:	bf00      	nop
 8009cfc:	0800f223 	.word	0x0800f223
 8009d00:	0800f272 	.word	0x0800f272

08009d04 <CmdTest>:
int mytest( int x );

void CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return;
 8009d04:	2801      	cmp	r0, #1
{
 8009d06:	b508      	push	{r3, lr}
  if(action==CMD_SHORT_HELP) return;
 8009d08:	d00f      	beq.n	8009d2a <CmdTest+0x26>
  if(action==CMD_LONG_HELP) {
 8009d0a:	2802      	cmp	r0, #2
 8009d0c:	d104      	bne.n	8009d18 <CmdTest+0x14>
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
}
 8009d0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printf("testasm\n\n"
 8009d12:	4806      	ldr	r0, [pc, #24]	; (8009d2c <CmdTest+0x28>)
 8009d14:	f7f6 bc22 	b.w	800055c <puts>
  printf("ret val = %d\n", mytest( 77  ) );
 8009d18:	204d      	movs	r0, #77	; 0x4d
 8009d1a:	f7f6 fb09 	bl	8000330 <mytest>
}
 8009d1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  printf("ret val = %d\n", mytest( 77  ) );
 8009d22:	4601      	mov	r1, r0
 8009d24:	4802      	ldr	r0, [pc, #8]	; (8009d30 <CmdTest+0x2c>)
 8009d26:	f7f6 bbc5 	b.w	80004b4 <printf>
}
 8009d2a:	bd08      	pop	{r3, pc}
 8009d2c:	0800f2dd 	.word	0x0800f2dd
 8009d30:	0800f316 	.word	0x0800f316

08009d34 <CmdW>:
	 (unsigned int)(*((uint32_t *)addr)));
}


void CmdW(int mode)
{
 8009d34:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return;
 8009d36:	b940      	cbnz	r0, 8009d4a <CmdW+0x16>

  fetch_uint32_arg(&addr);
 8009d38:	4668      	mov	r0, sp
 8009d3a:	f000 f933 	bl	8009fa4 <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 8009d3e:	a801      	add	r0, sp, #4
 8009d40:	f000 f930 	bl	8009fa4 <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 8009d44:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009d48:	601a      	str	r2, [r3, #0]
}
 8009d4a:	b003      	add	sp, #12
 8009d4c:	f85d fb04 	ldr.w	pc, [sp], #4

08009d50 <CmdR>:
{
 8009d50:	b507      	push	{r0, r1, r2, lr}
  if(mode != CMD_INTERACTIVE) return;
 8009d52:	b938      	cbnz	r0, 8009d64 <CmdR+0x14>
  fetch_uint32_arg(&addr);
 8009d54:	a801      	add	r0, sp, #4
 8009d56:	f000 f925 	bl	8009fa4 <fetch_uint32_arg>
  printf("0x%08X: 0x%08X\n",(unsigned int)addr, 
 8009d5a:	9901      	ldr	r1, [sp, #4]
 8009d5c:	4803      	ldr	r0, [pc, #12]	; (8009d6c <CmdR+0x1c>)
 8009d5e:	680a      	ldr	r2, [r1, #0]
 8009d60:	f7f6 fba8 	bl	80004b4 <printf>
}
 8009d64:	b003      	add	sp, #12
 8009d66:	f85d fb04 	ldr.w	pc, [sp], #4
 8009d6a:	bf00      	nop
 8009d6c:	0800f33a 	.word	0x0800f33a

08009d70 <parse>:

#define SEPS " \t\n\v\f\r"

/* Parse the buffer and call commands */ 
int parse(char *buf, int len, const parse_table *table)
{
 8009d70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d72:	4615      	mov	r5, r2
  char *p;
  int i,arg;
  const parse_table *t;
  
  /* Check for silly things */
  if(buf == NULL) {
 8009d74:	b930      	cbnz	r0, 8009d84 <parse+0x14>
    printf("NULL buf pointer passed to %s()\n",__FUNCTION__);
 8009d76:	4931      	ldr	r1, [pc, #196]	; (8009e3c <parse+0xcc>)
 8009d78:	4831      	ldr	r0, [pc, #196]	; (8009e40 <parse+0xd0>)
      t->func(arg);
      return 0;
    }
  }

  printf("Command `%s' not found. Type `help' for online help\n",p);
 8009d7a:	f7f6 fb9b 	bl	80004b4 <printf>
    return -1;
 8009d7e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009d82:	e032      	b.n	8009dea <parse+0x7a>
  if(len==0) {
 8009d84:	b911      	cbnz	r1, 8009d8c <parse+0x1c>
    printf("len == 0 in %s\n",__FUNCTION__);
 8009d86:	492d      	ldr	r1, [pc, #180]	; (8009e3c <parse+0xcc>)
 8009d88:	482e      	ldr	r0, [pc, #184]	; (8009e44 <parse+0xd4>)
 8009d8a:	e7f6      	b.n	8009d7a <parse+0xa>
  if(table == NULL) {
 8009d8c:	b182      	cbz	r2, 8009db0 <parse+0x40>
 8009d8e:	1e4c      	subs	r4, r1, #1
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 8009d90:	492d      	ldr	r1, [pc, #180]	; (8009e48 <parse+0xd8>)
 8009d92:	4603      	mov	r3, r0
 8009d94:	1c66      	adds	r6, r4, #1
 8009d96:	4618      	mov	r0, r3
 8009d98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d9c:	d00d      	beq.n	8009dba <parse+0x4a>
 8009d9e:	2a00      	cmp	r2, #0
 8009da0:	d0ed      	beq.n	8009d7e <parse+0xe>
 8009da2:	5c52      	ldrb	r2, [r2, r1]
 8009da4:	0712      	lsls	r2, r2, #28
 8009da6:	f104 36ff 	add.w	r6, r4, #4294967295	; 0xffffffff
 8009daa:	d404      	bmi.n	8009db6 <parse+0x46>
  if((i==0) || (*buf==0)) {
 8009dac:	b934      	cbnz	r4, 8009dbc <parse+0x4c>
 8009dae:	e7e6      	b.n	8009d7e <parse+0xe>
    printf("NULL table pointer passed to %s()\n",__FUNCTION__);
 8009db0:	4922      	ldr	r1, [pc, #136]	; (8009e3c <parse+0xcc>)
 8009db2:	4826      	ldr	r0, [pc, #152]	; (8009e4c <parse+0xdc>)
 8009db4:	e7e1      	b.n	8009d7a <parse+0xa>
 8009db6:	4634      	mov	r4, r6
 8009db8:	e7ec      	b.n	8009d94 <parse+0x24>
  if((i==0) || (*buf==0)) {
 8009dba:	b1b2      	cbz	r2, 8009dea <parse+0x7a>
  p = strtok(buf,SEPS);
 8009dbc:	4924      	ldr	r1, [pc, #144]	; (8009e50 <parse+0xe0>)
 8009dbe:	f7f6 fdcd 	bl	800095c <strtok>
  if(p==NULL) {
 8009dc2:	4606      	mov	r6, r0
 8009dc4:	b910      	cbnz	r0, 8009dcc <parse+0x5c>
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 8009dc6:	491d      	ldr	r1, [pc, #116]	; (8009e3c <parse+0xcc>)
 8009dc8:	4822      	ldr	r0, [pc, #136]	; (8009e54 <parse+0xe4>)
 8009dca:	e7d6      	b.n	8009d7a <parse+0xa>
  if(strcasecmp(p,"help") == 0) {
 8009dcc:	4922      	ldr	r1, [pc, #136]	; (8009e58 <parse+0xe8>)
 8009dce:	f7f6 fcc3 	bl	8000758 <strcasecmp>
 8009dd2:	4604      	mov	r4, r0
 8009dd4:	b9c8      	cbnz	r0, 8009e0a <parse+0x9a>
    p = strtok(NULL,SEPS);
 8009dd6:	491e      	ldr	r1, [pc, #120]	; (8009e50 <parse+0xe0>)
 8009dd8:	f7f6 fdc0 	bl	800095c <strtok>
    if(p == NULL) {
 8009ddc:	4606      	mov	r6, r0
 8009dde:	b9d0      	cbnz	r0, 8009e16 <parse+0xa6>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 8009de0:	4e1e      	ldr	r6, [pc, #120]	; (8009e5c <parse+0xec>)
 8009de2:	350c      	adds	r5, #12
      for(t=table; t->cmdname!=NULL; t++) {
 8009de4:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 8009de8:	b911      	cbnz	r1, 8009df0 <parse+0x80>
  return -1;
}
 8009dea:	4620      	mov	r0, r4
 8009dec:	b003      	add	sp, #12
 8009dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(t->help != NULL) {
 8009df0:	f855 2c04 	ldr.w	r2, [r5, #-4]
 8009df4:	b122      	cbz	r2, 8009e00 <parse+0x90>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 8009df6:	4630      	mov	r0, r6
 8009df8:	f7f6 fb5c 	bl	80004b4 <printf>
      for(t=table; t->cmdname!=NULL; t++) {
 8009dfc:	350c      	adds	r5, #12
 8009dfe:	e7f1      	b.n	8009de4 <parse+0x74>
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 8009e00:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8009e04:	2001      	movs	r0, #1
 8009e06:	4798      	blx	r3
 8009e08:	e7f8      	b.n	8009dfc <parse+0x8c>
  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 8009e0a:	2700      	movs	r7, #0
  for(t=table; t->cmdname!=NULL; t++) {
 8009e0c:	6829      	ldr	r1, [r5, #0]
 8009e0e:	b921      	cbnz	r1, 8009e1a <parse+0xaa>
  printf("Command `%s' not found. Type `help' for online help\n",p);
 8009e10:	4813      	ldr	r0, [pc, #76]	; (8009e60 <parse+0xf0>)
 8009e12:	4631      	mov	r1, r6
 8009e14:	e7b1      	b.n	8009d7a <parse+0xa>
      arg = CMD_LONG_HELP;
 8009e16:	2702      	movs	r7, #2
  for(t=table; t->cmdname!=NULL; t++) {
 8009e18:	e7f8      	b.n	8009e0c <parse+0x9c>
    if(strcasecmp(p,t->cmdname) == 0) {
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	9101      	str	r1, [sp, #4]
 8009e1e:	f7f6 fc9b 	bl	8000758 <strcasecmp>
 8009e22:	9901      	ldr	r1, [sp, #4]
 8009e24:	4604      	mov	r4, r0
 8009e26:	b938      	cbnz	r0, 8009e38 <parse+0xc8>
      if(arg == CMD_LONG_HELP) {	
 8009e28:	b117      	cbz	r7, 8009e30 <parse+0xc0>
	printf("%s:\n",t->cmdname);
 8009e2a:	480e      	ldr	r0, [pc, #56]	; (8009e64 <parse+0xf4>)
 8009e2c:	f7f6 fb42 	bl	80004b4 <printf>
      t->func(arg);
 8009e30:	686b      	ldr	r3, [r5, #4]
 8009e32:	4638      	mov	r0, r7
 8009e34:	4798      	blx	r3
      return 0;
 8009e36:	e7d8      	b.n	8009dea <parse+0x7a>
  for(t=table; t->cmdname!=NULL; t++) {
 8009e38:	350c      	adds	r5, #12
 8009e3a:	e7e7      	b.n	8009e0c <parse+0x9c>
 8009e3c:	0800f466 	.word	0x0800f466
 8009e40:	0800f385 	.word	0x0800f385
 8009e44:	0800f3a6 	.word	0x0800f3a6
 8009e48:	0800ed4d 	.word	0x0800ed4d
 8009e4c:	0800f3b6 	.word	0x0800f3b6
 8009e50:	0800f3d9 	.word	0x0800f3d9
 8009e54:	0800f3e0 	.word	0x0800f3e0
 8009e58:	0800f410 	.word	0x0800f410
 8009e5c:	0800f415 	.word	0x0800f415
 8009e60:	0800f426 	.word	0x0800f426
 8009e64:	0800f421 	.word	0x0800f421

08009e68 <TaskInput>:
{
 8009e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(printPrompt) {
 8009e6a:	4d43      	ldr	r5, [pc, #268]	; (8009f78 <TaskInput+0x110>)
 8009e6c:	682b      	ldr	r3, [r5, #0]
 8009e6e:	b123      	cbz	r3, 8009e7a <TaskInput+0x12>
    printf("ARMON>");
 8009e70:	4842      	ldr	r0, [pc, #264]	; (8009f7c <TaskInput+0x114>)
 8009e72:	f7f6 fb1f 	bl	80004b4 <printf>
    printPrompt = 0;
 8009e76:	2300      	movs	r3, #0
 8009e78:	602b      	str	r3, [r5, #0]
  rc = TerminalReadAnyNonBlock(&c);
 8009e7a:	f10d 0007 	add.w	r0, sp, #7
 8009e7e:	f000 fa30 	bl	800a2e2 <TerminalReadAnyNonBlock>
  if(rc) {
 8009e82:	b990      	cbnz	r0, 8009eaa <TaskInput+0x42>
  if(((c == 010) || (c == 0x7f)) && count) {
 8009e84:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009e88:	2b08      	cmp	r3, #8
 8009e8a:	d001      	beq.n	8009e90 <TaskInput+0x28>
 8009e8c:	2b7f      	cmp	r3, #127	; 0x7f
 8009e8e:	d10e      	bne.n	8009eae <TaskInput+0x46>
 8009e90:	4c3b      	ldr	r4, [pc, #236]	; (8009f80 <TaskInput+0x118>)
 8009e92:	6822      	ldr	r2, [r4, #0]
 8009e94:	b15a      	cbz	r2, 8009eae <TaskInput+0x46>
    printf("\010 \010"); /* Obliterate character */
 8009e96:	483b      	ldr	r0, [pc, #236]	; (8009f84 <TaskInput+0x11c>)
 8009e98:	f7f6 fb0c 	bl	80004b4 <printf>
    buf--;     /* Then remove it from the buffer */
 8009e9c:	4a3a      	ldr	r2, [pc, #232]	; (8009f88 <TaskInput+0x120>)
 8009e9e:	6813      	ldr	r3, [r2, #0]
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	6013      	str	r3, [r2, #0]
    count--;   /* Then keep track of how many are left */
 8009ea4:	6823      	ldr	r3, [r4, #0]
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	6023      	str	r3, [r4, #0]
}
 8009eaa:	b003      	add	sp, #12
 8009eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if(c == '!') { /* '!' repeats the last command */
 8009eae:	2b21      	cmp	r3, #33	; 0x21
 8009eb0:	d139      	bne.n	8009f26 <TaskInput+0xbe>
    if(saved) {  /* But only if we have something saved */
 8009eb2:	4b36      	ldr	r3, [pc, #216]	; (8009f8c <TaskInput+0x124>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d0f7      	beq.n	8009eaa <TaskInput+0x42>
      strcpy(input,input_b);  /* Restore the command */
 8009eba:	4c35      	ldr	r4, [pc, #212]	; (8009f90 <TaskInput+0x128>)
 8009ebc:	4935      	ldr	r1, [pc, #212]	; (8009f94 <TaskInput+0x12c>)
 8009ebe:	4620      	mov	r0, r4
 8009ec0:	f7f6 fc70 	bl	80007a4 <strcpy>
      printf("%s",input);
 8009ec4:	4621      	mov	r1, r4
 8009ec6:	4834      	ldr	r0, [pc, #208]	; (8009f98 <TaskInput+0x130>)
 8009ec8:	f7f6 faf4 	bl	80004b4 <printf>
      count = strlen(input);
 8009ecc:	4620      	mov	r0, r4
 8009ece:	f7f6 fcd7 	bl	8000880 <strlen>
 8009ed2:	4b2b      	ldr	r3, [pc, #172]	; (8009f80 <TaskInput+0x118>)
 8009ed4:	6018      	str	r0, [r3, #0]
      buf = input+count;
 8009ed6:	4b2c      	ldr	r3, [pc, #176]	; (8009f88 <TaskInput+0x120>)
 8009ed8:	4404      	add	r4, r0
 8009eda:	601c      	str	r4, [r3, #0]
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 8009edc:	4e28      	ldr	r6, [pc, #160]	; (8009f80 <TaskInput+0x118>)
 8009ede:	4c2a      	ldr	r4, [pc, #168]	; (8009f88 <TaskInput+0x120>)
    printf("\n");
 8009ee0:	200a      	movs	r0, #10
 8009ee2:	f7f6 faff 	bl	80004e4 <putchar>
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 8009ee6:	6823      	ldr	r3, [r4, #0]
 8009ee8:	6830      	ldr	r0, [r6, #0]
 8009eea:	2200      	movs	r2, #0
 8009eec:	4619      	mov	r1, r3
 8009eee:	eba0 0c03 	sub.w	ip, r0, r3
 8009ef2:	4696      	mov	lr, r2
 8009ef4:	eb01 070c 	add.w	r7, r1, ip
 8009ef8:	2f4f      	cmp	r7, #79	; 0x4f
 8009efa:	d938      	bls.n	8009f6e <TaskInput+0x106>
 8009efc:	2850      	cmp	r0, #80	; 0x50
 8009efe:	f1c0 0150 	rsb	r1, r0, #80	; 0x50
 8009f02:	bf88      	it	hi
 8009f04:	2100      	movhi	r1, #0
 8009f06:	440b      	add	r3, r1
 8009f08:	b102      	cbz	r2, 8009f0c <TaskInput+0xa4>
 8009f0a:	6023      	str	r3, [r4, #0]
    count = 0;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	6033      	str	r3, [r6, #0]
    parse(input, sizeof(input), Commands);
 8009f10:	4b22      	ldr	r3, [pc, #136]	; (8009f9c <TaskInput+0x134>)
 8009f12:	4e1f      	ldr	r6, [pc, #124]	; (8009f90 <TaskInput+0x128>)
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	2150      	movs	r1, #80	; 0x50
 8009f18:	4630      	mov	r0, r6
 8009f1a:	f7ff ff29 	bl	8009d70 <parse>
    printPrompt = 1;
 8009f1e:	2301      	movs	r3, #1
    buf = input;
 8009f20:	6026      	str	r6, [r4, #0]
    printPrompt = 1;
 8009f22:	602b      	str	r3, [r5, #0]
 8009f24:	e7c1      	b.n	8009eaa <TaskInput+0x42>
  } else if(isprint((unsigned int)c)) {
 8009f26:	4a1e      	ldr	r2, [pc, #120]	; (8009fa0 <TaskInput+0x138>)
 8009f28:	5c9a      	ldrb	r2, [r3, r2]
 8009f2a:	f012 0297 	ands.w	r2, r2, #151	; 0x97
 8009f2e:	d011      	beq.n	8009f54 <TaskInput+0xec>
    if(count >= sizeof(input)) {
 8009f30:	4913      	ldr	r1, [pc, #76]	; (8009f80 <TaskInput+0x118>)
 8009f32:	680a      	ldr	r2, [r1, #0]
 8009f34:	2a4f      	cmp	r2, #79	; 0x4f
 8009f36:	d903      	bls.n	8009f40 <TaskInput+0xd8>
      printf("\x07"); /* Beep */
 8009f38:	2007      	movs	r0, #7
      printf("%c",c);
 8009f3a:	f7f6 fad3 	bl	80004e4 <putchar>
 8009f3e:	e7b4      	b.n	8009eaa <TaskInput+0x42>
      *buf++ = c;
 8009f40:	4c11      	ldr	r4, [pc, #68]	; (8009f88 <TaskInput+0x120>)
 8009f42:	6820      	ldr	r0, [r4, #0]
      count++;
 8009f44:	3201      	adds	r2, #1
      *buf++ = c;
 8009f46:	1c45      	adds	r5, r0, #1
 8009f48:	7003      	strb	r3, [r0, #0]
      printf("%c",c);
 8009f4a:	f89d 0007 	ldrb.w	r0, [sp, #7]
      *buf++ = c;
 8009f4e:	6025      	str	r5, [r4, #0]
      count++;
 8009f50:	600a      	str	r2, [r1, #0]
      printf("%c",c);
 8009f52:	e7f2      	b.n	8009f3a <TaskInput+0xd2>
  } else if(c == '\r') {
 8009f54:	2b0d      	cmp	r3, #13
 8009f56:	d1a8      	bne.n	8009eaa <TaskInput+0x42>
    *buf = '\0';
 8009f58:	4b0b      	ldr	r3, [pc, #44]	; (8009f88 <TaskInput+0x120>)
    strcpy(input_b,input);
 8009f5a:	490d      	ldr	r1, [pc, #52]	; (8009f90 <TaskInput+0x128>)
    *buf = '\0';
 8009f5c:	681b      	ldr	r3, [r3, #0]
    strcpy(input_b,input);
 8009f5e:	480d      	ldr	r0, [pc, #52]	; (8009f94 <TaskInput+0x12c>)
    *buf = '\0';
 8009f60:	701a      	strb	r2, [r3, #0]
    strcpy(input_b,input);
 8009f62:	f7f6 fc1f 	bl	80007a4 <strcpy>
    saved = 1;
 8009f66:	4b09      	ldr	r3, [pc, #36]	; (8009f8c <TaskInput+0x124>)
 8009f68:	2201      	movs	r2, #1
 8009f6a:	601a      	str	r2, [r3, #0]
 8009f6c:	e7b6      	b.n	8009edc <TaskInput+0x74>
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 8009f6e:	f801 eb01 	strb.w	lr, [r1], #1
 8009f72:	2201      	movs	r2, #1
 8009f74:	e7be      	b.n	8009ef4 <TaskInput+0x8c>
 8009f76:	bf00      	nop
 8009f78:	200009bc 	.word	0x200009bc
 8009f7c:	0800f45b 	.word	0x0800f45b
 8009f80:	20000c78 	.word	0x20000c78
 8009f84:	0800f462 	.word	0x0800f462
 8009f88:	200009b8 	.word	0x200009b8
 8009f8c:	20000d1c 	.word	0x20000d1c
 8009f90:	20000c7c 	.word	0x20000c7c
 8009f94:	20000ccc 	.word	0x20000ccc
 8009f98:	0800f757 	.word	0x0800f757
 8009f9c:	200009b4 	.word	0x200009b4
 8009fa0:	0800ed4d 	.word	0x0800ed4d

08009fa4 <fetch_uint32_arg>:
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 8009fa4:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 8009fa6:	4908      	ldr	r1, [pc, #32]	; (8009fc8 <fetch_uint32_arg+0x24>)
{
 8009fa8:	4604      	mov	r4, r0
  p = strtok(NULL,SEPS);
 8009faa:	2000      	movs	r0, #0
 8009fac:	f7f6 fcd6 	bl	800095c <strtok>
  if(p == NULL) {
 8009fb0:	b130      	cbz	r0, 8009fc0 <fetch_uint32_arg+0x1c>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	4611      	mov	r1, r2
 8009fb6:	f7f6 fdbb 	bl	8000b30 <strtoul>
 8009fba:	6020      	str	r0, [r4, #0]
  return 0;
 8009fbc:	2000      	movs	r0, #0
}     
 8009fbe:	bd10      	pop	{r4, pc}
    return -1;
 8009fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fc4:	e7fb      	b.n	8009fbe <fetch_uint32_arg+0x1a>
 8009fc6:	bf00      	nop
 8009fc8:	0800f3d9 	.word	0x0800f3d9

08009fcc <fetch_string_arg>:

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 8009fcc:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 8009fce:	4906      	ldr	r1, [pc, #24]	; (8009fe8 <fetch_string_arg+0x1c>)
{
 8009fd0:	4604      	mov	r4, r0
  p = strtok(NULL,SEPS);
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	f7f6 fcc2 	bl	800095c <strtok>
  if(p == NULL) {
 8009fd8:	b110      	cbz	r0, 8009fe0 <fetch_string_arg+0x14>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 8009fda:	6020      	str	r0, [r4, #0]
  return 0;
 8009fdc:	2000      	movs	r0, #0
}
 8009fde:	bd10      	pop	{r4, pc}
    return -1;
 8009fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fe4:	e7fb      	b.n	8009fde <fetch_string_arg+0x12>
 8009fe6:	bf00      	nop
 8009fe8:	0800f3d9 	.word	0x0800f3d9

08009fec <DumpBuffer>:

#define BYTES_PER_LINE 16

/* Dump a buffer in HEX with the address as given */
void DumpBuffer(uint8_t *buffer, uint32_t count, uint32_t address)
{
 8009fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff0:	b089      	sub	sp, #36	; 0x24
 8009ff2:	e9cd 0200 	strd	r0, r2, [sp]
  uint32_t i;
  uint8_t buf[BYTES_PER_LINE+1],*bufp;   /* Buffer to assemble printed chars */
  uint8_t *p,c;

  if(count == 0) return;
 8009ff6:	460c      	mov	r4, r1
 8009ff8:	2900      	cmp	r1, #0
 8009ffa:	d040      	beq.n	800a07e <DumpBuffer+0x92>

  p = buffer;
  bufp = buf;
 8009ffc:	af03      	add	r7, sp, #12
  /* dump the requested number of bytes in hex. */
  for(i=0; i<count; i++) {
    if((i% BYTES_PER_LINE) == 0) {
      printf("%08x:",(unsigned int)address);
 8009ffe:	f8df 9094 	ldr.w	r9, [pc, #148]	; 800a094 <DumpBuffer+0xa8>
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 800a002:	f8df a094 	ldr.w	sl, [pc, #148]	; 800a098 <DumpBuffer+0xac>
  for(i=0; i<count; i++) {
 800a006:	2500      	movs	r5, #0
 800a008:	463e      	mov	r6, r7
 800a00a:	9b01      	ldr	r3, [sp, #4]
    if((i% BYTES_PER_LINE) == 0) {
 800a00c:	f015 0b0f 	ands.w	fp, r5, #15
 800a010:	eb03 0105 	add.w	r1, r3, r5
 800a014:	d136      	bne.n	800a084 <DumpBuffer+0x98>
      printf("%08x:",(unsigned int)address);
 800a016:	4648      	mov	r0, r9
 800a018:	f7f6 fa4c 	bl	80004b4 <printf>
      bufp = buf;
 800a01c:	46b0      	mov	r8, r6
    c = *p++;
 800a01e:	9b00      	ldr	r3, [sp, #0]
 800a020:	5d58      	ldrb	r0, [r3, r5]
    if(isprint(c)) {
 800a022:	4b19      	ldr	r3, [pc, #100]	; (800a088 <DumpBuffer+0x9c>)
 800a024:	f810 c003 	ldrb.w	ip, [r0, r3]
      *bufp++ = c; /* Stick in the character */
 800a028:	4647      	mov	r7, r8
      *bufp++ = '.';
 800a02a:	f01c 0f97 	tst.w	ip, #151	; 0x97
    if(isprint(c)) {
 800a02e:	4601      	mov	r1, r0
      *bufp++ = '.';
 800a030:	bf08      	it	eq
 800a032:	202e      	moveq	r0, #46	; 0x2e
 800a034:	f807 0b01 	strb.w	r0, [r7], #1
    printf(" %02x",((unsigned int)c) & 0xff);
 800a038:	4650      	mov	r0, sl
 800a03a:	f7f6 fa3b 	bl	80004b4 <printf>
    
    /* At end of line ? */
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 800a03e:	f1bb 0f0f 	cmp.w	fp, #15
 800a042:	d106      	bne.n	800a052 <DumpBuffer+0x66>
      *bufp = '\0';  /* NULL terminate buffer */
 800a044:	2100      	movs	r1, #0
 800a046:	f888 1001 	strb.w	r1, [r8, #1]

      /* Yes, print buffer */
      printf("  %s\n",buf);
 800a04a:	4810      	ldr	r0, [pc, #64]	; (800a08c <DumpBuffer+0xa0>)
 800a04c:	4631      	mov	r1, r6
 800a04e:	f7f6 fa31 	bl	80004b4 <printf>
  for(i=0; i<count; i++) {
 800a052:	3501      	adds	r5, #1
 800a054:	42ac      	cmp	r4, r5
 800a056:	d1d8      	bne.n	800a00a <DumpBuffer+0x1e>
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 800a058:	2500      	movs	r5, #0
  if(count % BYTES_PER_LINE) {
 800a05a:	f014 040f 	ands.w	r4, r4, #15
  *bufp='\0';
 800a05e:	f888 5001 	strb.w	r5, [r8, #1]
  if(count % BYTES_PER_LINE) {
 800a062:	d00c      	beq.n	800a07e <DumpBuffer+0x92>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
      printf("   ");
 800a064:	4f0a      	ldr	r7, [pc, #40]	; (800a090 <DumpBuffer+0xa4>)
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 800a066:	f1c4 0410 	rsb	r4, r4, #16
      printf("   ");
 800a06a:	4638      	mov	r0, r7
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 800a06c:	3501      	adds	r5, #1
      printf("   ");
 800a06e:	f7f6 fa21 	bl	80004b4 <printf>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 800a072:	42a5      	cmp	r5, r4
 800a074:	d3f9      	bcc.n	800a06a <DumpBuffer+0x7e>
    }
    /* Yes, print buffer */
    printf("  %s\n",buf);
 800a076:	4805      	ldr	r0, [pc, #20]	; (800a08c <DumpBuffer+0xa0>)
 800a078:	4631      	mov	r1, r6
 800a07a:	f7f6 fa1b 	bl	80004b4 <printf>
  }



}
 800a07e:	b009      	add	sp, #36	; 0x24
 800a080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a084:	46b8      	mov	r8, r7
 800a086:	e7ca      	b.n	800a01e <DumpBuffer+0x32>
 800a088:	0800ed4d 	.word	0x0800ed4d
 800a08c:	0800f478 	.word	0x0800f478
 800a090:	0800f47e 	.word	0x0800f47e
 800a094:	0800f46c 	.word	0x0800f46c
 800a098:	0800f472 	.word	0x0800f472

0800a09c <CmdDump>:
void CmdDump(int action)
{
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 800a09c:	2801      	cmp	r0, #1
{
 800a09e:	b538      	push	{r3, r4, r5, lr}
  if(action==CMD_SHORT_HELP) return;
 800a0a0:	d01d      	beq.n	800a0de <CmdDump+0x42>
  if(action==CMD_LONG_HELP) {
 800a0a2:	2802      	cmp	r0, #2
 800a0a4:	4d0e      	ldr	r5, [pc, #56]	; (800a0e0 <CmdDump+0x44>)
 800a0a6:	4c0f      	ldr	r4, [pc, #60]	; (800a0e4 <CmdDump+0x48>)
 800a0a8:	d109      	bne.n	800a0be <CmdDump+0x22>
    printf("dump {<address> {<count>}}\n\n"
 800a0aa:	480f      	ldr	r0, [pc, #60]	; (800a0e8 <CmdDump+0x4c>)
 800a0ac:	f7f6 fa56 	bl	800055c <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 800a0b0:	682a      	ldr	r2, [r5, #0]
 800a0b2:	6821      	ldr	r1, [r4, #0]
 800a0b4:	480d      	ldr	r0, [pc, #52]	; (800a0ec <CmdDump+0x50>)
  }

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
}
 800a0b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    printf("Current address is 0x%08x, current count is 0x%x\n",
 800a0ba:	f7f6 b9fb 	b.w	80004b4 <printf>
  rc = fetch_uint32_arg(&address);
 800a0be:	4620      	mov	r0, r4
 800a0c0:	f7ff ff70 	bl	8009fa4 <fetch_uint32_arg>
  if(rc == 0) {
 800a0c4:	b910      	cbnz	r0, 800a0cc <CmdDump+0x30>
    fetch_uint32_arg(&count);
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	f7ff ff6c 	bl	8009fa4 <fetch_uint32_arg>
  DumpBuffer((uint8_t *)address, count, address);
 800a0cc:	6822      	ldr	r2, [r4, #0]
 800a0ce:	6829      	ldr	r1, [r5, #0]
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	f7ff ff8b 	bl	8009fec <DumpBuffer>
  address = address+count;
 800a0d6:	6823      	ldr	r3, [r4, #0]
 800a0d8:	682a      	ldr	r2, [r5, #0]
 800a0da:	4413      	add	r3, r2
 800a0dc:	6023      	str	r3, [r4, #0]
}
 800a0de:	bd38      	pop	{r3, r4, r5, pc}
 800a0e0:	200009c0 	.word	0x200009c0
 800a0e4:	20000d20 	.word	0x20000d20
 800a0e8:	0800f482 	.word	0x0800f482
 800a0ec:	0800f61a 	.word	0x0800f61a

0800a0f0 <_sbrk_r>:
#include <reent.h>

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 800a0f0:	b508      	push	{r3, lr}
        extern char end asm("end");
        static char *heap_end;
        char *prev_heap_end;

        if (heap_end == 0)
 800a0f2:	4b09      	ldr	r3, [pc, #36]	; (800a118 <_sbrk_r+0x28>)
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	b90a      	cbnz	r2, 800a0fc <_sbrk_r+0xc>
                heap_end = &end;
 800a0f8:	4a08      	ldr	r2, [pc, #32]	; (800a11c <_sbrk_r+0x2c>)
 800a0fa:	601a      	str	r2, [r3, #0]

        prev_heap_end = heap_end;
 800a0fc:	6818      	ldr	r0, [r3, #0]
        if (heap_end + incr > stack_ptr)
 800a0fe:	466a      	mov	r2, sp
 800a100:	4401      	add	r1, r0
 800a102:	4291      	cmp	r1, r2
 800a104:	d906      	bls.n	800a114 <_sbrk_r+0x24>
        {
//              write(1, "Heap and stack collision\n", 25);
//              abort();
                errno = ENOMEM;
 800a106:	f7f6 f933 	bl	8000370 <__errno>
 800a10a:	230c      	movs	r3, #12
 800a10c:	6003      	str	r3, [r0, #0]
                return (caddr_t) -1;
 800a10e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }

        heap_end += incr;

        return (caddr_t) prev_heap_end;
}
 800a112:	bd08      	pop	{r3, pc}
        heap_end += incr;
 800a114:	6019      	str	r1, [r3, #0]
        return (caddr_t) prev_heap_end;
 800a116:	e7fc      	b.n	800a112 <_sbrk_r+0x22>
 800a118:	20000d24 	.word	0x20000d24
 800a11c:	20001dd8 	.word	0x20001dd8

0800a120 <_close_r>:

int _close_r(struct _reent *ptr, int file)
{
        return -1;
}
 800a120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a124:	4770      	bx	lr

0800a126 <_fstat_r>:

int _fstat_r(struct _reent *ptr, int file, struct stat *st)
{
        st->st_mode = S_IFCHR;
 800a126:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a12a:	6053      	str	r3, [r2, #4]
        return 0;
}
 800a12c:	2000      	movs	r0, #0
 800a12e:	4770      	bx	lr

0800a130 <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 800a130:	2001      	movs	r0, #1
 800a132:	4770      	bx	lr

0800a134 <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int i, off_t j, int p)
{
        return 0;
}
 800a134:	2000      	movs	r0, #0
 800a136:	4770      	bx	lr

0800a138 <USBD_CDC_DataIn>:
{
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 800a138:	4b1b      	ldr	r3, [pc, #108]	; (800a1a8 <USBD_CDC_DataIn+0x70>)
{
 800a13a:	b570      	push	{r4, r5, r6, lr}
  rc = (*USBDDataIn)(pdev,epnum);
 800a13c:	681b      	ldr	r3, [r3, #0]
{
 800a13e:	4604      	mov	r4, r0
  rc = (*USBDDataIn)(pdev,epnum);
 800a140:	4798      	blx	r3

  if(pdev == &hUSBDDevice) {
 800a142:	4b1a      	ldr	r3, [pc, #104]	; (800a1ac <USBD_CDC_DataIn+0x74>)
 800a144:	429c      	cmp	r4, r3
  rc = (*USBDDataIn)(pdev,epnum);
 800a146:	4606      	mov	r6, r0
  if(pdev == &hUSBDDevice) {
 800a148:	d12c      	bne.n	800a1a4 <USBD_CDC_DataIn+0x6c>
    /* Update head and tail pointers, we just sent outSending bytes */
    tail = TerminalState[index].outTail;
 800a14a:	4c19      	ldr	r4, [pc, #100]	; (800a1b0 <USBD_CDC_DataIn+0x78>)
 800a14c:	f8b4 2108 	ldrh.w	r2, [r4, #264]	; 0x108
    count = TerminalState[index].outSending;
 800a150:	f8b4 310c 	ldrh.w	r3, [r4, #268]	; 0x10c
 800a154:	b299      	uxth	r1, r3
    TerminalState[index].outTail = TERMINALINCRBY(tail,count);
 800a156:	fa11 f282 	uxtah	r2, r1, r2
 800a15a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a15e:	f8a4 2108 	strh.w	r2, [r4, #264]	; 0x108
    TerminalState[index].outCount -= count;
 800a162:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
 800a166:	1a5b      	subs	r3, r3, r1
 800a168:	b29b      	uxth	r3, r3
 800a16a:	f8a4 310a 	strh.w	r3, [r4, #266]	; 0x10a
    TerminalState[index].outSending = 0;
 800a16e:	2300      	movs	r3, #0
 800a170:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c

    /* Re - Trigger output from this buffer */
    tail = TerminalState[index].outTail;
 800a174:	f8b4 1108 	ldrh.w	r1, [r4, #264]	; 0x108
    count = TerminalState[index].outCount;
 800a178:	f8b4 210a 	ldrh.w	r2, [r4, #266]	; 0x10a
 800a17c:	b292      	uxth	r2, r2
    tail = TerminalState[index].outTail;
 800a17e:	b289      	uxth	r1, r1
    if(count != 0) {
 800a180:	b182      	cbz	r2, 800a1a4 <USBD_CDC_DataIn+0x6c>
      /* Only allow a transfer to the end of the buffer */
      if((count + tail) >= TERMINALBUFFERSIZE) {
 800a182:	188b      	adds	r3, r1, r2
 800a184:	2b7f      	cmp	r3, #127	; 0x7f
	count = TERMINALBUFFERSIZE - tail;
 800a186:	bf88      	it	hi
 800a188:	f1c1 0280 	rsbhi	r2, r1, #128	; 0x80
      }
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 800a18c:	b295      	uxth	r5, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 800a18e:	3186      	adds	r1, #134	; 0x86
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 800a190:	462a      	mov	r2, r5
 800a192:	4421      	add	r1, r4
 800a194:	4805      	ldr	r0, [pc, #20]	; (800a1ac <USBD_CDC_DataIn+0x74>)
 800a196:	f003 fa05 	bl	800d5a4 <USBD_CDC_SetTxBuffer>
			   count);
      USBD_CDC_TransmitPacket(&hUSBDDevice);
 800a19a:	4804      	ldr	r0, [pc, #16]	; (800a1ac <USBD_CDC_DataIn+0x74>)
 800a19c:	f003 fa10 	bl	800d5c0 <USBD_CDC_TransmitPacket>
      TerminalState[index].outSending = count;
 800a1a0:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
    }
  }
    
  return rc;
}
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	bd70      	pop	{r4, r5, r6, pc}
 800a1a8:	20000e4c 	.word	0x20000e4c
 800a1ac:	20000e50 	.word	0x20000e50
 800a1b0:	20000d28 	.word	0x20000d28

0800a1b4 <CmdStats>:

#endif

/* Dump the terminal statistics */
void CmdStats(int mode)
{
 800a1b4:	e92d 41e0 	stmdb	sp!, {r5, r6, r7, r8, lr}
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return;
 800a1b8:	4601      	mov	r1, r0
{
 800a1ba:	b087      	sub	sp, #28
  if(mode != CMD_INTERACTIVE) return;
 800a1bc:	b9c0      	cbnz	r0, 800a1f0 <CmdStats+0x3c>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a1be:	b672      	cpsid	i

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 800a1c0:	480d      	ldr	r0, [pc, #52]	; (800a1f8 <CmdStats+0x44>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 800a1c2:	9104      	str	r1, [sp, #16]
    s[i] = TerminalState[i].stats;
 800a1c4:	e9d0 5344 	ldrd	r5, r3, [r0, #272]	; 0x110
 800a1c8:	e9d0 6746 	ldrd	r6, r7, [r0, #280]	; 0x118
 800a1cc:	f8d0 8120 	ldr.w	r8, [r0, #288]	; 0x120
 800a1d0:	9305      	str	r3, [sp, #20]
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 800a1d2:	2214      	movs	r2, #20
 800a1d4:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800a1d8:	f7f6 f90a 	bl	80003f0 <memset>
  __ASM volatile ("cpsie i" : : : "memory");
 800a1dc:	b662      	cpsie	i
  }
  __enable_irq();

  /* Display stats for the user */
  for(i=0; i<INDEX_MAX; i++) {
    printf("Terminal #%u:\n"
 800a1de:	4807      	ldr	r0, [pc, #28]	; (800a1fc <CmdStats+0x48>)
 800a1e0:	9b05      	ldr	r3, [sp, #20]
 800a1e2:	9904      	ldr	r1, [sp, #16]
 800a1e4:	9600      	str	r6, [sp, #0]
 800a1e6:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800a1ea:	462a      	mov	r2, r5
 800a1ec:	f7f6 f962 	bl	80004b4 <printf>
	   (unsigned int)(s[i].written),
	   (unsigned int)(s[i].receiveTooBig),
	   (unsigned int)(s[i].received));
  }

}
 800a1f0:	b007      	add	sp, #28
 800a1f2:	e8bd 81e0 	ldmia.w	sp!, {r5, r6, r7, r8, pc}
 800a1f6:	bf00      	nop
 800a1f8:	20000d28 	.word	0x20000d28
 800a1fc:	0800f668 	.word	0x0800f668

0800a200 <TerminalInit>:
{
 800a200:	b510      	push	{r4, lr}
  setvbuf(stdin, NULL, _IONBF, 0);
 800a202:	4c17      	ldr	r4, [pc, #92]	; (800a260 <TerminalInit+0x60>)
 800a204:	6820      	ldr	r0, [r4, #0]
 800a206:	2300      	movs	r3, #0
 800a208:	4619      	mov	r1, r3
 800a20a:	2202      	movs	r2, #2
 800a20c:	6840      	ldr	r0, [r0, #4]
 800a20e:	f7f6 f9ad 	bl	800056c <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 800a212:	6820      	ldr	r0, [r4, #0]
 800a214:	2300      	movs	r3, #0
 800a216:	4619      	mov	r1, r3
 800a218:	2202      	movs	r2, #2
 800a21a:	6880      	ldr	r0, [r0, #8]
 800a21c:	f7f6 f9a6 	bl	800056c <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 800a220:	6820      	ldr	r0, [r4, #0]
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 800a222:	4c10      	ldr	r4, [pc, #64]	; (800a264 <TerminalInit+0x64>)
  setvbuf(stderr, NULL, _IONBF, 0);
 800a224:	68c0      	ldr	r0, [r0, #12]
 800a226:	2300      	movs	r3, #0
 800a228:	4619      	mov	r1, r3
 800a22a:	2202      	movs	r2, #2
 800a22c:	f7f6 f99e 	bl	800056c <setvbuf>
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 800a230:	490d      	ldr	r1, [pc, #52]	; (800a268 <TerminalInit+0x68>)
 800a232:	2200      	movs	r2, #0
 800a234:	4620      	mov	r0, r4
 800a236:	f002 fdeb 	bl	800ce10 <USBD_Init>
  USBDDataIn = USBD_CDC.DataIn;
 800a23a:	490c      	ldr	r1, [pc, #48]	; (800a26c <TerminalInit+0x6c>)
 800a23c:	4b0c      	ldr	r3, [pc, #48]	; (800a270 <TerminalInit+0x70>)
 800a23e:	694a      	ldr	r2, [r1, #20]
 800a240:	601a      	str	r2, [r3, #0]
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 800a242:	4620      	mov	r0, r4
  USBD_CDC.DataIn = USBD_CDC_DataIn;
 800a244:	4b0b      	ldr	r3, [pc, #44]	; (800a274 <TerminalInit+0x74>)
 800a246:	614b      	str	r3, [r1, #20]
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 800a248:	f002 fdf7 	bl	800ce3a <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUSBDDevice, &USBD_CDC_fops);
 800a24c:	4620      	mov	r0, r4
 800a24e:	490a      	ldr	r1, [pc, #40]	; (800a278 <TerminalInit+0x78>)
 800a250:	f003 f9a1 	bl	800d596 <USBD_CDC_RegisterInterface>
  USBD_Start(&hUSBDDevice);
 800a254:	4620      	mov	r0, r4
}
 800a256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUSBDDevice);
 800a25a:	f002 bdf5 	b.w	800ce48 <USBD_Start>
 800a25e:	bf00      	nop
 800a260:	20000008 	.word	0x20000008
 800a264:	20000e50 	.word	0x20000e50
 800a268:	20000af4 	.word	0x20000af4
 800a26c:	200009c8 	.word	0x200009c8
 800a270:	20000e4c 	.word	0x20000e4c
 800a274:	0800a139 	.word	0x0800a139
 800a278:	20000b18 	.word	0x20000b18

0800a27c <TerminalRead>:
{
 800a27c:	b530      	push	{r4, r5, lr}
 800a27e:	4603      	mov	r3, r0
  __ASM volatile ("cpsid i" : : : "memory");
 800a280:	b672      	cpsid	i
  while(TerminalState[index].inCount && (count < len)) {
 800a282:	4c10      	ldr	r4, [pc, #64]	; (800a2c4 <TerminalRead+0x48>)
 800a284:	f44f 7592 	mov.w	r5, #292	; 0x124
  count = 0;
 800a288:	2000      	movs	r0, #0
  while(TerminalState[index].inCount && (count < len)) {
 800a28a:	fb05 4303 	mla	r3, r5, r3, r4
 800a28e:	f8b3 4084 	ldrh.w	r4, [r3, #132]	; 0x84
 800a292:	b2a4      	uxth	r4, r4
 800a294:	b10c      	cbz	r4, 800a29a <TerminalRead+0x1e>
 800a296:	4290      	cmp	r0, r2
 800a298:	d101      	bne.n	800a29e <TerminalRead+0x22>
  __ASM volatile ("cpsie i" : : : "memory");
 800a29a:	b662      	cpsie	i
}
 800a29c:	bd30      	pop	{r4, r5, pc}
    tail   = TerminalState[index].inTail;
 800a29e:	f8b3 4082 	ldrh.w	r4, [r3, #130]	; 0x82
 800a2a2:	b2a4      	uxth	r4, r4
    *ptr++ = TerminalState[index].inBuffer[tail];
 800a2a4:	5d1d      	ldrb	r5, [r3, r4]
 800a2a6:	540d      	strb	r5, [r1, r0]
    TerminalState[index].inTail = TERMINALINCR(tail);
 800a2a8:	3401      	adds	r4, #1
 800a2aa:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 800a2ae:	f8a3 4082 	strh.w	r4, [r3, #130]	; 0x82
    TerminalState[index].inCount--;
 800a2b2:	f8b3 4084 	ldrh.w	r4, [r3, #132]	; 0x84
 800a2b6:	3c01      	subs	r4, #1
 800a2b8:	b2a4      	uxth	r4, r4
 800a2ba:	f8a3 4084 	strh.w	r4, [r3, #132]	; 0x84
    count++;
 800a2be:	3001      	adds	r0, #1
 800a2c0:	e7e5      	b.n	800a28e <TerminalRead+0x12>
 800a2c2:	bf00      	nop
 800a2c4:	20000d28 	.word	0x20000d28

0800a2c8 <_read_r>:
{
 800a2c8:	4611      	mov	r1, r2
  count = TerminalRead(0, (uint8_t *)ptr, len);
 800a2ca:	2000      	movs	r0, #0
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	f7ff bfd5 	b.w	800a27c <TerminalRead>

0800a2d2 <TerminalReadNonBlock>:
{
 800a2d2:	b508      	push	{r3, lr}
  if(TerminalRead(index,(uint8_t*)c,1) == 0) {
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f7ff ffd1 	bl	800a27c <TerminalRead>
}
 800a2da:	fab0 f080 	clz	r0, r0
 800a2de:	0940      	lsrs	r0, r0, #5
 800a2e0:	bd08      	pop	{r3, pc}

0800a2e2 <TerminalReadAnyNonBlock>:
{
 800a2e2:	4601      	mov	r1, r0
 800a2e4:	b508      	push	{r3, lr}
    rc = TerminalReadNonBlock(i, c);
 800a2e6:	2000      	movs	r0, #0
 800a2e8:	f7ff fff3 	bl	800a2d2 <TerminalReadNonBlock>
}
 800a2ec:	3800      	subs	r0, #0
 800a2ee:	bf18      	it	ne
 800a2f0:	2001      	movne	r0, #1
 800a2f2:	bd08      	pop	{r3, pc}

0800a2f4 <TerminalOutputBufferWrite>:
{
 800a2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f6:	4d37      	ldr	r5, [pc, #220]	; (800a3d4 <TerminalOutputBufferWrite+0xe0>)
 800a2f8:	f44f 7392 	mov.w	r3, #292	; 0x124
  if(len >= TERMINALBUFFERSIZE) {
 800a2fc:	2a7f      	cmp	r2, #127	; 0x7f
    TerminalState[index].stats.writeTooBig++;
 800a2fe:	fb03 5300 	mla	r3, r3, r0, r5
  if(len >= TERMINALBUFFERSIZE) {
 800a302:	d906      	bls.n	800a312 <TerminalOutputBufferWrite+0x1e>
    TerminalState[index].stats.writeTooBig++;
 800a304:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800a308:	3201      	adds	r2, #1
 800a30a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    return 1;
 800a30e:	2001      	movs	r0, #1
}
 800a310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 800a312:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 800a316:	fa12 f484 	uxtah	r4, r2, r4
 800a31a:	2c7f      	cmp	r4, #127	; 0x7f
    TerminalState[index].stats.writeBlocked++;
 800a31c:	bf82      	ittt	hi
 800a31e:	f8d3 4114 	ldrhi.w	r4, [r3, #276]	; 0x114
 800a322:	3401      	addhi	r4, #1
 800a324:	f8c3 4114 	strhi.w	r4, [r3, #276]	; 0x114
  while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {} 
 800a328:	f44f 7392 	mov.w	r3, #292	; 0x124
 800a32c:	fb03 5300 	mla	r3, r3, r0, r5
 800a330:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 800a334:	fa12 f484 	uxtah	r4, r2, r4
 800a338:	2c7f      	cmp	r4, #127	; 0x7f
 800a33a:	d8f9      	bhi.n	800a330 <TerminalOutputBufferWrite+0x3c>
  __ASM volatile ("cpsid i" : : : "memory");
 800a33c:	b672      	cpsid	i
  TerminalState[index].stats.written += len;  /* gather statistics */
 800a33e:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 800a342:	4414      	add	r4, r2
 800a344:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 800a348:	f44f 7492 	mov.w	r4, #292	; 0x124
 800a34c:	440a      	add	r2, r1
 800a34e:	fb04 5400 	mla	r4, r4, r0, r5
  while((len != 0) 
 800a352:	4291      	cmp	r1, r2
 800a354:	d004      	beq.n	800a360 <TerminalOutputBufferWrite+0x6c>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 800a356:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	2b7f      	cmp	r3, #127	; 0x7f
 800a35e:	d925      	bls.n	800a3ac <TerminalOutputBufferWrite+0xb8>
  tail = TerminalState[index].outTail;
 800a360:	f44f 7292 	mov.w	r2, #292	; 0x124
 800a364:	fb02 5200 	mla	r2, r2, r0, r5
 800a368:	f8b2 3108 	ldrh.w	r3, [r2, #264]	; 0x108
  count = TerminalState[index].outCount;
 800a36c:	f8b2 210a 	ldrh.w	r2, [r2, #266]	; 0x10a
 800a370:	b292      	uxth	r2, r2
  tail = TerminalState[index].outTail;
 800a372:	b299      	uxth	r1, r3
  if((count + tail) >= TERMINALBUFFERSIZE) {
 800a374:	fa12 f383 	uxtah	r3, r2, r3
 800a378:	2b7f      	cmp	r3, #127	; 0x7f
    count = TERMINALBUFFERSIZE - tail;
 800a37a:	bf88      	it	hi
 800a37c:	f1c1 0280 	rsbhi	r2, r1, #128	; 0x80
  switch(index) {
 800a380:	b988      	cbnz	r0, 800a3a6 <TerminalOutputBufferWrite+0xb2>
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
 800a382:	4e15      	ldr	r6, [pc, #84]	; (800a3d8 <TerminalOutputBufferWrite+0xe4>)
 800a384:	f896 31fc 	ldrb.w	r3, [r6, #508]	; 0x1fc
 800a388:	2b03      	cmp	r3, #3
 800a38a:	d10c      	bne.n	800a3a6 <TerminalOutputBufferWrite+0xb2>
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 800a38c:	b294      	uxth	r4, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 800a38e:	3186      	adds	r1, #134	; 0x86
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 800a390:	4622      	mov	r2, r4
 800a392:	4429      	add	r1, r5
 800a394:	4630      	mov	r0, r6
 800a396:	f003 f905 	bl	800d5a4 <USBD_CDC_SetTxBuffer>
      cdcRc = USBD_CDC_TransmitPacket(&hUSBDDevice);
 800a39a:	4630      	mov	r0, r6
 800a39c:	f003 f910 	bl	800d5c0 <USBD_CDC_TransmitPacket>
      if(cdcRc == USBD_OK) {
 800a3a0:	b908      	cbnz	r0, 800a3a6 <TerminalOutputBufferWrite+0xb2>
	TerminalState[index].outSending = count;
 800a3a2:	f8a5 410c 	strh.w	r4, [r5, #268]	; 0x10c
  __ASM volatile ("cpsie i" : : : "memory");
 800a3a6:	b662      	cpsie	i
 800a3a8:	2000      	movs	r0, #0
 800a3aa:	e7b1      	b.n	800a310 <TerminalOutputBufferWrite+0x1c>
    head = TerminalState[index].outHead;
 800a3ac:	f8b4 3106 	ldrh.w	r3, [r4, #262]	; 0x106
    TerminalState[index].outBuffer[head] = *p++;
 800a3b0:	f811 7b01 	ldrb.w	r7, [r1], #1
 800a3b4:	fa14 f683 	uxtah	r6, r4, r3
    TerminalState[index].outHead = TERMINALINCR(head);
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3be:	f8a4 3106 	strh.w	r3, [r4, #262]	; 0x106
    TerminalState[index].outCount++;
 800a3c2:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
    TerminalState[index].outBuffer[head] = *p++;
 800a3c6:	f886 7086 	strb.w	r7, [r6, #134]	; 0x86
    TerminalState[index].outCount++;
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	f8a4 310a 	strh.w	r3, [r4, #266]	; 0x10a
    len--;
 800a3d2:	e7be      	b.n	800a352 <TerminalOutputBufferWrite+0x5e>
 800a3d4:	20000d28 	.word	0x20000d28
 800a3d8:	20000e50 	.word	0x20000e50

0800a3dc <_write_r>:
{
 800a3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      TerminalOutputBufferWrite(INDEX_USB,"\r",1);
 800a3e0:	f8df 8034 	ldr.w	r8, [pc, #52]	; 800a418 <_write_r+0x3c>
{
 800a3e4:	461d      	mov	r5, r3
 800a3e6:	4614      	mov	r4, r2
 800a3e8:	18d7      	adds	r7, r2, r3
  while(count != 0) {
 800a3ea:	42bc      	cmp	r4, r7
 800a3ec:	4626      	mov	r6, r4
 800a3ee:	d102      	bne.n	800a3f6 <_write_r+0x1a>
}
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(*ptr == '\n') {
 800a3f6:	7833      	ldrb	r3, [r6, #0]
 800a3f8:	2b0a      	cmp	r3, #10
 800a3fa:	f104 0401 	add.w	r4, r4, #1
 800a3fe:	d104      	bne.n	800a40a <_write_r+0x2e>
      TerminalOutputBufferWrite(INDEX_USB,"\r",1);
 800a400:	2201      	movs	r2, #1
 800a402:	4641      	mov	r1, r8
 800a404:	2000      	movs	r0, #0
 800a406:	f7ff ff75 	bl	800a2f4 <TerminalOutputBufferWrite>
    TerminalOutputBufferWrite(INDEX_USB,ptr,1);
 800a40a:	2201      	movs	r2, #1
 800a40c:	4631      	mov	r1, r6
 800a40e:	2000      	movs	r0, #0
 800a410:	f7ff ff70 	bl	800a2f4 <TerminalOutputBufferWrite>
    count--;
 800a414:	e7e9      	b.n	800a3ea <_write_r+0xe>
 800a416:	bf00      	nop
 800a418:	0800f3de 	.word	0x0800f3de

0800a41c <TerminalInputBufferWrite>:
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 800a41c:	4b17      	ldr	r3, [pc, #92]	; (800a47c <TerminalInputBufferWrite+0x60>)
{
 800a41e:	b510      	push	{r4, lr}
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 800a420:	f44f 7492 	mov.w	r4, #292	; 0x124
 800a424:	fb04 3000 	mla	r0, r4, r0, r3
 800a428:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 800a42c:	fa12 f383 	uxtah	r3, r2, r3
 800a430:	2b7f      	cmp	r3, #127	; 0x7f
 800a432:	d906      	bls.n	800a442 <TerminalInputBufferWrite+0x26>
    TerminalState[index].stats.receiveTooBig++;
 800a434:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
 800a438:	3301      	adds	r3, #1
 800a43a:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    return 1;
 800a43e:	2001      	movs	r0, #1
}
 800a440:	bd10      	pop	{r4, pc}
  TerminalState[index].stats.received += len;
 800a442:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 800a446:	4413      	add	r3, r2
 800a448:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
  while(len != 0) {
 800a44c:	440a      	add	r2, r1
 800a44e:	4291      	cmp	r1, r2
 800a450:	d101      	bne.n	800a456 <TerminalInputBufferWrite+0x3a>
  return 0;
 800a452:	2000      	movs	r0, #0
 800a454:	e7f4      	b.n	800a440 <TerminalInputBufferWrite+0x24>
    head = TerminalState[index].inHead;
 800a456:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
    TerminalState[index].inBuffer[head] = *p++;
 800a45a:	f811 4b01 	ldrb.w	r4, [r1], #1
    head = TerminalState[index].inHead;
 800a45e:	b29b      	uxth	r3, r3
    TerminalState[index].inBuffer[head] = *p++;
 800a460:	54c4      	strb	r4, [r0, r3]
    TerminalState[index].inHead = TERMINALINCR(head);
 800a462:	3301      	adds	r3, #1
 800a464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a468:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
    TerminalState[index].inCount++;
 800a46c:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 800a470:	3301      	adds	r3, #1
 800a472:	b29b      	uxth	r3, r3
 800a474:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
    len--;
 800a478:	e7e9      	b.n	800a44e <TerminalInputBufferWrite+0x32>
 800a47a:	bf00      	nop
 800a47c:	20000d28 	.word	0x20000d28

0800a480 <USB_LP_CAN_RX0_IRQHandler>:
  HAL_PCD_IRQHandler(&hpcd);
 800a480:	4801      	ldr	r0, [pc, #4]	; (800a488 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 800a482:	f001 bc8f 	b.w	800bda4 <HAL_PCD_IRQHandler>
 800a486:	bf00      	nop
 800a488:	20001090 	.word	0x20001090

0800a48c <Uncompress>:

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 800a48c:	b570      	push	{r4, r5, r6, lr}
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 800a48e:	4a1c      	ldr	r2, [pc, #112]	; (800a500 <Uncompress+0x74>)
{
 800a490:	b08a      	sub	sp, #40	; 0x28
 800a492:	4603      	mov	r3, r0
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 800a494:	466c      	mov	r4, sp
 800a496:	f102 0620 	add.w	r6, r2, #32
 800a49a:	6810      	ldr	r0, [r2, #0]
 800a49c:	6851      	ldr	r1, [r2, #4]
 800a49e:	4625      	mov	r5, r4
 800a4a0:	c503      	stmia	r5!, {r0, r1}
 800a4a2:	3208      	adds	r2, #8
 800a4a4:	42b2      	cmp	r2, r6
 800a4a6:	462c      	mov	r4, r5
 800a4a8:	d1f7      	bne.n	800a49a <Uncompress+0xe>
 800a4aa:	6810      	ldr	r0, [r2, #0]
 800a4ac:	6028      	str	r0, [r5, #0]
 800a4ae:	8892      	ldrh	r2, [r2, #4]
 800a4b0:	80aa      	strh	r2, [r5, #4]
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
  data <<= 8;
  data |= (uint8_t)(*str++);
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	4d13      	ldr	r5, [pc, #76]	; (800a504 <Uncompress+0x78>)
 800a4b6:	f830 3b02 	ldrh.w	r3, [r0], #2
  bits = 0;
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	ba5b      	rev16	r3, r3
 800a4be:	b29b      	uxth	r3, r3
  i = 0;
 800a4c0:	460c      	mov	r4, r1
 800a4c2:	462e      	mov	r6, r5
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 800a4c4:	f413 427c 	ands.w	r2, r3, #64512	; 0xfc00
 800a4c8:	d103      	bne.n	800a4d2 <Uncompress+0x46>
      data |= ((uint32_t)(*str++)) << bits; 
    }
  }
  buf[i]='\0';
  return buf;
}
 800a4ca:	480e      	ldr	r0, [pc, #56]	; (800a504 <Uncompress+0x78>)
  buf[i]='\0';
 800a4cc:	5532      	strb	r2, [r6, r4]
}
 800a4ce:	b00a      	add	sp, #40	; 0x28
 800a4d0:	bd70      	pop	{r4, r5, r6, pc}
    data <<= 6;
 800a4d2:	019a      	lsls	r2, r3, #6
    data &= 0x3fffff;
 800a4d4:	f3c2 0315 	ubfx	r3, r2, #0, #22
    c = decoderRing[(data>>16)-1];
 800a4d8:	f3c2 4205 	ubfx	r2, r2, #16, #6
 800a4dc:	3228      	adds	r2, #40	; 0x28
 800a4de:	446a      	add	r2, sp
    buf[i++] = c;
 800a4e0:	3401      	adds	r4, #1
 800a4e2:	f812 2c29 	ldrb.w	r2, [r2, #-41]
 800a4e6:	f805 2b01 	strb.w	r2, [r5], #1
    bits += 6;
 800a4ea:	1d8a      	adds	r2, r1, #6
    if(bits >= 8) {
 800a4ec:	2a07      	cmp	r2, #7
      bits -= 8;
 800a4ee:	bf81      	itttt	hi
 800a4f0:	1e8a      	subhi	r2, r1, #2
      data |= ((uint32_t)(*str++)) << bits; 
 800a4f2:	f810 1b01 	ldrbhi.w	r1, [r0], #1
 800a4f6:	4091      	lslhi	r1, r2
 800a4f8:	430b      	orrhi	r3, r1
 800a4fa:	4611      	mov	r1, r2
 800a4fc:	e7e2      	b.n	800a4c4 <Uncompress+0x38>
 800a4fe:	bf00      	nop
 800a500:	0800f712 	.word	0x0800f712
 800a504:	20001074 	.word	0x20001074

0800a508 <DecodeReadRegister>:


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 800a508:	b538      	push	{r3, r4, r5, lr}
  uint32_t address, val;

  if(p == NULL) return 0;
 800a50a:	4604      	mov	r4, r0
 800a50c:	b1f0      	cbz	r0, 800a54c <DecodeReadRegister+0x44>
  if(r == NULL) return 0;
 800a50e:	b1f9      	cbz	r1, 800a550 <DecodeReadRegister+0x48>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 800a510:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 800a512:	888a      	ldrh	r2, [r1, #4]
 800a514:	6843      	ldr	r3, [r0, #4]
  switch(r->size) {
 800a516:	2d10      	cmp	r5, #16
 800a518:	d005      	beq.n	800a526 <DecodeReadRegister+0x1e>
 800a51a:	2d20      	cmp	r5, #32
 800a51c:	d005      	beq.n	800a52a <DecodeReadRegister+0x22>
 800a51e:	2d08      	cmp	r5, #8
 800a520:	d105      	bne.n	800a52e <DecodeReadRegister+0x26>
  case 8:
    val = *(uint8_t *)address;
 800a522:	5cd0      	ldrb	r0, [r2, r3]
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 0;
  }
  return val;
}
 800a524:	bd38      	pop	{r3, r4, r5, pc}
    val = *(uint16_t *)address;
 800a526:	5ad0      	ldrh	r0, [r2, r3]
    break;  
 800a528:	e7fc      	b.n	800a524 <DecodeReadRegister+0x1c>
    val = *(uint32_t *)address;
 800a52a:	58d0      	ldr	r0, [r2, r3]
    break;
 800a52c:	e7fa      	b.n	800a524 <DecodeReadRegister+0x1c>
    printf("Invalid size 0x%x for register %s",
 800a52e:	6808      	ldr	r0, [r1, #0]
 800a530:	f7ff ffac 	bl	800a48c <Uncompress>
 800a534:	4629      	mov	r1, r5
 800a536:	4602      	mov	r2, r0
 800a538:	4806      	ldr	r0, [pc, #24]	; (800a554 <DecodeReadRegister+0x4c>)
 800a53a:	f7f5 ffbb 	bl	80004b4 <printf>
    printf(" in periphral %s!\n",
 800a53e:	6820      	ldr	r0, [r4, #0]
 800a540:	f7ff ffa4 	bl	800a48c <Uncompress>
 800a544:	4601      	mov	r1, r0
 800a546:	4804      	ldr	r0, [pc, #16]	; (800a558 <DecodeReadRegister+0x50>)
 800a548:	f7f5 ffb4 	bl	80004b4 <printf>
    return 0;
 800a54c:	2000      	movs	r0, #0
 800a54e:	e7e9      	b.n	800a524 <DecodeReadRegister+0x1c>
  if(p == NULL) return 0;
 800a550:	4608      	mov	r0, r1
 800a552:	e7e7      	b.n	800a524 <DecodeReadRegister+0x1c>
 800a554:	0800f738 	.word	0x0800f738
 800a558:	0800f75a 	.word	0x0800f75a

0800a55c <DecodeWriteRegister>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
 800a55c:	b538      	push	{r3, r4, r5, lr}
  uint32_t address;

  if(p == NULL) return 1;
 800a55e:	4604      	mov	r4, r0
 800a560:	b1f8      	cbz	r0, 800a5a2 <DecodeWriteRegister+0x46>
  if(r == NULL) return 1;
 800a562:	b1f1      	cbz	r1, 800a5a2 <DecodeWriteRegister+0x46>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 800a564:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 800a566:	8888      	ldrh	r0, [r1, #4]
 800a568:	6863      	ldr	r3, [r4, #4]
  switch(r->size) {
 800a56a:	2d10      	cmp	r5, #16
 800a56c:	d006      	beq.n	800a57c <DecodeWriteRegister+0x20>
 800a56e:	2d20      	cmp	r5, #32
 800a570:	d006      	beq.n	800a580 <DecodeWriteRegister+0x24>
 800a572:	2d08      	cmp	r5, #8
 800a574:	d106      	bne.n	800a584 <DecodeWriteRegister+0x28>
  case 8:
    *(uint8_t *)address = val;
 800a576:	54c2      	strb	r2, [r0, r3]
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
 800a578:	2000      	movs	r0, #0
}
 800a57a:	bd38      	pop	{r3, r4, r5, pc}
    *(uint16_t *)address = val;
 800a57c:	52c2      	strh	r2, [r0, r3]
    break;  
 800a57e:	e7fb      	b.n	800a578 <DecodeWriteRegister+0x1c>
    *(uint32_t *)address = val;
 800a580:	50c2      	str	r2, [r0, r3]
 800a582:	e7f9      	b.n	800a578 <DecodeWriteRegister+0x1c>
    printf("Invalid size 0x%x for register %s",
 800a584:	6808      	ldr	r0, [r1, #0]
 800a586:	f7ff ff81 	bl	800a48c <Uncompress>
 800a58a:	4629      	mov	r1, r5
 800a58c:	4602      	mov	r2, r0
 800a58e:	4806      	ldr	r0, [pc, #24]	; (800a5a8 <DecodeWriteRegister+0x4c>)
 800a590:	f7f5 ff90 	bl	80004b4 <printf>
    printf(" in periphral %s!\n",
 800a594:	6820      	ldr	r0, [r4, #0]
 800a596:	f7ff ff79 	bl	800a48c <Uncompress>
 800a59a:	4601      	mov	r1, r0
 800a59c:	4803      	ldr	r0, [pc, #12]	; (800a5ac <DecodeWriteRegister+0x50>)
 800a59e:	f7f5 ff89 	bl	80004b4 <printf>
  if(p == NULL) return 1;
 800a5a2:	2001      	movs	r0, #1
 800a5a4:	e7e9      	b.n	800a57a <DecodeWriteRegister+0x1e>
 800a5a6:	bf00      	nop
 800a5a8:	0800f738 	.word	0x0800f738
 800a5ac:	0800f75a 	.word	0x0800f75a

0800a5b0 <DecodeField>:

/* Decode a field */
void DecodeField(const Field_t *f, uint32_t val)
{
 800a5b0:	b530      	push	{r4, r5, lr}
  uint32_t v;
  if(f == NULL) return;
 800a5b2:	4604      	mov	r4, r0
{
 800a5b4:	b087      	sub	sp, #28
  if(f == NULL) return;
 800a5b6:	b1d0      	cbz	r0, 800a5ee <DecodeField+0x3e>

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 800a5b8:	7942      	ldrb	r2, [r0, #5]
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	4093      	lsls	r3, r2
 800a5be:	7902      	ldrb	r2, [r0, #4]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 800a5c0:	6800      	ldr	r0, [r0, #0]
  v = (val >> (f->offset)) & ((1<<f->width)-1);
 800a5c2:	40d1      	lsrs	r1, r2
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	400b      	ands	r3, r1
 800a5c8:	9305      	str	r3, [sp, #20]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 800a5ca:	f7ff ff5f 	bl	800a48c <Uncompress>
	 Uncompress(f->name),  
	 (unsigned int)v,
	 (unsigned int)v,
	 (unsigned int)(f->width),
 800a5ce:	7965      	ldrb	r5, [r4, #5]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 800a5d0:	4a08      	ldr	r2, [pc, #32]	; (800a5f4 <DecodeField+0x44>)
 800a5d2:	9b05      	ldr	r3, [sp, #20]
 800a5d4:	4601      	mov	r1, r0
 800a5d6:	4808      	ldr	r0, [pc, #32]	; (800a5f8 <DecodeField+0x48>)
 800a5d8:	2d01      	cmp	r5, #1
 800a5da:	bf98      	it	ls
 800a5dc:	4602      	movls	r2, r0
 800a5de:	7920      	ldrb	r0, [r4, #4]
 800a5e0:	9500      	str	r5, [sp, #0]
 800a5e2:	e9cd 2001 	strd	r2, r0, [sp, #4]
 800a5e6:	4805      	ldr	r0, [pc, #20]	; (800a5fc <DecodeField+0x4c>)
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	f7f5 ff63 	bl	80004b4 <printf>
	 (f->width > 1 ) ? "bits," : "bit, ",
	 (unsigned int)(f->offset));
}
 800a5ee:	b007      	add	sp, #28
 800a5f0:	bd30      	pop	{r4, r5, pc}
 800a5f2:	bf00      	nop
 800a5f4:	0800f76d 	.word	0x0800f76d
 800a5f8:	0800f773 	.word	0x0800f773
 800a5fc:	0800f779 	.word	0x0800f779

0800a600 <DecodeRegister>:

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 800a600:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a602:	460f      	mov	r7, r1
 800a604:	4615      	mov	r5, r2
 800a606:	461e      	mov	r6, r3
  Field_t const *f;
  uint32_t i;
  
  if(r == NULL) return;
 800a608:	4604      	mov	r4, r0
 800a60a:	b180      	cbz	r0, 800a62e <DecodeRegister+0x2e>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 800a60c:	6800      	ldr	r0, [r0, #0]
 800a60e:	f7ff ff3d 	bl	800a48c <Uncompress>
	 Uncompress(r->name),
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 800a612:	88a2      	ldrh	r2, [r4, #4]
 800a614:	443a      	add	r2, r7
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 800a616:	9201      	str	r2, [sp, #4]
 800a618:	79a3      	ldrb	r3, [r4, #6]
 800a61a:	9300      	str	r3, [sp, #0]
 800a61c:	4601      	mov	r1, r0
 800a61e:	462b      	mov	r3, r5
 800a620:	480e      	ldr	r0, [pc, #56]	; (800a65c <DecodeRegister+0x5c>)
 800a622:	462a      	mov	r2, r5
 800a624:	f7f5 ff46 	bl	80004b4 <printf>
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 800a628:	68a7      	ldr	r7, [r4, #8]
 800a62a:	b19f      	cbz	r7, 800a654 <DecodeRegister+0x54>
 800a62c:	b986      	cbnz	r6, 800a650 <DecodeRegister+0x50>
  }
  if(decodeFields) {
    printf("\n");
  }

}
 800a62e:	b003      	add	sp, #12
 800a630:	bdf0      	pop	{r4, r5, r6, r7, pc}
      DecodeField(f,val);
 800a632:	4629      	mov	r1, r5
 800a634:	f7ff ffbc 	bl	800a5b0 <DecodeField>
    for(i=0; i<r->numFields; i++) {
 800a638:	3601      	adds	r6, #1
 800a63a:	89a3      	ldrh	r3, [r4, #12]
 800a63c:	429e      	cmp	r6, r3
 800a63e:	eb07 00c6 	add.w	r0, r7, r6, lsl #3
 800a642:	d3f6      	bcc.n	800a632 <DecodeRegister+0x32>
    printf("\n");
 800a644:	200a      	movs	r0, #10
}
 800a646:	b003      	add	sp, #12
 800a648:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    printf("\n");
 800a64c:	f7f5 bf4a 	b.w	80004e4 <putchar>
    for(i=0; i<r->numFields; i++) {
 800a650:	2600      	movs	r6, #0
 800a652:	e7f2      	b.n	800a63a <DecodeRegister+0x3a>
  if(decodeFields) {
 800a654:	2e00      	cmp	r6, #0
 800a656:	d0ea      	beq.n	800a62e <DecodeRegister+0x2e>
 800a658:	e7f4      	b.n	800a644 <DecodeRegister+0x44>
 800a65a:	bf00      	nop
 800a65c:	0800f7a2 	.word	0x0800f7a2

0800a660 <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 800a660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a664:	460e      	mov	r6, r1
  Register_t const *r;
  uint32_t val;
  uint32_t i;

  if(p == NULL) return;
 800a666:	4604      	mov	r4, r0
 800a668:	b160      	cbz	r0, 800a684 <DecodePeripheral+0x24>
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 800a66a:	6800      	ldr	r0, [r0, #0]
 800a66c:	f7ff ff0e 	bl	800a48c <Uncompress>
 800a670:	6862      	ldr	r2, [r4, #4]
 800a672:	4601      	mov	r1, r0
 800a674:	480e      	ldr	r0, [pc, #56]	; (800a6b0 <DecodePeripheral+0x50>)
 800a676:	f7f5 ff1d 	bl	80004b4 <printf>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 800a67a:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800a67e:	f1b8 0f00 	cmp.w	r8, #0
 800a682:	d112      	bne.n	800a6aa <DecodePeripheral+0x4a>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
      r++;
    }
  }
}
 800a684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      val = DecodeReadRegister(p,r);
 800a688:	4639      	mov	r1, r7
 800a68a:	4620      	mov	r0, r4
 800a68c:	f7ff ff3c 	bl	800a508 <DecodeReadRegister>
      DecodeRegister(r, p->base, val, decodeFields);
 800a690:	6861      	ldr	r1, [r4, #4]
      val = DecodeReadRegister(p,r);
 800a692:	4602      	mov	r2, r0
      DecodeRegister(r, p->base, val, decodeFields);
 800a694:	4633      	mov	r3, r6
 800a696:	4638      	mov	r0, r7
 800a698:	f7ff ffb2 	bl	800a600 <DecodeRegister>
    for(i=0; i<p->numRegisters; i++) {
 800a69c:	3501      	adds	r5, #1
 800a69e:	89a3      	ldrh	r3, [r4, #12]
 800a6a0:	429d      	cmp	r5, r3
 800a6a2:	eb08 1705 	add.w	r7, r8, r5, lsl #4
 800a6a6:	d3ef      	bcc.n	800a688 <DecodePeripheral+0x28>
 800a6a8:	e7ec      	b.n	800a684 <DecodePeripheral+0x24>
 800a6aa:	2500      	movs	r5, #0
 800a6ac:	e7f7      	b.n	800a69e <DecodePeripheral+0x3e>
 800a6ae:	bf00      	nop
 800a6b0:	0800f7dd 	.word	0x0800f7dd

0800a6b4 <DecodePrintPeripherals>:

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
 800a6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b8:	4604      	mov	r4, r0
  uint32_t col;
  col = 8;
  printf("\t");
 800a6ba:	2009      	movs	r0, #9
 800a6bc:	f7f5 ff12 	bl	80004e4 <putchar>
  for(; p->name != NULL; p++) {
    col += printf("%s",Uncompress(p->name));
 800a6c0:	4e0e      	ldr	r6, [pc, #56]	; (800a6fc <DecodePrintPeripherals+0x48>)
    if((p+1)->name != NULL) {
      col += printf(", ");
 800a6c2:	4f0f      	ldr	r7, [pc, #60]	; (800a700 <DecodePrintPeripherals+0x4c>)
      if(col > 70) {
	col = 8;
	printf("\n\t");
 800a6c4:	f8df 803c 	ldr.w	r8, [pc, #60]	; 800a704 <DecodePrintPeripherals+0x50>
  col = 8;
 800a6c8:	2508      	movs	r5, #8
  for(; p->name != NULL; p++) {
 800a6ca:	6820      	ldr	r0, [r4, #0]
 800a6cc:	b908      	cbnz	r0, 800a6d2 <DecodePrintPeripherals+0x1e>
      }
    }
  }
}
 800a6ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    col += printf("%s",Uncompress(p->name));
 800a6d2:	f7ff fedb 	bl	800a48c <Uncompress>
 800a6d6:	4601      	mov	r1, r0
 800a6d8:	4630      	mov	r0, r6
 800a6da:	f7f5 feeb 	bl	80004b4 <printf>
    if((p+1)->name != NULL) {
 800a6de:	6923      	ldr	r3, [r4, #16]
    col += printf("%s",Uncompress(p->name));
 800a6e0:	4405      	add	r5, r0
    if((p+1)->name != NULL) {
 800a6e2:	b14b      	cbz	r3, 800a6f8 <DecodePrintPeripherals+0x44>
      col += printf(", ");
 800a6e4:	4638      	mov	r0, r7
 800a6e6:	f7f5 fee5 	bl	80004b4 <printf>
 800a6ea:	4405      	add	r5, r0
      if(col > 70) {
 800a6ec:	2d46      	cmp	r5, #70	; 0x46
 800a6ee:	d903      	bls.n	800a6f8 <DecodePrintPeripherals+0x44>
	printf("\n\t");
 800a6f0:	4640      	mov	r0, r8
 800a6f2:	f7f5 fedf 	bl	80004b4 <printf>
	col = 8;
 800a6f6:	2508      	movs	r5, #8
  for(; p->name != NULL; p++) {
 800a6f8:	3410      	adds	r4, #16
 800a6fa:	e7e6      	b.n	800a6ca <DecodePrintPeripherals+0x16>
 800a6fc:	0800f757 	.word	0x0800f757
 800a700:	0800f776 	.word	0x0800f776
 800a704:	0800f805 	.word	0x0800f805

0800a708 <DecodePrintRegisters>:

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 800a708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a70c:	4606      	mov	r6, r0
  uint8_t col;
  col = 8;
  printf("\t");
 800a70e:	2009      	movs	r0, #9
void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 800a710:	460d      	mov	r5, r1
  printf("\t");
 800a712:	f7f5 fee7 	bl	80004e4 <putchar>
  while(count--) {
    col += printf("%s",Uncompress(r->name));
 800a716:	4f12      	ldr	r7, [pc, #72]	; (800a760 <DecodePrintRegisters+0x58>)
    if(count) {
      col += printf(", ");
 800a718:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800a764 <DecodePrintRegisters+0x5c>
      if(col > 70) {
	col = 8;
	printf("\n\t");
 800a71c:	f8df 9048 	ldr.w	r9, [pc, #72]	; 800a768 <DecodePrintRegisters+0x60>
 800a720:	3d01      	subs	r5, #1
 800a722:	3610      	adds	r6, #16
  col = 8;
 800a724:	2408      	movs	r4, #8
  while(count--) {
 800a726:	1c6b      	adds	r3, r5, #1
 800a728:	d101      	bne.n	800a72e <DecodePrintRegisters+0x26>
      }
    }
    r++;
  }
}
 800a72a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    col += printf("%s",Uncompress(r->name));
 800a72e:	f856 0c10 	ldr.w	r0, [r6, #-16]
 800a732:	f7ff feab 	bl	800a48c <Uncompress>
 800a736:	4601      	mov	r1, r0
 800a738:	4638      	mov	r0, r7
 800a73a:	f7f5 febb 	bl	80004b4 <printf>
 800a73e:	4420      	add	r0, r4
 800a740:	b2c4      	uxtb	r4, r0
    if(count) {
 800a742:	b155      	cbz	r5, 800a75a <DecodePrintRegisters+0x52>
      col += printf(", ");
 800a744:	4640      	mov	r0, r8
 800a746:	f7f5 feb5 	bl	80004b4 <printf>
 800a74a:	4420      	add	r0, r4
 800a74c:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 800a74e:	2c46      	cmp	r4, #70	; 0x46
 800a750:	d903      	bls.n	800a75a <DecodePrintRegisters+0x52>
	printf("\n\t");
 800a752:	4648      	mov	r0, r9
 800a754:	f7f5 feae 	bl	80004b4 <printf>
	col = 8;
 800a758:	2408      	movs	r4, #8
    r++;
 800a75a:	3d01      	subs	r5, #1
 800a75c:	3610      	adds	r6, #16
 800a75e:	e7e2      	b.n	800a726 <DecodePrintRegisters+0x1e>
 800a760:	0800f757 	.word	0x0800f757
 800a764:	0800f776 	.word	0x0800f776
 800a768:	0800f805 	.word	0x0800f805

0800a76c <CmdDecode>:

void CmdDecode(int mode)
{
 800a76c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 800a76e:	2802      	cmp	r0, #2
{
 800a770:	b085      	sub	sp, #20
  if(mode == CMD_LONG_HELP) {
 800a772:	d132      	bne.n	800a7da <CmdDecode+0x6e>
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 800a774:	a803      	add	r0, sp, #12
 800a776:	f7ff fc29 	bl	8009fcc <fetch_string_arg>
    if(rc) {
 800a77a:	b148      	cbz	r0, 800a790 <CmdDecode+0x24>
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 800a77c:	4886      	ldr	r0, [pc, #536]	; (800a998 <CmdDecode+0x22c>)
 800a77e:	f7f5 feed 	bl	800055c <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 800a782:	4886      	ldr	r0, [pc, #536]	; (800a99c <CmdDecode+0x230>)
 800a784:	f7ff ff96 	bl	800a6b4 <DecodePrintPeripherals>
      printf("\n\n"
 800a788:	4885      	ldr	r0, [pc, #532]	; (800a9a0 <CmdDecode+0x234>)
      }
      printf("Valid registers for peripheral %s:\n"
	     "\n",
	     Uncompress(p->name));
      DecodePrintRegisters(p->registers,p->numRegisters);
      printf("\n\n");
 800a78a:	f7f5 fee7 	bl	800055c <puts>
 800a78e:	e016      	b.n	800a7be <CmdDecode+0x52>
      p = Peripherals;
 800a790:	4c82      	ldr	r4, [pc, #520]	; (800a99c <CmdDecode+0x230>)
 800a792:	e008      	b.n	800a7a6 <CmdDecode+0x3a>
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 800a794:	9d03      	ldr	r5, [sp, #12]
 800a796:	f7ff fe79 	bl	800a48c <Uncompress>
 800a79a:	4601      	mov	r1, r0
 800a79c:	4628      	mov	r0, r5
 800a79e:	f7f5 ffdb 	bl	8000758 <strcasecmp>
 800a7a2:	b118      	cbz	r0, 800a7ac <CmdDecode+0x40>
	p++;
 800a7a4:	3410      	adds	r4, #16
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 800a7a6:	6820      	ldr	r0, [r4, #0]
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	d1f3      	bne.n	800a794 <CmdDecode+0x28>
      if(p->name == NULL) {
 800a7ac:	6820      	ldr	r0, [r4, #0]
 800a7ae:	b940      	cbnz	r0, 800a7c2 <CmdDecode+0x56>
	printf("%s is not a valid peripheral name\n"
 800a7b0:	9903      	ldr	r1, [sp, #12]
 800a7b2:	487c      	ldr	r0, [pc, #496]	; (800a9a4 <CmdDecode+0x238>)
 800a7b4:	f7f5 fe7e 	bl	80004b4 <printf>
	DecodePrintPeripherals(Peripherals);
 800a7b8:	4878      	ldr	r0, [pc, #480]	; (800a99c <CmdDecode+0x230>)
 800a7ba:	f7ff ff7b 	bl	800a6b4 <DecodePrintPeripherals>
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

  return;
}
 800a7be:	b005      	add	sp, #20
 800a7c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      printf("Valid registers for peripheral %s:\n"
 800a7c2:	f7ff fe63 	bl	800a48c <Uncompress>
 800a7c6:	4601      	mov	r1, r0
 800a7c8:	4877      	ldr	r0, [pc, #476]	; (800a9a8 <CmdDecode+0x23c>)
 800a7ca:	f7f5 fe73 	bl	80004b4 <printf>
      DecodePrintRegisters(p->registers,p->numRegisters);
 800a7ce:	89a1      	ldrh	r1, [r4, #12]
 800a7d0:	68a0      	ldr	r0, [r4, #8]
 800a7d2:	f7ff ff99 	bl	800a708 <DecodePrintRegisters>
      printf("\n\n");
 800a7d6:	4875      	ldr	r0, [pc, #468]	; (800a9ac <CmdDecode+0x240>)
 800a7d8:	e7d7      	b.n	800a78a <CmdDecode+0x1e>
  rc = fetch_string_arg(&pname);
 800a7da:	4668      	mov	r0, sp
 800a7dc:	f7ff fbf6 	bl	8009fcc <fetch_string_arg>
  if(rc) {
 800a7e0:	b178      	cbz	r0, 800a802 <CmdDecode+0x96>
    printf("Missing peripheral name, please chose one of:\n\n");
 800a7e2:	4873      	ldr	r0, [pc, #460]	; (800a9b0 <CmdDecode+0x244>)
 800a7e4:	f7f5 feba 	bl	800055c <puts>
    DecodePrintPeripherals(Peripherals);
 800a7e8:	486c      	ldr	r0, [pc, #432]	; (800a99c <CmdDecode+0x230>)
 800a7ea:	f7ff ff63 	bl	800a6b4 <DecodePrintPeripherals>
    printf("\n\n");
 800a7ee:	e7f2      	b.n	800a7d6 <CmdDecode+0x6a>
    p++;
 800a7f0:	3410      	adds	r4, #16
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 800a7f2:	6820      	ldr	r0, [r4, #0]
 800a7f4:	9d00      	ldr	r5, [sp, #0]
 800a7f6:	b930      	cbnz	r0, 800a806 <CmdDecode+0x9a>
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 800a7f8:	9900      	ldr	r1, [sp, #0]
 800a7fa:	486e      	ldr	r0, [pc, #440]	; (800a9b4 <CmdDecode+0x248>)
 800a7fc:	f7f5 fe5a 	bl	80004b4 <printf>
 800a800:	e7f2      	b.n	800a7e8 <CmdDecode+0x7c>
  p = Peripherals;
 800a802:	4c66      	ldr	r4, [pc, #408]	; (800a99c <CmdDecode+0x230>)
 800a804:	e7f5      	b.n	800a7f2 <CmdDecode+0x86>
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 800a806:	f7ff fe41 	bl	800a48c <Uncompress>
 800a80a:	4601      	mov	r1, r0
 800a80c:	4628      	mov	r0, r5
 800a80e:	f7f5 ffa3 	bl	8000758 <strcasecmp>
 800a812:	4605      	mov	r5, r0
 800a814:	2800      	cmp	r0, #0
 800a816:	d1eb      	bne.n	800a7f0 <CmdDecode+0x84>
  if(p->name == NULL) {
 800a818:	6823      	ldr	r3, [r4, #0]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d0ec      	beq.n	800a7f8 <CmdDecode+0x8c>
  rc = fetch_string_arg(&rname);
 800a81e:	a801      	add	r0, sp, #4
 800a820:	f7ff fbd4 	bl	8009fcc <fetch_string_arg>
  if(rc) {
 800a824:	b120      	cbz	r0, 800a830 <CmdDecode+0xc4>
    DecodePeripheral(p,0);
 800a826:	4629      	mov	r1, r5
      DecodePeripheral(p,1);
 800a828:	4620      	mov	r0, r4
 800a82a:	f7ff ff19 	bl	800a660 <DecodePeripheral>
      return;
 800a82e:	e7c6      	b.n	800a7be <CmdDecode+0x52>
  r = p->registers;
 800a830:	68a5      	ldr	r5, [r4, #8]
  i = p->numRegisters;
 800a832:	89a7      	ldrh	r7, [r4, #12]
  while((i--) && strcasecmp(rname,Uncompress(r->name))) {
 800a834:	9e01      	ldr	r6, [sp, #4]
 800a836:	2f00      	cmp	r7, #0
 800a838:	f000 809e 	beq.w	800a978 <CmdDecode+0x20c>
 800a83c:	6828      	ldr	r0, [r5, #0]
 800a83e:	f7ff fe25 	bl	800a48c <Uncompress>
 800a842:	4601      	mov	r1, r0
 800a844:	4630      	mov	r0, r6
 800a846:	f7f5 ff87 	bl	8000758 <strcasecmp>
 800a84a:	3f01      	subs	r7, #1
 800a84c:	b958      	cbnz	r0, 800a866 <CmdDecode+0xfa>
  rc = fetch_string_arg(&fname);
 800a84e:	a802      	add	r0, sp, #8
 800a850:	f7ff fbbc 	bl	8009fcc <fetch_string_arg>
  if(rc == 0) {
 800a854:	b158      	cbz	r0, 800a86e <CmdDecode+0x102>
  val = DecodeReadRegister(p,r);
 800a856:	4629      	mov	r1, r5
 800a858:	4620      	mov	r0, r4
 800a85a:	f7ff fe55 	bl	800a508 <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 800a85e:	2301      	movs	r3, #1
  val = DecodeReadRegister(p,r);
 800a860:	4602      	mov	r2, r0
 800a862:	9003      	str	r0, [sp, #12]
  DecodeRegister(r,p->base, val,1);
 800a864:	e010      	b.n	800a888 <CmdDecode+0x11c>
    r++;
 800a866:	3510      	adds	r5, #16
 800a868:	e7e4      	b.n	800a834 <CmdDecode+0xc8>
      DecodePeripheral(p,1);
 800a86a:	2101      	movs	r1, #1
 800a86c:	e7dc      	b.n	800a828 <CmdDecode+0xbc>
    if(strcasecmp(fname,"val") == 0) {
 800a86e:	4952      	ldr	r1, [pc, #328]	; (800a9b8 <CmdDecode+0x24c>)
 800a870:	9802      	ldr	r0, [sp, #8]
 800a872:	f7f5 ff71 	bl	8000758 <strcasecmp>
 800a876:	b960      	cbnz	r0, 800a892 <CmdDecode+0x126>
      rc = fetch_uint32_arg(&val);
 800a878:	a803      	add	r0, sp, #12
 800a87a:	f7ff fb93 	bl	8009fa4 <fetch_uint32_arg>
      if(rc) {
 800a87e:	b108      	cbz	r0, 800a884 <CmdDecode+0x118>
	printf("Missing value to use in decode\n");
 800a880:	484e      	ldr	r0, [pc, #312]	; (800a9bc <CmdDecode+0x250>)
 800a882:	e782      	b.n	800a78a <CmdDecode+0x1e>
      DecodeRegister(r,p->base,val,1);
 800a884:	9a03      	ldr	r2, [sp, #12]
 800a886:	2301      	movs	r3, #1
  DecodeRegister(r,p->base, val,1);
 800a888:	6861      	ldr	r1, [r4, #4]
 800a88a:	4628      	mov	r0, r5
 800a88c:	f7ff feb8 	bl	800a600 <DecodeRegister>
  return;
 800a890:	e795      	b.n	800a7be <CmdDecode+0x52>
    f = r->fields;
 800a892:	68ae      	ldr	r6, [r5, #8]
    while((f->name != NULL) && strcasecmp(fname,Uncompress(f->name))) {
 800a894:	6830      	ldr	r0, [r6, #0]
 800a896:	2800      	cmp	r0, #0
 800a898:	d049      	beq.n	800a92e <CmdDecode+0x1c2>
 800a89a:	9f02      	ldr	r7, [sp, #8]
 800a89c:	f7ff fdf6 	bl	800a48c <Uncompress>
 800a8a0:	4601      	mov	r1, r0
 800a8a2:	4638      	mov	r0, r7
 800a8a4:	f7f5 ff58 	bl	8000758 <strcasecmp>
 800a8a8:	b970      	cbnz	r0, 800a8c8 <CmdDecode+0x15c>
    if(f->name != NULL) {
 800a8aa:	6833      	ldr	r3, [r6, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d03e      	beq.n	800a92e <CmdDecode+0x1c2>
      rc = fetch_uint32_arg(&val);
 800a8b0:	a803      	add	r0, sp, #12
 800a8b2:	f7ff fb77 	bl	8009fa4 <fetch_uint32_arg>
      if(rc) {
 800a8b6:	b148      	cbz	r0, 800a8cc <CmdDecode+0x160>
	printf("Missing Value to program into register %s\n",
 800a8b8:	6828      	ldr	r0, [r5, #0]
 800a8ba:	f7ff fde7 	bl	800a48c <Uncompress>
 800a8be:	4601      	mov	r1, r0
 800a8c0:	483f      	ldr	r0, [pc, #252]	; (800a9c0 <CmdDecode+0x254>)
      printf("Invalid number '%s' entered.\n",
 800a8c2:	f7f5 fdf7 	bl	80004b4 <printf>
      return;
 800a8c6:	e77a      	b.n	800a7be <CmdDecode+0x52>
      f++;
 800a8c8:	3608      	adds	r6, #8
 800a8ca:	e7e3      	b.n	800a894 <CmdDecode+0x128>
      t = DecodeReadRegister(p,r);
 800a8cc:	4629      	mov	r1, r5
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	f7ff fe1a 	bl	800a508 <DecodeReadRegister>
      m = (1<<f->width)-1;
 800a8d4:	7972      	ldrb	r2, [r6, #5]
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	4093      	lsls	r3, r2
      oval = (t >> f->offset) & m; /* Save old value */
 800a8da:	7932      	ldrb	r2, [r6, #4]
      m = (1<<f->width)-1;
 800a8dc:	3b01      	subs	r3, #1
      t &= ~(m << f->offset);
 800a8de:	fa03 f102 	lsl.w	r1, r3, r2
      oval = (t >> f->offset) & m; /* Save old value */
 800a8e2:	fa20 f702 	lsr.w	r7, r0, r2
      t &= ~(m << f->offset);
 800a8e6:	ea20 0001 	bic.w	r0, r0, r1
      t |= (val & m) << f->offset;
 800a8ea:	9903      	ldr	r1, [sp, #12]
      oval = (t >> f->offset) & m; /* Save old value */
 800a8ec:	401f      	ands	r7, r3
      t |= (val & m) << f->offset;
 800a8ee:	400b      	ands	r3, r1
 800a8f0:	fa03 f202 	lsl.w	r2, r3, r2
      DecodeWriteRegister(p,r,t);
 800a8f4:	4302      	orrs	r2, r0
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	f7ff fe2f 	bl	800a55c <DecodeWriteRegister>
      printf("%s.",
 800a8fe:	6820      	ldr	r0, [r4, #0]
 800a900:	f7ff fdc4 	bl	800a48c <Uncompress>
 800a904:	4601      	mov	r1, r0
 800a906:	482f      	ldr	r0, [pc, #188]	; (800a9c4 <CmdDecode+0x258>)
 800a908:	f7f5 fdd4 	bl	80004b4 <printf>
      printf("%s.",
 800a90c:	6828      	ldr	r0, [r5, #0]
 800a90e:	f7ff fdbd 	bl	800a48c <Uncompress>
 800a912:	4601      	mov	r1, r0
 800a914:	482b      	ldr	r0, [pc, #172]	; (800a9c4 <CmdDecode+0x258>)
 800a916:	f7f5 fdcd 	bl	80004b4 <printf>
      printf("%s (%d) -> (%d)\n",
 800a91a:	6830      	ldr	r0, [r6, #0]
 800a91c:	f7ff fdb6 	bl	800a48c <Uncompress>
 800a920:	9b03      	ldr	r3, [sp, #12]
 800a922:	4601      	mov	r1, r0
 800a924:	463a      	mov	r2, r7
 800a926:	4828      	ldr	r0, [pc, #160]	; (800a9c8 <CmdDecode+0x25c>)
 800a928:	f7f5 fdc4 	bl	80004b4 <printf>
      return;
 800a92c:	e747      	b.n	800a7be <CmdDecode+0x52>
    errno = 0;
 800a92e:	f7f5 fd1f 	bl	8000370 <__errno>
 800a932:	2200      	movs	r2, #0
 800a934:	6002      	str	r2, [r0, #0]
    val = strtoul(fname,NULL,0);
 800a936:	4611      	mov	r1, r2
 800a938:	9802      	ldr	r0, [sp, #8]
 800a93a:	f7f6 f8f9 	bl	8000b30 <strtoul>
 800a93e:	9003      	str	r0, [sp, #12]
    if(errno != 0) {
 800a940:	f7f5 fd16 	bl	8000370 <__errno>
 800a944:	6803      	ldr	r3, [r0, #0]
 800a946:	b113      	cbz	r3, 800a94e <CmdDecode+0x1e2>
      printf("Invalid number '%s' entered.\n",
 800a948:	9902      	ldr	r1, [sp, #8]
 800a94a:	4820      	ldr	r0, [pc, #128]	; (800a9cc <CmdDecode+0x260>)
 800a94c:	e7b9      	b.n	800a8c2 <CmdDecode+0x156>
    DecodeWriteRegister(p,r,val);
 800a94e:	9a03      	ldr	r2, [sp, #12]
 800a950:	4629      	mov	r1, r5
 800a952:	4620      	mov	r0, r4
 800a954:	f7ff fe02 	bl	800a55c <DecodeWriteRegister>
    printf("%s.",
 800a958:	6820      	ldr	r0, [r4, #0]
 800a95a:	f7ff fd97 	bl	800a48c <Uncompress>
 800a95e:	4601      	mov	r1, r0
 800a960:	4818      	ldr	r0, [pc, #96]	; (800a9c4 <CmdDecode+0x258>)
 800a962:	f7f5 fda7 	bl	80004b4 <printf>
    printf("%s = 0x%08x\n",
 800a966:	6828      	ldr	r0, [r5, #0]
 800a968:	f7ff fd90 	bl	800a48c <Uncompress>
 800a96c:	9a03      	ldr	r2, [sp, #12]
 800a96e:	4601      	mov	r1, r0
 800a970:	4817      	ldr	r0, [pc, #92]	; (800a9d0 <CmdDecode+0x264>)
 800a972:	f7f5 fd9f 	bl	80004b4 <printf>
    return;
 800a976:	e722      	b.n	800a7be <CmdDecode+0x52>
    if(strcasecmp(rname,"full") == 0) {
 800a978:	4916      	ldr	r1, [pc, #88]	; (800a9d4 <CmdDecode+0x268>)
 800a97a:	4630      	mov	r0, r6
 800a97c:	f7f5 feec 	bl	8000758 <strcasecmp>
 800a980:	2800      	cmp	r0, #0
 800a982:	f43f af72 	beq.w	800a86a <CmdDecode+0xfe>
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 800a986:	6820      	ldr	r0, [r4, #0]
 800a988:	f7ff fd80 	bl	800a48c <Uncompress>
 800a98c:	4631      	mov	r1, r6
 800a98e:	4602      	mov	r2, r0
 800a990:	4811      	ldr	r0, [pc, #68]	; (800a9d8 <CmdDecode+0x26c>)
 800a992:	f7f5 fd8f 	bl	80004b4 <printf>
    DecodePrintRegisters(p->registers,p->numRegisters);
 800a996:	e71a      	b.n	800a7ce <CmdDecode+0x62>
 800a998:	0800f808 	.word	0x0800f808
 800a99c:	0801a0b8 	.word	0x0801a0b8
 800a9a0:	0800fa1b 	.word	0x0800fa1b
 800a9a4:	0800fa70 	.word	0x0800fa70
 800a9a8:	0800faab 	.word	0x0800faab
 800a9ac:	0800fb39 	.word	0x0800fb39
 800a9b0:	0800fad0 	.word	0x0800fad0
 800a9b4:	0800faff 	.word	0x0800faff
 800a9b8:	0800fb78 	.word	0x0800fb78
 800a9bc:	0800fb7c 	.word	0x0800fb7c
 800a9c0:	0800fb9b 	.word	0x0800fb9b
 800a9c4:	0800fbc6 	.word	0x0800fbc6
 800a9c8:	0800fbca 	.word	0x0800fbca
 800a9cc:	0800fbdb 	.word	0x0800fbdb
 800a9d0:	0800fbf9 	.word	0x0800fbf9
 800a9d4:	0800fc06 	.word	0x0800fc06
 800a9d8:	0800fb3b 	.word	0x0800fb3b

0800a9dc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a9dc:	4915      	ldr	r1, [pc, #84]	; (800aa34 <SystemInit+0x58>)
 800a9de:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800a9e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a9e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a9ea:	4b13      	ldr	r3, [pc, #76]	; (800aa38 <SystemInit+0x5c>)
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	f042 0201 	orr.w	r2, r2, #1
 800a9f2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 800a9f4:	6858      	ldr	r0, [r3, #4]
 800a9f6:	4a11      	ldr	r2, [pc, #68]	; (800aa3c <SystemInit+0x60>)
 800a9f8:	4002      	ands	r2, r0
 800a9fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800aa02:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800aa06:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aa0e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800aa10:	685a      	ldr	r2, [r3, #4]
 800aa12:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800aa16:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800aa18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa1a:	f022 020f 	bic.w	r2, r2, #15
 800aa1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 800aa20:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aa22:	4a07      	ldr	r2, [pc, #28]	; (800aa40 <SystemInit+0x64>)
 800aa24:	4002      	ands	r2, r0
 800aa26:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800aa28:	2200      	movs	r2, #0
 800aa2a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800aa2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa30:	608b      	str	r3, [r1, #8]
#endif
}
 800aa32:	4770      	bx	lr
 800aa34:	e000ed00 	.word	0xe000ed00
 800aa38:	40021000 	.word	0x40021000
 800aa3c:	f87fc00c 	.word	0xf87fc00c
 800aa40:	ff00fccc 	.word	0xff00fccc

0800aa44 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aa44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aa48:	6803      	ldr	r3, [r0, #0]
 800aa4a:	07db      	lsls	r3, r3, #31
{
 800aa4c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aa4e:	d46c      	bmi.n	800ab2a <HAL_RCC_OscConfig+0xe6>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aa50:	6823      	ldr	r3, [r4, #0]
 800aa52:	079f      	lsls	r7, r3, #30
 800aa54:	f100 8128 	bmi.w	800aca8 <HAL_RCC_OscConfig+0x264>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa58:	6823      	ldr	r3, [r4, #0]
 800aa5a:	0719      	lsls	r1, r3, #28
 800aa5c:	f100 81b6 	bmi.w	800adcc <HAL_RCC_OscConfig+0x388>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa60:	6823      	ldr	r3, [r4, #0]
 800aa62:	075a      	lsls	r2, r3, #29
 800aa64:	d55b      	bpl.n	800ab1e <HAL_RCC_OscConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __PWR_CLK_ENABLE();
 800aa66:	4dae      	ldr	r5, [pc, #696]	; (800ad20 <HAL_RCC_OscConfig+0x2dc>)

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 800aa68:	4eae      	ldr	r6, [pc, #696]	; (800ad24 <HAL_RCC_OscConfig+0x2e0>)
    __PWR_CLK_ENABLE();
 800aa6a:	69eb      	ldr	r3, [r5, #28]
 800aa6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa70:	61eb      	str	r3, [r5, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 800aa72:	6833      	ldr	r3, [r6, #0]
 800aa74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa78:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aa7a:	f000 fc9b 	bl	800b3b4 <HAL_GetTick>
 800aa7e:	4607      	mov	r7, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800aa80:	6833      	ldr	r3, [r6, #0]
 800aa82:	05db      	lsls	r3, r3, #23
 800aa84:	f140 81ea 	bpl.w	800ae5c <HAL_RCC_OscConfig+0x418>
        return HAL_TIMEOUT;
      }      
    }

    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 800aa88:	6a2b      	ldr	r3, [r5, #32]
 800aa8a:	f023 0305 	bic.w	r3, r3, #5
 800aa8e:	622b      	str	r3, [r5, #32]
    
    /* Get timeout */
    tickstart = HAL_GetTick();
 800aa90:	f000 fc90 	bl	800b3b4 <HAL_GetTick>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa94:	2602      	movs	r6, #2
 800aa96:	4607      	mov	r7, r0
      
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa98:	f04f 0801 	mov.w	r8, #1
 800aa9c:	fa96 f3a6 	rbit	r3, r6
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800aaa0:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aaa4:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800aaa8:	fab3 f383 	clz	r3, r3
 800aaac:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800aab0:	f033 0302 	bics.w	r3, r3, #2
 800aab4:	bf0c      	ite	eq
 800aab6:	6a2a      	ldreq	r2, [r5, #32]
 800aab8:	6a6a      	ldrne	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aaba:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800aabe:	fab3 f383 	clz	r3, r3
 800aac2:	f003 031f 	and.w	r3, r3, #31
 800aac6:	fa08 f303 	lsl.w	r3, r8, r3
 800aaca:	4213      	tst	r3, r2
 800aacc:	f040 81cd 	bne.w	800ae6a <HAL_RCC_OscConfig+0x426>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aad0:	6a2b      	ldr	r3, [r5, #32]
 800aad2:	68e6      	ldr	r6, [r4, #12]
 800aad4:	f023 0305 	bic.w	r3, r3, #5
 800aad8:	4333      	orrs	r3, r6
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800aada:	2e01      	cmp	r6, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aadc:	622b      	str	r3, [r5, #32]
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800aade:	f040 81d7 	bne.w	800ae90 <HAL_RCC_OscConfig+0x44c>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800aae2:	f000 fc67 	bl	800b3b4 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aae6:	2702      	movs	r7, #2
 800aae8:	4680      	mov	r8, r0
 800aaea:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800aaee:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aaf2:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800aaf6:	fab3 f383 	clz	r3, r3
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aafa:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800aafe:	f033 0302 	bics.w	r3, r3, #2
 800ab02:	bf0c      	ite	eq
 800ab04:	6a2a      	ldreq	r2, [r5, #32]
 800ab06:	6a6a      	ldrne	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab08:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800ab0c:	fab3 f383 	clz	r3, r3
 800ab10:	f003 031f 	and.w	r3, r3, #31
 800ab14:	fa06 f303 	lsl.w	r3, r6, r3
 800ab18:	4213      	tst	r3, r2
 800ab1a:	f000 81af 	beq.w	800ae7c <HAL_RCC_OscConfig+0x438>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ab1e:	69e2      	ldr	r2, [r4, #28]
 800ab20:	2a00      	cmp	r2, #0
 800ab22:	f040 81dd 	bne.w	800aee0 <HAL_RCC_OscConfig+0x49c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800ab26:	2000      	movs	r0, #0
 800ab28:	e02c      	b.n	800ab84 <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800ab2a:	4d7d      	ldr	r5, [pc, #500]	; (800ad20 <HAL_RCC_OscConfig+0x2dc>)
 800ab2c:	686b      	ldr	r3, [r5, #4]
 800ab2e:	f003 030c 	and.w	r3, r3, #12
 800ab32:	2b04      	cmp	r3, #4
 800ab34:	d007      	beq.n	800ab46 <HAL_RCC_OscConfig+0x102>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800ab36:	686b      	ldr	r3, [r5, #4]
 800ab38:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800ab3c:	2b08      	cmp	r3, #8
 800ab3e:	d129      	bne.n	800ab94 <HAL_RCC_OscConfig+0x150>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800ab40:	686b      	ldr	r3, [r5, #4]
 800ab42:	03de      	lsls	r6, r3, #15
 800ab44:	d526      	bpl.n	800ab94 <HAL_RCC_OscConfig+0x150>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ab4a:	fa93 f2a3 	rbit	r2, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800ab4e:	fab2 f282 	clz	r2, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
 800ab52:	f3c2 1242 	ubfx	r2, r2, #5, #3
 800ab56:	f032 0201 	bics.w	r2, r2, #1
 800ab5a:	d115      	bne.n	800ab88 <HAL_RCC_OscConfig+0x144>
 800ab5c:	6829      	ldr	r1, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ab62:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800ab66:	fab3 f383 	clz	r3, r3
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f003 031f 	and.w	r3, r3, #31
 800ab70:	fa02 f303 	lsl.w	r3, r2, r3
 800ab74:	420b      	tst	r3, r1
 800ab76:	f43f af6b 	beq.w	800aa50 <HAL_RCC_OscConfig+0xc>
 800ab7a:	6863      	ldr	r3, [r4, #4]
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	f43f af67 	beq.w	800aa50 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800ab82:	2001      	movs	r0, #1
}
 800ab84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab88:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800ab8c:	fab3 f383 	clz	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
 800ab90:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800ab92:	e7e4      	b.n	800ab5e <HAL_RCC_OscConfig+0x11a>
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 800ab94:	2300      	movs	r3, #0
 800ab96:	70ab      	strb	r3, [r5, #2]
      tickstart = HAL_GetTick();
 800ab98:	f000 fc0c 	bl	800b3b4 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab9c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800aba0:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aba2:	f04f 0801 	mov.w	r8, #1
        if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 800aba6:	f241 3988 	movw	r9, #5000	; 0x1388
 800abaa:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800abae:	fab3 f383 	clz	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800abb2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800abb6:	f033 0301 	bics.w	r3, r3, #1
 800abba:	d13f      	bne.n	800ac3c <HAL_RCC_OscConfig+0x1f8>
 800abbc:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abbe:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800abc2:	fab3 f383 	clz	r3, r3
 800abc6:	f003 031f 	and.w	r3, r3, #31
 800abca:	fa08 f303 	lsl.w	r3, r8, r3
 800abce:	4213      	tst	r3, r2
 800abd0:	d12d      	bne.n	800ac2e <HAL_RCC_OscConfig+0x1ea>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800abd2:	7923      	ldrb	r3, [r4, #4]
 800abd4:	70ab      	strb	r3, [r5, #2]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800abd6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800abd8:	68a2      	ldr	r2, [r4, #8]
 800abda:	f023 030f 	bic.w	r3, r3, #15
 800abde:	4313      	orrs	r3, r2
 800abe0:	62eb      	str	r3, [r5, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 800abe2:	6866      	ldr	r6, [r4, #4]
 800abe4:	2e01      	cmp	r6, #1
 800abe6:	d135      	bne.n	800ac54 <HAL_RCC_OscConfig+0x210>
        tickstart = HAL_GetTick();
 800abe8:	f000 fbe4 	bl	800b3b4 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abec:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 800abf0:	4680      	mov	r8, r0
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 800abf2:	f241 3988 	movw	r9, #5000	; 0x1388
 800abf6:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800abfa:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800abfe:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800ac02:	f033 0301 	bics.w	r3, r3, #1
 800ac06:	d11f      	bne.n	800ac48 <HAL_RCC_OscConfig+0x204>
 800ac08:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac0a:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800ac0e:	fab3 f383 	clz	r3, r3
 800ac12:	f003 031f 	and.w	r3, r3, #31
 800ac16:	fa06 f303 	lsl.w	r3, r6, r3
 800ac1a:	4213      	tst	r3, r2
 800ac1c:	f47f af18 	bne.w	800aa50 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 800ac20:	f000 fbc8 	bl	800b3b4 <HAL_GetTick>
 800ac24:	eba0 0008 	sub.w	r0, r0, r8
 800ac28:	4548      	cmp	r0, r9
 800ac2a:	d9e4      	bls.n	800abf6 <HAL_RCC_OscConfig+0x1b2>
 800ac2c:	e004      	b.n	800ac38 <HAL_RCC_OscConfig+0x1f4>
        if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 800ac2e:	f000 fbc1 	bl	800b3b4 <HAL_GetTick>
 800ac32:	1bc0      	subs	r0, r0, r7
 800ac34:	4548      	cmp	r0, r9
 800ac36:	d9b8      	bls.n	800abaa <HAL_RCC_OscConfig+0x166>
          return HAL_TIMEOUT;
 800ac38:	2003      	movs	r0, #3
 800ac3a:	e7a3      	b.n	800ab84 <HAL_RCC_OscConfig+0x140>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac3c:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800ac40:	fab3 f383 	clz	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ac44:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800ac46:	e7ba      	b.n	800abbe <HAL_RCC_OscConfig+0x17a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac48:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800ac4c:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac50:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800ac52:	e7da      	b.n	800ac0a <HAL_RCC_OscConfig+0x1c6>
        tickstart = HAL_GetTick();
 800ac54:	f000 fbae 	bl	800b3b4 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac58:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800ac5c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ac5e:	f04f 0801 	mov.w	r8, #1
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 800ac62:	f241 3988 	movw	r9, #5000	; 0x1388
 800ac66:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800ac6a:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ac6e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800ac72:	f033 0301 	bics.w	r3, r3, #1
 800ac76:	d111      	bne.n	800ac9c <HAL_RCC_OscConfig+0x258>
 800ac78:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac7a:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800ac7e:	fab3 f383 	clz	r3, r3
 800ac82:	f003 031f 	and.w	r3, r3, #31
 800ac86:	fa08 f303 	lsl.w	r3, r8, r3
 800ac8a:	4213      	tst	r3, r2
 800ac8c:	f43f aee0 	beq.w	800aa50 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 800ac90:	f000 fb90 	bl	800b3b4 <HAL_GetTick>
 800ac94:	1bc0      	subs	r0, r0, r7
 800ac96:	4548      	cmp	r0, r9
 800ac98:	d9e5      	bls.n	800ac66 <HAL_RCC_OscConfig+0x222>
 800ac9a:	e7cd      	b.n	800ac38 <HAL_RCC_OscConfig+0x1f4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac9c:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800aca0:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aca4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800aca6:	e7e8      	b.n	800ac7a <HAL_RCC_OscConfig+0x236>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800aca8:	4d1d      	ldr	r5, [pc, #116]	; (800ad20 <HAL_RCC_OscConfig+0x2dc>)
 800acaa:	686b      	ldr	r3, [r5, #4]
 800acac:	f013 0f0c 	tst.w	r3, #12
 800acb0:	d007      	beq.n	800acc2 <HAL_RCC_OscConfig+0x27e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800acb2:	686b      	ldr	r3, [r5, #4]
 800acb4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800acb8:	2b08      	cmp	r3, #8
 800acba:	d135      	bne.n	800ad28 <HAL_RCC_OscConfig+0x2e4>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800acbc:	686b      	ldr	r3, [r5, #4]
 800acbe:	03d8      	lsls	r0, r3, #15
 800acc0:	d432      	bmi.n	800ad28 <HAL_RCC_OscConfig+0x2e4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800acc2:	2302      	movs	r3, #2
 800acc4:	fa93 f2a3 	rbit	r2, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800acc8:	fab2 f282 	clz	r2, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800accc:	f3c2 1242 	ubfx	r2, r2, #5, #3
 800acd0:	f032 0201 	bics.w	r2, r2, #1
 800acd4:	d11e      	bne.n	800ad14 <HAL_RCC_OscConfig+0x2d0>
 800acd6:	6829      	ldr	r1, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800acd8:	2302      	movs	r3, #2
 800acda:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800acde:	fab3 f383 	clz	r3, r3
 800ace2:	2201      	movs	r2, #1
 800ace4:	f003 031f 	and.w	r3, r3, #31
 800ace8:	fa02 f303 	lsl.w	r3, r2, r3
 800acec:	420b      	tst	r3, r1
 800acee:	d003      	beq.n	800acf8 <HAL_RCC_OscConfig+0x2b4>
 800acf0:	6923      	ldr	r3, [r4, #16]
 800acf2:	4293      	cmp	r3, r2
 800acf4:	f47f af45 	bne.w	800ab82 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800acf8:	6829      	ldr	r1, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800acfa:	23f8      	movs	r3, #248	; 0xf8
 800acfc:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800ad00:	fab3 f383 	clz	r3, r3
 800ad04:	6962      	ldr	r2, [r4, #20]
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	409a      	lsls	r2, r3
 800ad0a:	f021 03f8 	bic.w	r3, r1, #248	; 0xf8
 800ad0e:	431a      	orrs	r2, r3
 800ad10:	602a      	str	r2, [r5, #0]
 800ad12:	e6a1      	b.n	800aa58 <HAL_RCC_OscConfig+0x14>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad14:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800ad18:	fab3 f383 	clz	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ad1c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800ad1e:	e7db      	b.n	800acd8 <HAL_RCC_OscConfig+0x294>
 800ad20:	40021000 	.word	0x40021000
 800ad24:	40007000 	.word	0x40007000
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ad28:	6922      	ldr	r2, [r4, #16]
 800ad2a:	4bb3      	ldr	r3, [pc, #716]	; (800aff8 <HAL_RCC_OscConfig+0x5b4>)
 800ad2c:	b332      	cbz	r2, 800ad7c <HAL_RCC_OscConfig+0x338>
        __HAL_RCC_HSI_ENABLE();
 800ad2e:	2601      	movs	r6, #1
 800ad30:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800ad32:	f000 fb3f 	bl	800b3b4 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad36:	2702      	movs	r7, #2
 800ad38:	4680      	mov	r8, r0
 800ad3a:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800ad3e:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad42:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800ad46:	f033 0301 	bics.w	r3, r3, #1
 800ad4a:	d111      	bne.n	800ad70 <HAL_RCC_OscConfig+0x32c>
 800ad4c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad4e:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800ad52:	fab3 f383 	clz	r3, r3
 800ad56:	f003 031f 	and.w	r3, r3, #31
 800ad5a:	fa06 f303 	lsl.w	r3, r6, r3
 800ad5e:	4213      	tst	r3, r2
 800ad60:	d1ca      	bne.n	800acf8 <HAL_RCC_OscConfig+0x2b4>
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 800ad62:	f000 fb27 	bl	800b3b4 <HAL_GetTick>
 800ad66:	eba0 0008 	sub.w	r0, r0, r8
 800ad6a:	2864      	cmp	r0, #100	; 0x64
 800ad6c:	d9e5      	bls.n	800ad3a <HAL_RCC_OscConfig+0x2f6>
 800ad6e:	e763      	b.n	800ac38 <HAL_RCC_OscConfig+0x1f4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad70:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800ad74:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad78:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800ad7a:	e7e8      	b.n	800ad4e <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_HSI_DISABLE();
 800ad7c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800ad7e:	f000 fb19 	bl	800b3b4 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad82:	2602      	movs	r6, #2
 800ad84:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ad86:	f04f 0801 	mov.w	r8, #1
 800ad8a:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800ad8e:	fab3 f383 	clz	r3, r3
 800ad92:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800ad96:	f033 0301 	bics.w	r3, r3, #1
 800ad9a:	d111      	bne.n	800adc0 <HAL_RCC_OscConfig+0x37c>
 800ad9c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad9e:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800ada2:	fab3 f383 	clz	r3, r3
 800ada6:	f003 031f 	and.w	r3, r3, #31
 800adaa:	fa08 f303 	lsl.w	r3, r8, r3
 800adae:	4213      	tst	r3, r2
 800adb0:	f43f ae52 	beq.w	800aa58 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 800adb4:	f000 fafe 	bl	800b3b4 <HAL_GetTick>
 800adb8:	1bc0      	subs	r0, r0, r7
 800adba:	2864      	cmp	r0, #100	; 0x64
 800adbc:	d9e5      	bls.n	800ad8a <HAL_RCC_OscConfig+0x346>
 800adbe:	e73b      	b.n	800ac38 <HAL_RCC_OscConfig+0x1f4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800adc0:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800adc4:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800adc8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800adca:	e7e8      	b.n	800ad9e <HAL_RCC_OscConfig+0x35a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800adcc:	69a2      	ldr	r2, [r4, #24]
 800adce:	4d8b      	ldr	r5, [pc, #556]	; (800affc <HAL_RCC_OscConfig+0x5b8>)
 800add0:	4b89      	ldr	r3, [pc, #548]	; (800aff8 <HAL_RCC_OscConfig+0x5b4>)
 800add2:	b30a      	cbz	r2, 800ae18 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_LSI_ENABLE();
 800add4:	2701      	movs	r7, #1
 800add6:	f8c3 7480 	str.w	r7, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800adda:	f000 faeb 	bl	800b3b4 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800adde:	2602      	movs	r6, #2
 800ade0:	4680      	mov	r8, r0
 800ade2:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800ade6:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800adea:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800adee:	fab3 f383 	clz	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800adf2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800adf4:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800adf8:	fab3 f383 	clz	r3, r3
 800adfc:	f003 031f 	and.w	r3, r3, #31
 800ae00:	fa07 f303 	lsl.w	r3, r7, r3
 800ae04:	4213      	tst	r3, r2
 800ae06:	f47f ae2b 	bne.w	800aa60 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 800ae0a:	f000 fad3 	bl	800b3b4 <HAL_GetTick>
 800ae0e:	eba0 0008 	sub.w	r0, r0, r8
 800ae12:	2864      	cmp	r0, #100	; 0x64
 800ae14:	d9e5      	bls.n	800ade2 <HAL_RCC_OscConfig+0x39e>
 800ae16:	e70f      	b.n	800ac38 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_LSI_DISABLE();
 800ae18:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800ae1c:	f000 faca 	bl	800b3b4 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae20:	2602      	movs	r6, #2
 800ae22:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ae24:	f04f 0801 	mov.w	r8, #1
 800ae28:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800ae2c:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae30:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800ae34:	fab3 f383 	clz	r3, r3
 800ae38:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae3a:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800ae3e:	fab3 f383 	clz	r3, r3
 800ae42:	f003 031f 	and.w	r3, r3, #31
 800ae46:	fa08 f303 	lsl.w	r3, r8, r3
 800ae4a:	4213      	tst	r3, r2
 800ae4c:	f43f ae08 	beq.w	800aa60 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 800ae50:	f000 fab0 	bl	800b3b4 <HAL_GetTick>
 800ae54:	1bc0      	subs	r0, r0, r7
 800ae56:	2864      	cmp	r0, #100	; 0x64
 800ae58:	d9e6      	bls.n	800ae28 <HAL_RCC_OscConfig+0x3e4>
 800ae5a:	e6ed      	b.n	800ac38 <HAL_RCC_OscConfig+0x1f4>
      if((HAL_GetTick()-tickstart) > DBP_TIMEOUT_VALUE)
 800ae5c:	f000 faaa 	bl	800b3b4 <HAL_GetTick>
 800ae60:	1bc0      	subs	r0, r0, r7
 800ae62:	2864      	cmp	r0, #100	; 0x64
 800ae64:	f67f ae0c 	bls.w	800aa80 <HAL_RCC_OscConfig+0x3c>
 800ae68:	e6e6      	b.n	800ac38 <HAL_RCC_OscConfig+0x1f4>
      if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 800ae6a:	f000 faa3 	bl	800b3b4 <HAL_GetTick>
 800ae6e:	f241 3388 	movw	r3, #5000	; 0x1388
 800ae72:	1bc0      	subs	r0, r0, r7
 800ae74:	4298      	cmp	r0, r3
 800ae76:	f67f ae11 	bls.w	800aa9c <HAL_RCC_OscConfig+0x58>
 800ae7a:	e6dd      	b.n	800ac38 <HAL_RCC_OscConfig+0x1f4>
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 800ae7c:	f000 fa9a 	bl	800b3b4 <HAL_GetTick>
 800ae80:	f241 3388 	movw	r3, #5000	; 0x1388
 800ae84:	eba0 0008 	sub.w	r0, r0, r8
 800ae88:	4298      	cmp	r0, r3
 800ae8a:	f67f ae2e 	bls.w	800aaea <HAL_RCC_OscConfig+0xa6>
 800ae8e:	e6d3      	b.n	800ac38 <HAL_RCC_OscConfig+0x1f4>
      tickstart = HAL_GetTick();
 800ae90:	f000 fa90 	bl	800b3b4 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae94:	2602      	movs	r6, #2
 800ae96:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ae98:	f04f 0801 	mov.w	r8, #1
 800ae9c:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800aea0:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aea4:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800aea8:	fab3 f383 	clz	r3, r3
 800aeac:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800aeb0:	f033 0302 	bics.w	r3, r3, #2
 800aeb4:	bf0c      	ite	eq
 800aeb6:	6a2a      	ldreq	r2, [r5, #32]
 800aeb8:	6a6a      	ldrne	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aeba:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800aebe:	fab3 f383 	clz	r3, r3
 800aec2:	f003 031f 	and.w	r3, r3, #31
 800aec6:	fa08 f303 	lsl.w	r3, r8, r3
 800aeca:	4213      	tst	r3, r2
 800aecc:	f43f ae27 	beq.w	800ab1e <HAL_RCC_OscConfig+0xda>
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 800aed0:	f000 fa70 	bl	800b3b4 <HAL_GetTick>
 800aed4:	f241 3388 	movw	r3, #5000	; 0x1388
 800aed8:	1bc0      	subs	r0, r0, r7
 800aeda:	4298      	cmp	r0, r3
 800aedc:	d9de      	bls.n	800ae9c <HAL_RCC_OscConfig+0x458>
 800aede:	e6ab      	b.n	800ac38 <HAL_RCC_OscConfig+0x1f4>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aee0:	4d46      	ldr	r5, [pc, #280]	; (800affc <HAL_RCC_OscConfig+0x5b8>)
 800aee2:	686b      	ldr	r3, [r5, #4]
 800aee4:	f003 030c 	and.w	r3, r3, #12
 800aee8:	2b08      	cmp	r3, #8
 800aeea:	f43f ae4a 	beq.w	800ab82 <HAL_RCC_OscConfig+0x13e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aeee:	4b42      	ldr	r3, [pc, #264]	; (800aff8 <HAL_RCC_OscConfig+0x5b4>)
 800aef0:	2a02      	cmp	r2, #2
 800aef2:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 800aef6:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aef8:	d157      	bne.n	800afaa <HAL_RCC_OscConfig+0x566>
        tickstart = HAL_GetTick();
 800aefa:	f000 fa5b 	bl	800b3b4 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aefe:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 800af02:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800af04:	2601      	movs	r6, #1
 800af06:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800af0a:	fab3 f383 	clz	r3, r3
 800af0e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800af12:	f033 0301 	bics.w	r3, r3, #1
 800af16:	d13c      	bne.n	800af92 <HAL_RCC_OscConfig+0x54e>
 800af18:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af1a:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800af1e:	fab3 f383 	clz	r3, r3
 800af22:	f003 031f 	and.w	r3, r3, #31
 800af26:	fa06 f303 	lsl.w	r3, r6, r3
 800af2a:	4213      	tst	r3, r2
 800af2c:	d12a      	bne.n	800af84 <HAL_RCC_OscConfig+0x540>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800af2e:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 800af32:	686a      	ldr	r2, [r5, #4]
 800af34:	430b      	orrs	r3, r1
 800af36:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800af3a:	4313      	orrs	r3, r2
 800af3c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800af3e:	4b2e      	ldr	r3, [pc, #184]	; (800aff8 <HAL_RCC_OscConfig+0x5b4>)
 800af40:	661e      	str	r6, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800af42:	f000 fa37 	bl	800b3b4 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af46:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 800af4a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800af4c:	2701      	movs	r7, #1
 800af4e:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800af52:	fab3 f383 	clz	r3, r3
 800af56:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800af5a:	f033 0301 	bics.w	r3, r3, #1
 800af5e:	d11e      	bne.n	800af9e <HAL_RCC_OscConfig+0x55a>
 800af60:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af62:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800af66:	fab3 f383 	clz	r3, r3
 800af6a:	f003 031f 	and.w	r3, r3, #31
 800af6e:	fa07 f303 	lsl.w	r3, r7, r3
 800af72:	4213      	tst	r3, r2
 800af74:	f47f add7 	bne.w	800ab26 <HAL_RCC_OscConfig+0xe2>
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 800af78:	f000 fa1c 	bl	800b3b4 <HAL_GetTick>
 800af7c:	1b80      	subs	r0, r0, r6
 800af7e:	2864      	cmp	r0, #100	; 0x64
 800af80:	d9e5      	bls.n	800af4e <HAL_RCC_OscConfig+0x50a>
 800af82:	e659      	b.n	800ac38 <HAL_RCC_OscConfig+0x1f4>
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 800af84:	f000 fa16 	bl	800b3b4 <HAL_GetTick>
 800af88:	eba0 0008 	sub.w	r0, r0, r8
 800af8c:	2864      	cmp	r0, #100	; 0x64
 800af8e:	d9ba      	bls.n	800af06 <HAL_RCC_OscConfig+0x4c2>
 800af90:	e652      	b.n	800ac38 <HAL_RCC_OscConfig+0x1f4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af92:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800af96:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800af9a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800af9c:	e7bd      	b.n	800af1a <HAL_RCC_OscConfig+0x4d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af9e:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800afa2:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800afa6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800afa8:	e7db      	b.n	800af62 <HAL_RCC_OscConfig+0x51e>
        tickstart = HAL_GetTick();
 800afaa:	f000 fa03 	bl	800b3b4 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afae:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 800afb2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800afb4:	2701      	movs	r7, #1
 800afb6:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800afba:	fab3 f383 	clz	r3, r3
 800afbe:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800afc2:	f033 0301 	bics.w	r3, r3, #1
 800afc6:	d111      	bne.n	800afec <HAL_RCC_OscConfig+0x5a8>
 800afc8:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afca:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800afce:	fab3 f383 	clz	r3, r3
 800afd2:	f003 031f 	and.w	r3, r3, #31
 800afd6:	fa07 f303 	lsl.w	r3, r7, r3
 800afda:	4213      	tst	r3, r2
 800afdc:	f43f ada3 	beq.w	800ab26 <HAL_RCC_OscConfig+0xe2>
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 800afe0:	f000 f9e8 	bl	800b3b4 <HAL_GetTick>
 800afe4:	1b80      	subs	r0, r0, r6
 800afe6:	2864      	cmp	r0, #100	; 0x64
 800afe8:	d9e5      	bls.n	800afb6 <HAL_RCC_OscConfig+0x572>
 800afea:	e625      	b.n	800ac38 <HAL_RCC_OscConfig+0x1f4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afec:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800aff0:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aff4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800aff6:	e7e8      	b.n	800afca <HAL_RCC_OscConfig+0x586>
 800aff8:	42420000 	.word	0x42420000
 800affc:	40021000 	.word	0x40021000

0800b000 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800b000:	4aa9      	ldr	r2, [pc, #676]	; (800b2a8 <HAL_RCC_ClockConfig+0x2a8>)
 800b002:	6813      	ldr	r3, [r2, #0]
 800b004:	f003 0307 	and.w	r3, r3, #7
 800b008:	428b      	cmp	r3, r1
{
 800b00a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b00e:	4604      	mov	r4, r0
 800b010:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800b012:	f080 80aa 	bcs.w	800b16a <HAL_RCC_ClockConfig+0x16a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b016:	6813      	ldr	r3, [r2, #0]
 800b018:	f023 0307 	bic.w	r3, r3, #7
 800b01c:	430b      	orrs	r3, r1
 800b01e:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800b020:	6813      	ldr	r3, [r2, #0]
 800b022:	f003 0307 	and.w	r3, r3, #7
 800b026:	428b      	cmp	r3, r1
 800b028:	d002      	beq.n	800b030 <HAL_RCC_ClockConfig+0x30>
    {
      return HAL_ERROR;
 800b02a:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 800b02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b030:	6802      	ldr	r2, [r0, #0]
 800b032:	0796      	lsls	r6, r2, #30
 800b034:	d506      	bpl.n	800b044 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b036:	499d      	ldr	r1, [pc, #628]	; (800b2ac <HAL_RCC_ClockConfig+0x2ac>)
 800b038:	6880      	ldr	r0, [r0, #8]
 800b03a:	684b      	ldr	r3, [r1, #4]
 800b03c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b040:	4303      	orrs	r3, r0
 800b042:	604b      	str	r3, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b044:	07d5      	lsls	r5, r2, #31
 800b046:	d412      	bmi.n	800b06e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b048:	6822      	ldr	r2, [r4, #0]
 800b04a:	0750      	lsls	r0, r2, #29
 800b04c:	f100 8124 	bmi.w	800b298 <HAL_RCC_ClockConfig+0x298>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b050:	0713      	lsls	r3, r2, #28
 800b052:	d507      	bpl.n	800b064 <HAL_RCC_ClockConfig+0x64>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b054:	4a95      	ldr	r2, [pc, #596]	; (800b2ac <HAL_RCC_ClockConfig+0x2ac>)
 800b056:	6921      	ldr	r1, [r4, #16]
 800b058:	6853      	ldr	r3, [r2, #4]
 800b05a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800b05e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800b062:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 800b064:	200f      	movs	r0, #15
 800b066:	f000 f976 	bl	800b356 <HAL_InitTick>
  return HAL_OK;
 800b06a:	2000      	movs	r0, #0
 800b06c:	e7de      	b.n	800b02c <HAL_RCC_ClockConfig+0x2c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b06e:	6862      	ldr	r2, [r4, #4]
 800b070:	4d8e      	ldr	r5, [pc, #568]	; (800b2ac <HAL_RCC_ClockConfig+0x2ac>)
 800b072:	2a01      	cmp	r2, #1
 800b074:	d137      	bne.n	800b0e6 <HAL_RCC_ClockConfig+0xe6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b076:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b07a:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800b07e:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b082:	f3c1 1142 	ubfx	r1, r1, #5, #3
 800b086:	f031 0101 	bics.w	r1, r1, #1
 800b08a:	d126      	bne.n	800b0da <HAL_RCC_ClockConfig+0xda>
 800b08c:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b08e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b092:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800b096:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b09a:	2101      	movs	r1, #1
 800b09c:	f003 031f 	and.w	r3, r3, #31
 800b0a0:	fa01 f303 	lsl.w	r3, r1, r3
 800b0a4:	4203      	tst	r3, r0
 800b0a6:	d0c0      	beq.n	800b02a <HAL_RCC_ClockConfig+0x2a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b0a8:	686b      	ldr	r3, [r5, #4]
 800b0aa:	f023 0303 	bic.w	r3, r3, #3
 800b0ae:	431a      	orrs	r2, r3
 800b0b0:	606a      	str	r2, [r5, #4]
      tickstart = HAL_GetTick();
 800b0b2:	f000 f97f 	bl	800b3b4 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b0b6:	6863      	ldr	r3, [r4, #4]
 800b0b8:	2b01      	cmp	r3, #1
      tickstart = HAL_GetTick();
 800b0ba:	4606      	mov	r6, r0
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b0bc:	f241 3788 	movw	r7, #5000	; 0x1388
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b0c0:	d13b      	bne.n	800b13a <HAL_RCC_ClockConfig+0x13a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b0c2:	686b      	ldr	r3, [r5, #4]
 800b0c4:	f003 030c 	and.w	r3, r3, #12
 800b0c8:	2b04      	cmp	r3, #4
 800b0ca:	d0bd      	beq.n	800b048 <HAL_RCC_ClockConfig+0x48>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b0cc:	f000 f972 	bl	800b3b4 <HAL_GetTick>
 800b0d0:	1b80      	subs	r0, r0, r6
 800b0d2:	42b8      	cmp	r0, r7
 800b0d4:	d9f5      	bls.n	800b0c2 <HAL_RCC_ClockConfig+0xc2>
            return HAL_TIMEOUT;
 800b0d6:	2003      	movs	r0, #3
 800b0d8:	e7a8      	b.n	800b02c <HAL_RCC_ClockConfig+0x2c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0da:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800b0de:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b0e2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b0e4:	e7d3      	b.n	800b08e <HAL_RCC_ClockConfig+0x8e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b0e6:	2a02      	cmp	r2, #2
 800b0e8:	d114      	bne.n	800b114 <HAL_RCC_ClockConfig+0x114>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b0ee:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800b0f2:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0f6:	f3c1 1142 	ubfx	r1, r1, #5, #3
 800b0fa:	f031 0101 	bics.w	r1, r1, #1
 800b0fe:	d103      	bne.n	800b108 <HAL_RCC_ClockConfig+0x108>
 800b100:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b106:	e7c4      	b.n	800b092 <HAL_RCC_ClockConfig+0x92>
 800b108:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800b10c:	fab3 f383 	clz	r3, r3
 800b110:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b112:	e7f6      	b.n	800b102 <HAL_RCC_ClockConfig+0x102>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b114:	2302      	movs	r3, #2
 800b116:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800b11a:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b11e:	f3c1 1142 	ubfx	r1, r1, #5, #3
 800b122:	f031 0101 	bics.w	r1, r1, #1
 800b126:	d102      	bne.n	800b12e <HAL_RCC_ClockConfig+0x12e>
 800b128:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b12a:	2302      	movs	r3, #2
 800b12c:	e7b1      	b.n	800b092 <HAL_RCC_ClockConfig+0x92>
 800b12e:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800b132:	fab3 f383 	clz	r3, r3
 800b136:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b138:	e7f7      	b.n	800b12a <HAL_RCC_ClockConfig+0x12a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d110      	bne.n	800b160 <HAL_RCC_ClockConfig+0x160>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b13e:	686b      	ldr	r3, [r5, #4]
 800b140:	f003 030c 	and.w	r3, r3, #12
 800b144:	2b08      	cmp	r3, #8
 800b146:	f43f af7f 	beq.w	800b048 <HAL_RCC_ClockConfig+0x48>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b14a:	f000 f933 	bl	800b3b4 <HAL_GetTick>
 800b14e:	1b80      	subs	r0, r0, r6
 800b150:	42b8      	cmp	r0, r7
 800b152:	d9f4      	bls.n	800b13e <HAL_RCC_ClockConfig+0x13e>
 800b154:	e7bf      	b.n	800b0d6 <HAL_RCC_ClockConfig+0xd6>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b156:	f000 f92d 	bl	800b3b4 <HAL_GetTick>
 800b15a:	1b80      	subs	r0, r0, r6
 800b15c:	42b8      	cmp	r0, r7
 800b15e:	d8ba      	bhi.n	800b0d6 <HAL_RCC_ClockConfig+0xd6>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800b160:	686b      	ldr	r3, [r5, #4]
 800b162:	f013 0f0c 	tst.w	r3, #12
 800b166:	d1f6      	bne.n	800b156 <HAL_RCC_ClockConfig+0x156>
 800b168:	e76e      	b.n	800b048 <HAL_RCC_ClockConfig+0x48>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b16a:	6802      	ldr	r2, [r0, #0]
 800b16c:	0791      	lsls	r1, r2, #30
 800b16e:	d506      	bpl.n	800b17e <HAL_RCC_ClockConfig+0x17e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b170:	494e      	ldr	r1, [pc, #312]	; (800b2ac <HAL_RCC_ClockConfig+0x2ac>)
 800b172:	6880      	ldr	r0, [r0, #8]
 800b174:	684b      	ldr	r3, [r1, #4]
 800b176:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b17a:	4303      	orrs	r3, r0
 800b17c:	604b      	str	r3, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b17e:	07d2      	lsls	r2, r2, #31
 800b180:	d40c      	bmi.n	800b19c <HAL_RCC_ClockConfig+0x19c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b182:	4a49      	ldr	r2, [pc, #292]	; (800b2a8 <HAL_RCC_ClockConfig+0x2a8>)
 800b184:	6813      	ldr	r3, [r2, #0]
 800b186:	f023 0307 	bic.w	r3, r3, #7
 800b18a:	4333      	orrs	r3, r6
 800b18c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800b18e:	6813      	ldr	r3, [r2, #0]
 800b190:	f003 0307 	and.w	r3, r3, #7
 800b194:	42b3      	cmp	r3, r6
 800b196:	f47f af48 	bne.w	800b02a <HAL_RCC_ClockConfig+0x2a>
 800b19a:	e755      	b.n	800b048 <HAL_RCC_ClockConfig+0x48>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b19c:	6862      	ldr	r2, [r4, #4]
 800b19e:	4d43      	ldr	r5, [pc, #268]	; (800b2ac <HAL_RCC_ClockConfig+0x2ac>)
 800b1a0:	2a01      	cmp	r2, #1
 800b1a2:	d137      	bne.n	800b214 <HAL_RCC_ClockConfig+0x214>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b1a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b1a8:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800b1ac:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b1b0:	f3c1 1142 	ubfx	r1, r1, #5, #3
 800b1b4:	f031 0101 	bics.w	r1, r1, #1
 800b1b8:	d126      	bne.n	800b208 <HAL_RCC_ClockConfig+0x208>
 800b1ba:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b1bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b1c0:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800b1c4:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b1c8:	2101      	movs	r1, #1
 800b1ca:	f003 031f 	and.w	r3, r3, #31
 800b1ce:	fa01 f303 	lsl.w	r3, r1, r3
 800b1d2:	4203      	tst	r3, r0
 800b1d4:	f43f af29 	beq.w	800b02a <HAL_RCC_ClockConfig+0x2a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b1d8:	686b      	ldr	r3, [r5, #4]
 800b1da:	f023 0303 	bic.w	r3, r3, #3
 800b1de:	431a      	orrs	r2, r3
 800b1e0:	606a      	str	r2, [r5, #4]
      tickstart = HAL_GetTick();
 800b1e2:	f000 f8e7 	bl	800b3b4 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b1e6:	6863      	ldr	r3, [r4, #4]
 800b1e8:	2b01      	cmp	r3, #1
      tickstart = HAL_GetTick();
 800b1ea:	4607      	mov	r7, r0
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b1ec:	f241 3888 	movw	r8, #5000	; 0x1388
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b1f0:	d13a      	bne.n	800b268 <HAL_RCC_ClockConfig+0x268>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b1f2:	686b      	ldr	r3, [r5, #4]
 800b1f4:	f003 030c 	and.w	r3, r3, #12
 800b1f8:	2b04      	cmp	r3, #4
 800b1fa:	d0c2      	beq.n	800b182 <HAL_RCC_ClockConfig+0x182>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b1fc:	f000 f8da 	bl	800b3b4 <HAL_GetTick>
 800b200:	1bc0      	subs	r0, r0, r7
 800b202:	4540      	cmp	r0, r8
 800b204:	d9f5      	bls.n	800b1f2 <HAL_RCC_ClockConfig+0x1f2>
 800b206:	e766      	b.n	800b0d6 <HAL_RCC_ClockConfig+0xd6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b208:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800b20c:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b210:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b212:	e7d3      	b.n	800b1bc <HAL_RCC_ClockConfig+0x1bc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b214:	2a02      	cmp	r2, #2
 800b216:	d114      	bne.n	800b242 <HAL_RCC_ClockConfig+0x242>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b218:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b21c:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800b220:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b224:	f3c1 1142 	ubfx	r1, r1, #5, #3
 800b228:	f031 0101 	bics.w	r1, r1, #1
 800b22c:	d103      	bne.n	800b236 <HAL_RCC_ClockConfig+0x236>
 800b22e:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b230:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b234:	e7c4      	b.n	800b1c0 <HAL_RCC_ClockConfig+0x1c0>
 800b236:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800b23a:	fab3 f383 	clz	r3, r3
 800b23e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b240:	e7f6      	b.n	800b230 <HAL_RCC_ClockConfig+0x230>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b242:	2302      	movs	r3, #2
 800b244:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800b248:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b24c:	f3c1 1142 	ubfx	r1, r1, #5, #3
 800b250:	f031 0101 	bics.w	r1, r1, #1
 800b254:	d102      	bne.n	800b25c <HAL_RCC_ClockConfig+0x25c>
 800b256:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b258:	2302      	movs	r3, #2
 800b25a:	e7b1      	b.n	800b1c0 <HAL_RCC_ClockConfig+0x1c0>
 800b25c:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800b260:	fab3 f383 	clz	r3, r3
 800b264:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b266:	e7f7      	b.n	800b258 <HAL_RCC_ClockConfig+0x258>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b268:	2b02      	cmp	r3, #2
 800b26a:	d110      	bne.n	800b28e <HAL_RCC_ClockConfig+0x28e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b26c:	686b      	ldr	r3, [r5, #4]
 800b26e:	f003 030c 	and.w	r3, r3, #12
 800b272:	2b08      	cmp	r3, #8
 800b274:	d085      	beq.n	800b182 <HAL_RCC_ClockConfig+0x182>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b276:	f000 f89d 	bl	800b3b4 <HAL_GetTick>
 800b27a:	1bc0      	subs	r0, r0, r7
 800b27c:	4540      	cmp	r0, r8
 800b27e:	d9f5      	bls.n	800b26c <HAL_RCC_ClockConfig+0x26c>
 800b280:	e729      	b.n	800b0d6 <HAL_RCC_ClockConfig+0xd6>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b282:	f000 f897 	bl	800b3b4 <HAL_GetTick>
 800b286:	1bc0      	subs	r0, r0, r7
 800b288:	4540      	cmp	r0, r8
 800b28a:	f63f af24 	bhi.w	800b0d6 <HAL_RCC_ClockConfig+0xd6>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800b28e:	686b      	ldr	r3, [r5, #4]
 800b290:	f013 0f0c 	tst.w	r3, #12
 800b294:	d1f5      	bne.n	800b282 <HAL_RCC_ClockConfig+0x282>
 800b296:	e774      	b.n	800b182 <HAL_RCC_ClockConfig+0x182>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b298:	4904      	ldr	r1, [pc, #16]	; (800b2ac <HAL_RCC_ClockConfig+0x2ac>)
 800b29a:	68e0      	ldr	r0, [r4, #12]
 800b29c:	684b      	ldr	r3, [r1, #4]
 800b29e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b2a2:	4303      	orrs	r3, r0
 800b2a4:	604b      	str	r3, [r1, #4]
 800b2a6:	e6d3      	b.n	800b050 <HAL_RCC_ClockConfig+0x50>
 800b2a8:	40022000 	.word	0x40022000
 800b2ac:	40021000 	.word	0x40021000

0800b2b0 <HAL_RCC_GetSysClockFreq>:
  *
  * @param  None
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b2b0:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, prediv = 0, pllmul = 0, pllclk = 0;
  uint32_t sysclockfreq = 0;

  tmpreg = RCC->CFGR;
 800b2b2:	4c15      	ldr	r4, [pc, #84]	; (800b308 <HAL_RCC_GetSysClockFreq+0x58>)
 800b2b4:	6861      	ldr	r1, [r4, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b2b6:	f001 030c 	and.w	r3, r1, #12
 800b2ba:	2b08      	cmp	r3, #8
 800b2bc:	d121      	bne.n	800b302 <HAL_RCC_GetSysClockFreq+0x52>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b2be:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800b2c2:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800b2c6:	fab3 f383 	clz	r3, r3
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
    break;

  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800b2ca:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	fa22 f303 	lsr.w	r3, r2, r3
 800b2d4:	4a0d      	ldr	r2, [pc, #52]	; (800b30c <HAL_RCC_GetSysClockFreq+0x5c>)
 800b2d6:	5cd0      	ldrb	r0, [r2, r3]
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800b2d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b2da:	230f      	movs	r3, #15
 800b2dc:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800b2e0:	fab3 f383 	clz	r3, r3
 800b2e4:	f002 020f 	and.w	r2, r2, #15
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b2ee:	4a08      	ldr	r2, [pc, #32]	; (800b310 <HAL_RCC_GetSysClockFreq+0x60>)
 800b2f0:	5cd2      	ldrb	r2, [r2, r3]
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800b2f2:	03cb      	lsls	r3, r1, #15
    {
      /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
      pllclk = (HSE_VALUE/prediv) * pllmul;
 800b2f4:	bf4a      	itet	mi
 800b2f6:	4b07      	ldrmi	r3, [pc, #28]	; (800b314 <HAL_RCC_GetSysClockFreq+0x64>)
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (HSI_VALUE >> 1) * pllmul;
 800b2f8:	4b07      	ldrpl	r3, [pc, #28]	; (800b318 <HAL_RCC_GetSysClockFreq+0x68>)
      pllclk = (HSE_VALUE/prediv) * pllmul;
 800b2fa:	fbb3 f3f2 	udivmi	r3, r3, r2
      pllclk = (HSI_VALUE >> 1) * pllmul;
 800b2fe:	4358      	muls	r0, r3
  default:
    sysclockfreq = HSI_VALUE;
    break;
  }
  return sysclockfreq;
}
 800b300:	bd10      	pop	{r4, pc}
    sysclockfreq = HSE_VALUE;
 800b302:	4804      	ldr	r0, [pc, #16]	; (800b314 <HAL_RCC_GetSysClockFreq+0x64>)
  return sysclockfreq;
 800b304:	e7fc      	b.n	800b300 <HAL_RCC_GetSysClockFreq+0x50>
 800b306:	bf00      	nop
 800b308:	40021000 	.word	0x40021000
 800b30c:	0801e1f8 	.word	0x0801e1f8
 800b310:	0801e208 	.word	0x0801e208
 800b314:	007a1200 	.word	0x007a1200
 800b318:	003d0900 	.word	0x003d0900

0800b31c <HAL_RCC_GetHCLKFreq>:
  *                       
  * @param  None
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b31c:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800b31e:	f7ff ffc7 	bl	800b2b0 <HAL_RCC_GetSysClockFreq>
 800b322:	4b09      	ldr	r3, [pc, #36]	; (800b348 <HAL_RCC_GetHCLKFreq+0x2c>)
 800b324:	685a      	ldr	r2, [r3, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b326:	23f0      	movs	r3, #240	; 0xf0
 800b328:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800b32c:	fab3 f383 	clz	r3, r3
 800b330:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800b334:	b2db      	uxtb	r3, r3
 800b336:	fa22 f303 	lsr.w	r3, r2, r3
 800b33a:	4a04      	ldr	r2, [pc, #16]	; (800b34c <HAL_RCC_GetHCLKFreq+0x30>)
 800b33c:	5cd3      	ldrb	r3, [r2, r3]
 800b33e:	40d8      	lsrs	r0, r3
 800b340:	4b03      	ldr	r3, [pc, #12]	; (800b350 <HAL_RCC_GetHCLKFreq+0x34>)
 800b342:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 800b344:	bd08      	pop	{r3, pc}
 800b346:	bf00      	nop
 800b348:	40021000 	.word	0x40021000
 800b34c:	0801e1e8 	.word	0x0801e1e8
 800b350:	200009c4 	.word	0x200009c4

0800b354 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800b354:	4770      	bx	lr

0800b356 <HAL_InitTick>:
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)

{
 800b356:	b507      	push	{r0, r1, r2, lr}
 800b358:	9001      	str	r0, [sp, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800b35a:	f7ff ffdf 	bl	800b31c <HAL_RCC_GetHCLKFreq>
 800b35e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b362:	fbb0 f0f3 	udiv	r0, r0, r3
 800b366:	f000 f88b 	bl	800b480 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800b36a:	9901      	ldr	r1, [sp, #4]
 800b36c:	2200      	movs	r2, #0
 800b36e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b372:	f000 f845 	bl	800b400 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800b376:	2000      	movs	r0, #0
 800b378:	b003      	add	sp, #12
 800b37a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800b380 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b380:	4a07      	ldr	r2, [pc, #28]	; (800b3a0 <HAL_Init+0x20>)
{
 800b382:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b384:	6813      	ldr	r3, [r2, #0]
 800b386:	f043 0310 	orr.w	r3, r3, #16
 800b38a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b38c:	2003      	movs	r0, #3
 800b38e:	f000 f825 	bl	800b3dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800b392:	200f      	movs	r0, #15
 800b394:	f7ff ffdf 	bl	800b356 <HAL_InitTick>
  HAL_MspInit();
 800b398:	f7ff ffdc 	bl	800b354 <HAL_MspInit>
}
 800b39c:	2000      	movs	r0, #0
 800b39e:	bd08      	pop	{r3, pc}
 800b3a0:	40022000 	.word	0x40022000

0800b3a4 <HAL_IncTick>:
  * @param  None
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800b3a4:	4a02      	ldr	r2, [pc, #8]	; (800b3b0 <HAL_IncTick+0xc>)
 800b3a6:	6813      	ldr	r3, [r2, #0]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	6013      	str	r3, [r2, #0]
}
 800b3ac:	4770      	bx	lr
 800b3ae:	bf00      	nop
 800b3b0:	20001088 	.word	0x20001088

0800b3b4 <HAL_GetTick>:
  * @param  None
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800b3b4:	4b01      	ldr	r3, [pc, #4]	; (800b3bc <HAL_GetTick+0x8>)
 800b3b6:	6818      	ldr	r0, [r3, #0]
}
 800b3b8:	4770      	bx	lr
 800b3ba:	bf00      	nop
 800b3bc:	20001088 	.word	0x20001088

0800b3c0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800b3c0:	b513      	push	{r0, r1, r4, lr}
 800b3c2:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800b3c4:	f7ff fff6 	bl	800b3b4 <HAL_GetTick>
 800b3c8:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800b3ca:	f7ff fff3 	bl	800b3b4 <HAL_GetTick>
 800b3ce:	9a01      	ldr	r2, [sp, #4]
 800b3d0:	1b03      	subs	r3, r0, r4
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d3f9      	bcc.n	800b3ca <HAL_Delay+0xa>
  {
  }
}
 800b3d6:	b002      	add	sp, #8
 800b3d8:	bd10      	pop	{r4, pc}
	...

0800b3dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b3dc:	4907      	ldr	r1, [pc, #28]	; (800b3fc <HAL_NVIC_SetPriorityGrouping+0x20>)
 800b3de:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800b3e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 800b3e4:	0203      	lsls	r3, r0, #8
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800b3e6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 800b3e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800b3ec:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 800b3ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 800b3f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b3f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800b3f8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800b3fa:	4770      	bx	lr
 800b3fc:	e000ed00 	.word	0xe000ed00

0800b400 <HAL_NVIC_SetPriority>:

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 800b400:	4b17      	ldr	r3, [pc, #92]	; (800b460 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b402:	b570      	push	{r4, r5, r6, lr}
 800b404:	68dd      	ldr	r5, [r3, #12]
 800b406:	f3c5 2502 	ubfx	r5, r5, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 800b40a:	f1c5 0307 	rsb	r3, r5, #7
 800b40e:	2b04      	cmp	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 800b410:	f105 0404 	add.w	r4, r5, #4
  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 800b414:	bf28      	it	cs
 800b416:	2304      	movcs	r3, #4

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 800b418:	2601      	movs	r6, #1
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 800b41a:	2c06      	cmp	r4, #6
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 800b41c:	fa06 f403 	lsl.w	r4, r6, r3
 800b420:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 800b424:	bf8c      	ite	hi
 800b426:	3d03      	subhi	r5, #3
 800b428:	2500      	movls	r5, #0
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 800b42a:	4021      	ands	r1, r4
 800b42c:	40a9      	lsls	r1, r5
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 800b42e:	fa06 f505 	lsl.w	r5, r6, r5
 800b432:	3d01      	subs	r5, #1
 800b434:	ea05 0302 	and.w	r3, r5, r2
  if(IRQn < 0) {
 800b438:	2800      	cmp	r0, #0
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 800b43a:	ea43 0301 	orr.w	r3, r3, r1
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800b43e:	bfac      	ite	ge
 800b440:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800b444:	4a07      	ldrlt	r2, [pc, #28]	; (800b464 <HAL_NVIC_SetPriority+0x64>)
 800b446:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800b44a:	bfb8      	it	lt
 800b44c:	f000 000f 	andlt.w	r0, r0, #15
 800b450:	b2db      	uxtb	r3, r3
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800b452:	bfaa      	itet	ge
 800b454:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800b458:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800b45a:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800b45e:	bd70      	pop	{r4, r5, r6, pc}
 800b460:	e000ed00 	.word	0xe000ed00
 800b464:	e000ed14 	.word	0xe000ed14

0800b468 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800b468:	0942      	lsrs	r2, r0, #5
 800b46a:	2301      	movs	r3, #1
 800b46c:	f000 001f 	and.w	r0, r0, #31
 800b470:	fa03 f000 	lsl.w	r0, r3, r0
 800b474:	4b01      	ldr	r3, [pc, #4]	; (800b47c <HAL_NVIC_EnableIRQ+0x14>)
 800b476:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800b47a:	4770      	bx	lr
 800b47c:	e000e100 	.word	0xe000e100

0800b480 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 800b480:	3801      	subs	r0, #1
 800b482:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800b486:	d20b      	bcs.n	800b4a0 <HAL_SYSTICK_Config+0x20>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 800b488:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800b48c:	4a05      	ldr	r2, [pc, #20]	; (800b4a4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 800b48e:	6158      	str	r0, [r3, #20]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800b490:	21f0      	movs	r1, #240	; 0xf0
 800b492:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800b496:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b498:	2207      	movs	r2, #7
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800b49a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b49c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800b49e:	4770      	bx	lr
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 800b4a0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800b4a2:	4770      	bx	lr
 800b4a4:	e000ed00 	.word	0xe000ed00

0800b4a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800b4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b4ac:	4a5d      	ldr	r2, [pc, #372]	; (800b624 <HAL_GPIO_Init+0x17c>)
        __SYSCFG_CLK_ENABLE();
 800b4ae:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800b62c <HAL_GPIO_Init+0x184>
  for (position = 0; position < GPIO_NUMBER; position++)
 800b4b2:	2300      	movs	r3, #0
    ioposition = ((uint32_t)0x01) << position;
 800b4b4:	f04f 0901 	mov.w	r9, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b4b8:	680c      	ldr	r4, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 800b4ba:	fa09 fa03 	lsl.w	sl, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b4be:	ea0a 0504 	and.w	r5, sl, r4
    if (iocurrent == ioposition)
 800b4c2:	ea3a 0404 	bics.w	r4, sl, r4
 800b4c6:	f040 809c 	bne.w	800b602 <HAL_GPIO_Init+0x15a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800b4ca:	684c      	ldr	r4, [r1, #4]
 800b4cc:	f024 0e10 	bic.w	lr, r4, #16
 800b4d0:	f1be 0f02 	cmp.w	lr, #2
 800b4d4:	d114      	bne.n	800b500 <HAL_GPIO_Init+0x58>
        temp = GPIOx->AFR[position >> 3];
 800b4d6:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800b4da:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b4de:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800b4e2:	f8dc 6020 	ldr.w	r6, [ip, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b4e6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800b4ea:	270f      	movs	r7, #15
 800b4ec:	fa07 f70b 	lsl.w	r7, r7, fp
 800b4f0:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b4f4:	690e      	ldr	r6, [r1, #16]
 800b4f6:	fa06 f60b 	lsl.w	r6, r6, fp
 800b4fa:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 800b4fc:	f8cc 6020 	str.w	r6, [ip, #32]
      temp = GPIOx->MODER;
 800b500:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b504:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800b508:	2703      	movs	r7, #3
 800b50a:	fa07 f70c 	lsl.w	r7, r7, ip
 800b50e:	ea2b 0b07 	bic.w	fp, fp, r7
 800b512:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b514:	f004 0703 	and.w	r7, r4, #3
 800b518:	fa07 f70c 	lsl.w	r7, r7, ip
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b51c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b520:	ea47 070b 	orr.w	r7, r7, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b524:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 800b528:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b52a:	d811      	bhi.n	800b550 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->OSPEEDR; 
 800b52c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b52e:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 800b532:	68cf      	ldr	r7, [r1, #12]
 800b534:	fa07 f70c 	lsl.w	r7, r7, ip
 800b538:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800b53c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800b53e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b540:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800b544:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800b548:	409f      	lsls	r7, r3
 800b54a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 800b54e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800b550:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b552:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800b554:	688e      	ldr	r6, [r1, #8]
 800b556:	fa06 f60c 	lsl.w	r6, r6, ip
 800b55a:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 800b55c:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800b55e:	00e6      	lsls	r6, r4, #3
 800b560:	d54f      	bpl.n	800b602 <HAL_GPIO_Init+0x15a>
        __SYSCFG_CLK_ENABLE();
 800b562:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800b566:	f023 0703 	bic.w	r7, r3, #3
 800b56a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800b56e:	f046 0601 	orr.w	r6, r6, #1
 800b572:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800b576:	f8c8 6018 	str.w	r6, [r8, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b57a:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2];
 800b57e:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b580:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800b584:	f04f 0c0f 	mov.w	ip, #15
 800b588:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 800b58c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b590:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 800b594:	d03b      	beq.n	800b60e <HAL_GPIO_Init+0x166>
 800b596:	4e24      	ldr	r6, [pc, #144]	; (800b628 <HAL_GPIO_Init+0x180>)
 800b598:	42b0      	cmp	r0, r6
 800b59a:	d03a      	beq.n	800b612 <HAL_GPIO_Init+0x16a>
 800b59c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800b5a0:	42b0      	cmp	r0, r6
 800b5a2:	d038      	beq.n	800b616 <HAL_GPIO_Init+0x16e>
 800b5a4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800b5a8:	42b0      	cmp	r0, r6
 800b5aa:	d036      	beq.n	800b61a <HAL_GPIO_Init+0x172>
 800b5ac:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800b5b0:	42b0      	cmp	r0, r6
 800b5b2:	d034      	beq.n	800b61e <HAL_GPIO_Init+0x176>
 800b5b4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800b5b8:	42b0      	cmp	r0, r6
 800b5ba:	bf0c      	ite	eq
 800b5bc:	2605      	moveq	r6, #5
 800b5be:	2606      	movne	r6, #6
 800b5c0:	fa06 f60e 	lsl.w	r6, r6, lr
 800b5c4:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 800b5c8:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800b5ca:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800b5cc:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b5ce:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800b5d2:	bf0c      	ite	eq
 800b5d4:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800b5d6:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800b5d8:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 800b5da:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b5dc:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800b5e0:	bf0c      	ite	eq
 800b5e2:	403e      	andeq	r6, r7
        { 
          temp |= iocurrent;
 800b5e4:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 800b5e6:	6056      	str	r6, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b5e8:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b5ea:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800b5ee:	bf0c      	ite	eq
 800b5f0:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800b5f2:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 800b5f4:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 800b5f6:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b5f8:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800b5fa:	bf54      	ite	pl
 800b5fc:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 800b5fe:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800b600:	60d6      	str	r6, [r2, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 800b602:	3301      	adds	r3, #1
 800b604:	2b10      	cmp	r3, #16
 800b606:	f47f af57 	bne.w	800b4b8 <HAL_GPIO_Init+0x10>
      }
    }
  } 
}
 800b60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 800b60e:	2600      	movs	r6, #0
 800b610:	e7d6      	b.n	800b5c0 <HAL_GPIO_Init+0x118>
 800b612:	2601      	movs	r6, #1
 800b614:	e7d4      	b.n	800b5c0 <HAL_GPIO_Init+0x118>
 800b616:	2602      	movs	r6, #2
 800b618:	e7d2      	b.n	800b5c0 <HAL_GPIO_Init+0x118>
 800b61a:	2603      	movs	r6, #3
 800b61c:	e7d0      	b.n	800b5c0 <HAL_GPIO_Init+0x118>
 800b61e:	2604      	movs	r6, #4
 800b620:	e7ce      	b.n	800b5c0 <HAL_GPIO_Init+0x118>
 800b622:	bf00      	nop
 800b624:	40010400 	.word	0x40010400
 800b628:	48000400 	.word	0x48000400
 800b62c:	40021000 	.word	0x40021000

0800b630 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b630:	6903      	ldr	r3, [r0, #16]
 800b632:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
  }
 800b634:	bf14      	ite	ne
 800b636:	2001      	movne	r0, #1
 800b638:	2000      	moveq	r0, #0
 800b63a:	4770      	bx	lr

0800b63c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b63c:	b10a      	cbz	r2, 800b642 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 800b63e:	8301      	strh	r1, [r0, #24]
 800b640:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800b642:	8341      	strh	r1, [r0, #26]
  }
}
 800b644:	4770      	bx	lr

0800b646 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800b646:	6943      	ldr	r3, [r0, #20]
 800b648:	4059      	eors	r1, r3
 800b64a:	6141      	str	r1, [r0, #20]
}
 800b64c:	4770      	bx	lr

0800b64e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 800b64e:	b538      	push	{r3, r4, r5, lr}
  uint32_t i = 0;

  uint32_t wInterrupt_Mask = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 800b650:	4604      	mov	r4, r0
 800b652:	2800      	cmp	r0, #0
 800b654:	d042      	beq.n	800b6dc <HAL_PCD_Init+0x8e>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = PCD_BUSY;
 800b656:	2302      	movs	r3, #2
 800b658:	f880 3141 	strb.w	r3, [r0, #321]	; 0x141
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 800b65c:	f001 ffde 	bl	800d61c <HAL_PCD_MspInit>

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 800b660:	2100      	movs	r1, #0
 800b662:	6860      	ldr	r0, [r4, #4]
 800b664:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800b668:	460a      	mov	r2, r1
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 800b66a:	2501      	movs	r5, #1
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 800b66c:	4288      	cmp	r0, r1
 800b66e:	f103 031c 	add.w	r3, r3, #28
 800b672:	d11b      	bne.n	800b6ac <HAL_PCD_Init+0x5e>
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 800b674:	2000      	movs	r0, #0
 800b676:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 800b67a:	4603      	mov	r3, r0
 800b67c:	4281      	cmp	r1, r0
 800b67e:	f102 021c 	add.w	r2, r2, #28
 800b682:	d11f      	bne.n	800b6c4 <HAL_PCD_Init+0x76>
   hpcd->OUT_ep[i].xfer_len = 0;
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 800b684:	6822      	ldr	r2, [r4, #0]
 800b686:	2101      	movs	r1, #1
 800b688:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 800b68c:	f44f 413d 	mov.w	r1, #48384	; 0xbd00
 hpcd->Instance->CNTR = 0;
 800b690:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
  
  hpcd->USB_Address = 0;
  hpcd->State= PCD_READY;

 return HAL_OK;
 800b694:	2000      	movs	r0, #0
 hpcd->Instance->ISTR = 0;
 800b696:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 800b69a:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
  hpcd->Instance->CNTR = wInterrupt_Mask;
 800b69e:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
  hpcd->USB_Address = 0;
 800b6a2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State= PCD_READY;
 800b6a6:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
}
 800b6aa:	bd38      	pop	{r3, r4, r5, pc}
   hpcd->IN_ep[i].num = i;
 800b6ac:	f803 1c1c 	strb.w	r1, [r3, #-28]
   hpcd->IN_ep[i].xfer_buff = 0;
 800b6b0:	e943 2204 	strd	r2, r2, [r3, #-16]
   hpcd->IN_ep[i].is_in = 1;
 800b6b4:	f803 5c1b 	strb.w	r5, [r3, #-27]
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 800b6b8:	f803 2c19 	strb.w	r2, [r3, #-25]
   hpcd->IN_ep[i].xfer_len = 0;
 800b6bc:	f843 2c08 	str.w	r2, [r3, #-8]
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 800b6c0:	3101      	adds	r1, #1
 800b6c2:	e7d3      	b.n	800b66c <HAL_PCD_Init+0x1e>
   hpcd->OUT_ep[i].num = i;
 800b6c4:	f802 0c1c 	strb.w	r0, [r2, #-28]
   hpcd->OUT_ep[i].xfer_buff = 0;
 800b6c8:	e942 3304 	strd	r3, r3, [r2, #-16]
   hpcd->OUT_ep[i].is_in = 0;
 800b6cc:	f802 3c1b 	strb.w	r3, [r2, #-27]
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 800b6d0:	f802 3c19 	strb.w	r3, [r2, #-25]
   hpcd->OUT_ep[i].xfer_len = 0;
 800b6d4:	f842 3c08 	str.w	r3, [r2, #-8]
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 800b6d8:	3001      	adds	r0, #1
 800b6da:	e7cf      	b.n	800b67c <HAL_PCD_Init+0x2e>
    return HAL_ERROR;
 800b6dc:	2001      	movs	r0, #1
 800b6de:	e7e4      	b.n	800b6aa <HAL_PCD_Init+0x5c>

0800b6e0 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 800b6e0:	b508      	push	{r3, lr}
  /*  DP Pull-Down is external */
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 800b6e2:	2101      	movs	r1, #1
 800b6e4:	f000 fe87 	bl	800c3f6 <HAL_PCDEx_SetConnectionState>
  
  return HAL_OK;
}
 800b6e8:	2000      	movs	r0, #0
 800b6ea:	bd08      	pop	{r3, pc}

0800b6ec <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 800b6ec:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d00f      	beq.n	800b714 <HAL_PCD_SetAddress+0x28>
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

   if(address == 0) 
 800b6fa:	b941      	cbnz	r1, 800b70e <HAL_PCD_SetAddress+0x22>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 800b6fc:	6803      	ldr	r3, [r0, #0]
 800b6fe:	2280      	movs	r2, #128	; 0x80
 800b700:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
 800b704:	2300      	movs	r3, #0
 800b706:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return HAL_OK;
 800b70a:	4618      	mov	r0, r3
 800b70c:	4770      	bx	lr
     hpcd->USB_Address = address;
 800b70e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800b712:	e7f7      	b.n	800b704 <HAL_PCD_SetAddress+0x18>
   __HAL_LOCK(hpcd); 
 800b714:	2002      	movs	r0, #2
}
 800b716:	4770      	bx	lr

0800b718 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packert size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800b718:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 800b71a:	b24d      	sxtb	r5, r1
 800b71c:	241c      	movs	r4, #28
 800b71e:	2d00      	cmp	r5, #0
 800b720:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800b724:	bfb3      	iteet	lt
 800b726:	fb04 0406 	mlalt	r4, r4, r6, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800b72a:	fb04 0101 	mlage	r1, r4, r1, r0
 800b72e:	f101 04b4 	addge.w	r4, r1, #180	; 0xb4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800b732:	3428      	addlt	r4, #40	; 0x28
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800b734:	0fe9      	lsrs	r1, r5, #31
  ep->num   = ep_addr & 0x7F;
 800b736:	7026      	strb	r6, [r4, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 800b738:	7061      	strb	r1, [r4, #1]
  ep->maxpacket = ep_mps;
 800b73a:	60e2      	str	r2, [r4, #12]
  ep->type = ep_type;
 800b73c:	70e3      	strb	r3, [r4, #3]
  
  __HAL_LOCK(hpcd); 
 800b73e:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
 800b742:	2a01      	cmp	r2, #1
 800b744:	f000 8156 	beq.w	800b9f4 <HAL_PCD_EP_Open+0x2dc>
 800b748:	2201      	movs	r2, #1
 800b74a:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140

/* initialize Endpoint */
  switch (ep->type)
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 800b74e:	b231      	sxth	r1, r6
 800b750:	6802      	ldr	r2, [r0, #0]
  switch (ep->type)
 800b752:	2b03      	cmp	r3, #3
 800b754:	d80f      	bhi.n	800b776 <HAL_PCD_EP_Open+0x5e>
 800b756:	e8df f003 	tbb	[pc, r3]
 800b75a:	6502      	.short	0x6502
 800b75c:	5a51      	.short	0x5a51
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 800b75e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800b762:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800b766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b76a:	041b      	lsls	r3, r3, #16
 800b76c:	0c1b      	lsrs	r3, r3, #16
 800b76e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 800b772:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 800b776:	f832 7021 	ldrh.w	r7, [r2, r1, lsl #2]
 800b77a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800b77e:	401f      	ands	r7, r3
 800b780:	433e      	orrs	r6, r7
 800b782:	f248 0c80 	movw	ip, #32896	; 0x8080
 800b786:	ea4c 0606 	orr.w	r6, ip, r6
 800b78a:	f822 6021 	strh.w	r6, [r2, r1, lsl #2]
  
  if (ep->doublebuffer == 0) 
 800b78e:	7aa6      	ldrb	r6, [r4, #10]
  {
    if (ep->is_in)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 800b790:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800b794:	f502 6780 	add.w	r7, r2, #1024	; 0x400
  if (ep->doublebuffer == 0) 
 800b798:	2e00      	cmp	r6, #0
 800b79a:	f040 808e 	bne.w	800b8ba <HAL_PCD_EP_Open+0x1a2>
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 800b79e:	88a6      	ldrh	r6, [r4, #4]
    if (ep->is_in)
 800b7a0:	2d00      	cmp	r5, #0
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 800b7a2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b7a6:	ea4f 0646 	mov.w	r6, r6, lsl #1
    if (ep->is_in)
 800b7aa:	da46      	bge.n	800b83a <HAL_PCD_EP_Open+0x122>
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 800b7ac:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800b7b0:	f832 4021 	ldrh.w	r4, [r2, r1, lsl #2]
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 800b7b4:	fa1e fe85 	uxtah	lr, lr, r5
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800b7b8:	0664      	lsls	r4, r4, #25
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 800b7ba:	f847 601e 	str.w	r6, [r7, lr, lsl #1]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800b7be:	d508      	bpl.n	800b7d2 <HAL_PCD_EP_Open+0xba>
 800b7c0:	f832 4021 	ldrh.w	r4, [r2, r1, lsl #2]
 800b7c4:	4023      	ands	r3, r4
 800b7c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b7ce:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK); 
 800b7d2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800b7d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7de:	041b      	lsls	r3, r3, #16
 800b7e0:	0c1b      	lsrs	r3, r3, #16
 800b7e2:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800b7e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
      PCD_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 800b7ee:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return ret;
 800b7f8:	4618      	mov	r0, r3
}
 800b7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 800b7fc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800b800:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800b804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b808:	041b      	lsls	r3, r3, #16
 800b80a:	0c1b      	lsrs	r3, r3, #16
 800b80c:	e7b1      	b.n	800b772 <HAL_PCD_EP_Open+0x5a>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 800b80e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800b812:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800b816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b81a:	041b      	lsls	r3, r3, #16
 800b81c:	0c1b      	lsrs	r3, r3, #16
 800b81e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800b822:	e7a6      	b.n	800b772 <HAL_PCD_EP_Open+0x5a>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 800b824:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800b828:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800b82c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b830:	041b      	lsls	r3, r3, #16
 800b832:	0c1b      	lsrs	r3, r3, #16
 800b834:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b838:	e79b      	b.n	800b772 <HAL_PCD_EP_Open+0x5a>
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 800b83a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 800b83e:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 800b842:	fa1e f383 	uxtah	r3, lr, r3
 800b846:	3304      	adds	r3, #4
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 800b848:	fa1e f585 	uxtah	r5, lr, r5
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 800b84c:	f847 6013 	str.w	r6, [r7, r3, lsl #1]
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 800b850:	68e4      	ldr	r4, [r4, #12]
 800b852:	2c3e      	cmp	r4, #62	; 0x3e
 800b854:	f105 0506 	add.w	r5, r5, #6
 800b858:	d927      	bls.n	800b8aa <HAL_PCD_EP_Open+0x192>
 800b85a:	f3c4 164f 	ubfx	r6, r4, #5, #16
 800b85e:	06e3      	lsls	r3, r4, #27
 800b860:	bf04      	itt	eq
 800b862:	f106 33ff 	addeq.w	r3, r6, #4294967295	; 0xffffffff
 800b866:	b29e      	uxtheq	r6, r3
 800b868:	4b63      	ldr	r3, [pc, #396]	; (800b9f8 <HAL_PCD_EP_Open+0x2e0>)
 800b86a:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 800b86e:	b29b      	uxth	r3, r3
 800b870:	f847 3015 	str.w	r3, [r7, r5, lsl #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800b874:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800b878:	045f      	lsls	r7, r3, #17
 800b87a:	d50b      	bpl.n	800b894 <HAL_PCD_EP_Open+0x17c>
 800b87c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800b880:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b884:	051b      	lsls	r3, r3, #20
 800b886:	0d1b      	lsrs	r3, r3, #20
 800b888:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b88c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b890:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800b894:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800b898:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b89c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8a0:	041b      	lsls	r3, r3, #16
 800b8a2:	0c1b      	lsrs	r3, r3, #16
 800b8a4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800b8a8:	e79d      	b.n	800b7e6 <HAL_PCD_EP_Open+0xce>
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 800b8aa:	f3c4 034f 	ubfx	r3, r4, #1, #16
 800b8ae:	07e4      	lsls	r4, r4, #31
 800b8b0:	bf44      	itt	mi
 800b8b2:	3301      	addmi	r3, #1
 800b8b4:	b29b      	uxthmi	r3, r3
 800b8b6:	029b      	lsls	r3, r3, #10
 800b8b8:	e7d9      	b.n	800b86e <HAL_PCD_EP_Open+0x156>
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 800b8ba:	f832 6021 	ldrh.w	r6, [r2, r1, lsl #2]
 800b8be:	b2b6      	uxth	r6, r6
 800b8c0:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 800b8c4:	401e      	ands	r6, r3
 800b8c6:	ea4c 0606 	orr.w	r6, ip, r6
 800b8ca:	f822 6021 	strh.w	r6, [r2, r1, lsl #2]
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 800b8ce:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
 800b8d2:	88e6      	ldrh	r6, [r4, #6]
 800b8d4:	8924      	ldrh	r4, [r4, #8]
 800b8d6:	fa1e fc8c 	uxtah	ip, lr, ip
 800b8da:	0876      	lsrs	r6, r6, #1
 800b8dc:	0076      	lsls	r6, r6, #1
 800b8de:	f847 601c 	str.w	r6, [r7, ip, lsl #1]
 800b8e2:	f8b2 6050 	ldrh.w	r6, [r2, #80]	; 0x50
 800b8e6:	fa1e fe86 	uxtah	lr, lr, r6
 800b8ea:	f10e 0e04 	add.w	lr, lr, #4
 800b8ee:	0864      	lsrs	r4, r4, #1
 800b8f0:	0064      	lsls	r4, r4, #1
    if (ep->is_in==0)
 800b8f2:	2d00      	cmp	r5, #0
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 800b8f4:	f847 401e 	str.w	r4, [r7, lr, lsl #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800b8f8:	f832 4021 	ldrh.w	r4, [r2, r1, lsl #2]
    if (ep->is_in==0)
 800b8fc:	db3f      	blt.n	800b97e <HAL_PCD_EP_Open+0x266>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800b8fe:	0466      	lsls	r6, r4, #17
 800b900:	d508      	bpl.n	800b914 <HAL_PCD_EP_Open+0x1fc>
 800b902:	f832 4021 	ldrh.w	r4, [r2, r1, lsl #2]
 800b906:	4023      	ands	r3, r4
 800b908:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b90c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b910:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800b914:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800b918:	065d      	lsls	r5, r3, #25
 800b91a:	d50b      	bpl.n	800b934 <HAL_PCD_EP_Open+0x21c>
 800b91c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800b920:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b924:	051b      	lsls	r3, r3, #20
 800b926:	0d1b      	lsrs	r3, r3, #20
 800b928:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b92c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b930:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 800b934:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800b938:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b93c:	051b      	lsls	r3, r3, #20
 800b93e:	0d1b      	lsrs	r3, r3, #20
 800b940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b944:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b948:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800b94c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800b950:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b958:	041b      	lsls	r3, r3, #16
 800b95a:	0c1b      	lsrs	r3, r3, #16
 800b95c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800b960:	f248 0480 	movw	r4, #32896	; 0x8080
 800b964:	4323      	orrs	r3, r4
 800b966:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 800b96a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800b96e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 800b976:	041b      	lsls	r3, r3, #16
 800b978:	0c1b      	lsrs	r3, r3, #16
 800b97a:	4323      	orrs	r3, r4
 800b97c:	e737      	b.n	800b7ee <HAL_PCD_EP_Open+0xd6>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800b97e:	0464      	lsls	r4, r4, #17
 800b980:	d508      	bpl.n	800b994 <HAL_PCD_EP_Open+0x27c>
 800b982:	f832 4021 	ldrh.w	r4, [r2, r1, lsl #2]
 800b986:	4023      	ands	r3, r4
 800b988:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b98c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b990:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800b994:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800b998:	065b      	lsls	r3, r3, #25
 800b99a:	d50b      	bpl.n	800b9b4 <HAL_PCD_EP_Open+0x29c>
 800b99c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800b9a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b9a4:	051b      	lsls	r3, r3, #20
 800b9a6:	0d1b      	lsrs	r3, r3, #20
 800b9a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b9b0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 800b9b4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800b9b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b9bc:	051b      	lsls	r3, r3, #20
 800b9be:	0d1b      	lsrs	r3, r3, #20
 800b9c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b9c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9c8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 800b9cc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800b9d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9d8:	041b      	lsls	r3, r3, #16
 800b9da:	0c1b      	lsrs	r3, r3, #16
 800b9dc:	f248 0480 	movw	r4, #32896	; 0x8080
 800b9e0:	4323      	orrs	r3, r4
 800b9e2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 800b9e6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800b9ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b9ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9f2:	e7c0      	b.n	800b976 <HAL_PCD_EP_Open+0x25e>
  __HAL_LOCK(hpcd); 
 800b9f4:	2002      	movs	r0, #2
 800b9f6:	e700      	b.n	800b7fa <HAL_PCD_EP_Open+0xe2>
 800b9f8:	ffff8000 	.word	0xffff8000

0800b9fc <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 800b9fc:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 800b9fe:	b24c      	sxtb	r4, r1
 800ba00:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800ba04:	2c00      	cmp	r4, #0
 800ba06:	f04f 021c 	mov.w	r2, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800ba0a:	bfb5      	itete	lt
 800ba0c:	fb02 0103 	mlalt	r1, r2, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800ba10:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800ba14:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800ba16:	31b4      	addge	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800ba18:	0fe2      	lsrs	r2, r4, #31
  ep->num   = ep_addr & 0x7F;
 800ba1a:	700b      	strb	r3, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 800ba1c:	704a      	strb	r2, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 800ba1e:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
 800ba22:	2a01      	cmp	r2, #1
 800ba24:	f000 80c4 	beq.w	800bbb0 <HAL_PCD_EP_Close+0x1b4>
 800ba28:	2201      	movs	r2, #1
 800ba2a:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140

  if (ep->doublebuffer == 0) 
 800ba2e:	7a89      	ldrb	r1, [r1, #10]
 800ba30:	6802      	ldr	r2, [r0, #0]
  {
    if (ep->is_in)
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800ba32:	b21b      	sxth	r3, r3
  if (ep->doublebuffer == 0) 
 800ba34:	bbc9      	cbnz	r1, 800baaa <HAL_PCD_EP_Close+0xae>
    if (ep->is_in)
 800ba36:	2c00      	cmp	r4, #0
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800ba38:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
    if (ep->is_in)
 800ba3c:	da20      	bge.n	800ba80 <HAL_PCD_EP_Close+0x84>
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800ba3e:	064c      	lsls	r4, r1, #25
 800ba40:	d50b      	bpl.n	800ba5a <HAL_PCD_EP_Close+0x5e>
 800ba42:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800ba46:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800ba4a:	0509      	lsls	r1, r1, #20
 800ba4c:	0d09      	lsrs	r1, r1, #20
 800ba4e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800ba52:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800ba56:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS); 
 800ba5a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800ba5e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800ba62:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 800ba66:	0409      	lsls	r1, r1, #16
 800ba68:	0c09      	lsrs	r1, r1, #16
 800ba6a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800ba6e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
      PCD_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 800ba72:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 800ba76:	2300      	movs	r3, #0
 800ba78:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return HAL_OK;
 800ba7c:	4618      	mov	r0, r3
}
 800ba7e:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800ba80:	0449      	lsls	r1, r1, #17
 800ba82:	d50b      	bpl.n	800ba9c <HAL_PCD_EP_Close+0xa0>
 800ba84:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800ba88:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800ba8c:	0509      	lsls	r1, r1, #20
 800ba8e:	0d09      	lsrs	r1, r1, #20
 800ba90:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800ba94:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800ba98:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 800ba9c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800baa0:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800baa4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800baa8:	e7dd      	b.n	800ba66 <HAL_PCD_EP_Close+0x6a>
    if (ep->is_in==0)
 800baaa:	2c00      	cmp	r4, #0
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800baac:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
    if (ep->is_in==0)
 800bab0:	db40      	blt.n	800bb34 <HAL_PCD_EP_Close+0x138>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800bab2:	044c      	lsls	r4, r1, #17
 800bab4:	d50b      	bpl.n	800bace <HAL_PCD_EP_Close+0xd2>
 800bab6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800baba:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800babe:	0509      	lsls	r1, r1, #20
 800bac0:	0d09      	lsrs	r1, r1, #20
 800bac2:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800bac6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800baca:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800bace:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800bad2:	0649      	lsls	r1, r1, #25
 800bad4:	d50b      	bpl.n	800baee <HAL_PCD_EP_Close+0xf2>
 800bad6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800bada:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800bade:	0509      	lsls	r1, r1, #20
 800bae0:	0d09      	lsrs	r1, r1, #20
 800bae2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800bae6:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800baea:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 800baee:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800baf2:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800baf6:	0509      	lsls	r1, r1, #20
 800baf8:	0d09      	lsrs	r1, r1, #20
 800bafa:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800bafe:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800bb02:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 800bb06:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800bb0a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800bb0e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800bb12:	0409      	lsls	r1, r1, #16
 800bb14:	0c09      	lsrs	r1, r1, #16
 800bb16:	f248 0480 	movw	r4, #32896	; 0x8080
 800bb1a:	4321      	orrs	r1, r4
 800bb1c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 800bb20:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800bb24:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800bb28:	f021 0140 	bic.w	r1, r1, #64	; 0x40
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 800bb2c:	0409      	lsls	r1, r1, #16
 800bb2e:	0c09      	lsrs	r1, r1, #16
 800bb30:	4321      	orrs	r1, r4
 800bb32:	e79e      	b.n	800ba72 <HAL_PCD_EP_Close+0x76>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800bb34:	044c      	lsls	r4, r1, #17
 800bb36:	d50b      	bpl.n	800bb50 <HAL_PCD_EP_Close+0x154>
 800bb38:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800bb3c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800bb40:	0509      	lsls	r1, r1, #20
 800bb42:	0d09      	lsrs	r1, r1, #20
 800bb44:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800bb48:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800bb4c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800bb50:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800bb54:	0649      	lsls	r1, r1, #25
 800bb56:	d50b      	bpl.n	800bb70 <HAL_PCD_EP_Close+0x174>
 800bb58:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800bb5c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800bb60:	0509      	lsls	r1, r1, #20
 800bb62:	0d09      	lsrs	r1, r1, #20
 800bb64:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800bb68:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800bb6c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 800bb70:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800bb74:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800bb78:	0509      	lsls	r1, r1, #20
 800bb7a:	0d09      	lsrs	r1, r1, #20
 800bb7c:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800bb80:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800bb84:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 800bb88:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800bb8c:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800bb90:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800bb94:	0409      	lsls	r1, r1, #16
 800bb96:	0c09      	lsrs	r1, r1, #16
 800bb98:	f248 0480 	movw	r4, #32896	; 0x8080
 800bb9c:	4321      	orrs	r1, r4
 800bb9e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 800bba2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800bba6:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800bbaa:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800bbae:	e7bd      	b.n	800bb2c <HAL_PCD_EP_Close+0x130>
  __HAL_LOCK(hpcd); 
 800bbb0:	2002      	movs	r0, #2
 800bbb2:	e764      	b.n	800ba7e <HAL_PCD_EP_Close+0x82>

0800bbb4 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bbb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbb6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800bbba:	241c      	movs	r4, #28
 800bbbc:	fb04 0401 	mla	r4, r4, r1, r0
  ep->xfer_len = len;
 800bbc0:	e9c4 2331 	strd	r2, r3, [r4, #196]	; 0xc4
  ep->xfer_count = 0;
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
  ep->is_in = 0;
 800bbca:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
  ep->num = ep_addr & 0x7F;
 800bbce:	f884 10b4 	strb.w	r1, [r4, #180]	; 0xb4
   
  __HAL_LOCK(hpcd); 
 800bbd2:	f890 5140 	ldrb.w	r5, [r0, #320]	; 0x140
 800bbd6:	2d01      	cmp	r5, #1
 800bbd8:	d04b      	beq.n	800bc72 <HAL_PCD_EP_Receive+0xbe>
 800bbda:	2501      	movs	r5, #1
 800bbdc:	f880 5140 	strb.w	r5, [r0, #320]	; 0x140
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 800bbe0:	f8d4 40c0 	ldr.w	r4, [r4, #192]	; 0xc0
 800bbe4:	271c      	movs	r7, #28
 800bbe6:	429c      	cmp	r4, r3
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 800bbe8:	fb07 0701 	mla	r7, r7, r1, r0
 800bbec:	bf3c      	itt	cc
 800bbee:	1b1a      	subcc	r2, r3, r4
 800bbf0:	4623      	movcc	r3, r4
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len);
 800bbf2:	6804      	ldr	r4, [r0, #0]
 800bbf4:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800bbf8:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len);
 800bbfc:	00ca      	lsls	r2, r1, #3
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800bbfe:	fa12 f585 	uxtah	r5, r2, r5
 800bc02:	2b3e      	cmp	r3, #62	; 0x3e
 800bc04:	f504 6680 	add.w	r6, r4, #1024	; 0x400
 800bc08:	f105 0506 	add.w	r5, r5, #6
 800bc0c:	d926      	bls.n	800bc5c <HAL_PCD_EP_Receive+0xa8>
 800bc0e:	f3c3 124f 	ubfx	r2, r3, #5, #16
 800bc12:	06df      	lsls	r7, r3, #27
 800bc14:	bf04      	itt	eq
 800bc16:	f102 33ff 	addeq.w	r3, r2, #4294967295	; 0xffffffff
 800bc1a:	b29a      	uxtheq	r2, r3
 800bc1c:	4b16      	ldr	r3, [pc, #88]	; (800bc78 <HAL_PCD_EP_Receive+0xc4>)
 800bc1e:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	f846 3015 	str.w	r3, [r6, r5, lsl #1]
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800bc28:	231c      	movs	r3, #28
 800bc2a:	fb03 0101 	mla	r1, r3, r1, r0
 800bc2e:	f891 20b4 	ldrb.w	r2, [r1, #180]	; 0xb4
 800bc32:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800bc36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc3e:	041b      	lsls	r3, r3, #16
 800bc40:	0c1b      	lsrs	r3, r3, #16
 800bc42:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800bc46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc4e:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
  
  __HAL_UNLOCK(hpcd); 
 800bc52:	2300      	movs	r3, #0
 800bc54:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 800bc58:	4618      	mov	r0, r3
}
 800bc5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800bc5c:	f3c3 024f 	ubfx	r2, r3, #1, #16
 800bc60:	07db      	lsls	r3, r3, #31
 800bc62:	bf44      	itt	mi
 800bc64:	3201      	addmi	r2, #1
 800bc66:	b292      	uxthmi	r2, r2
 800bc68:	0292      	lsls	r2, r2, #10
 800bc6a:	b292      	uxth	r2, r2
 800bc6c:	f846 2015 	str.w	r2, [r6, r5, lsl #1]
 800bc70:	e7da      	b.n	800bc28 <HAL_PCD_EP_Receive+0x74>
  __HAL_LOCK(hpcd); 
 800bc72:	2002      	movs	r0, #2
 800bc74:	e7f1      	b.n	800bc5a <HAL_PCD_EP_Receive+0xa6>
 800bc76:	bf00      	nop
 800bc78:	ffff8000 	.word	0xffff8000

0800bc7c <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 800bc7c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800bc80:	231c      	movs	r3, #28
 800bc82:	fb03 0001 	mla	r0, r3, r1, r0
}
 800bc86:	f8b0 00cc 	ldrh.w	r0, [r0, #204]	; 0xcc
 800bc8a:	4770      	bx	lr

0800bc8c <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc8e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800bc92:	461f      	mov	r7, r3
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800bc94:	231c      	movs	r3, #28
 800bc96:	fb03 0305 	mla	r3, r3, r5, r0
  ep->xfer_len = len;
 800bc9a:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
{
 800bc9e:	4604      	mov	r4, r0
 800bca0:	4694      	mov	ip, r2
  ep->xfer_count = 0;
 800bca2:	2000      	movs	r0, #0
  ep->is_in = 1;
 800bca4:	2201      	movs	r2, #1
  ep->xfer_count = 0;
 800bca6:	6418      	str	r0, [r3, #64]	; 0x40
  ep->is_in = 1;
 800bca8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
 800bcac:	f883 5028 	strb.w	r5, [r3, #40]	; 0x28
  
  __HAL_LOCK(hpcd); 
 800bcb0:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 800bcb4:	4291      	cmp	r1, r2
 800bcb6:	d072      	beq.n	800bd9e <HAL_PCD_EP_Transmit+0x112>
 800bcb8:	f884 2140 	strb.w	r2, [r4, #320]	; 0x140
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 800bcbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bcbe:	261c      	movs	r6, #28
 800bcc0:	fb06 4605 	mla	r6, r6, r5, r4
 800bcc4:	42ba      	cmp	r2, r7
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 800bcc6:	bf3c      	itt	cc
 800bcc8:	1ab8      	subcc	r0, r7, r2
 800bcca:	4617      	movcc	r7, r2
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 800bccc:	f896 2032 	ldrb.w	r2, [r6, #50]	; 0x32
 800bcd0:	63f0      	str	r0, [r6, #60]	; 0x3c
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 800bcd2:	b2bb      	uxth	r3, r7
 800bcd4:	6820      	ldr	r0, [r4, #0]
  if (ep->doublebuffer == 0) 
 800bcd6:	bb4a      	cbnz	r2, 800bd2c <HAL_PCD_EP_Transmit+0xa0>
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 800bcd8:	8db2      	ldrh	r2, [r6, #44]	; 0x2c
 800bcda:	4661      	mov	r1, ip
 800bcdc:	f000 fb6f 	bl	800c3be <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 800bce0:	6822      	ldr	r2, [r4, #0]
 800bce2:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800bce6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800bcf0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800bcf4:	f8c3 7404 	str.w	r7, [r3, #1028]	; 0x404
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800bcf8:	211c      	movs	r1, #28
 800bcfa:	fb01 4505 	mla	r5, r1, r5, r4
 800bcfe:	6822      	ldr	r2, [r4, #0]
 800bd00:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800bd04:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800bd08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd10:	041b      	lsls	r3, r3, #16
 800bd12:	0c1b      	lsrs	r3, r3, #16
 800bd14:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800bd18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  
  __HAL_UNLOCK(hpcd);
 800bd20:	2000      	movs	r0, #0
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800bd22:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  __HAL_UNLOCK(hpcd);
 800bd26:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
     
  return HAL_OK;
}
 800bd2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800bd2c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800bd30:	b292      	uxth	r2, r2
 800bd32:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800bd36:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800bd3a:	f8c2 740c 	str.w	r7, [r2, #1036]	; 0x40c
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 800bd3e:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 800bd42:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
 800bd46:	0652      	lsls	r2, r2, #25
      pmabuffer = ep->pmaaddr1;
 800bd48:	bf4c      	ite	mi
 800bd4a:	8e32      	ldrhmi	r2, [r6, #48]	; 0x30
      pmabuffer = ep->pmaaddr0;
 800bd4c:	8df2      	ldrhpl	r2, [r6, #46]	; 0x2e
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 800bd4e:	261c      	movs	r6, #28
 800bd50:	fb06 4605 	mla	r6, r6, r5, r4
 800bd54:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 800bd56:	f000 fb32 	bl	800c3be <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
 800bd5a:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 800bd5e:	6822      	ldr	r2, [r4, #0]
 800bd60:	b973      	cbnz	r3, 800bd80 <HAL_PCD_EP_Transmit+0xf4>
 800bd62:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800bd66:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800bd6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd6e:	051b      	lsls	r3, r3, #20
 800bd70:	0d1b      	lsrs	r3, r3, #20
 800bd72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bd7a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800bd7e:	e7bb      	b.n	800bcf8 <HAL_PCD_EP_Transmit+0x6c>
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d1b9      	bne.n	800bcf8 <HAL_PCD_EP_Transmit+0x6c>
 800bd84:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800bd88:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800bd8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd90:	051b      	lsls	r3, r3, #20
 800bd92:	0d1b      	lsrs	r3, r3, #20
 800bd94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bd98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd9c:	e7ed      	b.n	800bd7a <HAL_PCD_EP_Transmit+0xee>
  __HAL_LOCK(hpcd); 
 800bd9e:	2002      	movs	r0, #2
 800bda0:	e7c3      	b.n	800bd2a <HAL_PCD_EP_Transmit+0x9e>
	...

0800bda4 <HAL_PCD_IRQHandler>:
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800bda4:	6803      	ldr	r3, [r0, #0]
 800bda6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
{
 800bdaa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800bdae:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800bdb0:	0418      	lsls	r0, r3, #16
 800bdb2:	d46e      	bmi.n	800be92 <HAL_PCD_IRQHandler+0xee>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 800bdb4:	6823      	ldr	r3, [r4, #0]
 800bdb6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800bdba:	0551      	lsls	r1, r2, #21
 800bdbc:	d50a      	bpl.n	800bdd4 <HAL_PCD_IRQHandler+0x30>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800bdbe:	f64f 32ff 	movw	r2, #64511	; 0xfbff
    HAL_PCD_ResetCallback(hpcd);
 800bdc2:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800bdc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800bdc8:	f001 fc8f 	bl	800d6ea <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 800bdcc:	2100      	movs	r1, #0
 800bdce:	4620      	mov	r0, r4
 800bdd0:	f7ff fc8c 	bl	800b6ec <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVRM))
 800bdd4:	6823      	ldr	r3, [r4, #0]
 800bdd6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800bdda:	0452      	lsls	r2, r2, #17
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVRM);    
 800bddc:	bf44      	itt	mi
 800bdde:	f64b 72ff 	movwmi	r2, #49151	; 0xbfff
 800bde2:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 800bde6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800bdea:	0497      	lsls	r7, r2, #18
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 800bdec:	bf44      	itt	mi
 800bdee:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 800bdf2:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 800bdf6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800bdfa:	04d6      	lsls	r6, r2, #19
 800bdfc:	d513      	bpl.n	800be26 <HAL_PCD_IRQHandler+0x82>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 800bdfe:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800be02:	f022 0204 	bic.w	r2, r2, #4
 800be06:	0412      	lsls	r2, r2, #16
 800be08:	0c12      	lsrs	r2, r2, #16
 800be0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR = wInterrupt_Mask;
 800be0e:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 800be12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 800be16:	4620      	mov	r0, r4
 800be18:	f001 fc75 	bl	800d706 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 800be1c:	6823      	ldr	r3, [r4, #0]
 800be1e:	f64e 72ff 	movw	r2, #61439	; 0xefff
 800be22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 800be26:	6823      	ldr	r3, [r4, #0]
 800be28:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800be2c:	0515      	lsls	r5, r2, #20
 800be2e:	d518      	bpl.n	800be62 <HAL_PCD_IRQHandler+0xbe>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 800be30:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 800be34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800be38:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800be3c:	b292      	uxth	r2, r2
 800be3e:	f042 0208 	orr.w	r2, r2, #8
 800be42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 800be46:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800be4a:	b292      	uxth	r2, r2
 800be4c:	f042 0204 	orr.w	r2, r2, #4
 800be50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 800be54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800be58:	04d8      	lsls	r0, r3, #19
 800be5a:	d402      	bmi.n	800be62 <HAL_PCD_IRQHandler+0xbe>
      HAL_PCD_SuspendCallback(hpcd);
 800be5c:	4620      	mov	r0, r4
 800be5e:	f001 fc51 	bl	800d704 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 800be62:	6823      	ldr	r3, [r4, #0]
 800be64:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800be68:	0591      	lsls	r1, r2, #22
 800be6a:	d506      	bpl.n	800be7a <HAL_PCD_IRQHandler+0xd6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 800be6c:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 800be70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800be74:	4620      	mov	r0, r4
 800be76:	f001 fc34 	bl	800d6e2 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 800be7a:	6823      	ldr	r3, [r4, #0]
 800be7c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800be80:	05d2      	lsls	r2, r2, #23
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 800be82:	bf44      	itt	mi
 800be84:	f64f 62ff 	movwmi	r2, #65279	; 0xfeff
 800be88:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
}
 800be8c:	b002      	add	sp, #8
 800be8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __IO uint16_t wEPVal = 0;
 800be92:	2300      	movs	r3, #0
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 800be94:	4fc6      	ldr	r7, [pc, #792]	; (800c1b0 <HAL_PCD_IRQHandler+0x40c>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800be96:	f8df 831c 	ldr.w	r8, [pc, #796]	; 800c1b4 <HAL_PCD_IRQHandler+0x410>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800be9a:	f8df 931c 	ldr.w	r9, [pc, #796]	; 800c1b8 <HAL_PCD_IRQHandler+0x414>
  __IO uint16_t wEPVal = 0;
 800be9e:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 800bea2:	6820      	ldr	r0, [r4, #0]
 800bea4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800bea8:	b29b      	uxth	r3, r3
 800beaa:	0419      	lsls	r1, r3, #16
 800beac:	f8ad 3004 	strh.w	r3, [sp, #4]
 800beb0:	d580      	bpl.n	800bdb4 <HAL_PCD_IRQHandler+0x10>
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800beb2:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (EPindex == 0)
 800beb6:	f015 050f 	ands.w	r5, r5, #15
 800beba:	f040 80ab 	bne.w	800c014 <HAL_PCD_IRQHandler+0x270>
      if ((wIstr & USB_ISTR_DIR) == 0)
 800bebe:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800bec2:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 800bec4:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800bec8:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 800beca:	d126      	bne.n	800bf1a <HAL_PCD_IRQHandler+0x176>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800becc:	403b      	ands	r3, r7
 800bece:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800bed0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800bed4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800bed8:	b29b      	uxth	r3, r3
 800beda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bede:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        ep->xfer_buff += ep->xfer_count;
 800bee2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800bee4:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
 800bee8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800beec:	6423      	str	r3, [r4, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 800beee:	4413      	add	r3, r2
 800bef0:	63a3      	str	r3, [r4, #56]	; 0x38
        HAL_PCD_DataInStageCallback(hpcd, 0);
 800bef2:	4620      	mov	r0, r4
 800bef4:	f001 fbed 	bl	800d6d2 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 800bef8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800befc:	2b00      	cmp	r3, #0
 800befe:	d0d0      	beq.n	800bea2 <HAL_PCD_IRQHandler+0xfe>
 800bf00:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800bf02:	2a00      	cmp	r2, #0
 800bf04:	d1cd      	bne.n	800bea2 <HAL_PCD_IRQHandler+0xfe>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 800bf06:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800bf0a:	6821      	ldr	r1, [r4, #0]
 800bf0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf10:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0;
 800bf14:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 800bf18:	e7c3      	b.n	800bea2 <HAL_PCD_IRQHandler+0xfe>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800bf1a:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0)
 800bf1e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bf22:	051a      	lsls	r2, r3, #20
 800bf24:	d51f      	bpl.n	800bf66 <HAL_PCD_IRQHandler+0x1c2>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bf26:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800bf2a:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 800bf2e:	b29b      	uxth	r3, r3
 800bf30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf34:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800bf38:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bf3c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800bf40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf44:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800bf48:	f504 71a2 	add.w	r1, r4, #324	; 0x144
 800bf4c:	f000 fa45 	bl	800c3da <PCD_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 800bf50:	6822      	ldr	r2, [r4, #0]
 800bf52:	8813      	ldrh	r3, [r2, #0]
 800bf54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf58:	051b      	lsls	r3, r3, #20
 800bf5a:	0d1b      	lsrs	r3, r3, #20
 800bf5c:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f001 fba8 	bl	800d6b4 <HAL_PCD_SetupStageCallback>
 800bf64:	e79d      	b.n	800bea2 <HAL_PCD_IRQHandler+0xfe>
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 800bf66:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bf6a:	041b      	lsls	r3, r3, #16
 800bf6c:	d599      	bpl.n	800bea2 <HAL_PCD_IRQHandler+0xfe>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800bf6e:	8803      	ldrh	r3, [r0, #0]
 800bf70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf74:	051b      	lsls	r3, r3, #20
 800bf76:	0d1b      	lsrs	r3, r3, #20
 800bf78:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bf7a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800bf7e:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 800bf82:	b29b      	uxth	r3, r3
 800bf84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf88:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800bf8c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800bf90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf94:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          if (ep->xfer_count != 0)
 800bf98:	b163      	cbz	r3, 800bfb4 <HAL_PCD_IRQHandler+0x210>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800bf9a:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
 800bf9e:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 800bfa2:	f000 fa1a 	bl	800c3da <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 800bfa6:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800bfaa:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
 800bfae:	4413      	add	r3, r2
 800bfb0:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 800bfb4:	2100      	movs	r1, #0
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	f001 fb82 	bl	800d6c0 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800bfbc:	6822      	ldr	r2, [r4, #0]
 800bfbe:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 800bfc2:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 800bfc6:	2d3e      	cmp	r5, #62	; 0x3e
 800bfc8:	b289      	uxth	r1, r1
 800bfca:	f101 0106 	add.w	r1, r1, #6
 800bfce:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800bfd2:	d917      	bls.n	800c004 <HAL_PCD_IRQHandler+0x260>
 800bfd4:	f3c5 134f 	ubfx	r3, r5, #5, #16
 800bfd8:	06ee      	lsls	r6, r5, #27
 800bfda:	bf04      	itt	eq
 800bfdc:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 800bfe0:	b29b      	uxtheq	r3, r3
 800bfe2:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800bfec:	8813      	ldrh	r3, [r2, #0]
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	ea03 0308 	and.w	r3, r3, r8
 800bff4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800bff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c000:	8013      	strh	r3, [r2, #0]
 800c002:	e74e      	b.n	800bea2 <HAL_PCD_IRQHandler+0xfe>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800c004:	f3c5 034f 	ubfx	r3, r5, #1, #16
 800c008:	07ed      	lsls	r5, r5, #31
 800c00a:	bf44      	itt	mi
 800c00c:	3301      	addmi	r3, #1
 800c00e:	b29b      	uxthmi	r3, r3
 800c010:	029b      	lsls	r3, r3, #10
 800c012:	e7e8      	b.n	800bfe6 <HAL_PCD_IRQHandler+0x242>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 800c014:	fa0f fa85 	sxth.w	sl, r5
 800c018:	f830 302a 	ldrh.w	r3, [r0, sl, lsl #2]
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 800c022:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800c026:	041e      	lsls	r6, r3, #16
 800c028:	d541      	bpl.n	800c0ae <HAL_PCD_IRQHandler+0x30a>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 800c02a:	f830 302a 	ldrh.w	r3, [r0, sl, lsl #2]
 800c02e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c032:	051b      	lsls	r3, r3, #20
 800c034:	0d1b      	lsrs	r3, r3, #20
        if (ep->doublebuffer == 0)
 800c036:	211c      	movs	r1, #28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 800c038:	f820 302a 	strh.w	r3, [r0, sl, lsl #2]
        if (ep->doublebuffer == 0)
 800c03c:	fb01 4105 	mla	r1, r1, r5, r4
 800c040:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 800c044:	f891 30be 	ldrb.w	r3, [r1, #190]	; 0xbe
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d173      	bne.n	800c134 <HAL_PCD_IRQHandler+0x390>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800c04c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800c050:	f891 60b4 	ldrb.w	r6, [r1, #180]	; 0xb4
 800c054:	b29b      	uxth	r3, r3
 800c056:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c05a:	3306      	adds	r3, #6
 800c05c:	f852 6013 	ldr.w	r6, [r2, r3, lsl #1]
 800c060:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0)
 800c064:	b136      	cbz	r6, 800c074 <HAL_PCD_IRQHandler+0x2d0>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800c066:	f8b1 20b8 	ldrh.w	r2, [r1, #184]	; 0xb8
 800c06a:	f8d1 10c4 	ldr.w	r1, [r1, #196]	; 0xc4
 800c06e:	4633      	mov	r3, r6
 800c070:	f000 f9b3 	bl	800c3da <PCD_ReadPMA>
        ep->xfer_count+=count;
 800c074:	211c      	movs	r1, #28
 800c076:	fb01 4105 	mla	r1, r1, r5, r4
 800c07a:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
        ep->xfer_buff+=count;
 800c07e:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
        ep->xfer_count+=count;
 800c082:	4433      	add	r3, r6
 800c084:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 800c088:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
        ep->xfer_buff+=count;
 800c08c:	4432      	add	r2, r6
 800c08e:	f8c1 20c4 	str.w	r2, [r1, #196]	; 0xc4
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 800c092:	b123      	cbz	r3, 800c09e <HAL_PCD_IRQHandler+0x2fa>
 800c094:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800c098:	4286      	cmp	r6, r0
 800c09a:	f080 8082 	bcs.w	800c1a2 <HAL_PCD_IRQHandler+0x3fe>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800c09e:	231c      	movs	r3, #28
 800c0a0:	fb03 4305 	mla	r3, r3, r5, r4
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 800c0aa:	f001 fb09 	bl	800d6c0 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 800c0ae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800c0b2:	0618      	lsls	r0, r3, #24
 800c0b4:	f57f aef5 	bpl.w	800bea2 <HAL_PCD_IRQHandler+0xfe>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 800c0b8:	6820      	ldr	r0, [r4, #0]
 800c0ba:	f830 302a 	ldrh.w	r3, [r0, sl, lsl #2]
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	403b      	ands	r3, r7
        if (ep->doublebuffer == 0)
 800c0c2:	211c      	movs	r1, #28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 800c0c4:	f820 302a 	strh.w	r3, [r0, sl, lsl #2]
        if (ep->doublebuffer == 0)
 800c0c8:	fb01 4105 	mla	r1, r1, r5, r4
 800c0cc:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 800c0d0:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d171      	bne.n	800c1bc <HAL_PCD_IRQHandler+0x418>
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800c0d8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800c0dc:	f891 6028 	ldrb.w	r6, [r1, #40]	; 0x28
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c0e6:	3302      	adds	r3, #2
 800c0e8:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 800c0ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c0f0:	640b      	str	r3, [r1, #64]	; 0x40
          if (ep->xfer_count != 0)
 800c0f2:	b11b      	cbz	r3, 800c0fc <HAL_PCD_IRQHandler+0x358>
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800c0f4:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 800c0f6:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c0f8:	f000 f961 	bl	800c3be <PCD_WritePMA>
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800c0fc:	6822      	ldr	r2, [r4, #0]
 800c0fe:	211c      	movs	r1, #28
 800c100:	fb01 4505 	mla	r5, r1, r5, r4
 800c104:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800c108:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800c112:	eb02 0343 	add.w	r3, r2, r3, lsl #1
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c116:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800c118:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 800c11c:	6bab      	ldr	r3, [r5, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800c11e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c122:	642a      	str	r2, [r5, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 800c124:	441a      	add	r2, r3
        if (ep->xfer_len == 0)
 800c126:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        ep->xfer_buff+=ep->xfer_count;
 800c128:	63aa      	str	r2, [r5, #56]	; 0x38
        if (ep->xfer_len == 0)
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d17a      	bne.n	800c224 <HAL_PCD_IRQHandler+0x480>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c12e:	f001 fad0 	bl	800d6d2 <HAL_PCD_DataInStageCallback>
 800c132:	e6b6      	b.n	800bea2 <HAL_PCD_IRQHandler+0xfe>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 800c134:	f891 30b4 	ldrb.w	r3, [r1, #180]	; 0xb4
 800c138:	f830 c023 	ldrh.w	ip, [r0, r3, lsl #2]
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800c13c:	00de      	lsls	r6, r3, #3
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c13e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 800c142:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c146:	fa16 f383 	uxtah	r3, r6, r3
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 800c14a:	d01f      	beq.n	800c18c <HAL_PCD_IRQHandler+0x3e8>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c14c:	3302      	adds	r3, #2
 800c14e:	f852 6013 	ldr.w	r6, [r2, r3, lsl #1]
 800c152:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 800c156:	b136      	cbz	r6, 800c166 <HAL_PCD_IRQHandler+0x3c2>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800c158:	f8b1 20ba 	ldrh.w	r2, [r1, #186]	; 0xba
 800c15c:	4633      	mov	r3, r6
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800c15e:	f8d1 10c4 	ldr.w	r1, [r1, #196]	; 0xc4
 800c162:	f000 f93a 	bl	800c3da <PCD_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 800c166:	231c      	movs	r3, #28
 800c168:	fb03 4305 	mla	r3, r3, r5, r4
 800c16c:	6822      	ldr	r2, [r4, #0]
 800c16e:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 800c172:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800c176:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c17a:	051b      	lsls	r3, r3, #20
 800c17c:	0d1b      	lsrs	r3, r3, #20
 800c17e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c182:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c186:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800c18a:	e773      	b.n	800c074 <HAL_PCD_IRQHandler+0x2d0>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c18c:	3306      	adds	r3, #6
 800c18e:	f852 6013 	ldr.w	r6, [r2, r3, lsl #1]
 800c192:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 800c196:	2e00      	cmp	r6, #0
 800c198:	d0e5      	beq.n	800c166 <HAL_PCD_IRQHandler+0x3c2>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800c19a:	f8b1 20bc 	ldrh.w	r2, [r1, #188]	; 0xbc
 800c19e:	4633      	mov	r3, r6
 800c1a0:	e7dd      	b.n	800c15e <HAL_PCD_IRQHandler+0x3ba>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800c1a2:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	f7ff fd04 	bl	800bbb4 <HAL_PCD_EP_Receive>
 800c1ac:	e77f      	b.n	800c0ae <HAL_PCD_IRQHandler+0x30a>
 800c1ae:	bf00      	nop
 800c1b0:	ffff8f0f 	.word	0xffff8f0f
 800c1b4:	ffffbf8f 	.word	0xffffbf8f
 800c1b8:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800c1bc:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800c1c0:	f830 c023 	ldrh.w	ip, [r0, r3, lsl #2]
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800c1c4:	00de      	lsls	r6, r3, #3
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c1c6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800c1ca:	f01c 0f40 	tst.w	ip, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c1ce:	fa16 f383 	uxtah	r3, r6, r3
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800c1d2:	d01d      	beq.n	800c210 <HAL_PCD_IRQHandler+0x46c>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c1d4:	3302      	adds	r3, #2
 800c1d6:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 800c1da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c1de:	640b      	str	r3, [r1, #64]	; 0x40
            if (ep->xfer_count != 0)
 800c1e0:	b11b      	cbz	r3, 800c1ea <HAL_PCD_IRQHandler+0x446>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 800c1e2:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800c1e4:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c1e6:	f000 f8ea 	bl	800c3be <PCD_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 800c1ea:	231c      	movs	r3, #28
 800c1ec:	fb03 4305 	mla	r3, r3, r5, r4
 800c1f0:	6822      	ldr	r2, [r4, #0]
 800c1f2:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 800c1f6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800c1fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c1fe:	051b      	lsls	r3, r3, #20
 800c200:	0d1b      	lsrs	r3, r3, #20
 800c202:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c20a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800c20e:	e775      	b.n	800c0fc <HAL_PCD_IRQHandler+0x358>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c210:	3306      	adds	r3, #6
 800c212:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 800c216:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c21a:	640b      	str	r3, [r1, #64]	; 0x40
            if (ep->xfer_count != 0)
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d0e4      	beq.n	800c1ea <HAL_PCD_IRQHandler+0x446>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800c220:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 800c222:	e7df      	b.n	800c1e4 <HAL_PCD_IRQHandler+0x440>
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800c224:	f7ff fd32 	bl	800bc8c <HAL_PCD_EP_Transmit>
 800c228:	e63b      	b.n	800bea2 <HAL_PCD_IRQHandler+0xfe>
 800c22a:	bf00      	nop

0800c22c <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c22c:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 800c22e:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800c232:	2b01      	cmp	r3, #1
 800c234:	d048      	beq.n	800c2c8 <HAL_PCD_EP_SetStall+0x9c>
   
  if ((0x80 & ep_addr) == 0x80)
 800c236:	b24c      	sxtb	r4, r1
  __HAL_LOCK(hpcd); 
 800c238:	2301      	movs	r3, #1
 800c23a:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  if ((0x80 & ep_addr) == 0x80)
 800c23e:	2c00      	cmp	r4, #0
 800c240:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800c244:	f04f 021c 	mov.w	r2, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800c248:	bfb5      	itete	lt
 800c24a:	fb02 0103 	mlalt	r1, r2, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c24e:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800c252:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800c254:	31b4      	addge	r1, #180	; 0xb4
  }
  
  ep->is_stall = 1;
 800c256:	2201      	movs	r2, #1
 800c258:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800c25a:	0fe2      	lsrs	r2, r4, #31
  ep->num   = ep_addr & 0x7F;
 800c25c:	700b      	strb	r3, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800c25e:	704a      	strb	r2, [r1, #1]
  
  if (ep->num == 0)
 800c260:	6802      	ldr	r2, [r0, #0]
 800c262:	b9a3      	cbnz	r3, 800c28e <HAL_PCD_EP_SetStall+0x62>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 800c264:	8813      	ldrh	r3, [r2, #0]
 800c266:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c26a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c26e:	041b      	lsls	r3, r3, #16
 800c270:	0c1b      	lsrs	r3, r3, #16
 800c272:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c276:	f083 0310 	eor.w	r3, r3, #16
 800c27a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c27e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c282:	8013      	strh	r3, [r2, #0]
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
    }
  }
  __HAL_UNLOCK(hpcd); 
 800c284:	2300      	movs	r3, #0
 800c286:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 800c28a:	4618      	mov	r0, r3
}
 800c28c:	bd10      	pop	{r4, pc}
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 800c28e:	b219      	sxth	r1, r3
    if (ep->is_in)
 800c290:	2c00      	cmp	r4, #0
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 800c292:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
    if (ep->is_in)
 800c296:	da0e      	bge.n	800c2b6 <HAL_PCD_EP_SetStall+0x8a>
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 800c298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c29c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2a0:	041b      	lsls	r3, r3, #16
 800c2a2:	0c1b      	lsrs	r3, r3, #16
 800c2a4:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
 800c2a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2b0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800c2b4:	e7e6      	b.n	800c284 <HAL_PCD_EP_SetStall+0x58>
 800c2b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c2ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2be:	041b      	lsls	r3, r3, #16
 800c2c0:	0c1b      	lsrs	r3, r3, #16
 800c2c2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c2c6:	e7ef      	b.n	800c2a8 <HAL_PCD_EP_SetStall+0x7c>
  __HAL_LOCK(hpcd); 
 800c2c8:	2002      	movs	r0, #2
 800c2ca:	e7df      	b.n	800c28c <HAL_PCD_EP_SetStall+0x60>

0800c2cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c2cc:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 800c2ce:	b24c      	sxtb	r4, r1
 800c2d0:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 800c2d4:	2c00      	cmp	r4, #0
 800c2d6:	f04f 031c 	mov.w	r3, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800c2da:	bfb5      	itete	lt
 800c2dc:	fb03 0102 	mlalt	r1, r3, r2, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c2e0:	fb03 0101 	mlage	r1, r3, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800c2e4:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800c2e6:	31b4      	addge	r1, #180	; 0xb4
  }
  
  ep->is_stall = 0;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	708b      	strb	r3, [r1, #2]
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800c2ec:	0fe3      	lsrs	r3, r4, #31
  ep->num   = ep_addr & 0x7F;
 800c2ee:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800c2f0:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 800c2f2:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d044      	beq.n	800c384 <HAL_PCD_EP_ClrStall+0xb8>
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	6801      	ldr	r1, [r0, #0]
 800c2fe:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  if (ep->is_in)
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800c302:	b212      	sxth	r2, r2
  if (ep->is_in)
 800c304:	2c00      	cmp	r4, #0
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800c306:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
  if (ep->is_in)
 800c30a:	da22      	bge.n	800c352 <HAL_PCD_EP_ClrStall+0x86>
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800c30c:	065c      	lsls	r4, r3, #25
 800c30e:	d50b      	bpl.n	800c328 <HAL_PCD_EP_ClrStall+0x5c>
 800c310:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
 800c314:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c318:	051b      	lsls	r3, r3, #20
 800c31a:	0d1b      	lsrs	r3, r3, #20
 800c31c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c320:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c324:	f821 3022 	strh.w	r3, [r1, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800c328:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
 800c32c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c334:	041b      	lsls	r3, r3, #16
 800c336:	0c1b      	lsrs	r3, r3, #16
 800c338:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800c33c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c344:	f821 3022 	strh.w	r3, [r1, r2, lsl #2]
  }
  __HAL_UNLOCK(hpcd); 
 800c348:	2300      	movs	r3, #0
 800c34a:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
    
  return HAL_OK;
 800c34e:	4618      	mov	r0, r3
}
 800c350:	bd10      	pop	{r4, pc}
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800c352:	045b      	lsls	r3, r3, #17
 800c354:	d50b      	bpl.n	800c36e <HAL_PCD_EP_ClrStall+0xa2>
 800c356:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
 800c35a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c35e:	051b      	lsls	r3, r3, #20
 800c360:	0d1b      	lsrs	r3, r3, #20
 800c362:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c36a:	f821 3022 	strh.w	r3, [r1, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800c36e:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
 800c372:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c37a:	041b      	lsls	r3, r3, #16
 800c37c:	0c1b      	lsrs	r3, r3, #16
 800c37e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800c382:	e7db      	b.n	800c33c <HAL_PCD_EP_ClrStall+0x70>
  __HAL_LOCK(hpcd); 
 800c384:	2002      	movs	r0, #2
 800c386:	e7e3      	b.n	800c350 <HAL_PCD_EP_ClrStall+0x84>

0800c388 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 800c388:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800c38c:	bf18      	it	ne
 800c38e:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
{
 800c392:	b510      	push	{r4, lr}
 800c394:	f04f 041c 	mov.w	r4, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800c398:	bf15      	itete	ne
 800c39a:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c39e:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800c3a2:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800c3a4:	30b4      	addeq	r0, #180	; 0xb4
  if (ep_kind == PCD_SNG_BUF)
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 800c3a6:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 800c3a8:	b91a      	cbnz	r2, 800c3b2 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0;
 800c3aa:	7282      	strb	r2, [r0, #10]
    ep->pmaadress = (uint16_t)pmaadress;
 800c3ac:	8081      	strh	r1, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
  }
  
  return HAL_OK; 
}
 800c3ae:	2000      	movs	r0, #0
 800c3b0:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1;
 800c3b2:	2201      	movs	r2, #1
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 800c3b4:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1;
 800c3b6:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 800c3b8:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 800c3ba:	8103      	strh	r3, [r0, #8]
 800c3bc:	e7f7      	b.n	800c3ae <HAL_PCDEx_PMAConfig+0x26>

0800c3be <PCD_WritePMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800c3be:	3301      	adds	r3, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800c3c0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800c3c4:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800c3c6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 800c3ca:	b903      	cbnz	r3, 800c3ce <PCD_WritePMA+0x10>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 800c3cc:	4770      	bx	lr
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800c3ce:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 800c3d2:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0; i--)
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	e7f7      	b.n	800c3ca <PCD_WritePMA+0xc>

0800c3da <PCD_ReadPMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800c3da:	3301      	adds	r3, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800c3dc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800c3e0:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800c3e2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 800c3e6:	b903      	cbnz	r3, 800c3ea <PCD_ReadPMA+0x10>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 800c3e8:	4770      	bx	lr
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800c3ea:	f852 0b04 	ldr.w	r0, [r2], #4
 800c3ee:	f821 0b02 	strh.w	r0, [r1], #2
  for (i = n; i != 0; i--)
 800c3f2:	3b01      	subs	r3, #1
 800c3f4:	e7f7      	b.n	800c3e6 <PCD_ReadPMA+0xc>

0800c3f6 <HAL_PCDEx_SetConnectionState>:
 __weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implenetd in the user file
   */ 
}
 800c3f6:	4770      	bx	lr

0800c3f8 <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800c3f8:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 800c3fa:	6804      	ldr	r4, [r0, #0]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800c3fc:	9d03      	ldr	r5, [sp, #12]
  tmpreg = hi2c->Instance->CR2;
 800c3fe:	6860      	ldr	r0, [r4, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800c400:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
 800c404:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800c408:	432b      	orrs	r3, r5
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800c40a:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800c40e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c412:	f3c1 0109 	ubfx	r1, r1, #0, #10
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800c416:	f020 0003 	bic.w	r0, r0, #3
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800c41a:	430b      	orrs	r3, r1
 800c41c:	4303      	orrs	r3, r0
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 800c41e:	6063      	str	r3, [r4, #4]
}  
 800c420:	bd30      	pop	{r4, r5, pc}

0800c422 <I2C_IsAcknowledgeFailed>:
{
 800c422:	b570      	push	{r4, r5, r6, lr}
 800c424:	4604      	mov	r4, r0
 800c426:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
 800c428:	f7fe ffc4 	bl	800b3b4 <HAL_GetTick>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c42c:	6822      	ldr	r2, [r4, #0]
 800c42e:	6993      	ldr	r3, [r2, #24]
 800c430:	f013 0310 	ands.w	r3, r3, #16
  tickstart = HAL_GetTick();
 800c434:	4606      	mov	r6, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c436:	d03e      	beq.n	800c4b6 <I2C_IsAcknowledgeFailed+0x94>
    if((hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX)
 800c438:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800c43c:	2b12      	cmp	r3, #18
 800c43e:	d007      	beq.n	800c450 <I2C_IsAcknowledgeFailed+0x2e>
 800c440:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800c444:	2b52      	cmp	r3, #82	; 0x52
 800c446:	d003      	beq.n	800c450 <I2C_IsAcknowledgeFailed+0x2e>
       || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX))
 800c448:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800c44c:	2b62      	cmp	r3, #98	; 0x62
 800c44e:	d106      	bne.n	800c45e <I2C_IsAcknowledgeFailed+0x3c>
      if((hi2c->Instance->CR2 & I2C_AUTOEND_MODE) != I2C_AUTOEND_MODE)
 800c450:	6853      	ldr	r3, [r2, #4]
 800c452:	0198      	lsls	r0, r3, #6
 800c454:	d403      	bmi.n	800c45e <I2C_IsAcknowledgeFailed+0x3c>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c456:	6853      	ldr	r3, [r2, #4]
 800c458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c45c:	6053      	str	r3, [r2, #4]
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c45e:	6823      	ldr	r3, [r4, #0]
 800c460:	699a      	ldr	r2, [r3, #24]
 800c462:	0692      	lsls	r2, r2, #26
 800c464:	d517      	bpl.n	800c496 <I2C_IsAcknowledgeFailed+0x74>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c466:	2210      	movs	r2, #16
 800c468:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c46a:	2220      	movs	r2, #32
 800c46c:	61da      	str	r2, [r3, #28]
    __HAL_I2C_RESET_CR2(hi2c);
 800c46e:	685a      	ldr	r2, [r3, #4]
 800c470:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800c474:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800c478:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800c47c:	f022 0201 	bic.w	r2, r2, #1
 800c480:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800c482:	2304      	movs	r3, #4
 800c484:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    hi2c->State= HAL_I2C_STATE_READY;
 800c488:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 800c48a:	2300      	movs	r3, #0
    hi2c->State= HAL_I2C_STATE_READY;
 800c48c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
 800c490:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800c494:	e00e      	b.n	800c4b4 <I2C_IsAcknowledgeFailed+0x92>
      if(Timeout != HAL_MAX_DELAY)
 800c496:	1c69      	adds	r1, r5, #1
 800c498:	d0e2      	beq.n	800c460 <I2C_IsAcknowledgeFailed+0x3e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800c49a:	b125      	cbz	r5, 800c4a6 <I2C_IsAcknowledgeFailed+0x84>
 800c49c:	f7fe ff8a 	bl	800b3b4 <HAL_GetTick>
 800c4a0:	1b80      	subs	r0, r0, r6
 800c4a2:	42a8      	cmp	r0, r5
 800c4a4:	d9db      	bls.n	800c45e <I2C_IsAcknowledgeFailed+0x3c>
          hi2c->State= HAL_I2C_STATE_READY;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hi2c);
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 800c4b2:	2003      	movs	r0, #3
}
 800c4b4:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	e7fc      	b.n	800c4b4 <I2C_IsAcknowledgeFailed+0x92>

0800c4ba <I2C_WaitOnTXISFlagUntilTimeout>:
{  
 800c4ba:	b570      	push	{r4, r5, r6, lr}
 800c4bc:	4604      	mov	r4, r0
 800c4be:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800c4c0:	f7fe ff78 	bl	800b3b4 <HAL_GetTick>
 800c4c4:	4606      	mov	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c4c6:	6823      	ldr	r3, [r4, #0]
 800c4c8:	699b      	ldr	r3, [r3, #24]
 800c4ca:	079b      	lsls	r3, r3, #30
 800c4cc:	d501      	bpl.n	800c4d2 <I2C_WaitOnTXISFlagUntilTimeout+0x18>
  return HAL_OK;      
 800c4ce:	2000      	movs	r0, #0
 800c4d0:	e014      	b.n	800c4fc <I2C_WaitOnTXISFlagUntilTimeout+0x42>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 800c4d2:	4629      	mov	r1, r5
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	f7ff ffa4 	bl	800c422 <I2C_IsAcknowledgeFailed>
 800c4da:	b9b0      	cbnz	r0, 800c50a <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 800c4dc:	1c6a      	adds	r2, r5, #1
 800c4de:	d0f2      	beq.n	800c4c6 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800c4e0:	b96d      	cbnz	r5, 800c4fe <I2C_WaitOnTXISFlagUntilTimeout+0x44>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c4e2:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800c4e6:	f043 0320 	orr.w	r3, r3, #32
 800c4ea:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        hi2c->State= HAL_I2C_STATE_READY;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hi2c);
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 800c4fa:	2003      	movs	r0, #3
}
 800c4fc:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800c4fe:	f7fe ff59 	bl	800b3b4 <HAL_GetTick>
 800c502:	1b80      	subs	r0, r0, r6
 800c504:	42a8      	cmp	r0, r5
 800c506:	d9de      	bls.n	800c4c6 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
 800c508:	e7eb      	b.n	800c4e2 <I2C_WaitOnTXISFlagUntilTimeout+0x28>
      return HAL_ERROR;
 800c50a:	2001      	movs	r0, #1
 800c50c:	e7f6      	b.n	800c4fc <I2C_WaitOnTXISFlagUntilTimeout+0x42>

0800c50e <I2C_WaitOnFlagUntilTimeout>:
{  
 800c50e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c512:	4604      	mov	r4, r0
 800c514:	460e      	mov	r6, r1
 800c516:	4690      	mov	r8, r2
 800c518:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800c51a:	f7fe ff4b 	bl	800b3b4 <HAL_GetTick>
 800c51e:	4607      	mov	r7, r0
  if(Status == RESET)
 800c520:	f1b8 0f00 	cmp.w	r8, #0
 800c524:	d01d      	beq.n	800c562 <I2C_WaitOnFlagUntilTimeout+0x54>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 800c526:	6822      	ldr	r2, [r4, #0]
 800c528:	6993      	ldr	r3, [r2, #24]
 800c52a:	ea36 0303 	bics.w	r3, r6, r3
 800c52e:	d11d      	bne.n	800c56c <I2C_WaitOnFlagUntilTimeout+0x5e>
      if(Timeout != HAL_MAX_DELAY)
 800c530:	1c6b      	adds	r3, r5, #1
 800c532:	d0f9      	beq.n	800c528 <I2C_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800c534:	b16d      	cbz	r5, 800c552 <I2C_WaitOnFlagUntilTimeout+0x44>
 800c536:	f7fe ff3d 	bl	800b3b4 <HAL_GetTick>
 800c53a:	1bc0      	subs	r0, r0, r7
 800c53c:	42a8      	cmp	r0, r5
 800c53e:	d9f2      	bls.n	800c526 <I2C_WaitOnFlagUntilTimeout+0x18>
 800c540:	e007      	b.n	800c552 <I2C_WaitOnFlagUntilTimeout+0x44>
      if(Timeout != HAL_MAX_DELAY)
 800c542:	1c69      	adds	r1, r5, #1
 800c544:	d00e      	beq.n	800c564 <I2C_WaitOnFlagUntilTimeout+0x56>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800c546:	b125      	cbz	r5, 800c552 <I2C_WaitOnFlagUntilTimeout+0x44>
 800c548:	f7fe ff34 	bl	800b3b4 <HAL_GetTick>
 800c54c:	1bc0      	subs	r0, r0, r7
 800c54e:	42a8      	cmp	r0, r5
 800c550:	d907      	bls.n	800c562 <I2C_WaitOnFlagUntilTimeout+0x54>
          hi2c->State= HAL_I2C_STATE_READY;
 800c552:	2301      	movs	r3, #1
 800c554:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hi2c);
 800c558:	2300      	movs	r3, #0
 800c55a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 800c55e:	2003      	movs	r0, #3
 800c560:	e005      	b.n	800c56e <I2C_WaitOnFlagUntilTimeout+0x60>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c562:	6822      	ldr	r2, [r4, #0]
 800c564:	6993      	ldr	r3, [r2, #24]
 800c566:	ea36 0303 	bics.w	r3, r6, r3
 800c56a:	d1ea      	bne.n	800c542 <I2C_WaitOnFlagUntilTimeout+0x34>
  return HAL_OK;
 800c56c:	2000      	movs	r0, #0
}
 800c56e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c572 <I2C_RequestMemoryWrite>:
{
 800c572:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c574:	9f08      	ldr	r7, [sp, #32]
 800c576:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c578:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 800c57c:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c57e:	9300      	str	r3, [sp, #0]
{
 800c580:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c582:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c586:	b2f2      	uxtb	r2, r6
 800c588:	f7ff ff36 	bl	800c3f8 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800c58c:	4639      	mov	r1, r7
 800c58e:	4620      	mov	r0, r4
 800c590:	f7ff ff93 	bl	800c4ba <I2C_WaitOnTXISFlagUntilTimeout>
 800c594:	b140      	cbz	r0, 800c5a8 <I2C_RequestMemoryWrite+0x36>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c596:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800c59a:	2b04      	cmp	r3, #4
 800c59c:	d002      	beq.n	800c5a4 <I2C_RequestMemoryWrite+0x32>
      return HAL_TIMEOUT;
 800c59e:	2003      	movs	r0, #3
}
 800c5a0:	b003      	add	sp, #12
 800c5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800c5a4:	2001      	movs	r0, #1
 800c5a6:	e7fb      	b.n	800c5a0 <I2C_RequestMemoryWrite+0x2e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c5a8:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);    
 800c5aa:	6823      	ldr	r3, [r4, #0]
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c5ac:	d10a      	bne.n	800c5c4 <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800c5ae:	b2ed      	uxtb	r5, r5
 800c5b0:	629d      	str	r5, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	463b      	mov	r3, r7
 800c5b6:	2180      	movs	r1, #128	; 0x80
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	f7ff ffa8 	bl	800c50e <I2C_WaitOnFlagUntilTimeout>
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	d0ee      	beq.n	800c5a0 <I2C_RequestMemoryWrite+0x2e>
 800c5c2:	e7ec      	b.n	800c59e <I2C_RequestMemoryWrite+0x2c>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 800c5c4:	0a2a      	lsrs	r2, r5, #8
 800c5c6:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800c5c8:	4639      	mov	r1, r7
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	f7ff ff75 	bl	800c4ba <I2C_WaitOnTXISFlagUntilTimeout>
 800c5d0:	2800      	cmp	r0, #0
 800c5d2:	d1e0      	bne.n	800c596 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800c5d4:	6823      	ldr	r3, [r4, #0]
 800c5d6:	e7ea      	b.n	800c5ae <I2C_RequestMemoryWrite+0x3c>

0800c5d8 <I2C_RequestMemoryRead>:
{
 800c5d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5da:	9f08      	ldr	r7, [sp, #32]
 800c5dc:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c5de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 800c5e2:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c5e4:	9300      	str	r3, [sp, #0]
{
 800c5e6:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	b2f2      	uxtb	r2, r6
 800c5ec:	f7ff ff04 	bl	800c3f8 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800c5f0:	4639      	mov	r1, r7
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	f7ff ff61 	bl	800c4ba <I2C_WaitOnTXISFlagUntilTimeout>
 800c5f8:	b140      	cbz	r0, 800c60c <I2C_RequestMemoryRead+0x34>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c5fa:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800c5fe:	2b04      	cmp	r3, #4
 800c600:	d002      	beq.n	800c608 <I2C_RequestMemoryRead+0x30>
      return HAL_TIMEOUT;
 800c602:	2003      	movs	r0, #3
}
 800c604:	b003      	add	sp, #12
 800c606:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800c608:	2001      	movs	r0, #1
 800c60a:	e7fb      	b.n	800c604 <I2C_RequestMemoryRead+0x2c>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c60c:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);    
 800c60e:	6823      	ldr	r3, [r4, #0]
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c610:	d10a      	bne.n	800c628 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800c612:	b2ed      	uxtb	r5, r5
 800c614:	629d      	str	r5, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout) != HAL_OK)      
 800c616:	2200      	movs	r2, #0
 800c618:	463b      	mov	r3, r7
 800c61a:	2140      	movs	r1, #64	; 0x40
 800c61c:	4620      	mov	r0, r4
 800c61e:	f7ff ff76 	bl	800c50e <I2C_WaitOnFlagUntilTimeout>
 800c622:	2800      	cmp	r0, #0
 800c624:	d0ee      	beq.n	800c604 <I2C_RequestMemoryRead+0x2c>
 800c626:	e7ec      	b.n	800c602 <I2C_RequestMemoryRead+0x2a>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 800c628:	0a2a      	lsrs	r2, r5, #8
 800c62a:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800c62c:	4639      	mov	r1, r7
 800c62e:	4620      	mov	r0, r4
 800c630:	f7ff ff43 	bl	800c4ba <I2C_WaitOnTXISFlagUntilTimeout>
 800c634:	2800      	cmp	r0, #0
 800c636:	d1e0      	bne.n	800c5fa <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800c638:	6823      	ldr	r3, [r4, #0]
 800c63a:	e7ea      	b.n	800c612 <I2C_RequestMemoryRead+0x3a>

0800c63c <I2C_WaitOnSTOPFlagUntilTimeout>:
{  
 800c63c:	b570      	push	{r4, r5, r6, lr}
 800c63e:	4604      	mov	r4, r0
 800c640:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
 800c642:	f7fe feb7 	bl	800b3b4 <HAL_GetTick>
 800c646:	4606      	mov	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c648:	6823      	ldr	r3, [r4, #0]
 800c64a:	699b      	ldr	r3, [r3, #24]
 800c64c:	069b      	lsls	r3, r3, #26
 800c64e:	d501      	bpl.n	800c654 <I2C_WaitOnSTOPFlagUntilTimeout+0x18>
  return HAL_OK;
 800c650:	2000      	movs	r0, #0
 800c652:	e012      	b.n	800c67a <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 800c654:	4629      	mov	r1, r5
 800c656:	4620      	mov	r0, r4
 800c658:	f7ff fee3 	bl	800c422 <I2C_IsAcknowledgeFailed>
 800c65c:	b9a0      	cbnz	r0, 800c688 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800c65e:	b96d      	cbnz	r5, 800c67c <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c660:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800c664:	f043 0320 	orr.w	r3, r3, #32
 800c668:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
      hi2c->State= HAL_I2C_STATE_READY;
 800c66c:	2301      	movs	r3, #1
 800c66e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hi2c);
 800c672:	2300      	movs	r3, #0
 800c674:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800c678:	2003      	movs	r0, #3
}
 800c67a:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800c67c:	f7fe fe9a 	bl	800b3b4 <HAL_GetTick>
 800c680:	1b80      	subs	r0, r0, r6
 800c682:	42a8      	cmp	r0, r5
 800c684:	d9e0      	bls.n	800c648 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 800c686:	e7eb      	b.n	800c660 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
      return HAL_ERROR;
 800c688:	2001      	movs	r0, #1
 800c68a:	e7f6      	b.n	800c67a <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>

0800c68c <HAL_I2C_MspInit>:
}
 800c68c:	4770      	bx	lr

0800c68e <HAL_I2C_Init>:
{ 
 800c68e:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 800c690:	4604      	mov	r4, r0
 800c692:	2800      	cmp	r0, #0
 800c694:	d041      	beq.n	800c71a <HAL_I2C_Init+0x8c>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 800c696:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800c69a:	b90b      	cbnz	r3, 800c6a0 <HAL_I2C_Init+0x12>
    HAL_I2C_MspInit(hi2c);
 800c69c:	f7ff fff6 	bl	800c68c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800c6a0:	2302      	movs	r3, #2
 800c6a2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_I2C_DISABLE(hi2c);
 800c6a6:	6823      	ldr	r3, [r4, #0]
 800c6a8:	681a      	ldr	r2, [r3, #0]
 800c6aa:	f022 0201 	bic.w	r2, r2, #1
 800c6ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c6b0:	6862      	ldr	r2, [r4, #4]
 800c6b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c6b6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c6b8:	689a      	ldr	r2, [r3, #8]
 800c6ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c6be:	609a      	str	r2, [r3, #8]
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c6c0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 800c6c4:	b31a      	cbz	r2, 800c70e <HAL_I2C_Init+0x80>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c6c6:	2901      	cmp	r1, #1
 800c6c8:	d11e      	bne.n	800c708 <HAL_I2C_Init+0x7a>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c6ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c6ce:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c6d0:	685a      	ldr	r2, [r3, #4]
 800c6d2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800c6d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c6da:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800c6dc:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800c6e0:	430a      	orrs	r2, r1
 800c6e2:	69a1      	ldr	r1, [r4, #24]
 800c6e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c6e8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c6ea:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800c6ee:	430a      	orrs	r2, r1
 800c6f0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	f042 0201 	orr.w	r2, r2, #1
 800c6f8:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c6fa:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800c6fc:	2301      	movs	r3, #1
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c6fe:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  hi2c->State = HAL_I2C_STATE_READY;
 800c702:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800c706:	bd10      	pop	{r4, pc}
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c708:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800c70c:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c70e:	2902      	cmp	r1, #2
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800c710:	bf04      	itt	eq
 800c712:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800c716:	605a      	streq	r2, [r3, #4]
 800c718:	e7da      	b.n	800c6d0 <HAL_I2C_Init+0x42>
    return HAL_ERROR;
 800c71a:	2001      	movs	r0, #1
 800c71c:	e7f3      	b.n	800c706 <HAL_I2C_Init+0x78>

0800c71e <HAL_I2C_MspDeInit>:
 800c71e:	4770      	bx	lr

0800c720 <HAL_I2C_DeInit>:
{
 800c720:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 800c722:	4604      	mov	r4, r0
 800c724:	b188      	cbz	r0, 800c74a <HAL_I2C_DeInit+0x2a>
  __HAL_I2C_DISABLE(hi2c);
 800c726:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800c728:	2302      	movs	r3, #2
 800c72a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  __HAL_I2C_DISABLE(hi2c);
 800c72e:	6813      	ldr	r3, [r2, #0]
 800c730:	f023 0301 	bic.w	r3, r3, #1
 800c734:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800c736:	f7ff fff2 	bl	800c71e <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c73a:	2000      	movs	r0, #0
 800c73c:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  __HAL_UNLOCK(hi2c);
 800c740:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_RESET;
 800c744:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800c748:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c74a:	2001      	movs	r0, #1
 800c74c:	e7fc      	b.n	800c748 <HAL_I2C_DeInit+0x28>

0800c74e <HAL_I2C_Mem_Write>:
{
 800c74e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 800c752:	f890 6035 	ldrb.w	r6, [r0, #53]	; 0x35
{
 800c756:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800c75a:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
 800c75e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_READY)
 800c762:	2e01      	cmp	r6, #1
{
 800c764:	4604      	mov	r4, r0
 800c766:	4688      	mov	r8, r1
  if(hi2c->State == HAL_I2C_STATE_READY)
 800c768:	b2f7      	uxtb	r7, r6
 800c76a:	d170      	bne.n	800c84e <HAL_I2C_Mem_Write+0x100>
    if((pData == NULL) || (Size == 0)) 
 800c76c:	f1b9 0f00 	cmp.w	r9, #0
 800c770:	d01e      	beq.n	800c7b0 <HAL_I2C_Mem_Write+0x62>
 800c772:	b1ed      	cbz	r5, 800c7b0 <HAL_I2C_Mem_Write+0x62>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800c774:	6806      	ldr	r6, [r0, #0]
 800c776:	69b6      	ldr	r6, [r6, #24]
 800c778:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
 800c77c:	d167      	bne.n	800c84e <HAL_I2C_Mem_Write+0x100>
    __HAL_LOCK(hi2c);
 800c77e:	f890 c034 	ldrb.w	ip, [r0, #52]	; 0x34
 800c782:	f1bc 0f01 	cmp.w	ip, #1
 800c786:	d062      	beq.n	800c84e <HAL_I2C_Mem_Write+0x100>
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
 800c788:	f04f 0c52 	mov.w	ip, #82	; 0x52
 800c78c:	f880 c035 	strb.w	ip, [r0, #53]	; 0x35
    __HAL_LOCK(hi2c);
 800c790:	f880 7034 	strb.w	r7, [r0, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c794:	f880 6036 	strb.w	r6, [r0, #54]	; 0x36
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 800c798:	f8cd a000 	str.w	sl, [sp]
 800c79c:	f7ff fee9 	bl	800c572 <I2C_RequestMemoryWrite>
 800c7a0:	b150      	cbz	r0, 800c7b8 <HAL_I2C_Mem_Write+0x6a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c7a2:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
        __HAL_UNLOCK(hi2c);
 800c7a6:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c7aa:	2b04      	cmp	r3, #4
 800c7ac:	d000      	beq.n	800c7b0 <HAL_I2C_Mem_Write+0x62>
          return HAL_TIMEOUT;
 800c7ae:	2703      	movs	r7, #3
}
 800c7b0:	4638      	mov	r0, r7
 800c7b2:	b002      	add	sp, #8
 800c7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c7b8:	9000      	str	r0, [sp, #0]
        if(Size > 255)
 800c7ba:	2dff      	cmp	r5, #255	; 0xff
 800c7bc:	d908      	bls.n	800c7d0 <HAL_I2C_Mem_Write+0x82>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c7be:	22ff      	movs	r2, #255	; 0xff
 800c7c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c7c4:	4641      	mov	r1, r8
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	f7ff fe16 	bl	800c3f8 <I2C_TransferConfig>
          Sizetmp = 255;
 800c7cc:	4616      	mov	r6, r2
 800c7ce:	e007      	b.n	800c7e0 <HAL_I2C_Mem_Write+0x92>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c7d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c7d4:	b2ea      	uxtb	r2, r5
 800c7d6:	4641      	mov	r1, r8
 800c7d8:	4620      	mov	r0, r4
 800c7da:	f7ff fe0d 	bl	800c3f8 <I2C_TransferConfig>
      Sizetmp = Size;
 800c7de:	462e      	mov	r6, r5
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800c7e0:	4651      	mov	r1, sl
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	f7ff fe69 	bl	800c4ba <I2C_WaitOnTXISFlagUntilTimeout>
 800c7e8:	b110      	cbz	r0, 800c7f0 <HAL_I2C_Mem_Write+0xa2>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c7ea:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800c7ee:	e7dc      	b.n	800c7aa <HAL_I2C_Mem_Write+0x5c>
      hi2c->Instance->TXDR = (*pData++);
 800c7f0:	6823      	ldr	r3, [r4, #0]
 800c7f2:	f819 2b01 	ldrb.w	r2, [r9], #1
 800c7f6:	629a      	str	r2, [r3, #40]	; 0x28
      Size--;
 800c7f8:	3d01      	subs	r5, #1
      if((Sizetmp == 0)&&(Size!=0))
 800c7fa:	3e01      	subs	r6, #1
      Size--;
 800c7fc:	b2ad      	uxth	r5, r5
      if((Sizetmp == 0)&&(Size!=0))
 800c7fe:	d10a      	bne.n	800c816 <HAL_I2C_Mem_Write+0xc8>
 800c800:	b15d      	cbz	r5, 800c81a <HAL_I2C_Mem_Write+0xcc>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800c802:	4653      	mov	r3, sl
 800c804:	4632      	mov	r2, r6
 800c806:	2180      	movs	r1, #128	; 0x80
 800c808:	4620      	mov	r0, r4
 800c80a:	f7ff fe80 	bl	800c50e <I2C_WaitOnFlagUntilTimeout>
 800c80e:	2800      	cmp	r0, #0
 800c810:	d1cd      	bne.n	800c7ae <HAL_I2C_Mem_Write+0x60>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c812:	9600      	str	r6, [sp, #0]
 800c814:	e7d1      	b.n	800c7ba <HAL_I2C_Mem_Write+0x6c>
    }while(Size > 0);
 800c816:	2d00      	cmp	r5, #0
 800c818:	d1e2      	bne.n	800c7e0 <HAL_I2C_Mem_Write+0x92>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 800c81a:	2119      	movs	r1, #25
 800c81c:	4620      	mov	r0, r4
 800c81e:	f7ff ff0d 	bl	800c63c <I2C_WaitOnSTOPFlagUntilTimeout>
 800c822:	2800      	cmp	r0, #0
 800c824:	d1e1      	bne.n	800c7ea <HAL_I2C_Mem_Write+0x9c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c826:	6823      	ldr	r3, [r4, #0]
 800c828:	2220      	movs	r2, #32
 800c82a:	61da      	str	r2, [r3, #28]
    __HAL_I2C_RESET_CR2(hi2c);
 800c82c:	685a      	ldr	r2, [r3, #4]
 800c82e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800c832:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800c836:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800c83a:	f022 0201 	bic.w	r2, r2, #1
 800c83e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY; 	  
 800c840:	2301      	movs	r3, #1
 800c842:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
 800c846:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_OK;
 800c84a:	4607      	mov	r7, r0
 800c84c:	e7b0      	b.n	800c7b0 <HAL_I2C_Mem_Write+0x62>
    return HAL_BUSY;
 800c84e:	2702      	movs	r7, #2
 800c850:	e7ae      	b.n	800c7b0 <HAL_I2C_Mem_Write+0x62>

0800c852 <HAL_I2C_Mem_Read>:
{
 800c852:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 800c856:	f890 6035 	ldrb.w	r6, [r0, #53]	; 0x35
{
 800c85a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800c85e:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
 800c862:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_READY)
 800c866:	2e01      	cmp	r6, #1
{
 800c868:	4604      	mov	r4, r0
 800c86a:	4688      	mov	r8, r1
  if(hi2c->State == HAL_I2C_STATE_READY)
 800c86c:	b2f7      	uxtb	r7, r6
 800c86e:	d175      	bne.n	800c95c <HAL_I2C_Mem_Read+0x10a>
    if((pData == NULL) || (Size == 0)) 
 800c870:	f1b9 0f00 	cmp.w	r9, #0
 800c874:	d01e      	beq.n	800c8b4 <HAL_I2C_Mem_Read+0x62>
 800c876:	b1ed      	cbz	r5, 800c8b4 <HAL_I2C_Mem_Read+0x62>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800c878:	6806      	ldr	r6, [r0, #0]
 800c87a:	69b6      	ldr	r6, [r6, #24]
 800c87c:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
 800c880:	d16c      	bne.n	800c95c <HAL_I2C_Mem_Read+0x10a>
    __HAL_LOCK(hi2c);
 800c882:	f890 c034 	ldrb.w	ip, [r0, #52]	; 0x34
 800c886:	f1bc 0f01 	cmp.w	ip, #1
 800c88a:	d067      	beq.n	800c95c <HAL_I2C_Mem_Read+0x10a>
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
 800c88c:	f04f 0c62 	mov.w	ip, #98	; 0x62
 800c890:	f880 c035 	strb.w	ip, [r0, #53]	; 0x35
    __HAL_LOCK(hi2c);
 800c894:	f880 7034 	strb.w	r7, [r0, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c898:	f880 6036 	strb.w	r6, [r0, #54]	; 0x36
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 800c89c:	f8cd a000 	str.w	sl, [sp]
 800c8a0:	f7ff fe9a 	bl	800c5d8 <I2C_RequestMemoryRead>
 800c8a4:	b150      	cbz	r0, 800c8bc <HAL_I2C_Mem_Read+0x6a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c8a6:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
        __HAL_UNLOCK(hi2c);
 800c8aa:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c8ae:	2b04      	cmp	r3, #4
 800c8b0:	d000      	beq.n	800c8b4 <HAL_I2C_Mem_Read+0x62>
        return HAL_TIMEOUT;
 800c8b2:	2703      	movs	r7, #3
}
 800c8b4:	4638      	mov	r0, r7
 800c8b6:	b002      	add	sp, #8
 800c8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(Size > 255)
 800c8bc:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800c8c0:	2dff      	cmp	r5, #255	; 0xff
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800c8c2:	9300      	str	r3, [sp, #0]
        if(Size > 255)
 800c8c4:	d908      	bls.n	800c8d8 <HAL_I2C_Mem_Read+0x86>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c8c6:	22ff      	movs	r2, #255	; 0xff
 800c8c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c8cc:	4641      	mov	r1, r8
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	f7ff fd92 	bl	800c3f8 <I2C_TransferConfig>
          Sizetmp = 255;
 800c8d4:	4616      	mov	r6, r2
 800c8d6:	e007      	b.n	800c8e8 <HAL_I2C_Mem_Read+0x96>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800c8d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c8dc:	b2ea      	uxtb	r2, r5
 800c8de:	4641      	mov	r1, r8
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f7ff fd89 	bl	800c3f8 <I2C_TransferConfig>
      Sizetmp = Size;
 800c8e6:	462e      	mov	r6, r5
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 800c8e8:	4653      	mov	r3, sl
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	2104      	movs	r1, #4
 800c8ee:	4620      	mov	r0, r4
 800c8f0:	f7ff fe0d 	bl	800c50e <I2C_WaitOnFlagUntilTimeout>
 800c8f4:	2800      	cmp	r0, #0
 800c8f6:	d1dc      	bne.n	800c8b2 <HAL_I2C_Mem_Read+0x60>
      (*pData++) = hi2c->Instance->RXDR;
 800c8f8:	6823      	ldr	r3, [r4, #0]
      Size--;   
 800c8fa:	3d01      	subs	r5, #1
      (*pData++) = hi2c->Instance->RXDR;
 800c8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8fe:	f809 3b01 	strb.w	r3, [r9], #1
      if((Sizetmp == 0)&&(Size!=0))
 800c902:	3e01      	subs	r6, #1
      Size--;   
 800c904:	b2ad      	uxth	r5, r5
      if((Sizetmp == 0)&&(Size!=0))
 800c906:	d10b      	bne.n	800c920 <HAL_I2C_Mem_Read+0xce>
 800c908:	b165      	cbz	r5, 800c924 <HAL_I2C_Mem_Read+0xd2>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800c90a:	4653      	mov	r3, sl
 800c90c:	4632      	mov	r2, r6
 800c90e:	2180      	movs	r1, #128	; 0x80
 800c910:	4620      	mov	r0, r4
 800c912:	f7ff fdfc 	bl	800c50e <I2C_WaitOnFlagUntilTimeout>
 800c916:	2800      	cmp	r0, #0
 800c918:	d1cb      	bne.n	800c8b2 <HAL_I2C_Mem_Read+0x60>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c91a:	9600      	str	r6, [sp, #0]
        if(Size > 255)
 800c91c:	2dff      	cmp	r5, #255	; 0xff
 800c91e:	e7d1      	b.n	800c8c4 <HAL_I2C_Mem_Read+0x72>
    }while(Size > 0);
 800c920:	2d00      	cmp	r5, #0
 800c922:	d1e1      	bne.n	800c8e8 <HAL_I2C_Mem_Read+0x96>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 800c924:	2119      	movs	r1, #25
 800c926:	4620      	mov	r0, r4
 800c928:	f7ff fe88 	bl	800c63c <I2C_WaitOnSTOPFlagUntilTimeout>
 800c92c:	b110      	cbz	r0, 800c934 <HAL_I2C_Mem_Read+0xe2>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c92e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800c932:	e7bc      	b.n	800c8ae <HAL_I2C_Mem_Read+0x5c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c934:	6823      	ldr	r3, [r4, #0]
 800c936:	2220      	movs	r2, #32
 800c938:	61da      	str	r2, [r3, #28]
    __HAL_I2C_RESET_CR2(hi2c);
 800c93a:	685a      	ldr	r2, [r3, #4]
 800c93c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800c940:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800c944:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800c948:	f022 0201 	bic.w	r2, r2, #1
 800c94c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c94e:	2301      	movs	r3, #1
 800c950:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
 800c954:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_OK;
 800c958:	4607      	mov	r7, r0
 800c95a:	e7ab      	b.n	800c8b4 <HAL_I2C_Mem_Read+0x62>
    return HAL_BUSY;
 800c95c:	2702      	movs	r7, #2
 800c95e:	e7a9      	b.n	800c8b4 <HAL_I2C_Mem_Read+0x62>

0800c960 <HAL_I2C_GetState>:
  return hi2c->State;
 800c960:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 800c964:	4770      	bx	lr

0800c966 <SPI_WaitFifoStateUntilTimeout>:
  * @param State: Fifo state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout)
{
 800c966:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c96a:	4604      	mov	r4, r0
 800c96c:	460f      	mov	r7, r1
 800c96e:	4616      	mov	r6, r2
 800c970:	461d      	mov	r5, r3
  __IO uint8_t tmpreg __attribute((unused));
  uint32_t tickstart = HAL_GetTick();
 800c972:	f7fe fd1f 	bl	800b3b4 <HAL_GetTick>
 800c976:	4680      	mov	r8, r0

  while((hspi->Instance->SR & Flag) != State)
 800c978:	6822      	ldr	r2, [r4, #0]
 800c97a:	6893      	ldr	r3, [r2, #8]
 800c97c:	403b      	ands	r3, r7
 800c97e:	42b3      	cmp	r3, r6
 800c980:	d101      	bne.n	800c986 <SPI_WaitFifoStateUntilTimeout+0x20>
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;      
 800c982:	2000      	movs	r0, #0
 800c984:	e02f      	b.n	800c9e6 <SPI_WaitFifoStateUntilTimeout+0x80>
    if((Flag == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c986:	f5b7 6fc0 	cmp.w	r7, #1536	; 0x600
 800c98a:	d104      	bne.n	800c996 <SPI_WaitFifoStateUntilTimeout+0x30>
 800c98c:	b91e      	cbnz	r6, 800c996 <SPI_WaitFifoStateUntilTimeout+0x30>
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
 800c98e:	7b13      	ldrb	r3, [r2, #12]
 800c990:	b2db      	uxtb	r3, r3
 800c992:	f88d 3007 	strb.w	r3, [sp, #7]
    if(Timeout != HAL_MAX_DELAY)
 800c996:	1c6b      	adds	r3, r5, #1
 800c998:	d0ef      	beq.n	800c97a <SPI_WaitFifoStateUntilTimeout+0x14>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800c99a:	bb3d      	cbnz	r5, 800c9ec <SPI_WaitFifoStateUntilTimeout+0x86>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c99c:	6823      	ldr	r3, [r4, #0]
 800c99e:	685a      	ldr	r2, [r3, #4]
 800c9a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c9a4:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c9a6:	6862      	ldr	r2, [r4, #4]
 800c9a8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800c9ac:	d10a      	bne.n	800c9c4 <SPI_WaitFifoStateUntilTimeout+0x5e>
 800c9ae:	68a2      	ldr	r2, [r4, #8]
 800c9b0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800c9b4:	d002      	beq.n	800c9bc <SPI_WaitFifoStateUntilTimeout+0x56>
 800c9b6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800c9ba:	d103      	bne.n	800c9c4 <SPI_WaitFifoStateUntilTimeout+0x5e>
          __HAL_SPI_DISABLE(hspi);
 800c9bc:	681a      	ldr	r2, [r3, #0]
 800c9be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c9c2:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800c9c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c9c6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800c9ca:	d107      	bne.n	800c9dc <SPI_WaitFifoStateUntilTimeout+0x76>
          __HAL_SPI_RESET_CRC(hspi);
 800c9cc:	681a      	ldr	r2, [r3, #0]
 800c9ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c9d2:	601a      	str	r2, [r3, #0]
 800c9d4:	681a      	ldr	r2, [r3, #0]
 800c9d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c9da:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 800c9dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c9e0:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 800c9e4:	2003      	movs	r0, #3
}
 800c9e6:	b002      	add	sp, #8
 800c9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800c9ec:	f7fe fce2 	bl	800b3b4 <HAL_GetTick>
 800c9f0:	eba0 0008 	sub.w	r0, r0, r8
 800c9f4:	42a8      	cmp	r0, r5
 800c9f6:	d9bf      	bls.n	800c978 <SPI_WaitFifoStateUntilTimeout+0x12>
 800c9f8:	e7d0      	b.n	800c99c <SPI_WaitFifoStateUntilTimeout+0x36>

0800c9fa <SPI_WaitFlagStateUntilTimeout>:
{
 800c9fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9fe:	4604      	mov	r4, r0
 800ca00:	460f      	mov	r7, r1
 800ca02:	4616      	mov	r6, r2
 800ca04:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800ca06:	f7fe fcd5 	bl	800b3b4 <HAL_GetTick>
 800ca0a:	4680      	mov	r8, r0
  while((hspi->Instance->SR & Flag) != State)
 800ca0c:	6822      	ldr	r2, [r4, #0]
 800ca0e:	6893      	ldr	r3, [r2, #8]
 800ca10:	403b      	ands	r3, r7
 800ca12:	42b3      	cmp	r3, r6
 800ca14:	d101      	bne.n	800ca1a <SPI_WaitFlagStateUntilTimeout+0x20>
  return HAL_OK;      
 800ca16:	2000      	movs	r0, #0
 800ca18:	e027      	b.n	800ca6a <SPI_WaitFlagStateUntilTimeout+0x70>
    if(Timeout != HAL_MAX_DELAY)
 800ca1a:	1c6b      	adds	r3, r5, #1
 800ca1c:	d0f7      	beq.n	800ca0e <SPI_WaitFlagStateUntilTimeout+0x14>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800ca1e:	bb35      	cbnz	r5, 800ca6e <SPI_WaitFlagStateUntilTimeout+0x74>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ca20:	6823      	ldr	r3, [r4, #0]
 800ca22:	685a      	ldr	r2, [r3, #4]
 800ca24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ca28:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ca2a:	6862      	ldr	r2, [r4, #4]
 800ca2c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800ca30:	d10a      	bne.n	800ca48 <SPI_WaitFlagStateUntilTimeout+0x4e>
 800ca32:	68a2      	ldr	r2, [r4, #8]
 800ca34:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800ca38:	d002      	beq.n	800ca40 <SPI_WaitFlagStateUntilTimeout+0x46>
 800ca3a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800ca3e:	d103      	bne.n	800ca48 <SPI_WaitFlagStateUntilTimeout+0x4e>
          __HAL_SPI_DISABLE(hspi);
 800ca40:	681a      	ldr	r2, [r3, #0]
 800ca42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca46:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800ca48:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ca4a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800ca4e:	d107      	bne.n	800ca60 <SPI_WaitFlagStateUntilTimeout+0x66>
          __HAL_SPI_RESET_CRC(hspi);
 800ca50:	681a      	ldr	r2, [r3, #0]
 800ca52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ca56:	601a      	str	r2, [r3, #0]
 800ca58:	681a      	ldr	r2, [r3, #0]
 800ca5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ca5e:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 800ca60:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca64:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800ca68:	2003      	movs	r0, #3
}
 800ca6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800ca6e:	f7fe fca1 	bl	800b3b4 <HAL_GetTick>
 800ca72:	eba0 0008 	sub.w	r0, r0, r8
 800ca76:	42a8      	cmp	r0, r5
 800ca78:	d9c8      	bls.n	800ca0c <SPI_WaitFlagStateUntilTimeout+0x12>
 800ca7a:	e7d1      	b.n	800ca20 <SPI_WaitFlagStateUntilTimeout+0x26>

0800ca7c <SPI_EndRxTxTransaction>:
  * @brief This function handles the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 800ca7c:	b513      	push	{r0, r1, r4, lr}
 800ca7e:	460b      	mov	r3, r1
  /* Procedure to check the transaction complete */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 800ca80:	9101      	str	r1, [sp, #4]
 800ca82:	2200      	movs	r2, #0
 800ca84:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 800ca88:	4604      	mov	r4, r0
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 800ca8a:	f7ff ff6c 	bl	800c966 <SPI_WaitFifoStateUntilTimeout>
 800ca8e:	9b01      	ldr	r3, [sp, #4]
 800ca90:	4602      	mov	r2, r0
 800ca92:	b138      	cbz	r0, 800caa4 <SPI_EndRxTxTransaction+0x28>
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK)
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800ca94:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800ca98:	f043 0320 	orr.w	r3, r3, #32
 800ca9c:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    return HAL_TIMEOUT;
 800caa0:	2003      	movs	r0, #3
 800caa2:	e00f      	b.n	800cac4 <SPI_EndRxTxTransaction+0x48>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout) != HAL_OK)
 800caa4:	2180      	movs	r1, #128	; 0x80
 800caa6:	4620      	mov	r0, r4
 800caa8:	9301      	str	r3, [sp, #4]
 800caaa:	f7ff ffa6 	bl	800c9fa <SPI_WaitFlagStateUntilTimeout>
 800caae:	9b01      	ldr	r3, [sp, #4]
 800cab0:	4602      	mov	r2, r0
 800cab2:	2800      	cmp	r0, #0
 800cab4:	d1ee      	bne.n	800ca94 <SPI_EndRxTxTransaction+0x18>
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK)
 800cab6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800caba:	4620      	mov	r0, r4
 800cabc:	f7ff ff53 	bl	800c966 <SPI_WaitFifoStateUntilTimeout>
 800cac0:	2800      	cmp	r0, #0
 800cac2:	d1e7      	bne.n	800ca94 <SPI_EndRxTxTransaction+0x18>
  }
  return HAL_OK;
}
 800cac4:	b002      	add	sp, #8
 800cac6:	bd10      	pop	{r4, pc}

0800cac8 <HAL_SPI_MspInit>:
}
 800cac8:	4770      	bx	lr

0800caca <HAL_SPI_Init>:
{
 800caca:	b570      	push	{r4, r5, r6, lr}
  if(hspi == NULL)
 800cacc:	4604      	mov	r4, r0
 800cace:	2800      	cmp	r0, #0
 800cad0:	d047      	beq.n	800cb62 <HAL_SPI_Init+0x98>
  hspi->State = HAL_SPI_STATE_BUSY;
 800cad2:	2302      	movs	r3, #2
 800cad4:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_MspInit(hspi);
 800cad8:	f7ff fff6 	bl	800cac8 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800cadc:	6822      	ldr	r2, [r4, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cade:	68e5      	ldr	r5, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 800cae0:	6813      	ldr	r3, [r2, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cae2:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800cae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800caea:	6013      	str	r3, [r2, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800caec:	f04f 0300 	mov.w	r3, #0
 800caf0:	d839      	bhi.n	800cb66 <HAL_SPI_Init+0x9c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800caf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 800caf6:	d000      	beq.n	800cafa <HAL_SPI_Init+0x30>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800caf8:	62a3      	str	r3, [r4, #40]	; 0x28
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800cafa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cafc:	b92b      	cbnz	r3, 800cb0a <HAL_SPI_Init+0x40>
    if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cafe:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800cb02:	bf8c      	ite	hi
 800cb04:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800cb06:	2301      	movls	r3, #1
 800cb08:	6323      	str	r3, [r4, #48]	; 0x30
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800cb0a:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800cb0e:	4333      	orrs	r3, r6
 800cb10:	6926      	ldr	r6, [r4, #16]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800cb12:	69a0      	ldr	r0, [r4, #24]
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800cb14:	4333      	orrs	r3, r6
 800cb16:	6966      	ldr	r6, [r4, #20]
 800cb18:	4333      	orrs	r3, r6
 800cb1a:	69e6      	ldr	r6, [r4, #28]
 800cb1c:	4333      	orrs	r3, r6
 800cb1e:	6a26      	ldr	r6, [r4, #32]
 800cb20:	4333      	orrs	r3, r6
 800cb22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cb24:	4333      	orrs	r3, r6
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800cb26:	f400 7600 	and.w	r6, r0, #512	; 0x200
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800cb2a:	4333      	orrs	r3, r6
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | 
 800cb2c:	6013      	str	r3, [r2, #0]
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800cb2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cb30:	2b02      	cmp	r3, #2
    hspi->Instance->CR1|= SPI_CR1_CRCL;
 800cb32:	bf02      	ittt	eq
 800cb34:	6813      	ldreq	r3, [r2, #0]
 800cb36:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
 800cb3a:	6013      	streq	r3, [r2, #0]
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800cb3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb3e:	432b      	orrs	r3, r5
 800cb40:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800cb42:	0c00      	lsrs	r0, r0, #16
 800cb44:	f000 0004 	and.w	r0, r0, #4
 800cb48:	432b      	orrs	r3, r5
 800cb4a:	4303      	orrs	r3, r0
                         hspi->Init.DataSize ) | frxth;
 800cb4c:	430b      	orrs	r3, r1
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800cb4e:	6053      	str	r3, [r2, #4]
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 800cb50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cb52:	6113      	str	r3, [r2, #16]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cb54:	2000      	movs	r0, #0
  hspi->State= HAL_SPI_STATE_READY;
 800cb56:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cb58:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
  hspi->State= HAL_SPI_STATE_READY;
 800cb5c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800cb60:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800cb62:	2001      	movs	r0, #1
 800cb64:	e7fc      	b.n	800cb60 <HAL_SPI_Init+0x96>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800cb66:	4619      	mov	r1, r3
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 800cb68:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
 800cb6c:	e7c3      	b.n	800caf6 <HAL_SPI_Init+0x2c>

0800cb6e <HAL_SPI_MspDeInit>:
 800cb6e:	4770      	bx	lr

0800cb70 <HAL_SPI_DeInit>:
{
 800cb70:	b510      	push	{r4, lr}
  if(hspi == NULL)
 800cb72:	4604      	mov	r4, r0
 800cb74:	b178      	cbz	r0, 800cb96 <HAL_SPI_DeInit+0x26>
  __HAL_SPI_DISABLE(hspi);
 800cb76:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800cb78:	2302      	movs	r3, #2
 800cb7a:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800cb7e:	6813      	ldr	r3, [r2, #0]
 800cb80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb84:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800cb86:	f7ff fff2 	bl	800cb6e <HAL_SPI_MspDeInit>
  __HAL_UNLOCK(hspi);
 800cb8a:	2000      	movs	r0, #0
 800cb8c:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cb90:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
}
 800cb94:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 800cb96:	2001      	movs	r0, #1
 800cb98:	e7fc      	b.n	800cb94 <HAL_SPI_DeInit+0x24>

0800cb9a <HAL_SPI_TransmitReceive>:
{
 800cb9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hspi->State != HAL_SPI_STATE_READY) 
 800cb9e:	f890 705d 	ldrb.w	r7, [r0, #93]	; 0x5d
{
 800cba2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 800cba4:	f04f 0b00 	mov.w	fp, #0
  if(hspi->State != HAL_SPI_STATE_READY) 
 800cba8:	2f01      	cmp	r7, #1
{
 800cbaa:	4604      	mov	r4, r0
 800cbac:	4689      	mov	r9, r1
 800cbae:	4692      	mov	sl, r2
 800cbb0:	461e      	mov	r6, r3
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 800cbb2:	f8ad b006 	strh.w	fp, [sp, #6]
  if(hspi->State != HAL_SPI_STATE_READY) 
 800cbb6:	d004      	beq.n	800cbc2 <HAL_SPI_TransmitReceive+0x28>
    return HAL_BUSY;
 800cbb8:	2702      	movs	r7, #2
}
 800cbba:	4638      	mov	r0, r7
 800cbbc:	b003      	add	sp, #12
 800cbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 800cbc2:	2900      	cmp	r1, #0
 800cbc4:	d0f9      	beq.n	800cbba <HAL_SPI_TransmitReceive+0x20>
 800cbc6:	2a00      	cmp	r2, #0
 800cbc8:	d0f7      	beq.n	800cbba <HAL_SPI_TransmitReceive+0x20>
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d0f5      	beq.n	800cbba <HAL_SPI_TransmitReceive+0x20>
  tickstart = HAL_GetTick();
 800cbce:	f7fe fbf1 	bl	800b3b4 <HAL_GetTick>
  __HAL_LOCK(hspi); 
 800cbd2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800cbd6:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800cbd8:	4680      	mov	r8, r0
  __HAL_LOCK(hspi); 
 800cbda:	d0ed      	beq.n	800cbb8 <HAL_SPI_TransmitReceive+0x1e>
 800cbdc:	f240 5301 	movw	r3, #1281	; 0x501
 800cbe0:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800cbe4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_SPI_RESET_CRC(hspi);
 800cbe6:	6822      	ldr	r2, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cbe8:	f884 b05e 	strb.w	fp, [r4, #94]	; 0x5e
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800cbec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->pRxBuffPtr  = pRxData;
 800cbf0:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800cbf4:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800cbf8:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = pTxData;
 800cbfc:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800cc00:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size; 
 800cc02:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800cc04:	d107      	bne.n	800cc16 <HAL_SPI_TransmitReceive+0x7c>
    __HAL_SPI_RESET_CRC(hspi);
 800cc06:	6813      	ldr	r3, [r2, #0]
 800cc08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cc0c:	6013      	str	r3, [r2, #0]
 800cc0e:	6813      	ldr	r3, [r2, #0]
 800cc10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cc14:	6013      	str	r3, [r2, #0]
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800cc16:	68e1      	ldr	r1, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cc18:	6853      	ldr	r3, [r2, #4]
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800cc1a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cc1e:	d801      	bhi.n	800cc24 <HAL_SPI_TransmitReceive+0x8a>
 800cc20:	2e01      	cmp	r6, #1
 800cc22:	d014      	beq.n	800cc4e <HAL_SPI_TransmitReceive+0xb4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cc24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cc28:	6053      	str	r3, [r2, #4]
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800cc2a:	6813      	ldr	r3, [r2, #0]
 800cc2c:	0658      	lsls	r0, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800cc2e:	bf5e      	ittt	pl
 800cc30:	6813      	ldrpl	r3, [r2, #0]
 800cc32:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800cc36:	6013      	strpl	r3, [r2, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cc38:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cc3c:	d83d      	bhi.n	800ccba <HAL_SPI_TransmitReceive+0x120>
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 800cc3e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800cc40:	2a00      	cmp	r2, #0
 800cc42:	d175      	bne.n	800cd30 <HAL_SPI_TransmitReceive+0x196>
 800cc44:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d17e      	bne.n	800cd4a <HAL_SPI_TransmitReceive+0x1b0>
 800cc4c:	e03c      	b.n	800ccc8 <HAL_SPI_TransmitReceive+0x12e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cc4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cc52:	e7e9      	b.n	800cc28 <HAL_SPI_TransmitReceive+0x8e>
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800cc54:	6822      	ldr	r2, [r4, #0]
 800cc56:	6891      	ldr	r1, [r2, #8]
 800cc58:	0789      	lsls	r1, r1, #30
 800cc5a:	d510      	bpl.n	800cc7e <HAL_SPI_TransmitReceive+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cc5c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800cc5e:	3b01      	subs	r3, #1
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cc60:	f831 6b02 	ldrh.w	r6, [r1], #2
 800cc64:	60d6      	str	r6, [r2, #12]
        hspi->TxXferCount--;
 800cc66:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cc68:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800cc6a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 800cc6c:	b93b      	cbnz	r3, 800cc7e <HAL_SPI_TransmitReceive+0xe4>
 800cc6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cc70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800cc74:	bf02      	ittt	eq
 800cc76:	6813      	ldreq	r3, [r2, #0]
 800cc78:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800cc7c:	6013      	streq	r3, [r2, #0]
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800cc7e:	b168      	cbz	r0, 800cc9c <HAL_SPI_TransmitReceive+0x102>
 800cc80:	6823      	ldr	r3, [r4, #0]
 800cc82:	689a      	ldr	r2, [r3, #8]
 800cc84:	07d2      	lsls	r2, r2, #31
 800cc86:	d509      	bpl.n	800cc9c <HAL_SPI_TransmitReceive+0x102>
        *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800cc88:	68da      	ldr	r2, [r3, #12]
 800cc8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc8c:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cc90:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800cc92:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800cc96:	3b01      	subs	r3, #1
 800cc98:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if(Timeout != HAL_MAX_DELAY)
 800cc9c:	1c6b      	adds	r3, r5, #1
 800cc9e:	d00c      	beq.n	800ccba <HAL_SPI_TransmitReceive+0x120>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 800cca0:	b92d      	cbnz	r5, 800ccae <HAL_SPI_TransmitReceive+0x114>
          __HAL_UNLOCK(hspi);
 800cca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cca6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    return HAL_TIMEOUT;
 800ccaa:	2703      	movs	r7, #3
 800ccac:	e785      	b.n	800cbba <HAL_SPI_TransmitReceive+0x20>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 800ccae:	f7fe fb81 	bl	800b3b4 <HAL_GetTick>
 800ccb2:	eba0 0008 	sub.w	r0, r0, r8
 800ccb6:	42a8      	cmp	r0, r5
 800ccb8:	d8f3      	bhi.n	800cca2 <HAL_SPI_TransmitReceive+0x108>
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800ccba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800ccbc:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d1c7      	bne.n	800cc54 <HAL_SPI_TransmitReceive+0xba>
 800ccc4:	2800      	cmp	r0, #0
 800ccc6:	d1db      	bne.n	800cc80 <HAL_SPI_TransmitReceive+0xe6>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800ccc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ccca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ccce:	d115      	bne.n	800ccfc <HAL_SPI_TransmitReceive+0x162>
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK)
 800ccd0:	2202      	movs	r2, #2
 800ccd2:	462b      	mov	r3, r5
 800ccd4:	4611      	mov	r1, r2
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	f7ff fe8f 	bl	800c9fa <SPI_WaitFlagStateUntilTimeout>
 800ccdc:	b128      	cbz	r0, 800ccea <HAL_SPI_TransmitReceive+0x150>
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800ccde:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800cce2:	f043 0302 	orr.w	r3, r3, #2
 800cce6:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ccea:	68e2      	ldr	r2, [r4, #12]
      tmpreg = hspi->Instance->DR;
 800ccec:	6823      	ldr	r3, [r4, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ccee:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800ccf2:	d16f      	bne.n	800cdd4 <HAL_SPI_TransmitReceive+0x23a>
      tmpreg = hspi->Instance->DR;
 800ccf4:	68db      	ldr	r3, [r3, #12]
 800ccf6:	b29b      	uxth	r3, r3
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800ccf8:	f8ad 3006 	strh.w	r3, [sp, #6]
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
 800ccfc:	4629      	mov	r1, r5
 800ccfe:	4620      	mov	r0, r4
 800cd00:	f7ff febc 	bl	800ca7c <SPI_EndRxTxTransaction>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	d1d0      	bne.n	800ccaa <HAL_SPI_TransmitReceive+0x110>
  hspi->State = HAL_SPI_STATE_READY;
 800cd08:	2301      	movs	r3, #1
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800cd0a:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_READY;
 800cd0c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800cd10:	688a      	ldr	r2, [r1, #8]
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800cd12:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800cd16:	f012 0210 	ands.w	r2, r2, #16
 800cd1a:	d070      	beq.n	800cdfe <HAL_SPI_TransmitReceive+0x264>
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800cd1c:	f043 0302 	orr.w	r3, r3, #2
 800cd20:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800cd24:	f06f 0310 	mvn.w	r3, #16
 800cd28:	608b      	str	r3, [r1, #8]
    __HAL_UNLOCK(hspi);
 800cd2a:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
    return HAL_ERROR;
 800cd2e:	e744      	b.n	800cbba <HAL_SPI_TransmitReceive+0x20>
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800cd30:	6821      	ldr	r1, [r4, #0]
 800cd32:	688b      	ldr	r3, [r1, #8]
 800cd34:	079e      	lsls	r6, r3, #30
 800cd36:	d508      	bpl.n	800cd4a <HAL_SPI_TransmitReceive+0x1b0>
        if(hspi->TxXferCount > 2)
 800cd38:	2a02      	cmp	r2, #2
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800cd3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if(hspi->TxXferCount > 2)
 800cd3c:	d92c      	bls.n	800cd98 <HAL_SPI_TransmitReceive+0x1fe>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800cd3e:	f833 0b02 	ldrh.w	r0, [r3], #2
 800cd42:	60c8      	str	r0, [r1, #12]
          hspi->TxXferCount -= 2;
 800cd44:	3a02      	subs	r2, #2
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cd46:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2;
 800cd48:	87e2      	strh	r2, [r4, #62]	; 0x3e
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800cd4a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800cd4e:	b1b1      	cbz	r1, 800cd7e <HAL_SPI_TransmitReceive+0x1e4>
 800cd50:	6822      	ldr	r2, [r4, #0]
 800cd52:	6893      	ldr	r3, [r2, #8]
 800cd54:	07d8      	lsls	r0, r3, #31
 800cd56:	d512      	bpl.n	800cd7e <HAL_SPI_TransmitReceive+0x1e4>
        if(hspi->RxXferCount > 1)
 800cd58:	2901      	cmp	r1, #1
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800cd5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        if(hspi->RxXferCount > 1)
 800cd5c:	d030      	beq.n	800cdc0 <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800cd5e:	68d1      	ldr	r1, [r2, #12]
 800cd60:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cd64:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2;
 800cd66:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800cd6a:	3b02      	subs	r3, #2
 800cd6c:	b29b      	uxth	r3, r3
          if(hspi->RxXferCount <= 1)
 800cd6e:	2b01      	cmp	r3, #1
          hspi->RxXferCount -= 2;
 800cd70:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if(hspi->RxXferCount <= 1)
 800cd74:	d803      	bhi.n	800cd7e <HAL_SPI_TransmitReceive+0x1e4>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cd76:	6853      	ldr	r3, [r2, #4]
 800cd78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cd7c:	6053      	str	r3, [r2, #4]
      if(Timeout != HAL_MAX_DELAY)
 800cd7e:	1c6b      	adds	r3, r5, #1
 800cd80:	f43f af5d 	beq.w	800cc3e <HAL_SPI_TransmitReceive+0xa4>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800cd84:	2d00      	cmp	r5, #0
 800cd86:	d08c      	beq.n	800cca2 <HAL_SPI_TransmitReceive+0x108>
 800cd88:	f7fe fb14 	bl	800b3b4 <HAL_GetTick>
 800cd8c:	eba0 0008 	sub.w	r0, r0, r8
 800cd90:	42a8      	cmp	r0, r5
 800cd92:	f67f af54 	bls.w	800cc3e <HAL_SPI_TransmitReceive+0xa4>
 800cd96:	e784      	b.n	800cca2 <HAL_SPI_TransmitReceive+0x108>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800cd98:	1c5a      	adds	r2, r3, #1
 800cd9a:	63a2      	str	r2, [r4, #56]	; 0x38
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	730b      	strb	r3, [r1, #12]
          hspi->TxXferCount--;
 800cda0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800cda2:	3b01      	subs	r3, #1
 800cda4:	b29b      	uxth	r3, r3
 800cda6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d1ce      	bne.n	800cd4a <HAL_SPI_TransmitReceive+0x1b0>
 800cdac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cdae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800cdb2:	bf01      	itttt	eq
 800cdb4:	6822      	ldreq	r2, [r4, #0]
 800cdb6:	6813      	ldreq	r3, [r2, #0]
 800cdb8:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800cdbc:	6013      	streq	r3, [r2, #0]
 800cdbe:	e7c4      	b.n	800cd4a <HAL_SPI_TransmitReceive+0x1b0>
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
 800cdc0:	1c59      	adds	r1, r3, #1
 800cdc2:	6421      	str	r1, [r4, #64]	; 0x40
 800cdc4:	7b12      	ldrb	r2, [r2, #12]
 800cdc6:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800cdc8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800cdcc:	3b01      	subs	r3, #1
 800cdce:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800cdd2:	e7d4      	b.n	800cd7e <HAL_SPI_TransmitReceive+0x1e4>
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800cdd4:	6b22      	ldr	r2, [r4, #48]	; 0x30
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800cdd6:	7b1b      	ldrb	r3, [r3, #12]
 800cdd8:	f8ad 3006 	strh.w	r3, [sp, #6]
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800cddc:	2a02      	cmp	r2, #2
 800cdde:	d18d      	bne.n	800ccfc <HAL_SPI_TransmitReceive+0x162>
        if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK) 
 800cde0:	462b      	mov	r3, r5
 800cde2:	4611      	mov	r1, r2
 800cde4:	4620      	mov	r0, r4
 800cde6:	f7ff fe08 	bl	800c9fa <SPI_WaitFlagStateUntilTimeout>
 800cdea:	b128      	cbz	r0, 800cdf8 <HAL_SPI_TransmitReceive+0x25e>
          hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800cdec:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800cdf0:	f043 0302 	orr.w	r3, r3, #2
 800cdf4:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800cdf8:	6823      	ldr	r3, [r4, #0]
 800cdfa:	7b1b      	ldrb	r3, [r3, #12]
 800cdfc:	e77c      	b.n	800ccf8 <HAL_SPI_TransmitReceive+0x15e>
    return HAL_BUSY;
 800cdfe:	1e1f      	subs	r7, r3, #0
  __HAL_UNLOCK(hspi);
 800ce00:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    return HAL_BUSY;
 800ce04:	bf18      	it	ne
 800ce06:	2701      	movne	r7, #1
 800ce08:	e6d7      	b.n	800cbba <HAL_SPI_TransmitReceive+0x20>

0800ce0a <HAL_SPI_GetState>:
  * @retval HAL state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
  return hspi->State;
}
 800ce0a:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
 800ce0e:	4770      	bx	lr

0800ce10 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ce10:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800ce12:	b180      	cbz	r0, 800ce36 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800ce14:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800ce18:	b113      	cbz	r3, 800ce20 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800ce20:	b109      	cbz	r1, 800ce26 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800ce22:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800ce26:	2301      	movs	r3, #1
 800ce28:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 800ce2c:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800ce2e:	f000 fc6b 	bl	800d708 <USBD_LL_Init>
  
  return USBD_OK; 
 800ce32:	2000      	movs	r0, #0
}
 800ce34:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 800ce36:	2002      	movs	r0, #2
 800ce38:	e7fc      	b.n	800ce34 <USBD_Init+0x24>

0800ce3a <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800ce3a:	b119      	cbz	r1, 800ce44 <USBD_RegisterClass+0xa>
  {
    /* link the class tgo the USB Device handle */
    pdev->pClass = pclass;
 800ce3c:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800ce40:	2000      	movs	r0, #0
 800ce42:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800ce44:	2002      	movs	r0, #2
  }
  
  return status;
}
 800ce46:	4770      	bx	lr

0800ce48 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800ce48:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800ce4a:	f000 fc9b 	bl	800d784 <USBD_LL_Start>
  
  return USBD_OK;  
}
 800ce4e:	2000      	movs	r0, #0
 800ce50:	bd08      	pop	{r3, pc}

0800ce52 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ce52:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800ce54:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800ce58:	b90b      	cbnz	r3, 800ce5e <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800ce5a:	2002      	movs	r0, #2
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800ce5c:	bd08      	pop	{r3, pc}
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4798      	blx	r3
 800ce62:	2800      	cmp	r0, #0
 800ce64:	d0fa      	beq.n	800ce5c <USBD_SetClassConfig+0xa>
 800ce66:	e7f8      	b.n	800ce5a <USBD_SetClassConfig+0x8>

0800ce68 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ce68:	b508      	push	{r3, lr}
  /* Clear configuration  and Deinitialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800ce6a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800ce6e:	685b      	ldr	r3, [r3, #4]
 800ce70:	4798      	blx	r3
  return USBD_OK;
}
 800ce72:	2000      	movs	r0, #0
 800ce74:	bd08      	pop	{r3, pc}

0800ce76 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ce76:	b538      	push	{r3, r4, r5, lr}
 800ce78:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ce7a:	f500 7502 	add.w	r5, r0, #520	; 0x208
 800ce7e:	4628      	mov	r0, r5
 800ce80:	f000 fa3f 	bl	800d302 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800ce84:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 800ce86:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 800ce8a:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800ce8e:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800ce92:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 800ce96:	f001 031f 	and.w	r3, r1, #31
 800ce9a:	2b01      	cmp	r3, #1
 800ce9c:	d008      	beq.n	800ceb0 <USBD_LL_SetupStage+0x3a>
 800ce9e:	2b02      	cmp	r3, #2
 800cea0:	d00b      	beq.n	800ceba <USBD_LL_SetupStage+0x44>
 800cea2:	b97b      	cbnz	r3, 800cec4 <USBD_LL_SetupStage+0x4e>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 800cea4:	4629      	mov	r1, r5
 800cea6:	4620      	mov	r0, r4
 800cea8:	f000 f8c2 	bl	800d030 <USBD_StdDevReq>
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
    break;
  }  
  return USBD_OK;  
}
 800ceac:	2000      	movs	r0, #0
 800ceae:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800ceb0:	4629      	mov	r1, r5
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	f000 f9b6 	bl	800d224 <USBD_StdItfReq>
    break;
 800ceb8:	e7f8      	b.n	800ceac <USBD_LL_SetupStage+0x36>
    USBD_StdEPReq(pdev, &pdev->request);   
 800ceba:	4629      	mov	r1, r5
 800cebc:	4620      	mov	r0, r4
 800cebe:	f000 f9c9 	bl	800d254 <USBD_StdEPReq>
    break;
 800cec2:	e7f3      	b.n	800ceac <USBD_LL_SetupStage+0x36>
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800cec4:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800cec8:	4620      	mov	r0, r4
 800ceca:	f000 fc73 	bl	800d7b4 <USBD_LL_StallEP>
    break;
 800cece:	e7ed      	b.n	800ceac <USBD_LL_SetupStage+0x36>

0800ced0 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800ced0:	b570      	push	{r4, r5, r6, lr}
 800ced2:	4604      	mov	r4, r0
 800ced4:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800ced6:	bb01      	cbnz	r1, 800cf1a <USBD_LL_DataOutStage+0x4a>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ced8:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800cedc:	2b03      	cmp	r3, #3
 800cede:	d10d      	bne.n	800cefc <USBD_LL_DataOutStage+0x2c>
    {
      if(pep->rem_length > pep->maxpacket)
 800cee0:	e9d0 5343 	ldrd	r5, r3, [r0, #268]	; 0x10c
 800cee4:	429d      	cmp	r5, r3
 800cee6:	d90b      	bls.n	800cf00 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -=  pep->maxpacket;
 800cee8:	1aed      	subs	r5, r5, r3
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800ceea:	42ab      	cmp	r3, r5
 800ceec:	bf28      	it	cs
 800ceee:	462b      	movcs	r3, r5
        pep->rem_length -=  pep->maxpacket;
 800cef0:	f8c0 510c 	str.w	r5, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 800cef4:	b29a      	uxth	r2, r3
 800cef6:	4631      	mov	r1, r6
 800cef8:	f000 fa55 	bl	800d3a6 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 800cefc:	2000      	movs	r0, #0
 800cefe:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800cf00:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800cf04:	691b      	ldr	r3, [r3, #16]
 800cf06:	b123      	cbz	r3, 800cf12 <USBD_LL_DataOutStage+0x42>
 800cf08:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800cf0c:	2a03      	cmp	r2, #3
 800cf0e:	d100      	bne.n	800cf12 <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev); 
 800cf10:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800cf12:	4620      	mov	r0, r4
 800cf14:	f000 fa4f 	bl	800d3b6 <USBD_CtlSendStatus>
 800cf18:	e7f0      	b.n	800cefc <USBD_LL_DataOutStage+0x2c>
  else if((pdev->pClass->DataOut != NULL)&&
 800cf1a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800cf1e:	699b      	ldr	r3, [r3, #24]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d0eb      	beq.n	800cefc <USBD_LL_DataOutStage+0x2c>
 800cf24:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800cf28:	2a03      	cmp	r2, #3
 800cf2a:	d1e7      	bne.n	800cefc <USBD_LL_DataOutStage+0x2c>
    pdev->pClass->DataOut(pdev, epnum); 
 800cf2c:	4798      	blx	r3
 800cf2e:	e7e5      	b.n	800cefc <USBD_LL_DataOutStage+0x2c>

0800cf30 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800cf30:	b570      	push	{r4, r5, r6, lr}
 800cf32:	4604      	mov	r4, r0
 800cf34:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800cf36:	bbb1      	cbnz	r1, 800cfa6 <USBD_LL_DataInStage+0x76>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800cf38:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800cf3c:	2b02      	cmp	r3, #2
 800cf3e:	d109      	bne.n	800cf54 <USBD_LL_DataInStage+0x24>
    {
      if(pep->rem_length > pep->maxpacket)
 800cf40:	e9d0 5307 	ldrd	r5, r3, [r0, #28]
 800cf44:	429d      	cmp	r5, r3
 800cf46:	d90e      	bls.n	800cf66 <USBD_LL_DataInStage+0x36>
      {
        pep->rem_length -=  pep->maxpacket;
 800cf48:	1aeb      	subs	r3, r5, r3
 800cf4a:	61c3      	str	r3, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 800cf4c:	b29a      	uxth	r2, r3
 800cf4e:	4631      	mov	r1, r6
 800cf50:	f000 fa14 	bl	800d37c <USBD_CtlContinueSendData>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800cf54:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	d102      	bne.n	800cf62 <USBD_LL_DataInStage+0x32>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 800cf62:	2000      	movs	r0, #0
 800cf64:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 800cf66:	6982      	ldr	r2, [r0, #24]
 800cf68:	fbb2 f5f3 	udiv	r5, r2, r3
 800cf6c:	fb03 2515 	mls	r5, r3, r5, r2
 800cf70:	b95d      	cbnz	r5, 800cf8a <USBD_LL_DataInStage+0x5a>
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d809      	bhi.n	800cf8a <USBD_LL_DataInStage+0x5a>
           (pep->total_length >= pep->maxpacket) &&
 800cf76:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d205      	bcs.n	800cf8a <USBD_LL_DataInStage+0x5a>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800cf7e:	462a      	mov	r2, r5
 800cf80:	f000 f9fc 	bl	800d37c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800cf84:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
 800cf88:	e7e4      	b.n	800cf54 <USBD_LL_DataInStage+0x24>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800cf8a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800cf8e:	68db      	ldr	r3, [r3, #12]
 800cf90:	b12b      	cbz	r3, 800cf9e <USBD_LL_DataInStage+0x6e>
 800cf92:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 800cf96:	2a03      	cmp	r2, #3
 800cf98:	d101      	bne.n	800cf9e <USBD_LL_DataInStage+0x6e>
            pdev->pClass->EP0_TxSent(pdev); 
 800cf9a:	4620      	mov	r0, r4
 800cf9c:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	f000 fa14 	bl	800d3cc <USBD_CtlReceiveStatus>
 800cfa4:	e7d6      	b.n	800cf54 <USBD_LL_DataInStage+0x24>
  else if((pdev->pClass->DataIn != NULL)&& 
 800cfa6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800cfaa:	695b      	ldr	r3, [r3, #20]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d0d8      	beq.n	800cf62 <USBD_LL_DataInStage+0x32>
 800cfb0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800cfb4:	2a03      	cmp	r2, #3
 800cfb6:	d1d4      	bne.n	800cf62 <USBD_LL_DataInStage+0x32>
    pdev->pClass->DataIn(pdev, epnum); 
 800cfb8:	4798      	blx	r3
 800cfba:	e7d2      	b.n	800cf62 <USBD_LL_DataInStage+0x32>

0800cfbc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800cfbc:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800cfbe:	2200      	movs	r2, #0
{
 800cfc0:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 800cfc2:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cfc4:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 800cfc6:	2340      	movs	r3, #64	; 0x40
 800cfc8:	f000 fbe3 	bl	800d792 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800cfcc:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cfce:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	2180      	movs	r1, #128	; 0x80
 800cfd6:	4620      	mov	r0, r4
 800cfd8:	f000 fbdb 	bl	800d792 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cfdc:	2301      	movs	r3, #1
 800cfde:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800cfe2:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cfe6:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 800cfe8:	b12b      	cbz	r3, 800cff6 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800cfea:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800cfee:	7921      	ldrb	r1, [r4, #4]
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	4620      	mov	r0, r4
 800cff4:	4798      	blx	r3
 
  
  return USBD_OK;
}
 800cff6:	2000      	movs	r0, #0
 800cff8:	bd38      	pop	{r3, r4, r5, pc}

0800cffa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800cffa:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800cffc:	2000      	movs	r0, #0
 800cffe:	4770      	bx	lr

0800d000 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800d000:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800d002:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800d006:	2a03      	cmp	r2, #3
 800d008:	d104      	bne.n	800d014 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800d00a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800d00e:	69db      	ldr	r3, [r3, #28]
 800d010:	b103      	cbz	r3, 800d014 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800d012:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 800d014:	2000      	movs	r0, #0
 800d016:	bd08      	pop	{r3, pc}

0800d018 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800d018:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 800d01a:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800d01c:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800d01e:	f000 fbc9 	bl	800d7b4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800d022:	4620      	mov	r0, r4
 800d024:	2100      	movs	r1, #0
}
 800d026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 800d02a:	f000 bbc3 	b.w	800d7b4 <USBD_LL_StallEP>
	...

0800d030 <USBD_StdDevReq>:
{
 800d030:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 800d032:	784b      	ldrb	r3, [r1, #1]
{
 800d034:	4604      	mov	r4, r0
 800d036:	460d      	mov	r5, r1
  switch (req->bRequest) 
 800d038:	2b09      	cmp	r3, #9
 800d03a:	d876      	bhi.n	800d12a <USBD_StdDevReq+0xfa>
 800d03c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d040:	00e500c9 	.word	0x00e500c9
 800d044:	00d90075 	.word	0x00d90075
 800d048:	006d0075 	.word	0x006d0075
 800d04c:	0075000a 	.word	0x0075000a
 800d050:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 800d054:	884b      	ldrh	r3, [r1, #2]
 800d056:	0a1a      	lsrs	r2, r3, #8
 800d058:	3a01      	subs	r2, #1
 800d05a:	2a06      	cmp	r2, #6
 800d05c:	d865      	bhi.n	800d12a <USBD_StdDevReq+0xfa>
 800d05e:	e8df f002 	tbb	[pc, r2]
 800d062:	1c04      	.short	0x1c04
 800d064:	49646429 	.word	0x49646429
 800d068:	52          	.byte	0x52
 800d069:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d06a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800d06e:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800d070:	7c20      	ldrb	r0, [r4, #16]
 800d072:	f10d 0106 	add.w	r1, sp, #6
 800d076:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 800d078:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d07c:	2a00      	cmp	r2, #0
 800d07e:	d067      	beq.n	800d150 <USBD_StdDevReq+0x120>
 800d080:	88eb      	ldrh	r3, [r5, #6]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d064      	beq.n	800d150 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 800d086:	429a      	cmp	r2, r3
 800d088:	bf28      	it	cs
 800d08a:	461a      	movcs	r2, r3
 800d08c:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 800d090:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 800d092:	4620      	mov	r0, r4
 800d094:	f000 f965 	bl	800d362 <USBD_CtlSendData>
    break;
 800d098:	e05a      	b.n	800d150 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800d09a:	7c02      	ldrb	r2, [r0, #16]
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800d09c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800d0a0:	b932      	cbnz	r2, 800d0b0 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800d0a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d0a4:	f10d 0006 	add.w	r0, sp, #6
 800d0a8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d0aa:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d0ac:	7043      	strb	r3, [r0, #1]
      break; 
 800d0ae:	e7e3      	b.n	800d078 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0b2:	e7f7      	b.n	800d0a4 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 800d0b4:	b2db      	uxtb	r3, r3
 800d0b6:	2b05      	cmp	r3, #5
 800d0b8:	d837      	bhi.n	800d12a <USBD_StdDevReq+0xfa>
 800d0ba:	e8df f003 	tbb	[pc, r3]
 800d0be:	0703      	.short	0x0703
 800d0c0:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800d0c4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800d0c8:	685b      	ldr	r3, [r3, #4]
 800d0ca:	e7d1      	b.n	800d070 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d0cc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	e7cd      	b.n	800d070 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d0d4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800d0d8:	68db      	ldr	r3, [r3, #12]
 800d0da:	e7c9      	b.n	800d070 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d0dc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800d0e0:	691b      	ldr	r3, [r3, #16]
 800d0e2:	e7c5      	b.n	800d070 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d0e4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800d0e8:	695b      	ldr	r3, [r3, #20]
 800d0ea:	e7c1      	b.n	800d070 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d0ec:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800d0f0:	699b      	ldr	r3, [r3, #24]
 800d0f2:	e7bd      	b.n	800d070 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800d0f4:	7c03      	ldrb	r3, [r0, #16]
 800d0f6:	b9c3      	cbnz	r3, 800d12a <USBD_StdDevReq+0xfa>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d0f8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800d0fc:	f10d 0006 	add.w	r0, sp, #6
 800d100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d102:	4798      	blx	r3
      break;
 800d104:	e7b8      	b.n	800d078 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800d106:	7c03      	ldrb	r3, [r0, #16]
 800d108:	b97b      	cbnz	r3, 800d12a <USBD_StdDevReq+0xfa>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d10a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800d10e:	f10d 0006 	add.w	r0, sp, #6
 800d112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d114:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d116:	2307      	movs	r3, #7
 800d118:	e7c8      	b.n	800d0ac <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800d11a:	888b      	ldrh	r3, [r1, #4]
 800d11c:	b92b      	cbnz	r3, 800d12a <USBD_StdDevReq+0xfa>
 800d11e:	88cb      	ldrh	r3, [r1, #6]
 800d120:	b91b      	cbnz	r3, 800d12a <USBD_StdDevReq+0xfa>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800d122:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800d126:	2b03      	cmp	r3, #3
 800d128:	d103      	bne.n	800d132 <USBD_StdDevReq+0x102>
       USBD_CtlError(pdev , req);                     
 800d12a:	4620      	mov	r0, r4
 800d12c:	f7ff ff74 	bl	800d018 <USBD_CtlError.constprop.0>
      break;
 800d130:	e00e      	b.n	800d150 <USBD_StdDevReq+0x120>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800d132:	884d      	ldrh	r5, [r1, #2]
 800d134:	f005 057f 	and.w	r5, r5, #127	; 0x7f
      pdev->dev_address = dev_addr;
 800d138:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800d13c:	4629      	mov	r1, r5
 800d13e:	f000 fb5a 	bl	800d7f6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800d142:	4620      	mov	r0, r4
 800d144:	f000 f937 	bl	800d3b6 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 800d148:	b12d      	cbz	r5, 800d156 <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800d14a:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800d14c:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 800d150:	2000      	movs	r0, #0
 800d152:	b003      	add	sp, #12
 800d154:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800d156:	2301      	movs	r3, #1
 800d158:	e7f8      	b.n	800d14c <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 800d15a:	7889      	ldrb	r1, [r1, #2]
 800d15c:	4d30      	ldr	r5, [pc, #192]	; (800d220 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800d15e:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 800d160:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800d162:	d8e2      	bhi.n	800d12a <USBD_StdDevReq+0xfa>
    switch (pdev->dev_state) 
 800d164:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800d168:	2b02      	cmp	r3, #2
 800d16a:	d00c      	beq.n	800d186 <USBD_StdDevReq+0x156>
 800d16c:	2b03      	cmp	r3, #3
 800d16e:	d1dc      	bne.n	800d12a <USBD_StdDevReq+0xfa>
      if (cfgidx == 0) 
 800d170:	b9b1      	cbnz	r1, 800d1a0 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d172:	2302      	movs	r3, #2
 800d174:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800d178:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800d17a:	f7ff fe75 	bl	800ce68 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 800d17e:	4620      	mov	r0, r4
 800d180:	f000 f919 	bl	800d3b6 <USBD_CtlSendStatus>
 800d184:	e7e4      	b.n	800d150 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 800d186:	2900      	cmp	r1, #0
 800d188:	d0f9      	beq.n	800d17e <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 800d18a:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800d18c:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800d18e:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800d190:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800d194:	4620      	mov	r0, r4
 800d196:	f7ff fe5c 	bl	800ce52 <USBD_SetClassConfig>
 800d19a:	2802      	cmp	r0, #2
 800d19c:	d1ef      	bne.n	800d17e <USBD_StdDevReq+0x14e>
 800d19e:	e7c4      	b.n	800d12a <USBD_StdDevReq+0xfa>
      else  if (cfgidx != pdev->dev_config) 
 800d1a0:	6841      	ldr	r1, [r0, #4]
 800d1a2:	2901      	cmp	r1, #1
 800d1a4:	d0eb      	beq.n	800d17e <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800d1a6:	b2c9      	uxtb	r1, r1
 800d1a8:	f7ff fe5e 	bl	800ce68 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d1ac:	7829      	ldrb	r1, [r5, #0]
 800d1ae:	6061      	str	r1, [r4, #4]
 800d1b0:	e7f0      	b.n	800d194 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 800d1b2:	88ca      	ldrh	r2, [r1, #6]
 800d1b4:	2a01      	cmp	r2, #1
 800d1b6:	d1b8      	bne.n	800d12a <USBD_StdDevReq+0xfa>
    switch (pdev->dev_state )  
 800d1b8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800d1bc:	2b02      	cmp	r3, #2
 800d1be:	d003      	beq.n	800d1c8 <USBD_StdDevReq+0x198>
 800d1c0:	2b03      	cmp	r3, #3
 800d1c2:	d1b2      	bne.n	800d12a <USBD_StdDevReq+0xfa>
      USBD_CtlSendData (pdev, 
 800d1c4:	1d01      	adds	r1, r0, #4
 800d1c6:	e764      	b.n	800d092 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 800d1c8:	4601      	mov	r1, r0
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 800d1d0:	e75f      	b.n	800d092 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 800d1d2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800d1d6:	3b02      	subs	r3, #2
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d8a6      	bhi.n	800d12a <USBD_StdDevReq+0xfa>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800d1dc:	2301      	movs	r3, #1
 800d1de:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 800d1e0:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800d1e4:	b10b      	cbz	r3, 800d1ea <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800d1e6:	2303      	movs	r3, #3
 800d1e8:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 800d1ea:	2202      	movs	r2, #2
 800d1ec:	f104 010c 	add.w	r1, r4, #12
 800d1f0:	e74f      	b.n	800d092 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d1f2:	884b      	ldrh	r3, [r1, #2]
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d1ab      	bne.n	800d150 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800d1f8:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800d1fc:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800d200:	4629      	mov	r1, r5
 800d202:	689b      	ldr	r3, [r3, #8]
 800d204:	4620      	mov	r0, r4
 800d206:	4798      	blx	r3
 800d208:	e7b9      	b.n	800d17e <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 800d20a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800d20e:	3b02      	subs	r3, #2
 800d210:	2b01      	cmp	r3, #1
 800d212:	d88a      	bhi.n	800d12a <USBD_StdDevReq+0xfa>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800d214:	884b      	ldrh	r3, [r1, #2]
 800d216:	2b01      	cmp	r3, #1
 800d218:	d19a      	bne.n	800d150 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800d21a:	2300      	movs	r3, #0
 800d21c:	e7ec      	b.n	800d1f8 <USBD_StdDevReq+0x1c8>
 800d21e:	bf00      	nop
 800d220:	2000108c 	.word	0x2000108c

0800d224 <USBD_StdItfReq>:
{
 800d224:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 800d226:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800d22a:	2b03      	cmp	r3, #3
{
 800d22c:	4604      	mov	r4, r0
 800d22e:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 800d230:	d10d      	bne.n	800d24e <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800d232:	790b      	ldrb	r3, [r1, #4]
 800d234:	2b01      	cmp	r3, #1
 800d236:	d80a      	bhi.n	800d24e <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 800d238:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800d23c:	689b      	ldr	r3, [r3, #8]
 800d23e:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 800d240:	88eb      	ldrh	r3, [r5, #6]
 800d242:	b913      	cbnz	r3, 800d24a <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 800d244:	4620      	mov	r0, r4
 800d246:	f000 f8b6 	bl	800d3b6 <USBD_CtlSendStatus>
}
 800d24a:	2000      	movs	r0, #0
 800d24c:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 800d24e:	f7ff fee3 	bl	800d018 <USBD_CtlError.constprop.0>
    break;
 800d252:	e7fa      	b.n	800d24a <USBD_StdItfReq+0x26>

0800d254 <USBD_StdEPReq>:
{
 800d254:	b538      	push	{r3, r4, r5, lr}
 800d256:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 800d258:	888a      	ldrh	r2, [r1, #4]
  switch (req->bRequest) 
 800d25a:	786b      	ldrb	r3, [r5, #1]
  ep_addr  = LOBYTE(req->wIndex);   
 800d25c:	7909      	ldrb	r1, [r1, #4]
  switch (req->bRequest) 
 800d25e:	2b01      	cmp	r3, #1
{
 800d260:	4604      	mov	r4, r0
  switch (req->bRequest) 
 800d262:	d03b      	beq.n	800d2dc <USBD_StdEPReq+0x88>
 800d264:	2b03      	cmp	r3, #3
 800d266:	d01e      	beq.n	800d2a6 <USBD_StdEPReq+0x52>
 800d268:	bb33      	cbnz	r3, 800d2b8 <USBD_StdEPReq+0x64>
    switch (pdev->dev_state) 
 800d26a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800d26e:	2b02      	cmp	r3, #2
 800d270:	d042      	beq.n	800d2f8 <USBD_StdEPReq+0xa4>
 800d272:	2b03      	cmp	r3, #3
 800d274:	d11d      	bne.n	800d2b2 <USBD_StdEPReq+0x5e>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800d276:	f001 037f 	and.w	r3, r1, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800d27a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800d27e:	bf14      	ite	ne
 800d280:	3301      	addne	r3, #1
 800d282:	3310      	addeq	r3, #16
 800d284:	2204      	movs	r2, #4
 800d286:	2510      	movs	r5, #16
 800d288:	fb15 2503 	smlabb	r5, r5, r3, r2
 800d28c:	4405      	add	r5, r0
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800d28e:	f000 fa9f 	bl	800d7d0 <USBD_LL_IsStallEP>
 800d292:	3800      	subs	r0, #0
 800d294:	bf18      	it	ne
 800d296:	2001      	movne	r0, #1
 800d298:	6028      	str	r0, [r5, #0]
      USBD_CtlSendData (pdev,
 800d29a:	2202      	movs	r2, #2
 800d29c:	4629      	mov	r1, r5
 800d29e:	4620      	mov	r0, r4
 800d2a0:	f000 f85f 	bl	800d362 <USBD_CtlSendData>
      break;
 800d2a4:	e008      	b.n	800d2b8 <USBD_StdEPReq+0x64>
    switch (pdev->dev_state) 
 800d2a6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800d2aa:	2b02      	cmp	r3, #2
 800d2ac:	d024      	beq.n	800d2f8 <USBD_StdEPReq+0xa4>
 800d2ae:	2b03      	cmp	r3, #3
 800d2b0:	d004      	beq.n	800d2bc <USBD_StdEPReq+0x68>
      USBD_CtlError(pdev , req);
 800d2b2:	4620      	mov	r0, r4
 800d2b4:	f7ff feb0 	bl	800d018 <USBD_CtlError.constprop.0>
}
 800d2b8:	2000      	movs	r0, #0
 800d2ba:	bd38      	pop	{r3, r4, r5, pc}
      if (req->wValue == USB_FEATURE_EP_HALT)
 800d2bc:	886b      	ldrh	r3, [r5, #2]
 800d2be:	b91b      	cbnz	r3, 800d2c8 <USBD_StdEPReq+0x74>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800d2c0:	064b      	lsls	r3, r1, #25
 800d2c2:	d001      	beq.n	800d2c8 <USBD_StdEPReq+0x74>
          USBD_LL_StallEP(pdev , ep_addr);
 800d2c4:	f000 fa76 	bl	800d7b4 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 800d2c8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800d2cc:	4629      	mov	r1, r5
 800d2ce:	689b      	ldr	r3, [r3, #8]
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800d2d4:	4620      	mov	r0, r4
 800d2d6:	f000 f86e 	bl	800d3b6 <USBD_CtlSendStatus>
 800d2da:	e7ed      	b.n	800d2b8 <USBD_StdEPReq+0x64>
    switch (pdev->dev_state) 
 800d2dc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800d2e0:	2b02      	cmp	r3, #2
 800d2e2:	d009      	beq.n	800d2f8 <USBD_StdEPReq+0xa4>
 800d2e4:	2b03      	cmp	r3, #3
 800d2e6:	d1e4      	bne.n	800d2b2 <USBD_StdEPReq+0x5e>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800d2e8:	886b      	ldrh	r3, [r5, #2]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d1e4      	bne.n	800d2b8 <USBD_StdEPReq+0x64>
        if ((ep_addr & 0x7F) != 0x00) 
 800d2ee:	064a      	lsls	r2, r1, #25
 800d2f0:	d0f0      	beq.n	800d2d4 <USBD_StdEPReq+0x80>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800d2f2:	f000 fa66 	bl	800d7c2 <USBD_LL_ClearStallEP>
 800d2f6:	e7e7      	b.n	800d2c8 <USBD_StdEPReq+0x74>
      if ((ep_addr & 0x7F) != 0x00) 
 800d2f8:	064b      	lsls	r3, r1, #25
 800d2fa:	d0dd      	beq.n	800d2b8 <USBD_StdEPReq+0x64>
        USBD_LL_StallEP(pdev , ep_addr);
 800d2fc:	f000 fa5a 	bl	800d7b4 <USBD_LL_StallEP>
 800d300:	e7da      	b.n	800d2b8 <USBD_StdEPReq+0x64>

0800d302 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800d302:	780b      	ldrb	r3, [r1, #0]
 800d304:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800d306:	784b      	ldrb	r3, [r1, #1]
 800d308:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800d30a:	78ca      	ldrb	r2, [r1, #3]
 800d30c:	788b      	ldrb	r3, [r1, #2]
 800d30e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d312:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800d314:	794a      	ldrb	r2, [r1, #5]
 800d316:	790b      	ldrb	r3, [r1, #4]
 800d318:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d31c:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800d31e:	79ca      	ldrb	r2, [r1, #7]
 800d320:	798b      	ldrb	r3, [r1, #6]
 800d322:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d326:	80c3      	strh	r3, [r0, #6]
}
 800d328:	4770      	bx	lr

0800d32a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d32a:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 800d32c:	b188      	cbz	r0, 800d352 <USBD_GetString+0x28>
 800d32e:	2400      	movs	r4, #0
 800d330:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 800d332:	4623      	mov	r3, r4
 800d334:	3401      	adds	r4, #1
 800d336:	5d05      	ldrb	r5, [r0, r4]
 800d338:	2d00      	cmp	r5, #0
 800d33a:	d1fa      	bne.n	800d332 <USBD_GetString+0x8>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800d33c:	b2db      	uxtb	r3, r3
 800d33e:	3301      	adds	r3, #1
 800d340:	005b      	lsls	r3, r3, #1
 800d342:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800d344:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800d346:	2303      	movs	r3, #3
 800d348:	704b      	strb	r3, [r1, #1]
 800d34a:	2302      	movs	r3, #2
    while (*desc != '\0') 
 800d34c:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800d350:	b904      	cbnz	r4, 800d354 <USBD_GetString+0x2a>
}
 800d352:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800d354:	1c5a      	adds	r2, r3, #1
 800d356:	b2d2      	uxtb	r2, r2
 800d358:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0x00;
 800d35a:	3302      	adds	r3, #2
 800d35c:	548d      	strb	r5, [r1, r2]
 800d35e:	b2db      	uxtb	r3, r3
 800d360:	e7f4      	b.n	800d34c <USBD_GetString+0x22>

0800d362 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800d362:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800d364:	2402      	movs	r4, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800d366:	4613      	mov	r3, r2
  pdev->ep_in[0].rem_length   = len;
 800d368:	e9c0 2206 	strd	r2, r2, [r0, #24]
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800d36c:	f8c0 41f4 	str.w	r4, [r0, #500]	; 0x1f4
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800d370:	460a      	mov	r2, r1
 800d372:	2100      	movs	r1, #0
 800d374:	f000 fa46 	bl	800d804 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800d378:	2000      	movs	r0, #0
 800d37a:	bd10      	pop	{r4, pc}

0800d37c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800d37c:	b508      	push	{r3, lr}
 800d37e:	4613      	mov	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800d380:	460a      	mov	r2, r1
 800d382:	2100      	movs	r1, #0
 800d384:	f000 fa3e 	bl	800d804 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800d388:	2000      	movs	r0, #0
 800d38a:	bd08      	pop	{r3, pc}

0800d38c <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800d38c:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800d38e:	2403      	movs	r4, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800d390:	4613      	mov	r3, r2
  pdev->ep_out[0].rem_length   = len;
 800d392:	e9c0 2242 	strd	r2, r2, [r0, #264]	; 0x108
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800d396:	f8c0 41f4 	str.w	r4, [r0, #500]	; 0x1f4
  USBD_LL_PrepareReceive (pdev,
 800d39a:	460a      	mov	r2, r1
 800d39c:	2100      	movs	r1, #0
 800d39e:	f000 fa38 	bl	800d812 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 800d3a2:	2000      	movs	r0, #0
 800d3a4:	bd10      	pop	{r4, pc}

0800d3a6 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800d3a6:	b508      	push	{r3, lr}
 800d3a8:	4613      	mov	r3, r2

  USBD_LL_PrepareReceive (pdev,
 800d3aa:	460a      	mov	r2, r1
 800d3ac:	2100      	movs	r1, #0
 800d3ae:	f000 fa30 	bl	800d812 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 800d3b2:	2000      	movs	r0, #0
 800d3b4:	bd08      	pop	{r3, pc}

0800d3b6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800d3b6:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d3b8:	2304      	movs	r3, #4
 800d3ba:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800d3be:	2300      	movs	r3, #0
 800d3c0:	461a      	mov	r2, r3
 800d3c2:	4619      	mov	r1, r3
 800d3c4:	f000 fa1e 	bl	800d804 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800d3c8:	2000      	movs	r0, #0
 800d3ca:	bd08      	pop	{r3, pc}

0800d3cc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800d3cc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800d3ce:	2305      	movs	r3, #5
 800d3d0:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	4619      	mov	r1, r3
 800d3da:	f000 fa1a 	bl	800d812 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800d3de:	2000      	movs	r0, #0
 800d3e0:	bd08      	pop	{r3, pc}

0800d3e2 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800d3e2:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800d3e6:	b11b      	cbz	r3, 800d3f0 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 800d3e8:	2000      	movs	r0, #0
 800d3ea:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 800d3ee:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 800d3f0:	2002      	movs	r0, #2
  }
}
 800d3f2:	4770      	bx	lr

0800d3f4 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800d3f4:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 800d3f8:	b510      	push	{r4, lr}
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800d3fa:	b16b      	cbz	r3, 800d418 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800d3fc:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800d400:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800d404:	28ff      	cmp	r0, #255	; 0xff
 800d406:	d007      	beq.n	800d418 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d408:	689b      	ldr	r3, [r3, #8]
 800d40a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800d40e:	4621      	mov	r1, r4
 800d410:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 800d412:	23ff      	movs	r3, #255	; 0xff
 800d414:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 800d418:	2000      	movs	r0, #0
 800d41a:	bd10      	pop	{r4, pc}

0800d41c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800d41c:	2343      	movs	r3, #67	; 0x43
 800d41e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800d420:	4800      	ldr	r0, [pc, #0]	; (800d424 <USBD_CDC_GetFSCfgDesc+0x8>)
 800d422:	4770      	bx	lr
 800d424:	20000a00 	.word	0x20000a00

0800d428 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800d428:	2343      	movs	r3, #67	; 0x43
 800d42a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800d42c:	4800      	ldr	r0, [pc, #0]	; (800d430 <USBD_CDC_GetHSCfgDesc+0x8>)
 800d42e:	4770      	bx	lr
 800d430:	20000a44 	.word	0x20000a44

0800d434 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800d434:	2343      	movs	r3, #67	; 0x43
 800d436:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800d438:	4800      	ldr	r0, [pc, #0]	; (800d43c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800d43a:	4770      	bx	lr
 800d43c:	20000a94 	.word	0x20000a94

0800d440 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800d440:	230a      	movs	r3, #10
 800d442:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800d444:	4800      	ldr	r0, [pc, #0]	; (800d448 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800d446:	4770      	bx	lr
 800d448:	20000a88 	.word	0x20000a88

0800d44c <USBD_CDC_DataOut>:
{      
 800d44c:	b538      	push	{r3, r4, r5, lr}
 800d44e:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800d450:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800d454:	f000 f9e4 	bl	800d820 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 800d458:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800d45c:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800d460:	b14b      	cbz	r3, 800d476 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d462:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800d466:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800d46a:	68db      	ldr	r3, [r3, #12]
 800d46c:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800d470:	4798      	blx	r3
    return USBD_OK;
 800d472:	2000      	movs	r0, #0
}
 800d474:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800d476:	2002      	movs	r0, #2
 800d478:	e7fc      	b.n	800d474 <USBD_CDC_DataOut+0x28>

0800d47a <USBD_CDC_Setup>:
{
 800d47a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d47c:	780e      	ldrb	r6, [r1, #0]
 800d47e:	f006 0360 	and.w	r3, r6, #96	; 0x60
 800d482:	2b20      	cmp	r3, #32
{
 800d484:	4604      	mov	r4, r0
 800d486:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d488:	d111      	bne.n	800d4ae <USBD_CDC_Setup+0x34>
    if (req->wLength)
 800d48a:	88ca      	ldrh	r2, [r1, #6]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d48c:	784b      	ldrb	r3, [r1, #1]
    if (req->wLength)
 800d48e:	b1c2      	cbz	r2, 800d4c2 <USBD_CDC_Setup+0x48>
      if (req->bmRequest & 0x80)
 800d490:	0636      	lsls	r6, r6, #24
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800d492:	f8d0 1218 	ldr.w	r1, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 800d496:	d50d      	bpl.n	800d4b4 <USBD_CDC_Setup+0x3a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d498:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 800d49c:	9101      	str	r1, [sp, #4]
 800d49e:	6886      	ldr	r6, [r0, #8]
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	47b0      	blx	r6
          USBD_CtlSendData (pdev, 
 800d4a4:	88ea      	ldrh	r2, [r5, #6]
 800d4a6:	9901      	ldr	r1, [sp, #4]
 800d4a8:	4620      	mov	r0, r4
 800d4aa:	f7ff ff5a 	bl	800d362 <USBD_CtlSendData>
}
 800d4ae:	2000      	movs	r0, #0
 800d4b0:	b002      	add	sp, #8
 800d4b2:	bd70      	pop	{r4, r5, r6, pc}
        hcdc->CmdOpCode = req->bRequest;
 800d4b4:	f881 3200 	strb.w	r3, [r1, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 800d4b8:	f881 2201 	strb.w	r2, [r1, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 800d4bc:	f7ff ff66 	bl	800d38c <USBD_CtlPrepareRx>
 800d4c0:	e7f5      	b.n	800d4ae <USBD_CDC_Setup+0x34>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d4c2:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	688c      	ldr	r4, [r1, #8]
 800d4ca:	4611      	mov	r1, r2
 800d4cc:	47a0      	blx	r4
 800d4ce:	e7ee      	b.n	800d4ae <USBD_CDC_Setup+0x34>

0800d4d0 <USBD_CDC_DeInit>:
{
 800d4d0:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 800d4d2:	2181      	movs	r1, #129	; 0x81
{
 800d4d4:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 800d4d6:	f000 f966 	bl	800d7a6 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800d4da:	2101      	movs	r1, #1
 800d4dc:	4620      	mov	r0, r4
 800d4de:	f000 f962 	bl	800d7a6 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800d4e2:	2182      	movs	r1, #130	; 0x82
 800d4e4:	4620      	mov	r0, r4
 800d4e6:	f000 f95e 	bl	800d7a6 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800d4ea:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800d4ee:	b153      	cbz	r3, 800d506 <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d4f0:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800d4f4:	685b      	ldr	r3, [r3, #4]
 800d4f6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800d4f8:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800d4fc:	f000 f99a 	bl	800d834 <USBD_static_free>
    pdev->pClassData = NULL;
 800d500:	2300      	movs	r3, #0
 800d502:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 800d506:	2000      	movs	r0, #0
 800d508:	bd10      	pop	{r4, pc}

0800d50a <USBD_CDC_Init>:
{
 800d50a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800d50c:	7c03      	ldrb	r3, [r0, #16]
{
 800d50e:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800d510:	bb7b      	cbnz	r3, 800d572 <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 800d512:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d516:	2202      	movs	r2, #2
 800d518:	2181      	movs	r1, #129	; 0x81
 800d51a:	f000 f93a 	bl	800d792 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800d51e:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 800d522:	2202      	movs	r2, #2
 800d524:	2101      	movs	r1, #1
 800d526:	4620      	mov	r0, r4
 800d528:	f000 f933 	bl	800d792 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 800d52c:	2308      	movs	r3, #8
 800d52e:	2203      	movs	r2, #3
 800d530:	2182      	movs	r1, #130	; 0x82
 800d532:	4620      	mov	r0, r4
 800d534:	f000 f92d 	bl	800d792 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800d538:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d53c:	f000 f976 	bl	800d82c <USBD_static_malloc>
 800d540:	4605      	mov	r5, r0
 800d542:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 800d546:	b320      	cbz	r0, 800d592 <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d548:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
    hcdc->TxState =0;
 800d54c:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	4798      	blx	r3
    hcdc->TxState =0;
 800d552:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
    hcdc->RxState =0;
 800d556:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800d55a:	7c26      	ldrb	r6, [r4, #16]
 800d55c:	b986      	cbnz	r6, 800d580 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 800d55e:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800d562:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d566:	2101      	movs	r1, #1
 800d568:	4620      	mov	r0, r4
 800d56a:	f000 f952 	bl	800d812 <USBD_LL_PrepareReceive>
}
 800d56e:	4630      	mov	r0, r6
 800d570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 800d572:	2340      	movs	r3, #64	; 0x40
 800d574:	2202      	movs	r2, #2
 800d576:	2181      	movs	r1, #129	; 0x81
 800d578:	f000 f90b 	bl	800d792 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800d57c:	2340      	movs	r3, #64	; 0x40
 800d57e:	e7d0      	b.n	800d522 <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 800d580:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800d584:	2340      	movs	r3, #64	; 0x40
 800d586:	2101      	movs	r1, #1
 800d588:	4620      	mov	r0, r4
 800d58a:	f000 f942 	bl	800d812 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 800d58e:	463e      	mov	r6, r7
 800d590:	e7ed      	b.n	800d56e <USBD_CDC_Init+0x64>
    ret = 1; 
 800d592:	2601      	movs	r6, #1
 800d594:	e7eb      	b.n	800d56e <USBD_CDC_Init+0x64>

0800d596 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 800d596:	b119      	cbz	r1, 800d5a0 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 800d598:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 800d59c:	2000      	movs	r0, #0
 800d59e:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800d5a0:	2002      	movs	r0, #2
  }
  
  return ret;
}
 800d5a2:	4770      	bx	lr

0800d5a4 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800d5a4:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 800d5a8:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800d5aa:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 800d5ae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800d5b2:	4770      	bx	lr

0800d5b4 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 800d5b4:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 800d5b8:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800d5ba:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800d5be:	4770      	bx	lr

0800d5c0 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 800d5c0:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800d5c2:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800d5c6:	b175      	cbz	r5, 800d5e6 <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 800d5c8:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 800d5cc:	b96c      	cbnz	r4, 800d5ea <USBD_CDC_TransmitPacket+0x2a>
    {
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 800d5ce:	f8b5 3210 	ldrh.w	r3, [r5, #528]	; 0x210
 800d5d2:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
 800d5d6:	2181      	movs	r1, #129	; 0x81
 800d5d8:	f000 f914 	bl	800d804 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 800d5dc:	2301      	movs	r3, #1
 800d5de:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
      return USBD_OK;
 800d5e2:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 800d5e4:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800d5e6:	2002      	movs	r0, #2
 800d5e8:	e7fc      	b.n	800d5e4 <USBD_CDC_TransmitPacket+0x24>
      return USBD_BUSY;
 800d5ea:	2001      	movs	r0, #1
 800d5ec:	e7fa      	b.n	800d5e4 <USBD_CDC_TransmitPacket+0x24>

0800d5ee <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800d5ee:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 800d5f2:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800d5f4:	b182      	cbz	r2, 800d618 <USBD_CDC_ReceivePacket+0x2a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800d5f6:	7c04      	ldrb	r4, [r0, #16]
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d5f8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800d5fc:	b934      	cbnz	r4, 800d60c <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 800d5fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d602:	2101      	movs	r1, #1
 800d604:	f000 f905 	bl	800d812 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 800d608:	4620      	mov	r0, r4
 800d60a:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800d60c:	2340      	movs	r3, #64	; 0x40
 800d60e:	2101      	movs	r1, #1
 800d610:	f000 f8ff 	bl	800d812 <USBD_LL_PrepareReceive>
    return USBD_OK;
 800d614:	2400      	movs	r4, #0
 800d616:	e7f7      	b.n	800d608 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 800d618:	2402      	movs	r4, #2
 800d61a:	e7f5      	b.n	800d608 <USBD_CDC_ReceivePacket+0x1a>

0800d61c <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 800d61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIOA clock for USB DataLines */
  __GPIOA_CLK_ENABLE();
 800d620:	4c23      	ldr	r4, [pc, #140]	; (800d6b0 <HAL_PCD_MspInit+0x94>)
 800d622:	6963      	ldr	r3, [r4, #20]
 800d624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d628:	6163      	str	r3, [r4, #20]
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();
 800d62a:	6963      	ldr	r3, [r4, #20]
{
 800d62c:	b086      	sub	sp, #24
  __GPIOB_CLK_ENABLE();
 800d62e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d632:	6163      	str	r3, [r4, #20]

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800d634:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
 800d638:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d63a:	2500      	movs	r5, #0
 800d63c:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800d640:	270e      	movs	r7, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800d642:	a901      	add	r1, sp, #4
 800d644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800d648:	e9cd 6301 	strd	r6, r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d64c:	e9cd 5803 	strd	r5, r8, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800d650:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800d652:	f7fd ff29 	bl	800b4a8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),0);
 800d656:	462a      	mov	r2, r5
 800d658:	4631      	mov	r1, r6
 800d65a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d65e:	f7fd ffed 	bl	800b63c <HAL_GPIO_WritePin>
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBD_LL_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800d662:	2001      	movs	r0, #1
 800d664:	f7fd feac 	bl	800b3c0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);
 800d668:	2201      	movs	r2, #1
 800d66a:	4631      	mov	r1, r6
 800d66c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d670:	f7fd ffe4 	bl	800b63c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d674:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800d676:	a901      	add	r1, sp, #4
 800d678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d67c:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800d680:	e9cd 8704 	strd	r8, r7, [sp, #16]
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 800d684:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800d686:	f7fd ff0f 	bl	800b4a8 <HAL_GPIO_Init>
  __USB_CLK_ENABLE();
 800d68a:	69e3      	ldr	r3, [r4, #28]
 800d68c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d690:	61e3      	str	r3, [r4, #28]
  __SYSCFG_CLK_ENABLE();
 800d692:	69a3      	ldr	r3, [r4, #24]
 800d694:	f043 0301 	orr.w	r3, r3, #1
 800d698:	61a3      	str	r3, [r4, #24]
  HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 800d69a:	462a      	mov	r2, r5
 800d69c:	2105      	movs	r1, #5
 800d69e:	2014      	movs	r0, #20
 800d6a0:	f7fd feae 	bl	800b400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn); 
 800d6a4:	2014      	movs	r0, #20
 800d6a6:	f7fd fedf 	bl	800b468 <HAL_NVIC_EnableIRQ>
}
 800d6aa:	b006      	add	sp, #24
 800d6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6b0:	40021000 	.word	0x40021000

0800d6b4 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 800d6b4:	f500 71a2 	add.w	r1, r0, #324	; 0x144
 800d6b8:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800d6bc:	f7ff bbdb 	b.w	800ce76 <USBD_LL_SetupStage>

0800d6c0 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d6c0:	231c      	movs	r3, #28
 800d6c2:	fb03 0301 	mla	r3, r3, r1, r0
 800d6c6:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800d6ca:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800d6ce:	f7ff bbff 	b.w	800ced0 <USBD_LL_DataOutStage>

0800d6d2 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d6d2:	231c      	movs	r3, #28
 800d6d4:	fb03 0301 	mla	r3, r3, r1, r0
 800d6d8:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800d6dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6de:	f7ff bc27 	b.w	800cf30 <USBD_LL_DataInStage>

0800d6e2 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF(hpcd->pData);
 800d6e2:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800d6e6:	f7ff bc8b 	b.w	800d000 <USBD_LL_SOF>

0800d6ea <HAL_PCD_ResetCallback>:
{   
 800d6ea:	b510      	push	{r4, lr}
 800d6ec:	4604      	mov	r4, r0
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 800d6ee:	2101      	movs	r1, #1
 800d6f0:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800d6f4:	f7ff fc81 	bl	800cffa <USBD_LL_SetSpeed>
  USBD_LL_Reset(hpcd->pData);
 800d6f8:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
}
 800d6fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset(hpcd->pData);
 800d700:	f7ff bc5c 	b.w	800cfbc <USBD_LL_Reset>

0800d704 <HAL_PCD_SuspendCallback>:
}
 800d704:	4770      	bx	lr

0800d706 <HAL_PCD_ResumeCallback>:
 800d706:	4770      	bx	lr

0800d708 <USBD_LL_Init>:
{    
 800d708:	b538      	push	{r3, r4, r5, lr}
  hpcd.Init.dev_endpoints = 8;
 800d70a:	4a1c      	ldr	r2, [pc, #112]	; (800d77c <USBD_LL_Init+0x74>)
{    
 800d70c:	4604      	mov	r4, r0
  hpcd.Instance = USB;
 800d70e:	481c      	ldr	r0, [pc, #112]	; (800d780 <USBD_LL_Init+0x78>)
  pdev->pData = &hpcd;
 800d710:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd.Init.dev_endpoints = 8;
 800d714:	2308      	movs	r3, #8
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d716:	2500      	movs	r5, #0
  hpcd.Init.dev_endpoints = 8;
 800d718:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d71c:	2302      	movs	r3, #2
 800d71e:	e9c0 5303 	strd	r5, r3, [r0, #12]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800d722:	6083      	str	r3, [r0, #8]
  hpcd.pData = pdev;
 800d724:	f8c0 4174 	str.w	r4, [r0, #372]	; 0x174
  HAL_PCD_Init(pdev->pData);
 800d728:	f7fd ff91 	bl	800b64e <HAL_PCD_Init>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 800d72c:	462a      	mov	r2, r5
 800d72e:	4629      	mov	r1, r5
 800d730:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800d734:	2340      	movs	r3, #64	; 0x40
 800d736:	f7fe fe27 	bl	800c388 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 800d73a:	2380      	movs	r3, #128	; 0x80
 800d73c:	462a      	mov	r2, r5
 800d73e:	4619      	mov	r1, r3
 800d740:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800d744:	f7fe fe20 	bl	800c388 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);  
 800d748:	462a      	mov	r2, r5
 800d74a:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800d74e:	23c0      	movs	r3, #192	; 0xc0
 800d750:	2181      	movs	r1, #129	; 0x81
 800d752:	f7fe fe19 	bl	800c388 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x110);
 800d756:	462a      	mov	r2, r5
 800d758:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800d75c:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d760:	2101      	movs	r1, #1
 800d762:	f7fe fe11 	bl	800c388 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x100); 
 800d766:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800d76a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d76e:	462a      	mov	r2, r5
 800d770:	2182      	movs	r1, #130	; 0x82
 800d772:	f7fe fe09 	bl	800c388 <HAL_PCDEx_PMAConfig>
}
 800d776:	4628      	mov	r0, r5
 800d778:	bd38      	pop	{r3, r4, r5, pc}
 800d77a:	bf00      	nop
 800d77c:	40005c00 	.word	0x40005c00
 800d780:	20001090 	.word	0x20001090

0800d784 <USBD_LL_Start>:
{
 800d784:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 800d786:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d78a:	f7fd ffa9 	bl	800b6e0 <HAL_PCD_Start>
}
 800d78e:	2000      	movs	r0, #0
 800d790:	bd08      	pop	{r3, pc}

0800d792 <USBD_LL_OpenEP>:
{
 800d792:	b510      	push	{r4, lr}
 800d794:	4614      	mov	r4, r2
  HAL_PCD_EP_Open(pdev->pData,
 800d796:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
{
 800d79a:	461a      	mov	r2, r3
  HAL_PCD_EP_Open(pdev->pData,
 800d79c:	4623      	mov	r3, r4
 800d79e:	f7fd ffbb 	bl	800b718 <HAL_PCD_EP_Open>
}
 800d7a2:	2000      	movs	r0, #0
 800d7a4:	bd10      	pop	{r4, pc}

0800d7a6 <USBD_LL_CloseEP>:
{
 800d7a6:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d7a8:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d7ac:	f7fe f926 	bl	800b9fc <HAL_PCD_EP_Close>
}
 800d7b0:	2000      	movs	r0, #0
 800d7b2:	bd08      	pop	{r3, pc}

0800d7b4 <USBD_LL_StallEP>:
{
 800d7b4:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d7b6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d7ba:	f7fe fd37 	bl	800c22c <HAL_PCD_EP_SetStall>
}
 800d7be:	2000      	movs	r0, #0
 800d7c0:	bd08      	pop	{r3, pc}

0800d7c2 <USBD_LL_ClearStallEP>:
{
 800d7c2:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d7c4:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d7c8:	f7fe fd80 	bl	800c2cc <HAL_PCD_EP_ClrStall>
}
 800d7cc:	2000      	movs	r0, #0
 800d7ce:	bd08      	pop	{r3, pc}

0800d7d0 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800d7d0:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d7d4:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  if((ep_addr & 0x80) == 0x80)
 800d7d8:	f04f 021c 	mov.w	r2, #28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d7dc:	bf1b      	ittet	ne
 800d7de:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800d7e2:	fb02 3101 	mlane	r1, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d7e6:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d7ea:	f891 002a 	ldrbne.w	r0, [r1, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d7ee:	bf08      	it	eq
 800d7f0:	f891 00b6 	ldrbeq.w	r0, [r1, #182]	; 0xb6
}
 800d7f4:	4770      	bx	lr

0800d7f6 <USBD_LL_SetUSBAddress>:
{
 800d7f6:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d7f8:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d7fc:	f7fd ff76 	bl	800b6ec <HAL_PCD_SetAddress>
}
 800d800:	2000      	movs	r0, #0
 800d802:	bd08      	pop	{r3, pc}

0800d804 <USBD_LL_Transmit>:
{
 800d804:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d806:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d80a:	f7fe fa3f 	bl	800bc8c <HAL_PCD_EP_Transmit>
}
 800d80e:	2000      	movs	r0, #0
 800d810:	bd08      	pop	{r3, pc}

0800d812 <USBD_LL_PrepareReceive>:
{
 800d812:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d814:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d818:	f7fe f9cc 	bl	800bbb4 <HAL_PCD_EP_Receive>
}
 800d81c:	2000      	movs	r0, #0
 800d81e:	bd08      	pop	{r3, pc}

0800d820 <USBD_LL_GetRxDataSize>:
{
 800d820:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 800d822:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d826:	f7fe fa29 	bl	800bc7c <HAL_PCD_EP_GetRxCount>
}
 800d82a:	bd08      	pop	{r3, pc}

0800d82c <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[MAX_STATIC_ALLOC_SIZE];
  return mem;
}
 800d82c:	4800      	ldr	r0, [pc, #0]	; (800d830 <USBD_static_malloc+0x4>)
 800d82e:	4770      	bx	lr
 800d830:	20001208 	.word	0x20001208

0800d834 <USBD_static_free>:
 800d834:	4770      	bx	lr
	...

0800d838 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(hUSBDDeviceDesc);
 800d838:	2312      	movs	r3, #18
  return (uint8_t*)hUSBDDeviceDesc;
}
 800d83a:	4801      	ldr	r0, [pc, #4]	; (800d840 <USBD_VCP_DeviceDescriptor+0x8>)
  *length = sizeof(hUSBDDeviceDesc);
 800d83c:	800b      	strh	r3, [r1, #0]
}
 800d83e:	4770      	bx	lr
 800d840:	0801e269 	.word	0x0801e269

0800d844 <USBD_VCP_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 800d844:	2304      	movs	r3, #4
  return (uint8_t*)USBD_LangIDDesc;
}
 800d846:	4801      	ldr	r0, [pc, #4]	; (800d84c <USBD_VCP_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);  
 800d848:	800b      	strh	r3, [r1, #0]
}
 800d84a:	4770      	bx	lr
 800d84c:	0801e265 	.word	0x0801e265

0800d850 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 800d850:	2300      	movs	r3, #0
 800d852:	b570      	push	{r4, r5, r6, lr}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800d854:	1c4d      	adds	r5, r1, #1
 800d856:	461e      	mov	r6, r3
      pbuf[ 2* idx] = (value >> 28) + '0';
 800d858:	0f04      	lsrs	r4, r0, #28
    if( ((value >> 28)) < 0xA )
 800d85a:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[ 2* idx] = (value >> 28) + '0';
 800d85e:	bf34      	ite	cc
 800d860:	3430      	addcc	r4, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800d862:	3437      	addcs	r4, #55	; 0x37
 800d864:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[ 2* idx + 1] = 0;
 800d868:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for( idx = 0 ; idx < len ; idx ++)
 800d86c:	3301      	adds	r3, #1
 800d86e:	b2dc      	uxtb	r4, r3
 800d870:	42a2      	cmp	r2, r4
    value = value << 4;
 800d872:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for( idx = 0 ; idx < len ; idx ++)
 800d876:	d8ef      	bhi.n	800d858 <IntToUnicode+0x8>
  }
}
 800d878:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d87c <USBD_VCP_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800d87c:	231a      	movs	r3, #26
{
 800d87e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800d880:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 800d882:	4b0a      	ldr	r3, [pc, #40]	; (800d8ac <USBD_VCP_SerialStrDescriptor+0x30>)
 800d884:	f8d3 07ac 	ldr.w	r0, [r3, #1964]	; 0x7ac
  deviceserial0 += deviceserial2;
 800d888:	f8d3 27b4 	ldr.w	r2, [r3, #1972]	; 0x7b4
  if (deviceserial0 != 0)
 800d88c:	1880      	adds	r0, r0, r2
 800d88e:	d00a      	beq.n	800d8a6 <USBD_VCP_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800d890:	f8d3 47b0 	ldr.w	r4, [r3, #1968]	; 0x7b0
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 800d894:	4906      	ldr	r1, [pc, #24]	; (800d8b0 <USBD_VCP_SerialStrDescriptor+0x34>)
 800d896:	2208      	movs	r2, #8
 800d898:	f7ff ffda 	bl	800d850 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 800d89c:	2204      	movs	r2, #4
 800d89e:	3110      	adds	r1, #16
 800d8a0:	4620      	mov	r0, r4
 800d8a2:	f7ff ffd5 	bl	800d850 <IntToUnicode>
}
 800d8a6:	4803      	ldr	r0, [pc, #12]	; (800d8b4 <USBD_VCP_SerialStrDescriptor+0x38>)
 800d8a8:	bd10      	pop	{r4, pc}
 800d8aa:	bf00      	nop
 800d8ac:	1ffff000 	.word	0x1ffff000
 800d8b0:	20000ad9 	.word	0x20000ad9
 800d8b4:	20000ad7 	.word	0x20000ad7

0800d8b8 <USBD_VCP_ProductStrDescriptor>:
{
 800d8b8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 800d8ba:	4c04      	ldr	r4, [pc, #16]	; (800d8cc <USBD_VCP_ProductStrDescriptor+0x14>)
 800d8bc:	4804      	ldr	r0, [pc, #16]	; (800d8d0 <USBD_VCP_ProductStrDescriptor+0x18>)
{
 800d8be:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 800d8c0:	4621      	mov	r1, r4
 800d8c2:	f7ff fd32 	bl	800d32a <USBD_GetString>
}
 800d8c6:	4620      	mov	r0, r4
 800d8c8:	bd10      	pop	{r4, pc}
 800d8ca:	bf00      	nop
 800d8cc:	20001438 	.word	0x20001438
 800d8d0:	0801e218 	.word	0x0801e218

0800d8d4 <USBD_VCP_ManufacturerStrDescriptor>:
{
 800d8d4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d8d6:	4c04      	ldr	r4, [pc, #16]	; (800d8e8 <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 800d8d8:	4804      	ldr	r0, [pc, #16]	; (800d8ec <USBD_VCP_ManufacturerStrDescriptor+0x18>)
{
 800d8da:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d8dc:	4621      	mov	r1, r4
 800d8de:	f7ff fd24 	bl	800d32a <USBD_GetString>
}
 800d8e2:	4620      	mov	r0, r4
 800d8e4:	bd10      	pop	{r4, pc}
 800d8e6:	bf00      	nop
 800d8e8:	20001438 	.word	0x20001438
 800d8ec:	0801e239 	.word	0x0801e239

0800d8f0 <USBD_VCP_ConfigStrDescriptor>:
{
 800d8f0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 800d8f2:	4c04      	ldr	r4, [pc, #16]	; (800d904 <USBD_VCP_ConfigStrDescriptor+0x14>)
 800d8f4:	4804      	ldr	r0, [pc, #16]	; (800d908 <USBD_VCP_ConfigStrDescriptor+0x18>)
{
 800d8f6:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 800d8f8:	4621      	mov	r1, r4
 800d8fa:	f7ff fd16 	bl	800d32a <USBD_GetString>
}
 800d8fe:	4620      	mov	r0, r4
 800d900:	bd10      	pop	{r4, pc}
 800d902:	bf00      	nop
 800d904:	20001438 	.word	0x20001438
 800d908:	0801e24c 	.word	0x0801e24c

0800d90c <USBD_VCP_InterfaceStrDescriptor>:
{
 800d90c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800d90e:	4c04      	ldr	r4, [pc, #16]	; (800d920 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 800d910:	4804      	ldr	r0, [pc, #16]	; (800d924 <USBD_VCP_InterfaceStrDescriptor+0x18>)
{
 800d912:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800d914:	4621      	mov	r1, r4
 800d916:	f7ff fd08 	bl	800d32a <USBD_GetString>
}
 800d91a:	4620      	mov	r0, r4
 800d91c:	bd10      	pop	{r4, pc}
 800d91e:	bf00      	nop
 800d920:	20001438 	.word	0x20001438
 800d924:	0801e257 	.word	0x0801e257

0800d928 <CDC_Itf_DeInit>:
  */
static int8_t CDC_Itf_DeInit(void)
{

  return (USBD_OK);
}
 800d928:	2000      	movs	r0, #0
 800d92a:	4770      	bx	lr

0800d92c <CDC_Itf_Control>:
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Control (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
  switch (cmd)
 800d92c:	2820      	cmp	r0, #32
 800d92e:	d003      	beq.n	800d938 <CDC_Itf_Control+0xc>
 800d930:	2821      	cmp	r0, #33	; 0x21
 800d932:	d00b      	beq.n	800d94c <CDC_Itf_Control+0x20>
  default:
    break;
  }
  
  return (USBD_OK);
}
 800d934:	2000      	movs	r0, #0
 800d936:	4770      	bx	lr
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800d938:	4b0d      	ldr	r3, [pc, #52]	; (800d970 <CDC_Itf_Control+0x44>)
 800d93a:	680a      	ldr	r2, [r1, #0]
 800d93c:	601a      	str	r2, [r3, #0]
    LineCoding.format     = pbuf[4];
 800d93e:	790a      	ldrb	r2, [r1, #4]
 800d940:	711a      	strb	r2, [r3, #4]
    LineCoding.paritytype = pbuf[5];
 800d942:	794a      	ldrb	r2, [r1, #5]
 800d944:	715a      	strb	r2, [r3, #5]
    LineCoding.datatype   = pbuf[6];
 800d946:	798a      	ldrb	r2, [r1, #6]
 800d948:	719a      	strb	r2, [r3, #6]
    break;
 800d94a:	e7f3      	b.n	800d934 <CDC_Itf_Control+0x8>
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800d94c:	4b08      	ldr	r3, [pc, #32]	; (800d970 <CDC_Itf_Control+0x44>)
 800d94e:	681a      	ldr	r2, [r3, #0]
 800d950:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	0a12      	lsrs	r2, r2, #8
 800d956:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800d958:	885a      	ldrh	r2, [r3, #2]
 800d95a:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800d95c:	78da      	ldrb	r2, [r3, #3]
 800d95e:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 800d960:	791a      	ldrb	r2, [r3, #4]
 800d962:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 800d964:	795a      	ldrb	r2, [r3, #5]
 800d966:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;     
 800d968:	799b      	ldrb	r3, [r3, #6]
 800d96a:	718b      	strb	r3, [r1, #6]
    break;
 800d96c:	e7e2      	b.n	800d934 <CDC_Itf_Control+0x8>
 800d96e:	bf00      	nop
 800d970:	20000b10 	.word	0x20000b10

0800d974 <CDC_Itf_Receive>:
  * @param  Buf: Buffer of data to be transmitted
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Receive(uint8_t* Buf, uint32_t *Len)
{
 800d974:	b508      	push	{r3, lr}
  /* Write data into Terminal Rx buffer */
  TerminalInputBufferWrite(INDEX_USB, (char *)Buf, *Len);
 800d976:	680a      	ldr	r2, [r1, #0]
 800d978:	4601      	mov	r1, r0
 800d97a:	2000      	movs	r0, #0
 800d97c:	f7fc fd4e 	bl	800a41c <TerminalInputBufferWrite>
  USBD_CDC_ReceivePacket(&hUSBDDevice);  /* Reset for next packet */
 800d980:	4802      	ldr	r0, [pc, #8]	; (800d98c <CDC_Itf_Receive+0x18>)
 800d982:	f7ff fe34 	bl	800d5ee <USBD_CDC_ReceivePacket>
  return (USBD_OK);
}
 800d986:	2000      	movs	r0, #0
 800d988:	bd08      	pop	{r3, pc}
 800d98a:	bf00      	nop
 800d98c:	20000e50 	.word	0x20000e50

0800d990 <CDC_Itf_Init>:
{
 800d990:	b508      	push	{r3, lr}
  USBD_CDC_SetRxBuffer(&hUSBDDevice, UserRxBuffer);
 800d992:	4903      	ldr	r1, [pc, #12]	; (800d9a0 <CDC_Itf_Init+0x10>)
 800d994:	4803      	ldr	r0, [pc, #12]	; (800d9a4 <CDC_Itf_Init+0x14>)
 800d996:	f7ff fe0d 	bl	800d5b4 <USBD_CDC_SetRxBuffer>
}
 800d99a:	2000      	movs	r0, #0
 800d99c:	bd08      	pop	{r3, pc}
 800d99e:	bf00      	nop
 800d9a0:	20001538 	.word	0x20001538
 800d9a4:	20000e50 	.word	0x20000e50

0800d9a8 <SPIx_Init>:
  * @brief SPIx Bus initialization
  * @param None
  * @retval None
  */
static void SPIx_Init(void)
{
 800d9a8:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800d9aa:	4c1e      	ldr	r4, [pc, #120]	; (800da24 <SPIx_Init+0x7c>)
{
 800d9ac:	b086      	sub	sp, #24
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	f7ff fa2b 	bl	800ce0a <HAL_SPI_GetState>
 800d9b4:	2800      	cmp	r0, #0
 800d9b6:	d133      	bne.n	800da20 <SPIx_Init+0x78>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 800d9b8:	4b1b      	ldr	r3, [pc, #108]	; (800da28 <SPIx_Init+0x80>)
 800d9ba:	6023      	str	r3, [r4, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800d9bc:	2318      	movs	r3, #24
 800d9be:	61e3      	str	r3, [r4, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial = 7;
 800d9c0:	2307      	movs	r3, #7
 800d9c2:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800d9c4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800d9c8:	60e3      	str	r3, [r4, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800d9ca:	f44f 7300 	mov.w	r3, #512	; 0x200
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d9ce:	e9c4 0004 	strd	r0, r0, [r4, #16]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800d9d2:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 800d9d4:	f44f 7382 	mov.w	r3, #260	; 0x104
 800d9d8:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 800d9da:	4b14      	ldr	r3, [pc, #80]	; (800da2c <SPIx_Init+0x84>)
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 800d9dc:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800d9de:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d9e0:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 800d9e2:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 800d9e4:	699a      	ldr	r2, [r3, #24]
 800d9e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d9ea:	619a      	str	r2, [r3, #24]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800d9ec:	695a      	ldr	r2, [r3, #20]
 800d9ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d9f2:	615a      	str	r2, [r3, #20]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800d9f4:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
 800d9f8:	2302      	movs	r3, #2
 800d9fa:	e9cd c301 	strd	ip, r3, [sp, #4]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 800d9fe:	9003      	str	r0, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800da00:	f04f 0e03 	mov.w	lr, #3
 800da04:	2305      	movs	r3, #5
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800da06:	a901      	add	r1, sp, #4
 800da08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800da0c:	e9cd e304 	strd	lr, r3, [sp, #16]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800da10:	f7fd fd4a 	bl	800b4a8 <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 800da14:	4620      	mov	r0, r4
}
 800da16:	b006      	add	sp, #24
 800da18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_SPI_Init(&SpiHandle);
 800da1c:	f7ff b855 	b.w	800caca <HAL_SPI_Init>
}
 800da20:	b006      	add	sp, #24
 800da22:	bd10      	pop	{r4, pc}
 800da24:	20001d70 	.word	0x20001d70
 800da28:	40013000 	.word	0x40013000
 800da2c:	40021000 	.word	0x40021000

0800da30 <SPIx_WriteRead>:
{
 800da30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t receivedbyte = 0;
 800da32:	2300      	movs	r3, #0
 800da34:	f88d 3017 	strb.w	r3, [sp, #23]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800da38:	4b0b      	ldr	r3, [pc, #44]	; (800da68 <SPIx_WriteRead+0x38>)
{
 800da3a:	f88d 000f 	strb.w	r0, [sp, #15]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	9300      	str	r3, [sp, #0]
 800da42:	480a      	ldr	r0, [pc, #40]	; (800da6c <SPIx_WriteRead+0x3c>)
 800da44:	2301      	movs	r3, #1
 800da46:	f10d 0217 	add.w	r2, sp, #23
 800da4a:	f10d 010f 	add.w	r1, sp, #15
 800da4e:	f7ff f8a4 	bl	800cb9a <HAL_SPI_TransmitReceive>
 800da52:	b120      	cbz	r0, 800da5e <SPIx_WriteRead+0x2e>
  HAL_SPI_DeInit(&SpiHandle);
 800da54:	4805      	ldr	r0, [pc, #20]	; (800da6c <SPIx_WriteRead+0x3c>)
 800da56:	f7ff f88b 	bl	800cb70 <HAL_SPI_DeInit>
  SPIx_Init();
 800da5a:	f7ff ffa5 	bl	800d9a8 <SPIx_Init>
}
 800da5e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800da62:	b007      	add	sp, #28
 800da64:	f85d fb04 	ldr.w	pc, [sp], #4
 800da68:	20000b50 	.word	0x20000b50
 800da6c:	20001d70 	.word	0x20001d70

0800da70 <I2Cx_Init>:
{
 800da70:	b530      	push	{r4, r5, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800da72:	4c18      	ldr	r4, [pc, #96]	; (800dad4 <I2Cx_Init+0x64>)
{
 800da74:	b087      	sub	sp, #28
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800da76:	4620      	mov	r0, r4
 800da78:	f7fe ff72 	bl	800c960 <HAL_I2C_GetState>
 800da7c:	bb38      	cbnz	r0, 800dace <I2Cx_Init+0x5e>
    I2cHandle.Instance = DISCOVERY_I2Cx;
 800da7e:	4b16      	ldr	r3, [pc, #88]	; (800dad8 <I2Cx_Init+0x68>)
 800da80:	6023      	str	r3, [r4, #0]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800da82:	2132      	movs	r1, #50	; 0x32
 800da84:	2301      	movs	r3, #1
 800da86:	e9c4 1302 	strd	r1, r3, [r4, #8]
    I2cHandle.Init.OwnAddress2 = 0;
 800da8a:	e9c4 0004 	strd	r0, r0, [r4, #16]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 800da8e:	e9c4 0007 	strd	r0, r0, [r4, #28]
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800da92:	4d12      	ldr	r5, [pc, #72]	; (800dadc <I2Cx_Init+0x6c>)
 800da94:	696b      	ldr	r3, [r5, #20]
 800da96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800da9a:	616b      	str	r3, [r5, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800da9c:	20c0      	movs	r0, #192	; 0xc0
 800da9e:	2302      	movs	r3, #2
 800daa0:	e9cd 0301 	strd	r0, r3, [sp, #4]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800daa4:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 800daa6:	2304      	movs	r3, #4
 800daa8:	f04f 0c03 	mov.w	ip, #3
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800daac:	eb0d 0103 	add.w	r1, sp, r3
 800dab0:	480b      	ldr	r0, [pc, #44]	; (800dae0 <I2Cx_Init+0x70>)
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 800dab2:	e9cd c304 	strd	ip, r3, [sp, #16]
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800dab6:	f7fd fcf7 	bl	800b4a8 <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 800daba:	69eb      	ldr	r3, [r5, #28]
    HAL_I2C_Init(&I2cHandle);
 800dabc:	4620      	mov	r0, r4
  DISCOVERY_I2Cx_CLK_ENABLE();
 800dabe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dac2:	61eb      	str	r3, [r5, #28]
}
 800dac4:	b007      	add	sp, #28
 800dac6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_I2C_Init(&I2cHandle);
 800daca:	f7fe bde0 	b.w	800c68e <HAL_I2C_Init>
}
 800dace:	b007      	add	sp, #28
 800dad0:	bd30      	pop	{r4, r5, pc}
 800dad2:	bf00      	nop
 800dad4:	20001d38 	.word	0x20001d38
 800dad8:	40005400 	.word	0x40005400
 800dadc:	40021000 	.word	0x40021000
 800dae0:	48000400 	.word	0x48000400

0800dae4 <BSP_LED_Init>:
{
 800dae4:	b570      	push	{r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 800dae6:	4604      	mov	r4, r0
{
 800dae8:	b086      	sub	sp, #24
  LEDx_GPIO_CLK_ENABLE(Led);
 800daea:	b928      	cbnz	r0, 800daf8 <BSP_LED_Init+0x14>
 800daec:	4a15      	ldr	r2, [pc, #84]	; (800db44 <BSP_LED_Init+0x60>)
 800daee:	6953      	ldr	r3, [r2, #20]
 800daf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800daf4:	6153      	str	r3, [r2, #20]
 800daf6:	e00d      	b.n	800db14 <BSP_LED_Init+0x30>
 800daf8:	2801      	cmp	r0, #1
 800dafa:	d0f7      	beq.n	800daec <BSP_LED_Init+0x8>
 800dafc:	2802      	cmp	r0, #2
 800dafe:	d0f5      	beq.n	800daec <BSP_LED_Init+0x8>
 800db00:	2803      	cmp	r0, #3
 800db02:	d0f3      	beq.n	800daec <BSP_LED_Init+0x8>
 800db04:	2804      	cmp	r0, #4
 800db06:	d0f1      	beq.n	800daec <BSP_LED_Init+0x8>
 800db08:	2805      	cmp	r0, #5
 800db0a:	d0ef      	beq.n	800daec <BSP_LED_Init+0x8>
 800db0c:	2806      	cmp	r0, #6
 800db0e:	d0ed      	beq.n	800daec <BSP_LED_Init+0x8>
 800db10:	2807      	cmp	r0, #7
 800db12:	d0eb      	beq.n	800daec <BSP_LED_Init+0x8>
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800db14:	4b0c      	ldr	r3, [pc, #48]	; (800db48 <BSP_LED_Init+0x64>)
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800db16:	4d0d      	ldr	r5, [pc, #52]	; (800db4c <BSP_LED_Init+0x68>)
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800db18:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800db1c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800db20:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800db22:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800db24:	e9cd 3302 	strd	r3, r3, [sp, #8]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800db28:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800db2a:	2303      	movs	r3, #3
 800db2c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800db2e:	f7fd fcbb 	bl	800b4a8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800db32:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800db36:	2200      	movs	r2, #0
 800db38:	4631      	mov	r1, r6
 800db3a:	f7fd fd7f 	bl	800b63c <HAL_GPIO_WritePin>
}
 800db3e:	b006      	add	sp, #24
 800db40:	bd70      	pop	{r4, r5, r6, pc}
 800db42:	bf00      	nop
 800db44:	40021000 	.word	0x40021000
 800db48:	0801e27c 	.word	0x0801e27c
 800db4c:	20000b30 	.word	0x20000b30

0800db50 <BSP_LED_On>:
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 800db50:	4b04      	ldr	r3, [pc, #16]	; (800db64 <BSP_LED_On+0x14>)
 800db52:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800db56:	4b04      	ldr	r3, [pc, #16]	; (800db68 <BSP_LED_On+0x18>)
 800db58:	2201      	movs	r2, #1
 800db5a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800db5e:	f7fd bd6d 	b.w	800b63c <HAL_GPIO_WritePin>
 800db62:	bf00      	nop
 800db64:	0801e27c 	.word	0x0801e27c
 800db68:	20000b30 	.word	0x20000b30

0800db6c <BSP_LED_Off>:
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800db6c:	4b04      	ldr	r3, [pc, #16]	; (800db80 <BSP_LED_Off+0x14>)
 800db6e:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800db72:	4b04      	ldr	r3, [pc, #16]	; (800db84 <BSP_LED_Off+0x18>)
 800db74:	2200      	movs	r2, #0
 800db76:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800db7a:	f7fd bd5f 	b.w	800b63c <HAL_GPIO_WritePin>
 800db7e:	bf00      	nop
 800db80:	0801e27c 	.word	0x0801e27c
 800db84:	20000b30 	.word	0x20000b30

0800db88 <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800db88:	4b03      	ldr	r3, [pc, #12]	; (800db98 <BSP_LED_Toggle+0x10>)
 800db8a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800db8e:	4b03      	ldr	r3, [pc, #12]	; (800db9c <BSP_LED_Toggle+0x14>)
 800db90:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800db94:	f7fd bd57 	b.w	800b646 <HAL_GPIO_TogglePin>
 800db98:	0801e27c 	.word	0x0801e27c
 800db9c:	20000b30 	.word	0x20000b30

0800dba0 <BSP_PB_Init>:
{
 800dba0:	b510      	push	{r4, lr}
 800dba2:	4b19      	ldr	r3, [pc, #100]	; (800dc08 <BSP_PB_Init+0x68>)
 800dba4:	b086      	sub	sp, #24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800dba6:	b918      	cbnz	r0, 800dbb0 <BSP_PB_Init+0x10>
 800dba8:	695a      	ldr	r2, [r3, #20]
 800dbaa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800dbae:	615a      	str	r2, [r3, #20]
  __SYSCFG_CLK_ENABLE();
 800dbb0:	699a      	ldr	r2, [r3, #24]
 800dbb2:	f042 0201 	orr.w	r2, r2, #1
 800dbb6:	619a      	str	r2, [r3, #24]
  if (ButtonMode == BUTTON_MODE_GPIO)
 800dbb8:	b971      	cbnz	r1, 800dbd8 <BSP_PB_Init+0x38>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800dbba:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dbbc:	e9cd 3101 	strd	r3, r1, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dbc0:	2202      	movs	r2, #2
 800dbc2:	2303      	movs	r3, #3
 800dbc4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800dbc8:	4b10      	ldr	r3, [pc, #64]	; (800dc0c <BSP_PB_Init+0x6c>)
 800dbca:	a901      	add	r1, sp, #4
 800dbcc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800dbd0:	f7fd fc6a 	bl	800b4a8 <HAL_GPIO_Init>
}
 800dbd4:	b006      	add	sp, #24
 800dbd6:	bd10      	pop	{r4, pc}
  if (ButtonMode == BUTTON_MODE_EXTI)
 800dbd8:	2901      	cmp	r1, #1
 800dbda:	d1fb      	bne.n	800dbd4 <BSP_PB_Init+0x34>
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dbdc:	2400      	movs	r4, #0
 800dbde:	2303      	movs	r3, #3
 800dbe0:	e9cd 4303 	strd	r4, r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 800dbe4:	4b0a      	ldr	r3, [pc, #40]	; (800dc10 <BSP_PB_Init+0x70>)
 800dbe6:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800dbe8:	4b08      	ldr	r3, [pc, #32]	; (800dc0c <BSP_PB_Init+0x6c>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800dbea:	9101      	str	r1, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800dbec:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800dbf0:	a901      	add	r1, sp, #4
 800dbf2:	f7fd fc59 	bl	800b4a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800dbf6:	4622      	mov	r2, r4
 800dbf8:	210f      	movs	r1, #15
 800dbfa:	2006      	movs	r0, #6
 800dbfc:	f7fd fc00 	bl	800b400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800dc00:	2006      	movs	r0, #6
 800dc02:	f7fd fc31 	bl	800b468 <HAL_NVIC_EnableIRQ>
}
 800dc06:	e7e5      	b.n	800dbd4 <BSP_PB_Init+0x34>
 800dc08:	40021000 	.word	0x40021000
 800dc0c:	20000b28 	.word	0x20000b28
 800dc10:	10110000 	.word	0x10110000

0800dc14 <BSP_PB_GetState>:
{
 800dc14:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800dc16:	4b03      	ldr	r3, [pc, #12]	; (800dc24 <BSP_PB_GetState+0x10>)
 800dc18:	2101      	movs	r1, #1
 800dc1a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800dc1e:	f7fd fd07 	bl	800b630 <HAL_GPIO_ReadPin>
}
 800dc22:	bd08      	pop	{r3, pc}
 800dc24:	20000b28 	.word	0x20000b28

0800dc28 <GYRO_IO_Init>:
  * @brief  Configures the GYROSCOPE SPI interface.
  * @param  None
  * @retval None
  */
void GYRO_IO_Init(void)
{
 800dc28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 800dc2c:	4c14      	ldr	r4, [pc, #80]	; (800dc80 <GYRO_IO_Init+0x58>)
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800dc2e:	4815      	ldr	r0, [pc, #84]	; (800dc84 <GYRO_IO_Init+0x5c>)
  GYRO_CS_GPIO_CLK_ENABLE();  
 800dc30:	6963      	ldr	r3, [r4, #20]
{
 800dc32:	b086      	sub	sp, #24
  GYRO_CS_GPIO_CLK_ENABLE();  
 800dc34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dc38:	6163      	str	r3, [r4, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800dc3a:	2500      	movs	r5, #0
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800dc3c:	2708      	movs	r7, #8
 800dc3e:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800dc42:	2603      	movs	r6, #3
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800dc44:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800dc46:	e9cd 7801 	strd	r7, r8, [sp, #4]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800dc4a:	e9cd 5603 	strd	r5, r6, [sp, #12]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800dc4e:	f7fd fc2b 	bl	800b4a8 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 800dc52:	4642      	mov	r2, r8
 800dc54:	4639      	mov	r1, r7
 800dc56:	480b      	ldr	r0, [pc, #44]	; (800dc84 <GYRO_IO_Init+0x5c>)
 800dc58:	f7fd fcf0 	bl	800b63c <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 800dc5c:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800dc5e:	4809      	ldr	r0, [pc, #36]	; (800dc84 <GYRO_IO_Init+0x5c>)
  GYRO_INT_GPIO_CLK_ENABLE();
 800dc60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dc64:	6163      	str	r3, [r4, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800dc66:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 800dc68:	2306      	movs	r3, #6
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800dc6a:	e9cd 3501 	strd	r3, r5, [sp, #4]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 800dc6e:	e9cd 5603 	strd	r5, r6, [sp, #12]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800dc72:	f7fd fc19 	bl	800b4a8 <HAL_GPIO_Init>
  
  SPIx_Init();
 800dc76:	f7ff fe97 	bl	800d9a8 <SPIx_Init>
}
 800dc7a:	b006      	add	sp, #24
 800dc7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc80:	40021000 	.word	0x40021000
 800dc84:	48001000 	.word	0x48001000

0800dc88 <GYRO_IO_Write>:
{
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 800dc88:	2a01      	cmp	r2, #1
{
 800dc8a:	b570      	push	{r4, r5, r6, lr}
 800dc8c:	460e      	mov	r6, r1
 800dc8e:	4605      	mov	r5, r0
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800dc90:	bf88      	it	hi
 800dc92:	f041 0640 	orrhi.w	r6, r1, #64	; 0x40
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800dc96:	480c      	ldr	r0, [pc, #48]	; (800dcc8 <GYRO_IO_Write+0x40>)
{
 800dc98:	4614      	mov	r4, r2
  GYRO_CS_LOW();
 800dc9a:	2108      	movs	r1, #8
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	f7fd fccd 	bl	800b63c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800dca2:	4630      	mov	r0, r6
 800dca4:	f7ff fec4 	bl	800da30 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800dca8:	442c      	add	r4, r5
 800dcaa:	42a5      	cmp	r5, r4
 800dcac:	d106      	bne.n	800dcbc <GYRO_IO_Write+0x34>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
}
 800dcae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GYRO_CS_HIGH();
 800dcb2:	4805      	ldr	r0, [pc, #20]	; (800dcc8 <GYRO_IO_Write+0x40>)
 800dcb4:	2201      	movs	r2, #1
 800dcb6:	2108      	movs	r1, #8
 800dcb8:	f7fd bcc0 	b.w	800b63c <HAL_GPIO_WritePin>
    SPIx_WriteRead(*pBuffer);
 800dcbc:	f815 0b01 	ldrb.w	r0, [r5], #1
 800dcc0:	f7ff feb6 	bl	800da30 <SPIx_WriteRead>
    pBuffer++;
 800dcc4:	e7f1      	b.n	800dcaa <GYRO_IO_Write+0x22>
 800dcc6:	bf00      	nop
 800dcc8:	48001000 	.word	0x48001000

0800dccc <GYRO_IO_Read>:
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
  if(NumByteToRead > 0x01)
 800dccc:	2a01      	cmp	r2, #1
{  
 800dcce:	b570      	push	{r4, r5, r6, lr}
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800dcd0:	bf8c      	ite	hi
 800dcd2:	f041 04c0 	orrhi.w	r4, r1, #192	; 0xc0
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 800dcd6:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
{  
 800dcda:	4606      	mov	r6, r0
 800dcdc:	4615      	mov	r5, r2
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800dcde:	480c      	ldr	r0, [pc, #48]	; (800dd10 <GYRO_IO_Read+0x44>)
 800dce0:	2200      	movs	r2, #0
 800dce2:	2108      	movs	r1, #8
 800dce4:	f7fd fcaa 	bl	800b63c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800dce8:	4620      	mov	r0, r4
 800dcea:	f7ff fea1 	bl	800da30 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800dcee:	4435      	add	r5, r6
 800dcf0:	42ae      	cmp	r6, r5
 800dcf2:	d106      	bne.n	800dd02 <GYRO_IO_Read+0x36>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
}  
 800dcf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GYRO_CS_HIGH();
 800dcf8:	4805      	ldr	r0, [pc, #20]	; (800dd10 <GYRO_IO_Read+0x44>)
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	2108      	movs	r1, #8
 800dcfe:	f7fd bc9d 	b.w	800b63c <HAL_GPIO_WritePin>
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 800dd02:	2000      	movs	r0, #0
 800dd04:	f7ff fe94 	bl	800da30 <SPIx_WriteRead>
 800dd08:	f806 0b01 	strb.w	r0, [r6], #1
    pBuffer++;
 800dd0c:	e7f0      	b.n	800dcf0 <GYRO_IO_Read+0x24>
 800dd0e:	bf00      	nop
 800dd10:	48001000 	.word	0x48001000

0800dd14 <COMPASSACCELERO_IO_Init>:
void COMPASSACCELERO_IO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 800dd14:	4b16      	ldr	r3, [pc, #88]	; (800dd70 <COMPASSACCELERO_IO_Init+0x5c>)
 800dd16:	695a      	ldr	r2, [r3, #20]
{
 800dd18:	b570      	push	{r4, r5, r6, lr}
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 800dd1a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800dd1e:	615a      	str	r2, [r3, #20]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800dd20:	695a      	ldr	r2, [r3, #20]
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800dd22:	4d14      	ldr	r5, [pc, #80]	; (800dd74 <COMPASSACCELERO_IO_Init+0x60>)
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800dd24:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
{
 800dd28:	b086      	sub	sp, #24
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800dd2a:	615a      	str	r2, [r3, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800dd2c:	2304      	movs	r3, #4
 800dd2e:	2400      	movs	r4, #0
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800dd30:	eb0d 0103 	add.w	r1, sp, r3
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800dd34:	2603      	movs	r6, #3
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800dd36:	4628      	mov	r0, r5
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800dd38:	e9cd 3401 	strd	r3, r4, [sp, #4]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800dd3c:	9403      	str	r4, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800dd3e:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800dd40:	f7fd fbb2 	bl	800b4a8 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x00, 0x00);
 800dd44:	4622      	mov	r2, r4
 800dd46:	4621      	mov	r1, r4
 800dd48:	2008      	movs	r0, #8
 800dd4a:	f7fd fb59 	bl	800b400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 800dd4e:	2008      	movs	r0, #8
 800dd50:	f7fd fb8a 	bl	800b468 <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800dd54:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800dd56:	a901      	add	r1, sp, #4
 800dd58:	4628      	mov	r0, r5
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800dd5a:	e9cd 3401 	strd	r3, r4, [sp, #4]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800dd5e:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800dd62:	f7fd fba1 	bl	800b4a8 <HAL_GPIO_Init>
  
  I2Cx_Init();
 800dd66:	f7ff fe83 	bl	800da70 <I2Cx_Init>
}
 800dd6a:	b006      	add	sp, #24
 800dd6c:	bd70      	pop	{r4, r5, r6, pc}
 800dd6e:	bf00      	nop
 800dd70:	40021000 	.word	0x40021000
 800dd74:	48001000 	.word	0x48001000

0800dd78 <COMPASSACCELERO_IO_ITConfig>:
void COMPASSACCELERO_IO_ITConfig(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800dd78:	4a0e      	ldr	r2, [pc, #56]	; (800ddb4 <COMPASSACCELERO_IO_ITConfig+0x3c>)
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800dd7a:	480f      	ldr	r0, [pc, #60]	; (800ddb8 <COMPASSACCELERO_IO_ITConfig+0x40>)
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800dd7c:	6953      	ldr	r3, [r2, #20]
{
 800dd7e:	b510      	push	{r4, lr}
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800dd80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dd84:	6153      	str	r3, [r2, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800dd86:	4b0d      	ldr	r3, [pc, #52]	; (800ddbc <COMPASSACCELERO_IO_ITConfig+0x44>)
{
 800dd88:	b086      	sub	sp, #24
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800dd8a:	2230      	movs	r2, #48	; 0x30
 800dd8c:	e9cd 2301 	strd	r2, r3, [sp, #4]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800dd90:	2400      	movs	r4, #0
 800dd92:	2303      	movs	r3, #3
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800dd94:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800dd96:	e9cd 4303 	strd	r4, r3, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800dd9a:	f7fd fb85 	bl	800b4a8 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x00, 0x00);
 800dd9e:	4622      	mov	r2, r4
 800dda0:	4621      	mov	r1, r4
 800dda2:	200a      	movs	r0, #10
 800dda4:	f7fd fb2c 	bl	800b400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 800dda8:	200a      	movs	r0, #10
 800ddaa:	f7fd fb5d 	bl	800b468 <HAL_NVIC_EnableIRQ>
  
}
 800ddae:	b006      	add	sp, #24
 800ddb0:	bd10      	pop	{r4, pc}
 800ddb2:	bf00      	nop
 800ddb4:	40021000 	.word	0x40021000
 800ddb8:	48001000 	.word	0x48001000
 800ddbc:	10110000 	.word	0x10110000

0800ddc0 <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value : Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 800ddc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800ddc2:	4b0c      	ldr	r3, [pc, #48]	; (800ddf4 <COMPASSACCELERO_IO_Write+0x34>)
 800ddc4:	f88d 2017 	strb.w	r2, [sp, #23]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	9302      	str	r3, [sp, #8]
 800ddcc:	f10d 0217 	add.w	r2, sp, #23
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	9200      	str	r2, [sp, #0]
 800ddd4:	9301      	str	r3, [sp, #4]
 800ddd6:	460a      	mov	r2, r1
 800ddd8:	4601      	mov	r1, r0
 800ddda:	4807      	ldr	r0, [pc, #28]	; (800ddf8 <COMPASSACCELERO_IO_Write+0x38>)
 800dddc:	f7fe fcb7 	bl	800c74e <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 800dde0:	b120      	cbz	r0, 800ddec <COMPASSACCELERO_IO_Write+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 800dde2:	4805      	ldr	r0, [pc, #20]	; (800ddf8 <COMPASSACCELERO_IO_Write+0x38>)
 800dde4:	f7fe fc9c 	bl	800c720 <HAL_I2C_DeInit>
  I2Cx_Init();
 800dde8:	f7ff fe42 	bl	800da70 <I2Cx_Init>
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
}
 800ddec:	b007      	add	sp, #28
 800ddee:	f85d fb04 	ldr.w	pc, [sp], #4
 800ddf2:	bf00      	nop
 800ddf4:	20000b2c 	.word	0x20000b2c
 800ddf8:	20001d38 	.word	0x20001d38

0800ddfc <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr : specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 800ddfc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 800ddfe:	2300      	movs	r3, #0
 800de00:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800de04:	4b0b      	ldr	r3, [pc, #44]	; (800de34 <COMPASSACCELERO_IO_Read+0x38>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	9302      	str	r3, [sp, #8]
{
 800de0a:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800de0c:	2301      	movs	r3, #1
 800de0e:	f10d 0117 	add.w	r1, sp, #23
 800de12:	9100      	str	r1, [sp, #0]
 800de14:	9301      	str	r3, [sp, #4]
 800de16:	4601      	mov	r1, r0
 800de18:	4807      	ldr	r0, [pc, #28]	; (800de38 <COMPASSACCELERO_IO_Read+0x3c>)
 800de1a:	f7fe fd1a 	bl	800c852 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 800de1e:	b120      	cbz	r0, 800de2a <COMPASSACCELERO_IO_Read+0x2e>
  HAL_I2C_DeInit(&I2cHandle);
 800de20:	4805      	ldr	r0, [pc, #20]	; (800de38 <COMPASSACCELERO_IO_Read+0x3c>)
 800de22:	f7fe fc7d 	bl	800c720 <HAL_I2C_DeInit>
  I2Cx_Init();
 800de26:	f7ff fe23 	bl	800da70 <I2Cx_Init>
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
}
 800de2a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800de2e:	b007      	add	sp, #28
 800de30:	f85d fb04 	ldr.w	pc, [sp], #4
 800de34:	20000b2c 	.word	0x20000b2c
 800de38:	20001d38 	.word	0x20001d38

0800de3c <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 800de3c:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = ACCELERO_ERROR;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 800de3e:	4c0c      	ldr	r4, [pc, #48]	; (800de70 <BSP_ACCELERO_Init+0x34>)
 800de40:	68a3      	ldr	r3, [r4, #8]
 800de42:	4798      	blx	r3
 800de44:	2833      	cmp	r0, #51	; 0x33
 800de46:	d10b      	bne.n	800de60 <BSP_ACCELERO_Init+0x24>
    ret = ACCELERO_OK;
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 800de48:	4d0a      	ldr	r5, [pc, #40]	; (800de74 <BSP_ACCELERO_Init+0x38>)

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800de4a:	6823      	ldr	r3, [r4, #0]
    AccelerometerDrv = &Lsm303agrDrv;
 800de4c:	602c      	str	r4, [r5, #0]
    AccelerometerDrv->Init(ctrl);
 800de4e:	f640 0047 	movw	r0, #2119	; 0x847
 800de52:	4798      	blx	r3
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
                      Accelero_FilterStructure.HighPassFilter_AOI2);

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 800de54:	682b      	ldr	r3, [r5, #0]
 800de56:	2090      	movs	r0, #144	; 0x90
 800de58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de5a:	4798      	blx	r3

    ret = ACCELERO_OK;
 800de5c:	2000      	movs	r0, #0
  }

  return ret;
}
 800de5e:	bd38      	pop	{r3, r4, r5, pc}
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 800de60:	4c05      	ldr	r4, [pc, #20]	; (800de78 <BSP_ACCELERO_Init+0x3c>)
 800de62:	68a3      	ldr	r3, [r4, #8]
 800de64:	4798      	blx	r3
 800de66:	2833      	cmp	r0, #51	; 0x33
 800de68:	d0ee      	beq.n	800de48 <BSP_ACCELERO_Init+0xc>
  uint8_t ret = ACCELERO_ERROR;
 800de6a:	2001      	movs	r0, #1
 800de6c:	e7f7      	b.n	800de5e <BSP_ACCELERO_Init+0x22>
 800de6e:	bf00      	nop
 800de70:	20000b54 	.word	0x20000b54
 800de74:	20001dd0 	.word	0x20001dd0
 800de78:	20000bf0 	.word	0x20000bf0

0800de7c <BSP_ACCELERO_GetXYZ>:
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
  if(AccelerometerDrv->GetXYZ!= NULL)
 800de7c:	4b02      	ldr	r3, [pc, #8]	; (800de88 <BSP_ACCELERO_GetXYZ+0xc>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de82:	b103      	cbz	r3, 800de86 <BSP_ACCELERO_GetXYZ+0xa>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 800de84:	4718      	bx	r3
  }
}
 800de86:	4770      	bx	lr
 800de88:	20001dd0 	.word	0x20001dd0

0800de8c <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 800de8c:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800de8e:	4c16      	ldr	r4, [pc, #88]	; (800dee8 <BSP_GYRO_Init+0x5c>)
 800de90:	68a3      	ldr	r3, [r4, #8]
 800de92:	4798      	blx	r3
 800de94:	28d4      	cmp	r0, #212	; 0xd4
 800de96:	d10f      	bne.n	800deb8 <BSP_GYRO_Init+0x2c>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 800de98:	4d14      	ldr	r5, [pc, #80]	; (800deec <BSP_GYRO_Init+0x60>)

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
                         Gyro_InitStructure.Full_Scale) << 8);

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 800de9a:	6823      	ldr	r3, [r4, #0]
    GyroscopeDrv = &L3gd20Drv;
 800de9c:	602c      	str	r4, [r5, #0]
    GyroscopeDrv->Init(ctrl);
 800de9e:	f241 003f 	movw	r0, #4159	; 0x103f
 800dea2:	4798      	blx	r3

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 800dea4:	682b      	ldr	r3, [r5, #0]
 800dea6:	2000      	movs	r0, #0
 800dea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800deaa:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 800deac:	682b      	ldr	r3, [r5, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 800deae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deb0:	2010      	movs	r0, #16
 800deb2:	4798      	blx	r3

    ret = GYRO_OK;
 800deb4:	2000      	movs	r0, #0
  }

  return ret;
}
 800deb6:	bd38      	pop	{r3, r4, r5, pc}
  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800deb8:	68a3      	ldr	r3, [r4, #8]
 800deba:	4798      	blx	r3
 800debc:	28d5      	cmp	r0, #213	; 0xd5
 800debe:	d0eb      	beq.n	800de98 <BSP_GYRO_Init+0xc>
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 800dec0:	4d0b      	ldr	r5, [pc, #44]	; (800def0 <BSP_GYRO_Init+0x64>)
 800dec2:	68ab      	ldr	r3, [r5, #8]
 800dec4:	4798      	blx	r3
 800dec6:	28d3      	cmp	r0, #211	; 0xd3
 800dec8:	d10b      	bne.n	800dee2 <BSP_GYRO_Init+0x56>
    GyroscopeDrv = &I3g4250Drv;
 800deca:	4c08      	ldr	r4, [pc, #32]	; (800deec <BSP_GYRO_Init+0x60>)
    GyroscopeDrv->Init(ctrl);
 800decc:	682b      	ldr	r3, [r5, #0]
    GyroscopeDrv = &I3g4250Drv;
 800dece:	6025      	str	r5, [r4, #0]
    GyroscopeDrv->Init(ctrl);
 800ded0:	f241 003f 	movw	r0, #4159	; 0x103f
 800ded4:	4798      	blx	r3
    GyroscopeDrv->FilterConfig(ctrl);
 800ded6:	6823      	ldr	r3, [r4, #0]
 800ded8:	2000      	movs	r0, #0
 800deda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dedc:	4798      	blx	r3
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 800dede:	6823      	ldr	r3, [r4, #0]
 800dee0:	e7e5      	b.n	800deae <BSP_GYRO_Init+0x22>
  uint8_t ret = GYRO_ERROR;
 800dee2:	2001      	movs	r0, #1
 800dee4:	e7e7      	b.n	800deb6 <BSP_GYRO_Init+0x2a>
 800dee6:	bf00      	nop
 800dee8:	20000b88 	.word	0x20000b88
 800deec:	20001dd4 	.word	0x20001dd4
 800def0:	20000bbc 	.word	0x20000bbc

0800def4 <BSP_GYRO_GetXYZ>:
  * @param pfData pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
  if(GyroscopeDrv->GetXYZ!= NULL)
 800def4:	4b02      	ldr	r3, [pc, #8]	; (800df00 <BSP_GYRO_GetXYZ+0xc>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800defa:	b103      	cbz	r3, 800defe <BSP_GYRO_GetXYZ+0xa>
  {
	GyroscopeDrv->GetXYZ(pfData);
 800defc:	4718      	bx	r3
  }
}
 800defe:	4770      	bx	lr
 800df00:	20001dd4 	.word	0x20001dd4

0800df04 <LSM303DLHC_AccDeInit>:
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
}
 800df04:	4770      	bx	lr

0800df06 <LSM303DLHC_AccInit>:
{  
 800df06:	b510      	push	{r4, lr}
 800df08:	4604      	mov	r4, r0
  COMPASSACCELERO_IO_Init();
 800df0a:	f7ff ff03 	bl	800dd14 <COMPASSACCELERO_IO_Init>
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 800df0e:	b2e2      	uxtb	r2, r4
 800df10:	2120      	movs	r1, #32
 800df12:	2032      	movs	r0, #50	; 0x32
 800df14:	f7ff ff54 	bl	800ddc0 <COMPASSACCELERO_IO_Write>
}
 800df18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 800df1c:	2200      	movs	r2, #0
 800df1e:	2123      	movs	r1, #35	; 0x23
 800df20:	2032      	movs	r0, #50	; 0x32
 800df22:	f7ff bf4d 	b.w	800ddc0 <COMPASSACCELERO_IO_Write>

0800df26 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 800df26:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800df28:	f7ff fef4 	bl	800dd14 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
  
  return ctrl;
}
 800df2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 800df30:	210f      	movs	r1, #15
 800df32:	2032      	movs	r0, #50	; 0x32
 800df34:	f7ff bf62 	b.w	800ddfc <COMPASSACCELERO_IO_Read>

0800df38 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 800df38:	b508      	push	{r3, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800df3a:	2124      	movs	r1, #36	; 0x24
 800df3c:	2032      	movs	r0, #50	; 0x32
 800df3e:	f7ff ff5d 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 800df42:	f060 007f 	orn	r0, r0, #127	; 0x7f
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 800df46:	b2c2      	uxtb	r2, r0
}
 800df48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 800df4c:	2124      	movs	r1, #36	; 0x24
 800df4e:	2032      	movs	r0, #50	; 0x32
 800df50:	f7ff bf36 	b.w	800ddc0 <COMPASSACCELERO_IO_Write>

0800df54 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 800df54:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800df56:	2121      	movs	r1, #33	; 0x21
{
 800df58:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800df5a:	2032      	movs	r0, #50	; 0x32
 800df5c:	f7ff ff4e 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0x0C;
 800df60:	f000 000c 	and.w	r0, r0, #12
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800df64:	ea40 0204 	orr.w	r2, r0, r4
 800df68:	2121      	movs	r1, #33	; 0x21
}
 800df6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800df6e:	2032      	movs	r0, #50	; 0x32
 800df70:	f7ff bf26 	b.w	800ddc0 <COMPASSACCELERO_IO_Write>

0800df74 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 800df74:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800df76:	2121      	movs	r1, #33	; 0x21
{
 800df78:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800df7a:	2032      	movs	r0, #50	; 0x32
 800df7c:	f7ff ff3e 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0xF7;
 800df80:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
  
  tmpreg |= HighPassFilterState;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800df84:	ea40 0204 	orr.w	r2, r0, r4
 800df88:	2121      	movs	r1, #33	; 0x21
}
 800df8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800df8e:	2032      	movs	r0, #50	; 0x32
 800df90:	f7ff bf16 	b.w	800ddc0 <COMPASSACCELERO_IO_Write>

0800df94 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 800df94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800df98:	2123      	movs	r1, #35	; 0x23
{
 800df9a:	4605      	mov	r5, r0
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800df9c:	2032      	movs	r0, #50	; 0x32
 800df9e:	f7ff ff2d 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800dfa2:	2124      	movs	r1, #36	; 0x24
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800dfa4:	4606      	mov	r6, r0
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800dfa6:	2032      	movs	r0, #50	; 0x32
 800dfa8:	f7ff ff28 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 800dfac:	2128      	movs	r1, #40	; 0x28
 800dfae:	2032      	movs	r0, #50	; 0x32
 800dfb0:	f7ff ff24 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800dfb4:	2129      	movs	r1, #41	; 0x29
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 800dfb6:	b247      	sxtb	r7, r0
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800dfb8:	2032      	movs	r0, #50	; 0x32
 800dfba:	f7ff ff1f 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800dfbe:	212a      	movs	r1, #42	; 0x2a
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800dfc0:	fa4f f980 	sxtb.w	r9, r0
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800dfc4:	2032      	movs	r0, #50	; 0x32
 800dfc6:	f7ff ff19 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800dfca:	212b      	movs	r1, #43	; 0x2b
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800dfcc:	b244      	sxtb	r4, r0
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800dfce:	2032      	movs	r0, #50	; 0x32
 800dfd0:	f7ff ff14 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800dfd4:	212c      	movs	r1, #44	; 0x2c
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800dfd6:	fa4f fa80 	sxtb.w	sl, r0
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800dfda:	2032      	movs	r0, #50	; 0x32
 800dfdc:	f7ff ff0e 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800dfe0:	212d      	movs	r1, #45	; 0x2d
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800dfe2:	fa4f f880 	sxtb.w	r8, r0
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800dfe6:	2032      	movs	r0, #50	; 0x32
 800dfe8:	f7ff ff08 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 800dfec:	0672      	lsls	r2, r6, #25
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800dfee:	b243      	sxtb	r3, r0
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 800dff0:	d51a      	bpl.n	800e028 <LSM303DLHC_AccReadXYZ+0x94>
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800dff2:	eb09 2707 	add.w	r7, r9, r7, lsl #8
 800dff6:	eb0a 2404 	add.w	r4, sl, r4, lsl #8
 800dffa:	b23f      	sxth	r7, r7
 800dffc:	b224      	sxth	r4, r4
 800dffe:	eb03 2308 	add.w	r3, r3, r8, lsl #8
 800e002:	f006 0030 	and.w	r0, r6, #48	; 0x30
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 800e006:	2820      	cmp	r0, #32
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800e008:	b21a      	sxth	r2, r3
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 800e00a:	d016      	beq.n	800e03a <LSM303DLHC_AccReadXYZ+0xa6>
 800e00c:	2830      	cmp	r0, #48	; 0x30
 800e00e:	d016      	beq.n	800e03e <LSM303DLHC_AccReadXYZ+0xaa>
 800e010:	2810      	cmp	r0, #16
 800e012:	bf14      	ite	ne
 800e014:	2301      	movne	r3, #1
 800e016:	2302      	moveq	r3, #2
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800e018:	435f      	muls	r7, r3
 800e01a:	435c      	muls	r4, r3
 800e01c:	4353      	muls	r3, r2
 800e01e:	802f      	strh	r7, [r5, #0]
 800e020:	806c      	strh	r4, [r5, #2]
 800e022:	80ab      	strh	r3, [r5, #4]
  }
}
 800e024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800e028:	eb07 2709 	add.w	r7, r7, r9, lsl #8
 800e02c:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800e030:	b23f      	sxth	r7, r7
 800e032:	b224      	sxth	r4, r4
 800e034:	eb08 2303 	add.w	r3, r8, r3, lsl #8
 800e038:	e7e3      	b.n	800e002 <LSM303DLHC_AccReadXYZ+0x6e>
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 800e03a:	2304      	movs	r3, #4
 800e03c:	e7ec      	b.n	800e018 <LSM303DLHC_AccReadXYZ+0x84>
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 800e03e:	230c      	movs	r3, #12
 800e040:	e7ea      	b.n	800e018 <LSM303DLHC_AccReadXYZ+0x84>

0800e042 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 800e042:	b510      	push	{r4, lr}
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800e044:	2121      	movs	r1, #33	; 0x21
{
 800e046:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800e048:	2032      	movs	r0, #50	; 0x32
 800e04a:	f7ff fed7 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 800e04e:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
  
  tmpreg |= HighPassFilterClickState;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800e052:	ea40 0204 	orr.w	r2, r0, r4
 800e056:	2121      	movs	r1, #33	; 0x21
}
 800e058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800e05c:	2032      	movs	r0, #50	; 0x32
 800e05e:	f7ff beaf 	b.w	800ddc0 <COMPASSACCELERO_IO_Write>

0800e062 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 800e062:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 800e064:	2122      	movs	r1, #34	; 0x22
{
 800e066:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 800e068:	2032      	movs	r0, #50	; 0x32
 800e06a:	f7ff fec7 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 800e06e:	4320      	orrs	r0, r4
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 800e070:	b2c2      	uxtb	r2, r0
}
 800e072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 800e076:	2122      	movs	r1, #34	; 0x22
 800e078:	2032      	movs	r0, #50	; 0x32
 800e07a:	f7ff bea1 	b.w	800ddc0 <COMPASSACCELERO_IO_Write>

0800e07e <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 800e07e:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 800e080:	2138      	movs	r1, #56	; 0x38
{  
 800e082:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 800e084:	2032      	movs	r0, #50	; 0x32
 800e086:	f7ff feb9 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 800e08a:	4320      	orrs	r0, r4
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 800e08c:	b2c2      	uxtb	r2, r0
 800e08e:	2138      	movs	r1, #56	; 0x38
 800e090:	2032      	movs	r0, #50	; 0x32
 800e092:	f7ff fe95 	bl	800ddc0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 800e096:	220a      	movs	r2, #10
 800e098:	213a      	movs	r1, #58	; 0x3a
 800e09a:	2032      	movs	r0, #50	; 0x32
 800e09c:	f7ff fe90 	bl	800ddc0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 800e0a0:	2205      	movs	r2, #5
 800e0a2:	213b      	movs	r1, #59	; 0x3b
 800e0a4:	2032      	movs	r0, #50	; 0x32
 800e0a6:	f7ff fe8b 	bl	800ddc0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 800e0aa:	2205      	movs	r2, #5
 800e0ac:	213c      	movs	r1, #60	; 0x3c
 800e0ae:	2032      	movs	r0, #50	; 0x32
 800e0b0:	f7ff fe86 	bl	800ddc0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 800e0b4:	2232      	movs	r2, #50	; 0x32
}
 800e0b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 800e0ba:	213d      	movs	r1, #61	; 0x3d
 800e0bc:	4610      	mov	r0, r2
 800e0be:	f7ff be7f 	b.w	800ddc0 <COMPASSACCELERO_IO_Write>

0800e0c2 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 800e0c2:	b508      	push	{r3, lr}
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800e0c4:	f7ff fe58 	bl	800dd78 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 800e0c8:	2080      	movs	r0, #128	; 0x80
 800e0ca:	f7ff ffca 	bl	800e062 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 800e0ce:	2004      	movs	r0, #4
 800e0d0:	f7ff ffb7 	bl	800e042 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
}
 800e0d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 800e0d8:	2010      	movs	r0, #16
 800e0da:	f7ff bfd0 	b.w	800e07e <LSM303DLHC_AccClickITEnable>

0800e0de <L3GD20_DeInit>:
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
}
 800e0de:	4770      	bx	lr

0800e0e0 <L3GD20_Init>:
{  
 800e0e0:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl = 0x00;
 800e0e2:	2300      	movs	r3, #0
{  
 800e0e4:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 800e0e6:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Init();
 800e0ea:	f7ff fd9d 	bl	800dc28 <GYRO_IO_Init>
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800e0ee:	f10d 0007 	add.w	r0, sp, #7
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	2120      	movs	r1, #32
  ctrl = (uint8_t) InitStruct;
 800e0f6:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800e0fa:	f7ff fdc5 	bl	800dc88 <GYRO_IO_Write>
  ctrl = (uint8_t) (InitStruct >> 8);
 800e0fe:	0a24      	lsrs	r4, r4, #8
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800e100:	2201      	movs	r2, #1
 800e102:	2123      	movs	r1, #35	; 0x23
 800e104:	f10d 0007 	add.w	r0, sp, #7
  ctrl = (uint8_t) (InitStruct >> 8);
 800e108:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800e10c:	f7ff fdbc 	bl	800dc88 <GYRO_IO_Write>
}
 800e110:	b002      	add	sp, #8
 800e112:	bd10      	pop	{r4, pc}

0800e114 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 800e114:	b507      	push	{r0, r1, r2, lr}
  uint8_t ctrl = 0x00;

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800e116:	2201      	movs	r2, #1
  ctrl = (uint8_t) InitStruct;
 800e118:	f88d 0007 	strb.w	r0, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800e11c:	2120      	movs	r1, #32
 800e11e:	f10d 0007 	add.w	r0, sp, #7
 800e122:	f7ff fdb1 	bl	800dc88 <GYRO_IO_Write>
}
 800e126:	b003      	add	sp, #12
 800e128:	f85d fb04 	ldr.w	pc, [sp], #4

0800e12c <L3GD20_ReadID>:
{
 800e12c:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Init();
 800e12e:	f7ff fd7b 	bl	800dc28 <GYRO_IO_Init>
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 800e132:	f10d 0007 	add.w	r0, sp, #7
 800e136:	2201      	movs	r2, #1
 800e138:	210f      	movs	r1, #15
 800e13a:	f7ff fdc7 	bl	800dccc <GYRO_IO_Read>
}
 800e13e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e142:	b003      	add	sp, #12
 800e144:	f85d fb04 	ldr.w	pc, [sp], #4

0800e148 <L3GD20_RebootCmd>:
{
 800e148:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800e14a:	2201      	movs	r2, #1
 800e14c:	f10d 0007 	add.w	r0, sp, #7
 800e150:	2124      	movs	r1, #36	; 0x24
 800e152:	f7ff fdbb 	bl	800dccc <GYRO_IO_Read>
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800e156:	f89d 3007 	ldrb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800e15a:	2201      	movs	r2, #1
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800e15c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800e160:	2124      	movs	r1, #36	; 0x24
 800e162:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800e166:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800e16a:	f7ff fd8d 	bl	800dc88 <GYRO_IO_Write>
}
 800e16e:	b003      	add	sp, #12
 800e170:	f85d fb04 	ldr.w	pc, [sp], #4

0800e174 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800e174:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800e176:	2300      	movs	r3, #0
{
 800e178:	4604      	mov	r4, r0
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800e17a:	2201      	movs	r2, #1
 800e17c:	f10d 0006 	add.w	r0, sp, #6
 800e180:	2130      	movs	r1, #48	; 0x30
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800e182:	f88d 3006 	strb.w	r3, [sp, #6]
 800e186:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800e18a:	f7ff fd9f 	bl	800dccc <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800e18e:	f10d 0007 	add.w	r0, sp, #7
 800e192:	2201      	movs	r2, #1
 800e194:	2122      	movs	r1, #34	; 0x22
 800e196:	f7ff fd99 	bl	800dccc <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 800e19a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e19e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e1a2:	f88d 3006 	strb.w	r3, [sp, #6]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
  
  ctrl3 &= 0xDF;
 800e1a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e1aa:	f023 0320 	bic.w	r3, r3, #32
  ctrl3 |= ((uint8_t) Int1Config);   
 800e1ae:	ea43 0004 	orr.w	r0, r3, r4
 800e1b2:	f88d 0007 	strb.w	r0, [sp, #7]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	f10d 0006 	add.w	r0, sp, #6
 800e1bc:	2130      	movs	r1, #48	; 0x30
 800e1be:	f7ff fd63 	bl	800dc88 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800e1c2:	2201      	movs	r2, #1
 800e1c4:	2122      	movs	r1, #34	; 0x22
 800e1c6:	f10d 0007 	add.w	r0, sp, #7
 800e1ca:	f7ff fd5d 	bl	800dc88 <GYRO_IO_Write>
}
 800e1ce:	b002      	add	sp, #8
 800e1d0:	bd10      	pop	{r4, pc}

0800e1d2 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 800e1d2:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800e1d4:	2201      	movs	r2, #1
{  
 800e1d6:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800e1d8:	2122      	movs	r1, #34	; 0x22
 800e1da:	f10d 0007 	add.w	r0, sp, #7
 800e1de:	f7ff fd75 	bl	800dccc <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800e1e2:	b96c      	cbnz	r4, 800e200 <L3GD20_EnableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 800e1e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800e1e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
  }
  else if(IntSel == L3GD20_INT2)
  {
    tmpreg &= 0xF7;
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800e1ec:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800e1f0:	2201      	movs	r2, #1
 800e1f2:	2122      	movs	r1, #34	; 0x22
 800e1f4:	f10d 0007 	add.w	r0, sp, #7
 800e1f8:	f7ff fd46 	bl	800dc88 <GYRO_IO_Write>
}
 800e1fc:	b002      	add	sp, #8
 800e1fe:	bd10      	pop	{r4, pc}
  else if(IntSel == L3GD20_INT2)
 800e200:	2c01      	cmp	r4, #1
 800e202:	d1f5      	bne.n	800e1f0 <L3GD20_EnableIT+0x1e>
    tmpreg &= 0xF7;
 800e204:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e208:	f023 0308 	bic.w	r3, r3, #8
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800e20c:	f043 0308 	orr.w	r3, r3, #8
 800e210:	e7ec      	b.n	800e1ec <L3GD20_EnableIT+0x1a>

0800e212 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 800e212:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800e214:	2201      	movs	r2, #1
{  
 800e216:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800e218:	2122      	movs	r1, #34	; 0x22
 800e21a:	f10d 0007 	add.w	r0, sp, #7
 800e21e:	f7ff fd55 	bl	800dccc <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800e222:	b96c      	cbnz	r4, 800e240 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 800e224:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
  }
  else if(IntSel == L3GD20_INT2)
  {
    tmpreg &= 0xF7;
 800e22c:	f88d 3007 	strb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800e230:	2201      	movs	r2, #1
 800e232:	2122      	movs	r1, #34	; 0x22
 800e234:	f10d 0007 	add.w	r0, sp, #7
 800e238:	f7ff fd26 	bl	800dc88 <GYRO_IO_Write>
}
 800e23c:	b002      	add	sp, #8
 800e23e:	bd10      	pop	{r4, pc}
  else if(IntSel == L3GD20_INT2)
 800e240:	2c01      	cmp	r4, #1
 800e242:	d1f5      	bne.n	800e230 <L3GD20_DisableIT+0x1e>
    tmpreg &= 0xF7;
 800e244:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e248:	f023 0308 	bic.w	r3, r3, #8
 800e24c:	e7ee      	b.n	800e22c <L3GD20_DisableIT+0x1a>

0800e24e <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 800e24e:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800e250:	2201      	movs	r2, #1
{
 800e252:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800e254:	2121      	movs	r1, #33	; 0x21
 800e256:	f10d 0007 	add.w	r0, sp, #7
 800e25a:	f7ff fd37 	bl	800dccc <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 800e25e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e262:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 800e266:	4304      	orrs	r4, r0
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800e268:	2201      	movs	r2, #1
 800e26a:	2121      	movs	r1, #33	; 0x21
 800e26c:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= FilterStruct;
 800e270:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800e274:	f7ff fd08 	bl	800dc88 <GYRO_IO_Write>
}
 800e278:	b002      	add	sp, #8
 800e27a:	bd10      	pop	{r4, pc}

0800e27c <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 800e27c:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800e27e:	2201      	movs	r2, #1
{
 800e280:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800e282:	2124      	movs	r1, #36	; 0x24
 800e284:	f10d 0007 	add.w	r0, sp, #7
 800e288:	f7ff fd20 	bl	800dccc <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 800e28c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e290:	f020 0010 	bic.w	r0, r0, #16
  
  tmpreg |= HighPassFilterState;
 800e294:	4304      	orrs	r4, r0
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800e296:	2201      	movs	r2, #1
 800e298:	2124      	movs	r1, #36	; 0x24
 800e29a:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= HighPassFilterState;
 800e29e:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800e2a2:	f7ff fcf1 	bl	800dc88 <GYRO_IO_Write>
}
 800e2a6:	b002      	add	sp, #8
 800e2a8:	bd10      	pop	{r4, pc}
	...

0800e2ac <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 800e2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2ae:	b087      	sub	sp, #28
  uint8_t tmpbuffer[6] ={0};
 800e2b0:	2300      	movs	r3, #0
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	2123      	movs	r1, #35	; 0x23
{
 800e2b6:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800e2b8:	f10d 0007 	add.w	r0, sp, #7
  uint8_t tmpbuffer[6] ={0};
 800e2bc:	9302      	str	r3, [sp, #8]
 800e2be:	f8ad 300c 	strh.w	r3, [sp, #12]
  uint8_t tmpreg = 0;
 800e2c2:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800e2c6:	f7ff fd01 	bl	800dccc <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800e2ca:	2206      	movs	r2, #6
 800e2cc:	2128      	movs	r1, #40	; 0x28
 800e2ce:	a802      	add	r0, sp, #8
 800e2d0:	f7ff fcfc 	bl	800dccc <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 800e2d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e2d8:	f89d 6008 	ldrb.w	r6, [sp, #8]
 800e2dc:	f89d 7009 	ldrb.w	r7, [sp, #9]
 800e2e0:	f89d 000a 	ldrb.w	r0, [sp, #10]
 800e2e4:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800e2e8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800e2ec:	f89d 100d 	ldrb.w	r1, [sp, #13]
 800e2f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e2f4:	d039      	beq.n	800e36a <L3GD20_ReadXYZAngRate+0xbe>
  }
  else
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 800e2f6:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 800e2fa:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 800e2fe:	f8ad 6010 	strh.w	r6, [sp, #16]
 800e302:	f8ad 0012 	strh.w	r0, [sp, #18]
 800e306:	eb01 2202 	add.w	r2, r1, r2, lsl #8
 800e30a:	f003 0330 	and.w	r3, r3, #48	; 0x30
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800e30e:	2b10      	cmp	r3, #16
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 800e310:	f8ad 2014 	strh.w	r2, [sp, #20]
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800e314:	d034      	beq.n	800e380 <L3GD20_ReadXYZAngRate+0xd4>
 800e316:	2b20      	cmp	r3, #32
 800e318:	d035      	beq.n	800e386 <L3GD20_ReadXYZAngRate+0xda>
 800e31a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800e38c <L3GD20_ReadXYZAngRate+0xe0>
 800e31e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800e390 <L3GD20_ReadXYZAngRate+0xe4>
 800e322:	2b00      	cmp	r3, #0
 800e324:	bf08      	it	eq
 800e326:	eef0 7a47 	vmoveq.f32	s15, s14
    break;
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 800e32a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800e32e:	ee07 3a10 	vmov	s14, r3
 800e332:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e336:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800e33a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e33e:	ed84 7a00 	vstr	s14, [r4]
 800e342:	ee07 3a10 	vmov	s14, r3
 800e346:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e34a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800e34e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e352:	ed84 7a01 	vstr	s14, [r4, #4]
 800e356:	ee07 3a10 	vmov	s14, r3
 800e35a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e35e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e362:	edc4 7a02 	vstr	s15, [r4, #8]
  }
}
 800e366:	b007      	add	sp, #28
 800e368:	bdf0      	pop	{r4, r5, r6, r7, pc}
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 800e36a:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 800e36e:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 800e372:	f8ad 6010 	strh.w	r6, [sp, #16]
 800e376:	f8ad 0012 	strh.w	r0, [sp, #18]
 800e37a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800e37e:	e7c4      	b.n	800e30a <L3GD20_ReadXYZAngRate+0x5e>
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800e380:	eddf 7a04 	vldr	s15, [pc, #16]	; 800e394 <L3GD20_ReadXYZAngRate+0xe8>
 800e384:	e7d1      	b.n	800e32a <L3GD20_ReadXYZAngRate+0x7e>
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 800e386:	eddf 7a04 	vldr	s15, [pc, #16]	; 800e398 <L3GD20_ReadXYZAngRate+0xec>
 800e38a:	e7ce      	b.n	800e32a <L3GD20_ReadXYZAngRate+0x7e>
 800e38c:	00000000 	.word	0x00000000
 800e390:	410c0000 	.word	0x410c0000
 800e394:	418c0000 	.word	0x418c0000
 800e398:	428c0000 	.word	0x428c0000

0800e39c <I3G4250D_DeInit>:
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
}
 800e39c:	4770      	bx	lr

0800e39e <I3G4250D_Init>:
{
 800e39e:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl = 0x00;
 800e3a0:	2300      	movs	r3, #0
{
 800e3a2:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 800e3a4:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Init();
 800e3a8:	f7ff fc3e 	bl	800dc28 <GYRO_IO_Init>
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 800e3ac:	f10d 0007 	add.w	r0, sp, #7
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	2120      	movs	r1, #32
  ctrl = (uint8_t) InitStruct;
 800e3b4:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 800e3b8:	f7ff fc66 	bl	800dc88 <GYRO_IO_Write>
  ctrl = (uint8_t)(InitStruct >> 8);
 800e3bc:	0a24      	lsrs	r4, r4, #8
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 800e3be:	2201      	movs	r2, #1
 800e3c0:	2123      	movs	r1, #35	; 0x23
 800e3c2:	f10d 0007 	add.w	r0, sp, #7
  ctrl = (uint8_t)(InitStruct >> 8);
 800e3c6:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 800e3ca:	f7ff fc5d 	bl	800dc88 <GYRO_IO_Write>
}
 800e3ce:	b002      	add	sp, #8
 800e3d0:	bd10      	pop	{r4, pc}

0800e3d2 <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 800e3d2:	b507      	push	{r0, r1, r2, lr}
  uint8_t ctrl = 0x00;

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 800e3d4:	2201      	movs	r2, #1
  ctrl = (uint8_t) InitStruct;
 800e3d6:	f88d 0007 	strb.w	r0, [sp, #7]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 800e3da:	2120      	movs	r1, #32
 800e3dc:	f10d 0007 	add.w	r0, sp, #7
 800e3e0:	f7ff fc52 	bl	800dc88 <GYRO_IO_Write>
}
 800e3e4:	b003      	add	sp, #12
 800e3e6:	f85d fb04 	ldr.w	pc, [sp], #4

0800e3ea <I3G4250D_ReadID>:
{
 800e3ea:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Init();
 800e3ec:	f7ff fc1c 	bl	800dc28 <GYRO_IO_Init>
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 800e3f0:	f10d 0007 	add.w	r0, sp, #7
 800e3f4:	2201      	movs	r2, #1
 800e3f6:	210f      	movs	r1, #15
 800e3f8:	f7ff fc68 	bl	800dccc <GYRO_IO_Read>
}
 800e3fc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e400:	b003      	add	sp, #12
 800e402:	f85d fb04 	ldr.w	pc, [sp], #4

0800e406 <I3G4250D_RebootCmd>:
{
 800e406:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800e408:	2201      	movs	r2, #1
 800e40a:	f10d 0007 	add.w	r0, sp, #7
 800e40e:	2124      	movs	r1, #36	; 0x24
 800e410:	f7ff fc5c 	bl	800dccc <GYRO_IO_Read>
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 800e414:	f89d 3007 	ldrb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800e418:	2201      	movs	r2, #1
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 800e41a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800e41e:	2124      	movs	r1, #36	; 0x24
 800e420:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 800e424:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800e428:	f7ff fc2e 	bl	800dc88 <GYRO_IO_Write>
}
 800e42c:	b003      	add	sp, #12
 800e42e:	f85d fb04 	ldr.w	pc, [sp], #4

0800e432 <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 800e432:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800e434:	2300      	movs	r3, #0
{
 800e436:	4604      	mov	r4, r0

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 800e438:	2201      	movs	r2, #1
 800e43a:	f10d 0006 	add.w	r0, sp, #6
 800e43e:	2130      	movs	r1, #48	; 0x30
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800e440:	f88d 3006 	strb.w	r3, [sp, #6]
 800e444:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 800e448:	f7ff fc40 	bl	800dccc <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800e44c:	f10d 0007 	add.w	r0, sp, #7
 800e450:	2201      	movs	r2, #1
 800e452:	2122      	movs	r1, #34	; 0x22
 800e454:	f7ff fc3a 	bl	800dccc <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 800e458:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e45c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e460:	f88d 3006 	strb.w	r3, [sp, #6]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);

  ctrl3 &= 0xDF;
 800e464:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e468:	f023 0320 	bic.w	r3, r3, #32
  ctrl3 |= ((uint8_t) Int1Config);
 800e46c:	ea43 0004 	orr.w	r0, r3, r4
 800e470:	f88d 0007 	strb.w	r0, [sp, #7]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 800e474:	2201      	movs	r2, #1
 800e476:	f10d 0006 	add.w	r0, sp, #6
 800e47a:	2130      	movs	r1, #48	; 0x30
 800e47c:	f7ff fc04 	bl	800dc88 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800e480:	2201      	movs	r2, #1
 800e482:	2122      	movs	r1, #34	; 0x22
 800e484:	f10d 0007 	add.w	r0, sp, #7
 800e488:	f7ff fbfe 	bl	800dc88 <GYRO_IO_Write>
}
 800e48c:	b002      	add	sp, #8
 800e48e:	bd10      	pop	{r4, pc}

0800e490 <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 800e490:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800e492:	2201      	movs	r2, #1
{
 800e494:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800e496:	2122      	movs	r1, #34	; 0x22
 800e498:	f10d 0007 	add.w	r0, sp, #7
 800e49c:	f7ff fc16 	bl	800dccc <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 800e4a0:	b96c      	cbnz	r4, 800e4be <I3G4250D_EnableIT+0x2e>
  {
    tmpreg &= 0x7F;
 800e4a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 800e4a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  }
  else if (IntSel == I3G4250D_INT2)
  {
    tmpreg &= 0xF7;
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 800e4aa:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	2122      	movs	r1, #34	; 0x22
 800e4b2:	f10d 0007 	add.w	r0, sp, #7
 800e4b6:	f7ff fbe7 	bl	800dc88 <GYRO_IO_Write>
}
 800e4ba:	b002      	add	sp, #8
 800e4bc:	bd10      	pop	{r4, pc}
  else if (IntSel == I3G4250D_INT2)
 800e4be:	2c01      	cmp	r4, #1
 800e4c0:	d1f5      	bne.n	800e4ae <I3G4250D_EnableIT+0x1e>
    tmpreg &= 0xF7;
 800e4c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e4c6:	f023 0308 	bic.w	r3, r3, #8
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 800e4ca:	f043 0308 	orr.w	r3, r3, #8
 800e4ce:	e7ec      	b.n	800e4aa <I3G4250D_EnableIT+0x1a>

0800e4d0 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 800e4d0:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800e4d2:	2201      	movs	r2, #1
{
 800e4d4:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800e4d6:	2122      	movs	r1, #34	; 0x22
 800e4d8:	f10d 0007 	add.w	r0, sp, #7
 800e4dc:	f7ff fbf6 	bl	800dccc <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 800e4e0:	b96c      	cbnz	r4, 800e4fe <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 800e4e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e4e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
  }
  else if (IntSel == I3G4250D_INT2)
  {
    tmpreg &= 0xF7;
 800e4ea:	f88d 3007 	strb.w	r3, [sp, #7]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800e4ee:	2201      	movs	r2, #1
 800e4f0:	2122      	movs	r1, #34	; 0x22
 800e4f2:	f10d 0007 	add.w	r0, sp, #7
 800e4f6:	f7ff fbc7 	bl	800dc88 <GYRO_IO_Write>
}
 800e4fa:	b002      	add	sp, #8
 800e4fc:	bd10      	pop	{r4, pc}
  else if (IntSel == I3G4250D_INT2)
 800e4fe:	2c01      	cmp	r4, #1
 800e500:	d1f5      	bne.n	800e4ee <I3G4250D_DisableIT+0x1e>
    tmpreg &= 0xF7;
 800e502:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e506:	f023 0308 	bic.w	r3, r3, #8
 800e50a:	e7ee      	b.n	800e4ea <I3G4250D_DisableIT+0x1a>

0800e50c <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 800e50c:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800e50e:	2201      	movs	r2, #1
{
 800e510:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800e512:	2121      	movs	r1, #33	; 0x21
 800e514:	f10d 0007 	add.w	r0, sp, #7
 800e518:	f7ff fbd8 	bl	800dccc <GYRO_IO_Read>

  tmpreg &= 0xC0;
 800e51c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e520:	f020 003f 	bic.w	r0, r0, #63	; 0x3f

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 800e524:	4304      	orrs	r4, r0

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800e526:	2201      	movs	r2, #1
 800e528:	2121      	movs	r1, #33	; 0x21
 800e52a:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= FilterStruct;
 800e52e:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800e532:	f7ff fba9 	bl	800dc88 <GYRO_IO_Write>
}
 800e536:	b002      	add	sp, #8
 800e538:	bd10      	pop	{r4, pc}

0800e53a <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 800e53a:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800e53c:	2201      	movs	r2, #1
{
 800e53e:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800e540:	2124      	movs	r1, #36	; 0x24
 800e542:	f10d 0007 	add.w	r0, sp, #7
 800e546:	f7ff fbc1 	bl	800dccc <GYRO_IO_Read>

  tmpreg &= 0xEF;
 800e54a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e54e:	f020 0010 	bic.w	r0, r0, #16

  tmpreg |= HighPassFilterState;
 800e552:	4304      	orrs	r4, r0

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800e554:	2201      	movs	r2, #1
 800e556:	2124      	movs	r1, #36	; 0x24
 800e558:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= HighPassFilterState;
 800e55c:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800e560:	f7ff fb92 	bl	800dc88 <GYRO_IO_Write>
}
 800e564:	b002      	add	sp, #8
 800e566:	bd10      	pop	{r4, pc}

0800e568 <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 800e568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e56a:	b087      	sub	sp, #28
  uint8_t tmpbuffer[6] = {0};
 800e56c:	2300      	movs	r3, #0
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
  float sensitivity = 0;
  int i = 0;

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 800e56e:	2201      	movs	r2, #1
 800e570:	2123      	movs	r1, #35	; 0x23
{
 800e572:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 800e574:	f10d 0007 	add.w	r0, sp, #7
  uint8_t tmpbuffer[6] = {0};
 800e578:	9302      	str	r3, [sp, #8]
 800e57a:	f8ad 300c 	strh.w	r3, [sp, #12]
  uint8_t tmpreg = 0;
 800e57e:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 800e582:	f7ff fba3 	bl	800dccc <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 800e586:	2206      	movs	r2, #6
 800e588:	2128      	movs	r1, #40	; 0x28
 800e58a:	a802      	add	r0, sp, #8
 800e58c:	f7ff fb9e 	bl	800dccc <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 800e590:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e594:	f89d 6008 	ldrb.w	r6, [sp, #8]
 800e598:	f89d 7009 	ldrb.w	r7, [sp, #9]
 800e59c:	f89d 000a 	ldrb.w	r0, [sp, #10]
 800e5a0:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800e5a4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800e5a8:	f89d 100d 	ldrb.w	r1, [sp, #13]
 800e5ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e5b0:	d039      	beq.n	800e626 <I3G4250D_ReadXYZAngRate+0xbe>
  }
  else
  {
    for (i = 0; i < 3; i++)
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 800e5b2:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 800e5b6:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 800e5ba:	f8ad 6010 	strh.w	r6, [sp, #16]
 800e5be:	f8ad 0012 	strh.w	r0, [sp, #18]
 800e5c2:	eb01 2202 	add.w	r2, r1, r2, lsl #8
 800e5c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 800e5ca:	2b10      	cmp	r3, #16
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 800e5cc:	f8ad 2014 	strh.w	r2, [sp, #20]
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 800e5d0:	d034      	beq.n	800e63c <I3G4250D_ReadXYZAngRate+0xd4>
 800e5d2:	2b20      	cmp	r3, #32
 800e5d4:	d035      	beq.n	800e642 <I3G4250D_ReadXYZAngRate+0xda>
 800e5d6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800e648 <I3G4250D_ReadXYZAngRate+0xe0>
 800e5da:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800e64c <I3G4250D_ReadXYZAngRate+0xe4>
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	bf08      	it	eq
 800e5e2:	eef0 7a47 	vmoveq.f32	s15, s14
      break;
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 800e5e6:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800e5ea:	ee07 3a10 	vmov	s14, r3
 800e5ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e5f2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800e5f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e5fa:	ed84 7a00 	vstr	s14, [r4]
 800e5fe:	ee07 3a10 	vmov	s14, r3
 800e602:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e606:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800e60a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e60e:	ed84 7a01 	vstr	s14, [r4, #4]
 800e612:	ee07 3a10 	vmov	s14, r3
 800e616:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e61a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e61e:	edc4 7a02 	vstr	s15, [r4, #8]
  }
}
 800e622:	b007      	add	sp, #28
 800e624:	bdf0      	pop	{r4, r5, r6, r7, pc}
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 800e626:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 800e62a:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 800e62e:	f8ad 6010 	strh.w	r6, [sp, #16]
 800e632:	f8ad 0012 	strh.w	r0, [sp, #18]
 800e636:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800e63a:	e7c4      	b.n	800e5c6 <I3G4250D_ReadXYZAngRate+0x5e>
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 800e63c:	eddf 7a04 	vldr	s15, [pc, #16]	; 800e650 <I3G4250D_ReadXYZAngRate+0xe8>
 800e640:	e7d1      	b.n	800e5e6 <I3G4250D_ReadXYZAngRate+0x7e>
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 800e642:	eddf 7a04 	vldr	s15, [pc, #16]	; 800e654 <I3G4250D_ReadXYZAngRate+0xec>
 800e646:	e7ce      	b.n	800e5e6 <I3G4250D_ReadXYZAngRate+0x7e>
 800e648:	00000000 	.word	0x00000000
 800e64c:	410c0000 	.word	0x410c0000
 800e650:	418c0000 	.word	0x418c0000
 800e654:	428c0000 	.word	0x428c0000

0800e658 <LSM303AGR_AccDeInit>:
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
}
 800e658:	4770      	bx	lr

0800e65a <LSM303AGR_AccInit>:
{  
 800e65a:	b510      	push	{r4, lr}
 800e65c:	4604      	mov	r4, r0
  COMPASSACCELERO_IO_Init();
 800e65e:	f7ff fb59 	bl	800dd14 <COMPASSACCELERO_IO_Init>
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 800e662:	b2e2      	uxtb	r2, r4
 800e664:	2120      	movs	r1, #32
 800e666:	2032      	movs	r0, #50	; 0x32
 800e668:	f7ff fbaa 	bl	800ddc0 <COMPASSACCELERO_IO_Write>
}
 800e66c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 800e670:	2200      	movs	r2, #0
 800e672:	2123      	movs	r1, #35	; 0x23
 800e674:	2032      	movs	r0, #50	; 0x32
 800e676:	f7ff bba3 	b.w	800ddc0 <COMPASSACCELERO_IO_Write>

0800e67a <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 800e67a:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800e67c:	f7ff fb4a 	bl	800dd14 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
  
  return ctrl;
}
 800e680:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 800e684:	210f      	movs	r1, #15
 800e686:	2032      	movs	r0, #50	; 0x32
 800e688:	f7ff bbb8 	b.w	800ddfc <COMPASSACCELERO_IO_Read>

0800e68c <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 800e68c:	b508      	push	{r3, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800e68e:	2124      	movs	r1, #36	; 0x24
 800e690:	2032      	movs	r0, #50	; 0x32
 800e692:	f7ff fbb3 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 800e696:	f060 007f 	orn	r0, r0, #127	; 0x7f
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 800e69a:	b2c2      	uxtb	r2, r0
}
 800e69c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 800e6a0:	2124      	movs	r1, #36	; 0x24
 800e6a2:	2032      	movs	r0, #50	; 0x32
 800e6a4:	f7ff bb8c 	b.w	800ddc0 <COMPASSACCELERO_IO_Write>

0800e6a8 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 800e6a8:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800e6aa:	2121      	movs	r1, #33	; 0x21
{
 800e6ac:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800e6ae:	2032      	movs	r0, #50	; 0x32
 800e6b0:	f7ff fba4 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0x0C;
 800e6b4:	f000 000c 	and.w	r0, r0, #12
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800e6b8:	ea40 0204 	orr.w	r2, r0, r4
 800e6bc:	2121      	movs	r1, #33	; 0x21
}
 800e6be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800e6c2:	2032      	movs	r0, #50	; 0x32
 800e6c4:	f7ff bb7c 	b.w	800ddc0 <COMPASSACCELERO_IO_Write>

0800e6c8 <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 800e6c8:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800e6ca:	2121      	movs	r1, #33	; 0x21
{
 800e6cc:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800e6ce:	2032      	movs	r0, #50	; 0x32
 800e6d0:	f7ff fb94 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0xF7;
 800e6d4:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
  
  tmpreg |= HighPassFilterState;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800e6d8:	ea40 0204 	orr.w	r2, r0, r4
 800e6dc:	2121      	movs	r1, #33	; 0x21
}
 800e6de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800e6e2:	2032      	movs	r0, #50	; 0x32
 800e6e4:	f7ff bb6c 	b.w	800ddc0 <COMPASSACCELERO_IO_Write>

0800e6e8 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 800e6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 800e6ec:	2123      	movs	r1, #35	; 0x23
{
 800e6ee:	4605      	mov	r5, r0
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 800e6f0:	2032      	movs	r0, #50	; 0x32
 800e6f2:	f7ff fb83 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800e6f6:	2124      	movs	r1, #36	; 0x24
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 800e6f8:	4606      	mov	r6, r0
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800e6fa:	2032      	movs	r0, #50	; 0x32
 800e6fc:	f7ff fb7e 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 800e700:	2128      	movs	r1, #40	; 0x28
 800e702:	2032      	movs	r0, #50	; 0x32
 800e704:	f7ff fb7a 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 800e708:	2129      	movs	r1, #41	; 0x29
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 800e70a:	b247      	sxtb	r7, r0
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 800e70c:	2032      	movs	r0, #50	; 0x32
 800e70e:	f7ff fb75 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 800e712:	212a      	movs	r1, #42	; 0x2a
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 800e714:	fa4f f980 	sxtb.w	r9, r0
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 800e718:	2032      	movs	r0, #50	; 0x32
 800e71a:	f7ff fb6f 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 800e71e:	212b      	movs	r1, #43	; 0x2b
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 800e720:	b244      	sxtb	r4, r0
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 800e722:	2032      	movs	r0, #50	; 0x32
 800e724:	f7ff fb6a 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 800e728:	212c      	movs	r1, #44	; 0x2c
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 800e72a:	fa4f fa80 	sxtb.w	sl, r0
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 800e72e:	2032      	movs	r0, #50	; 0x32
 800e730:	f7ff fb64 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 800e734:	212d      	movs	r1, #45	; 0x2d
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 800e736:	fa4f f880 	sxtb.w	r8, r0
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 800e73a:	2032      	movs	r0, #50	; 0x32
 800e73c:	f7ff fb5e 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 800e740:	0672      	lsls	r2, r6, #25
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 800e742:	b243      	sxtb	r3, r0
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 800e744:	d51a      	bpl.n	800e77c <LSM303AGR_AccReadXYZ+0x94>
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800e746:	eb09 2707 	add.w	r7, r9, r7, lsl #8
 800e74a:	eb0a 2404 	add.w	r4, sl, r4, lsl #8
 800e74e:	b23f      	sxth	r7, r7
 800e750:	b224      	sxth	r4, r4
 800e752:	eb03 2308 	add.w	r3, r3, r8, lsl #8
 800e756:	f006 0030 	and.w	r0, r6, #48	; 0x30
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 800e75a:	2820      	cmp	r0, #32
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800e75c:	b21a      	sxth	r2, r3
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 800e75e:	d016      	beq.n	800e78e <LSM303AGR_AccReadXYZ+0xa6>
 800e760:	2830      	cmp	r0, #48	; 0x30
 800e762:	d016      	beq.n	800e792 <LSM303AGR_AccReadXYZ+0xaa>
 800e764:	2810      	cmp	r0, #16
 800e766:	bf14      	ite	ne
 800e768:	2301      	movne	r3, #1
 800e76a:	2302      	moveq	r3, #2
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800e76c:	435f      	muls	r7, r3
 800e76e:	435c      	muls	r4, r3
 800e770:	4353      	muls	r3, r2
 800e772:	802f      	strh	r7, [r5, #0]
 800e774:	806c      	strh	r4, [r5, #2]
 800e776:	80ab      	strh	r3, [r5, #4]
  }
}
 800e778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800e77c:	eb07 2709 	add.w	r7, r7, r9, lsl #8
 800e780:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800e784:	b23f      	sxth	r7, r7
 800e786:	b224      	sxth	r4, r4
 800e788:	eb08 2303 	add.w	r3, r8, r3, lsl #8
 800e78c:	e7e3      	b.n	800e756 <LSM303AGR_AccReadXYZ+0x6e>
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 800e78e:	2304      	movs	r3, #4
 800e790:	e7ec      	b.n	800e76c <LSM303AGR_AccReadXYZ+0x84>
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 800e792:	230c      	movs	r3, #12
 800e794:	e7ea      	b.n	800e76c <LSM303AGR_AccReadXYZ+0x84>

0800e796 <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 800e796:	b510      	push	{r4, lr}
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800e798:	2121      	movs	r1, #33	; 0x21
{
 800e79a:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800e79c:	2032      	movs	r0, #50	; 0x32
 800e79e:	f7ff fb2d 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 800e7a2:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
  
  tmpreg |= HighPassFilterClickState;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800e7a6:	ea40 0204 	orr.w	r2, r0, r4
 800e7aa:	2121      	movs	r1, #33	; 0x21
}
 800e7ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800e7b0:	2032      	movs	r0, #50	; 0x32
 800e7b2:	f7ff bb05 	b.w	800ddc0 <COMPASSACCELERO_IO_Write>

0800e7b6 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 800e7b6:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 800e7b8:	2122      	movs	r1, #34	; 0x22
{
 800e7ba:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 800e7bc:	2032      	movs	r0, #50	; 0x32
 800e7be:	f7ff fb1d 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 800e7c2:	4320      	orrs	r0, r4
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 800e7c4:	b2c2      	uxtb	r2, r0
}
 800e7c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 800e7ca:	2122      	movs	r1, #34	; 0x22
 800e7cc:	2032      	movs	r0, #50	; 0x32
 800e7ce:	f7ff baf7 	b.w	800ddc0 <COMPASSACCELERO_IO_Write>

0800e7d2 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 800e7d2:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 800e7d4:	2138      	movs	r1, #56	; 0x38
{  
 800e7d6:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 800e7d8:	2032      	movs	r0, #50	; 0x32
 800e7da:	f7ff fb0f 	bl	800ddfc <COMPASSACCELERO_IO_Read>
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 800e7de:	4320      	orrs	r0, r4
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 800e7e0:	b2c2      	uxtb	r2, r0
 800e7e2:	2138      	movs	r1, #56	; 0x38
 800e7e4:	2032      	movs	r0, #50	; 0x32
 800e7e6:	f7ff faeb 	bl	800ddc0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 800e7ea:	220a      	movs	r2, #10
 800e7ec:	213a      	movs	r1, #58	; 0x3a
 800e7ee:	2032      	movs	r0, #50	; 0x32
 800e7f0:	f7ff fae6 	bl	800ddc0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 800e7f4:	2205      	movs	r2, #5
 800e7f6:	213b      	movs	r1, #59	; 0x3b
 800e7f8:	2032      	movs	r0, #50	; 0x32
 800e7fa:	f7ff fae1 	bl	800ddc0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 800e7fe:	2205      	movs	r2, #5
 800e800:	213c      	movs	r1, #60	; 0x3c
 800e802:	2032      	movs	r0, #50	; 0x32
 800e804:	f7ff fadc 	bl	800ddc0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 800e808:	2232      	movs	r2, #50	; 0x32
}
 800e80a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 800e80e:	213d      	movs	r1, #61	; 0x3d
 800e810:	4610      	mov	r0, r2
 800e812:	f7ff bad5 	b.w	800ddc0 <COMPASSACCELERO_IO_Write>

0800e816 <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 800e816:	b508      	push	{r3, lr}
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800e818:	f7ff faae 	bl	800dd78 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 800e81c:	2080      	movs	r0, #128	; 0x80
 800e81e:	f7ff ffca 	bl	800e7b6 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 800e822:	2004      	movs	r0, #4
 800e824:	f7ff ffb7 	bl	800e796 <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
}
 800e828:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 800e82c:	2010      	movs	r0, #16
 800e82e:	f7ff bfd0 	b.w	800e7d2 <LSM303AGR_AccClickITEnable>
	...

0800e834 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800e834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e86c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800e838:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800e83a:	e003      	b.n	800e844 <LoopCopyDataInit>

0800e83c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800e83c:	4b0c      	ldr	r3, [pc, #48]	; (800e870 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800e83e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800e840:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800e842:	3104      	adds	r1, #4

0800e844 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800e844:	480b      	ldr	r0, [pc, #44]	; (800e874 <LoopForever+0xa>)
	ldr	r3, =_edata
 800e846:	4b0c      	ldr	r3, [pc, #48]	; (800e878 <LoopForever+0xe>)
	adds	r2, r0, r1
 800e848:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800e84a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800e84c:	d3f6      	bcc.n	800e83c <CopyDataInit>
	ldr	r2, =_sbss
 800e84e:	4a0b      	ldr	r2, [pc, #44]	; (800e87c <LoopForever+0x12>)
	b	LoopFillZerobss
 800e850:	e002      	b.n	800e858 <LoopFillZerobss>

0800e852 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800e852:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800e854:	f842 3b04 	str.w	r3, [r2], #4

0800e858 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800e858:	4b09      	ldr	r3, [pc, #36]	; (800e880 <LoopForever+0x16>)
	cmp	r2, r3
 800e85a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800e85c:	d3f9      	bcc.n	800e852 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800e85e:	f7fc f8bd 	bl	800a9dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e862:	f7f1 fda1 	bl	80003a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800e866:	f7fb f975 	bl	8009b54 <main>

0800e86a <LoopForever>:

LoopForever:
    b LoopForever
 800e86a:	e7fe      	b.n	800e86a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800e86c:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 800e870:	0801e3c4 	.word	0x0801e3c4
	ldr	r0, =_sdata
 800e874:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800e878:	20000c24 	.word	0x20000c24
	ldr	r2, =_sbss
 800e87c:	20000c24 	.word	0x20000c24
	ldr	r3, = _ebss
 800e880:	20001dd8 	.word	0x20001dd8

0800e884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800e884:	e7fe      	b.n	800e884 <ADC1_2_IRQHandler>
	...

0800e888 <register_fini>:
 800e888:	4b02      	ldr	r3, [pc, #8]	; (800e894 <register_fini+0xc>)
 800e88a:	b113      	cbz	r3, 800e892 <register_fini+0xa>
 800e88c:	4802      	ldr	r0, [pc, #8]	; (800e898 <register_fini+0x10>)
 800e88e:	f7f1 bd69 	b.w	8000364 <atexit>
 800e892:	4770      	bx	lr
 800e894:	00000000 	.word	0x00000000
 800e898:	0800037d 	.word	0x0800037d

0800e89c <_init>:
 800e89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e89e:	bf00      	nop
 800e8a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8a2:	bc08      	pop	{r3}
 800e8a4:	469e      	mov	lr, r3
 800e8a6:	4770      	bx	lr

0800e8a8 <_fini>:
 800e8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8aa:	bf00      	nop
 800e8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8ae:	bc08      	pop	{r3}
 800e8b0:	469e      	mov	lr, r3
 800e8b2:	4770      	bx	lr
